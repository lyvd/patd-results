{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_text.ct"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 71,
                  "endLine": 119,
                  "snippet": {
                    "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                    "rendered": {
                      "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                      "markdown": "`Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_text.ct"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 6,
                  "endLine": 105,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                    "rendered": {
                      "text": "Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                      "markdown": "`Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_text.ct"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 6,
                  "endLine": 53,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                    "rendered": {
                      "text": "Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                      "markdown": "`Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_text.ct"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 6,
                  "endLine": 19,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                    "rendered": {
                      "text": "Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                      "markdown": "`Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_replace_text.ct"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 71,
                  "endLine": 11,
                  "snippet": {
                    "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                    "rendered": {
                      "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                      "markdown": "`Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_vendored_text.ct"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 6,
                  "endLine": 46,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Vulnerability #1: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                    "rendered": {
                      "text": "Vulnerability #1: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                      "markdown": "`Vulnerability #1: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_vendored_text.ct"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 71,
                  "endLine": 33,
                  "snippet": {
                    "text": "Vulnerability #2: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                    "rendered": {
                      "text": "Vulnerability #2: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                      "markdown": "`Vulnerability #2: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-module/source_module_json.ct"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 305,
                  "endLine": 135,
                  "endColumn": 314,
                  "snippet": {
                    "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-module/source_module_json.ct"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 236,
                  "endLine": 57,
                  "endColumn": 245,
                  "snippet": {
                    "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-module/source_module_sarif.ct"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 245,
                  "endLine": 72,
                  "endColumn": 254,
                  "snippet": {
                    "text": "vice attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n              \"properties\": {\n                \"tags\": [\n                  \"CVE-2021-38561\",\n                  \"GHSA-ppp9-7jff-5vj2\"\n                ]\n              }\n            },\n            {\n              ",
                    "rendered": {
                      "text": "vice attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n              \"properties\": {\n                \"tags\": [\n                  \"CVE-2021-38561\",\n                  \"GHSA-ppp9-7jff-5vj2\"\n                ]\n              }\n            },\n            {\n              ",
                      "markdown": "`vice attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n              \"properties\": {\n                \"tags\": [\n                  \"CVE-2021-38561\",\n                  \"GHSA-ppp9-7jff-5vj2\"\n                ]\n              }\n            },\n            {\n              `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-module/source_module_sarif.ct"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 245,
                  "endLine": 69,
                  "endColumn": 254,
                  "snippet": {
                    "text": ".\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of serv",
                    "rendered": {
                      "text": ".\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of serv",
                      "markdown": "`.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of serv`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-module/source_module_sarif.ct"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 260,
                  "endLine": 66,
                  "endColumn": 269,
                  "snippet": {
                    "text": "3\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0113] Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a den",
                    "rendered": {
                      "text": "3\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0113] Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a den",
                      "markdown": "`3\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0113] Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a den`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-module/source_module_sarif.ct"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 179,
                  "endLine": 53,
                  "endColumn": 188,
                  "snippet": {
                    "text": "                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n              \"properties\": {\n",
                    "rendered": {
                      "text": "                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n              \"properties\": {\n",
                      "markdown": "`                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n              \"properties\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-module/source_module_sarif.ct"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 179,
                  "endLine": 50,
                  "endColumn": 188,
                  "snippet": {
                    "text": "parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pk",
                    "rendered": {
                      "text": "parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pk",
                      "markdown": "`parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pk`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-module/source_module_sarif.ct"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 194,
                  "endLine": 47,
                  "endColumn": 203,
                  "snippet": {
                    "text": "            {\n              \"id\": \"GO-2021-0054\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0054] Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n",
                    "rendered": {
                      "text": "            {\n              \"id\": \"GO-2021-0054\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0054] Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n",
                      "markdown": "`            {\n              \"id\": \"GO-2021-0054\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0054] Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-module/source_module_sarif.ct"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 314,
                  "endLine": 34,
                  "endColumn": 323,
                  "snippet": {
                    "text": "                \"text\": \"Infinite loop when decoding some inputs in golang.org/x/text\"\n              },\n              \"help\": {\n                \"text\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2020-0015\",\n              \"properties\": {\n",
                    "rendered": {
                      "text": "                \"text\": \"Infinite loop when decoding some inputs in golang.org/x/text\"\n              },\n              \"help\": {\n                \"text\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2020-0015\",\n              \"properties\": {\n",
                      "markdown": "`                \"text\": \"Infinite loop when decoding some inputs in golang.org/x/text\"\n              },\n              \"help\": {\n                \"text\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2020-0015\",\n              \"properties\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-module/source_module_text.ct"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 71,
                  "endLine": 39,
                  "snippet": {
                    "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n",
                    "rendered": {
                      "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n",
                      "markdown": "`Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-module/source_module_text.ct"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 71,
                  "endLine": 11,
                  "snippet": {
                    "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n",
                    "rendered": {
                      "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n",
                      "markdown": "`Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_call_json.ct"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 170,
                  "endLine": 484,
                  "endColumn": 179,
                  "snippet": {
                    "text": "      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_call_json.ct"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 305,
                  "endLine": 395,
                  "endColumn": 314,
                  "snippet": {
                    "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_call_json.ct"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 170,
                  "endLine": 291,
                  "endColumn": 179,
                  "snippet": {
                    "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_call_json.ct"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 236,
                  "endLine": 201,
                  "endColumn": 245,
                  "snippet": {
                    "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_sarif.ct"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 245,
                  "endLine": 71,
                  "endColumn": 254,
                  "snippet": {
                    "text": "vice attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n              \"properties\": {\n                \"tags\": [\n                  \"CVE-2021-38561\",\n                  \"GHSA-ppp9-7jff-5vj2\"\n                ]\n              }\n            },\n            {\n              ",
                    "rendered": {
                      "text": "vice attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n              \"properties\": {\n                \"tags\": [\n                  \"CVE-2021-38561\",\n                  \"GHSA-ppp9-7jff-5vj2\"\n                ]\n              }\n            },\n            {\n              ",
                      "markdown": "`vice attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n              \"properties\": {\n                \"tags\": [\n                  \"CVE-2021-38561\",\n                  \"GHSA-ppp9-7jff-5vj2\"\n                ]\n              }\n            },\n            {\n              `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_sarif.ct"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 245,
                  "endLine": 68,
                  "endColumn": 254,
                  "snippet": {
                    "text": ".\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of serv",
                    "rendered": {
                      "text": ".\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of serv",
                      "markdown": "`.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of serv`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_sarif.ct"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 260,
                  "endLine": 65,
                  "endColumn": 269,
                  "snippet": {
                    "text": "3\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0113] Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a den",
                    "rendered": {
                      "text": "3\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0113] Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a den",
                      "markdown": "`3\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0113] Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a den`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_sarif.ct"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 179,
                  "endLine": 52,
                  "endColumn": 188,
                  "snippet": {
                    "text": "                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n              \"properties\": {\n",
                    "rendered": {
                      "text": "                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n              \"properties\": {\n",
                      "markdown": "`                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n              \"properties\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_sarif.ct"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 179,
                  "endLine": 49,
                  "endColumn": 188,
                  "snippet": {
                    "text": "parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pk",
                    "rendered": {
                      "text": "parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pk",
                      "markdown": "`parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pk`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_sarif.ct"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 194,
                  "endLine": 46,
                  "endColumn": 203,
                  "snippet": {
                    "text": "            {\n              \"id\": \"GO-2021-0054\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0054] Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n",
                    "rendered": {
                      "text": "            {\n              \"id\": \"GO-2021-0054\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0054] Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n",
                      "markdown": "`            {\n              \"id\": \"GO-2021-0054\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0054] Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_sarif.ct"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 314,
                  "endLine": 33,
                  "endColumn": 323,
                  "snippet": {
                    "text": "                \"text\": \"Infinite loop when decoding some inputs in golang.org/x/text\"\n              },\n              \"help\": {\n                \"text\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2020-0015\",\n              \"properties\": {\n",
                    "rendered": {
                      "text": "                \"text\": \"Infinite loop when decoding some inputs in golang.org/x/text\"\n              },\n              \"help\": {\n                \"text\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2020-0015\",\n              \"properties\": {\n",
                      "markdown": "`                \"text\": \"Infinite loop when decoding some inputs in golang.org/x/text\"\n              },\n              \"help\": {\n                \"text\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2020-0015\",\n              \"properties\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/modules/vendored/vendor/private.com/privateuser/fakemod/mod.go"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 15,
                  "endLine": 6,
                  "endColumn": 20,
                  "snippet": {
                    "text": "import \"github.com/tidwall/gjson\"\n\nfunc Leave() {\n\tgjson.Result{}.Get(\"\")\n}\n",
                    "rendered": {
                      "text": "import \"github.com/tidwall/gjson\"\n\nfunc Leave() {\n\tgjson.Result{}.Get(\"\")\n}\n",
                      "markdown": "`import \"github.com/tidwall/gjson\"\n\nfunc Leave() {\n\tgjson.Result{}.Get(\"\")\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/openvex/handler_test.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 27,
                  "endLine": 46,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\t\twant: 2,\n\t\t},\n\t\t{\n\t\t\tname: \"multiple Findings at same level same mod\",\n\t\t\tfindings: []*govulncheck.Finding{\n\t\t\t\t{\n\t\t\t\t\tOSV:          id1,\n",
                    "rendered": {
                      "text": "\t\t\twant: 2,\n\t\t},\n\t\t{\n\t\t\tname: \"multiple Findings at same level same mod\",\n\t\t\tfindings: []*govulncheck.Finding{\n\t\t\t\t{\n\t\t\t\t\tOSV:          id1,\n",
                      "markdown": "`\t\t\twant: 2,\n\t\t},\n\t\t{\n\t\t\tname: \"multiple Findings at same level same mod\",\n\t\t\tfindings: []*govulncheck.Finding{\n\t\t\t\t{\n\t\t\t\t\tOSV:          id1,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/openvex/handler_test.go"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 27,
                  "endLine": 22,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\twant     int\n\t}{\n\t\t{\n\t\t\tname: \"multiple findings at same level different mod\",\n\t\t\tfindings: []*govulncheck.Finding{\n\t\t\t\t{\n\t\t\t\t\tOSV: id1,\n",
                    "rendered": {
                      "text": "\t\twant     int\n\t}{\n\t\t{\n\t\t\tname: \"multiple findings at same level different mod\",\n\t\t\tfindings: []*govulncheck.Finding{\n\t\t\t\t{\n\t\t\t\t\tOSV: id1,\n",
                      "markdown": "`\t\twant     int\n\t}{\n\t\t{\n\t\t\tname: \"multiple findings at same level different mod\",\n\t\t\tfindings: []*govulncheck.Finding{\n\t\t\t\t{\n\t\t\t\t\tOSV: id1,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/buildinfo/additions_scan.go"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 8,
                  "endLine": 126,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\tif err != nil {\n\t\t\treturn nil, nil, nil, fmt.Errorf(\"InlineTree: %v\", err)\n\t\t}\n\t\tfor _, ic := range it {\n\t\t\tpkgName, symName, err := parseName(&gosym.Sym{Name: ic.Name})\n\t\t\tif err != nil {\n\t\t\t\treturn nil, nil, nil, err\n",
                    "rendered": {
                      "text": "\t\tif err != nil {\n\t\t\treturn nil, nil, nil, fmt.Errorf(\"InlineTree: %v\", err)\n\t\t}\n\t\tfor _, ic := range it {\n\t\t\tpkgName, symName, err := parseName(&gosym.Sym{Name: ic.Name})\n\t\t\tif err != nil {\n\t\t\t\treturn nil, nil, nil, err\n",
                      "markdown": "`\t\tif err != nil {\n\t\t\treturn nil, nil, nil, fmt.Errorf(\"InlineTree: %v\", err)\n\t\t}\n\t\tfor _, ic := range it {\n\t\t\tpkgName, symName, err := parseName(&gosym.Sym{Name: ic.Name})\n\t\t\tif err != nil {\n\t\t\t\treturn nil, nil, nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_sarif.ct"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 245,
                  "endLine": 72,
                  "endColumn": 254,
                  "snippet": {
                    "text": "vice attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n              \"properties\": {\n                \"tags\": [\n                  \"CVE-2021-38561\",\n                  \"GHSA-ppp9-7jff-5vj2\"\n                ]\n              }\n            },\n            {\n              ",
                    "rendered": {
                      "text": "vice attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n              \"properties\": {\n                \"tags\": [\n                  \"CVE-2021-38561\",\n                  \"GHSA-ppp9-7jff-5vj2\"\n                ]\n              }\n            },\n            {\n              ",
                      "markdown": "`vice attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n              \"properties\": {\n                \"tags\": [\n                  \"CVE-2021-38561\",\n                  \"GHSA-ppp9-7jff-5vj2\"\n                ]\n              }\n            },\n            {\n              `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_sarif.ct"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 245,
                  "endLine": 69,
                  "endColumn": 254,
                  "snippet": {
                    "text": ".\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of serv",
                    "rendered": {
                      "text": ".\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of serv",
                      "markdown": "`.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of serv`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_sarif.ct"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 260,
                  "endLine": 66,
                  "endColumn": 269,
                  "snippet": {
                    "text": "3\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0113] Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a den",
                    "rendered": {
                      "text": "3\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0113] Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a den",
                      "markdown": "`3\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0113] Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a den`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_sarif.ct"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 179,
                  "endLine": 53,
                  "endColumn": 188,
                  "snippet": {
                    "text": "                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n              \"properties\": {\n",
                    "rendered": {
                      "text": "                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n              \"properties\": {\n",
                      "markdown": "`                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n              \"properties\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_sarif.ct"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 179,
                  "endLine": 50,
                  "endColumn": 188,
                  "snippet": {
                    "text": "parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pk",
                    "rendered": {
                      "text": "parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pk",
                      "markdown": "`parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pk`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_sarif.ct"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 194,
                  "endLine": 47,
                  "endColumn": 203,
                  "snippet": {
                    "text": "            {\n              \"id\": \"GO-2021-0054\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0054] Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n",
                    "rendered": {
                      "text": "            {\n              \"id\": \"GO-2021-0054\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0054] Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n",
                      "markdown": "`            {\n              \"id\": \"GO-2021-0054\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0054] Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_sarif.ct"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 314,
                  "endLine": 34,
                  "endColumn": 323,
                  "snippet": {
                    "text": "                \"text\": \"Infinite loop when decoding some inputs in golang.org/x/text\"\n              },\n              \"help\": {\n                \"text\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2020-0015\",\n              \"properties\": {\n",
                    "rendered": {
                      "text": "                \"text\": \"Infinite loop when decoding some inputs in golang.org/x/text\"\n              },\n              \"help\": {\n                \"text\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2020-0015\",\n              \"properties\": {\n",
                      "markdown": "`                \"text\": \"Infinite loop when decoding some inputs in golang.org/x/text\"\n              },\n              \"help\": {\n                \"text\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2020-0015\",\n              \"properties\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_replace_json.ct"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 305,
                  "endLine": 179,
                  "endColumn": 314,
                  "snippet": {
                    "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_replace_json.ct"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 236,
                  "endLine": 57,
                  "endColumn": 245,
                  "snippet": {
                    "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_subdir_text.ct"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 6,
                  "endLine": 52,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                    "rendered": {
                      "text": "Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                      "markdown": "`Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_subdir_text.ct"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 6,
                  "endLine": 19,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                    "rendered": {
                      "text": "Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                      "markdown": "`Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_vendored_json.ct"
                },
                "region": {
                  "startLine": 507,
                  "startColumn": 170,
                  "endLine": 507,
                  "endColumn": 179,
                  "snippet": {
                    "text": "      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_vendored_json.ct"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 305,
                  "endLine": 418,
                  "endColumn": 314,
                  "snippet": {
                    "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_vendored_json.ct"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 170,
                  "endLine": 329,
                  "endColumn": 179,
                  "snippet": {
                    "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_vendored_json.ct"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 236,
                  "endLine": 208,
                  "endColumn": 245,
                  "snippet": {
                    "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_multientry_text.ct"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 71,
                  "endLine": 43,
                  "snippet": {
                    "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n",
                    "rendered": {
                      "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n",
                      "markdown": "`Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_multientry_text.ct"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 71,
                  "endLine": 10,
                  "snippet": {
                    "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n",
                    "rendered": {
                      "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n",
                      "markdown": "`Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/vulndb-v1/ID/GO-2021-0059.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 331,
                  "endLine": 1,
                  "endColumn": 340,
                  "snippet": {
                    "text": "\"GO-2021-0059\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2020-35380\",\"GHSA-w942-gw6m-p62c\"],\"details\":\"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"github.com/tidwall/gjson\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.6.4\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/tidwall/gjson\",\"symbols\":[\"Get\",\"GetBytes\",\"GetMany\",\"GetManyBytes\",\"Result.Array\",\"R",
                    "rendered": {
                      "text": "\"GO-2021-0059\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2020-35380\",\"GHSA-w942-gw6m-p62c\"],\"details\":\"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"github.com/tidwall/gjson\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.6.4\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/tidwall/gjson\",\"symbols\":[\"Get\",\"GetBytes\",\"GetMany\",\"GetManyBytes\",\"Result.Array\",\"R",
                      "markdown": "`\"GO-2021-0059\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2020-35380\",\"GHSA-w942-gw6m-p62c\"],\"details\":\"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"github.com/tidwall/gjson\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.6.4\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/tidwall/gjson\",\"symbols\":[\"Get\",\"GetBytes\",\"GetMany\",\"GetManyBytes\",\"Result.Array\",\"R`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/vulndb-v1/ID/GO-2020-0015.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 539,
                  "endLine": 1,
                  "endColumn": 548,
                  "snippet": {
                    "text": "\"details\":\"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.3\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/encoding/unicode\",\"symbols\":[\"bomOverride.Transform\",\"utf16Decoder.Transform\"]},{\"pat",
                    "rendered": {
                      "text": "\"details\":\"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.3\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/encoding/unicode\",\"symbols\":[\"bomOverride.Transform\",\"utf16Decoder.Transform\"]},{\"pat",
                      "markdown": "`\"details\":\"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.3\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/encoding/unicode\",\"symbols\":[\"bomOverride.Transform\",\"utf16Decoder.Transform\"]},{\"pat`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/vulndb-v1/ID/GO-2021-0054.json.gz/GO-2021-0054.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 331,
                  "endLine": 1,
                  "endColumn": 340,
                  "snippet": {
                    "text": "\"GO-2021-0054\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2020-36067\",\"GHSA-p64j-r5f4-pwwx\"],\"details\":\"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"github.com/tidwall/gjson\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.6.6\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/tidwall/gjson\",\"symbols\":[\"Result.ForEach\",\"unwrap\"]}]}}],\"references\":[{\"type\":\"FIX\"",
                    "rendered": {
                      "text": "\"GO-2021-0054\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2020-36067\",\"GHSA-p64j-r5f4-pwwx\"],\"details\":\"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"github.com/tidwall/gjson\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.6.6\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/tidwall/gjson\",\"symbols\":[\"Result.ForEach\",\"unwrap\"]}]}}],\"references\":[{\"type\":\"FIX\"",
                      "markdown": "`\"GO-2021-0054\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2020-36067\",\"GHSA-p64j-r5f4-pwwx\"],\"details\":\"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"github.com/tidwall/gjson\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.6.6\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/tidwall/gjson\",\"symbols\":[\"Result.ForEach\",\"unwrap\"]}]}}],\"references\":[{\"type\":\"FIX\"`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/vulndb-v1/ID/GO-2021-0113.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 397,
                  "endLine": 1,
                  "endColumn": 406,
                  "snippet": {
                    "text": "-10-06T17:51:21Z\",\"aliases\":[\"CVE-2021-38561\",\"GHSA-ppp9-7jff-5vj2\"],\"details\":\"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/language\",\"symbols\":[\"MatchStrings\",\"MustParse\",\"Parse\",\"ParseAcceptLanguage\"]}]}}],\"",
                    "rendered": {
                      "text": "-10-06T17:51:21Z\",\"aliases\":[\"CVE-2021-38561\",\"GHSA-ppp9-7jff-5vj2\"],\"details\":\"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/language\",\"symbols\":[\"MatchStrings\",\"MustParse\",\"Parse\",\"ParseAcceptLanguage\"]}]}}],\"",
                      "markdown": "`-10-06T17:51:21Z\",\"aliases\":[\"CVE-2021-38561\",\"GHSA-ppp9-7jff-5vj2\"],\"details\":\"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/language\",\"symbols\":[\"MatchStrings\",\"MustParse\",\"Parse\",\"ParseAcceptLanguage\"]}]}}],\"`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/stdlib/testfiles/stdlib/query_stdlib_json.ct"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 52,
                  "endLine": 17,
                  "endColumn": 56,
                  "snippet": {
                    "text": "}\n{\n  \"progress\": {\n    \"message\": \"Looking up vulnerabilities in stdlib at go1.17...\"\n  }\n}\n{\n",
                    "rendered": {
                      "text": "}\n{\n  \"progress\": {\n    \"message\": \"Looking up vulnerabilities in stdlib at go1.17...\"\n  }\n}\n{\n",
                      "markdown": "`}\n{\n  \"progress\": {\n    \"message\": \"Looking up vulnerabilities in stdlib at go1.17...\"\n  }\n}\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/stdlib/testfiles/stdlib/source_stdlib_text.ct"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 50,
                  "endLine": 72,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n\n#####\n# Test finding stdlib vulnerability in source mode at the module level\n$ govulncheck -C ${moddir}/stdlib -scan module --> FAIL 3\n=== Module Results ===\n\n",
                    "rendered": {
                      "text": "\n\n#####\n# Test finding stdlib vulnerability in source mode at the module level\n$ govulncheck -C ${moddir}/stdlib -scan module --> FAIL 3\n=== Module Results ===\n\n",
                      "markdown": "`\n\n#####\n# Test finding stdlib vulnerability in source mode at the module level\n$ govulncheck -C ${moddir}/stdlib -scan module --> FAIL 3\n=== Module Results ===\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/stdlib/testfiles/stdlib/source_stdlib_text.ct"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 50,
                  "endLine": 52,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n\n#####\n# Test finding stdlib vulnerability in source mode at the package level\n$ govulncheck -C ${moddir}/stdlib -scan package . --> FAIL 3\n=== Package Results ===\n\n",
                    "rendered": {
                      "text": "\n\n#####\n# Test finding stdlib vulnerability in source mode at the package level\n$ govulncheck -C ${moddir}/stdlib -scan package . --> FAIL 3\n=== Package Results ===\n\n",
                      "markdown": "`\n\n#####\n# Test finding stdlib vulnerability in source mode at the package level\n$ govulncheck -C ${moddir}/stdlib -scan package . --> FAIL 3\n=== Package Results ===\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/stdlib/testfiles/stdlib/query_vstdlib_json.ct"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 52,
                  "endLine": 17,
                  "endColumn": 56,
                  "snippet": {
                    "text": "}\n{\n  \"progress\": {\n    \"message\": \"Looking up vulnerabilities in stdlib at v1.17.0...\"\n  }\n}\n{\n",
                    "rendered": {
                      "text": "}\n{\n  \"progress\": {\n    \"message\": \"Looking up vulnerabilities in stdlib at v1.17.0...\"\n  }\n}\n{\n",
                      "markdown": "`}\n{\n  \"progress\": {\n    \"message\": \"Looking up vulnerabilities in stdlib at v1.17.0...\"\n  }\n}\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/binary_test.go"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 85,
                  "endLine": 86,
                  "endColumn": 91,
                  "snippet": {
                    "text": "\t\t{Symbol: \"OpenReader\", Package: &packages.Package{PkgPath: \"archive/zip\"}},\n\t\t{Symbol: \"VulnData.Vuln1\", Package: &packages.Package{PkgPath: \"golang.org/amod/avuln\"}},\n\t}\n\tif diff := cmp.Diff(want, res.Vulns, cmpopts.SortSlices(less), cmp.Comparer(equal)); diff != \"\" {\n\t\tt.Errorf(\"(-want, +got): %s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\t{Symbol: \"OpenReader\", Package: &packages.Package{PkgPath: \"archive/zip\"}},\n\t\t{Symbol: \"VulnData.Vuln1\", Package: &packages.Package{PkgPath: \"golang.org/amod/avuln\"}},\n\t}\n\tif diff := cmp.Diff(want, res.Vulns, cmpopts.SortSlices(less), cmp.Comparer(equal)); diff != \"\" {\n\t\tt.Errorf(\"(-want, +got): %s\", diff)\n\t}\n}\n",
                      "markdown": "`\t\t{Symbol: \"OpenReader\", Package: &packages.Package{PkgPath: \"archive/zip\"}},\n\t\t{Symbol: \"VulnData.Vuln1\", Package: &packages.Package{PkgPath: \"golang.org/amod/avuln\"}},\n\t}\n\tif diff := cmp.Diff(want, res.Vulns, cmpopts.SortSlices(less), cmp.Comparer(equal)); diff != \"\" {\n\t\tt.Errorf(\"(-want, +got): %s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/binary_test.go"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 3,
                  "endLine": 86,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\t{Symbol: \"OpenReader\", Package: &packages.Package{PkgPath: \"archive/zip\"}},\n\t\t{Symbol: \"VulnData.Vuln1\", Package: &packages.Package{PkgPath: \"golang.org/amod/avuln\"}},\n\t}\n\tif diff := cmp.Diff(want, res.Vulns, cmpopts.SortSlices(less), cmp.Comparer(equal)); diff != \"\" {\n\t\tt.Errorf(\"(-want, +got): %s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\t{Symbol: \"OpenReader\", Package: &packages.Package{PkgPath: \"archive/zip\"}},\n\t\t{Symbol: \"VulnData.Vuln1\", Package: &packages.Package{PkgPath: \"golang.org/amod/avuln\"}},\n\t}\n\tif diff := cmp.Diff(want, res.Vulns, cmpopts.SortSlices(less), cmp.Comparer(equal)); diff != \"\" {\n\t\tt.Errorf(\"(-want, +got): %s\", diff)\n\t}\n}\n",
                      "markdown": "`\t\t{Symbol: \"OpenReader\", Package: &packages.Package{PkgPath: \"archive/zip\"}},\n\t\t{Symbol: \"VulnData.Vuln1\", Package: &packages.Package{PkgPath: \"golang.org/amod/avuln\"}},\n\t}\n\tif diff := cmp.Diff(want, res.Vulns, cmpopts.SortSlices(less), cmp.Comparer(equal)); diff != \"\" {\n\t\tt.Errorf(\"(-want, +got): %s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/binary_test.go"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 85,
                  "endLine": 71,
                  "endColumn": 91,
                  "snippet": {
                    "text": "\t\treturn true // we don't care about these cases here\n\t}\n\n\tif diff := cmp.Diff(want, res.Vulns, cmpopts.SortSlices(less), cmp.Comparer(equal)); diff != \"\" {\n\t\tt.Errorf(\"(-want, +got): %s\", diff)\n\t}\n\n",
                    "rendered": {
                      "text": "\t\treturn true // we don't care about these cases here\n\t}\n\n\tif diff := cmp.Diff(want, res.Vulns, cmpopts.SortSlices(less), cmp.Comparer(equal)); diff != \"\" {\n\t\tt.Errorf(\"(-want, +got): %s\", diff)\n\t}\n\n",
                      "markdown": "`\t\treturn true // we don't care about these cases here\n\t}\n\n\tif diff := cmp.Diff(want, res.Vulns, cmpopts.SortSlices(less), cmp.Comparer(equal)); diff != \"\" {\n\t\tt.Errorf(\"(-want, +got): %s\", diff)\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/binary_test.go"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 3,
                  "endLine": 71,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\treturn true // we don't care about these cases here\n\t}\n\n\tif diff := cmp.Diff(want, res.Vulns, cmpopts.SortSlices(less), cmp.Comparer(equal)); diff != \"\" {\n\t\tt.Errorf(\"(-want, +got): %s\", diff)\n\t}\n\n",
                    "rendered": {
                      "text": "\t\treturn true // we don't care about these cases here\n\t}\n\n\tif diff := cmp.Diff(want, res.Vulns, cmpopts.SortSlices(less), cmp.Comparer(equal)); diff != \"\" {\n\t\tt.Errorf(\"(-want, +got): %s\", diff)\n\t}\n\n",
                      "markdown": "`\t\treturn true // we don't care about these cases here\n\t}\n\n\tif diff := cmp.Diff(want, res.Vulns, cmpopts.SortSlices(less), cmp.Comparer(equal)); diff != \"\" {\n\t\tt.Errorf(\"(-want, +got): %s\", diff)\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/utils_test.go"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 32,
                  "endLine": 253,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\tfor f := range ssautil.AllFunctions(prog) {\n\t\tgot[dbFuncName(f)] = true\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\tfor f := range ssautil.AllFunctions(prog) {\n\t\tgot[dbFuncName(f)] = true\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n",
                      "markdown": "`\tfor f := range ssautil.AllFunctions(prog) {\n\t\tgot[dbFuncName(f)] = true\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/utils_test.go"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 3,
                  "endLine": 253,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tfor f := range ssautil.AllFunctions(prog) {\n\t\tgot[dbFuncName(f)] = true\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\tfor f := range ssautil.AllFunctions(prog) {\n\t\tgot[dbFuncName(f)] = true\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n",
                      "markdown": "`\tfor f := range ssautil.AllFunctions(prog) {\n\t\tgot[dbFuncName(f)] = true\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/goversion/read.go"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 41,
                  "endLine": 159,
                  "endColumn": 107,
                  "snippet": {
                    "text": "var (\n\tsigBoringCrypto, _   = hex.DecodeString(\"EB1DF448F44BF4B332F52813A3B450D441CC2485F001454E92101B1D2F1950C3\")\n\tsigStandardCrypto, _ = hex.DecodeString(\"EB1DF448F44BF4BAEE4DFA9851CA56A91145E83E99C59CF911CB8E80DAF12FC3\")\n\tsigFIPSOnly, _       = hex.DecodeString(\"EB1DF448F44BF4363CB9CE9D68047D31F28D325D5CA5873F5D80CAF6D6151BC3\")\n)\n\nfunc findCryptoSigs(v *Version, f exe) error {\n",
                    "rendered": {
                      "text": "var (\n\tsigBoringCrypto, _   = hex.DecodeString(\"EB1DF448F44BF4B332F52813A3B450D441CC2485F001454E92101B1D2F1950C3\")\n\tsigStandardCrypto, _ = hex.DecodeString(\"EB1DF448F44BF4BAEE4DFA9851CA56A91145E83E99C59CF911CB8E80DAF12FC3\")\n\tsigFIPSOnly, _       = hex.DecodeString(\"EB1DF448F44BF4363CB9CE9D68047D31F28D325D5CA5873F5D80CAF6D6151BC3\")\n)\n\nfunc findCryptoSigs(v *Version, f exe) error {\n",
                      "markdown": "`var (\n\tsigBoringCrypto, _   = hex.DecodeString(\"EB1DF448F44BF4B332F52813A3B450D441CC2485F001454E92101B1D2F1950C3\")\n\tsigStandardCrypto, _ = hex.DecodeString(\"EB1DF448F44BF4BAEE4DFA9851CA56A91145E83E99C59CF911CB8E80DAF12FC3\")\n\tsigFIPSOnly, _       = hex.DecodeString(\"EB1DF448F44BF4363CB9CE9D68047D31F28D325D5CA5873F5D80CAF6D6151BC3\")\n)\n\nfunc findCryptoSigs(v *Version, f exe) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/goversion/read.go"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 41,
                  "endLine": 158,
                  "endColumn": 107,
                  "snippet": {
                    "text": "// because on some systems you can't tell rodata from text.\nvar (\n\tsigBoringCrypto, _   = hex.DecodeString(\"EB1DF448F44BF4B332F52813A3B450D441CC2485F001454E92101B1D2F1950C3\")\n\tsigStandardCrypto, _ = hex.DecodeString(\"EB1DF448F44BF4BAEE4DFA9851CA56A91145E83E99C59CF911CB8E80DAF12FC3\")\n\tsigFIPSOnly, _       = hex.DecodeString(\"EB1DF448F44BF4363CB9CE9D68047D31F28D325D5CA5873F5D80CAF6D6151BC3\")\n)\n\n",
                    "rendered": {
                      "text": "// because on some systems you can't tell rodata from text.\nvar (\n\tsigBoringCrypto, _   = hex.DecodeString(\"EB1DF448F44BF4B332F52813A3B450D441CC2485F001454E92101B1D2F1950C3\")\n\tsigStandardCrypto, _ = hex.DecodeString(\"EB1DF448F44BF4BAEE4DFA9851CA56A91145E83E99C59CF911CB8E80DAF12FC3\")\n\tsigFIPSOnly, _       = hex.DecodeString(\"EB1DF448F44BF4363CB9CE9D68047D31F28D325D5CA5873F5D80CAF6D6151BC3\")\n)\n\n",
                      "markdown": "`// because on some systems you can't tell rodata from text.\nvar (\n\tsigBoringCrypto, _   = hex.DecodeString(\"EB1DF448F44BF4B332F52813A3B450D441CC2485F001454E92101B1D2F1950C3\")\n\tsigStandardCrypto, _ = hex.DecodeString(\"EB1DF448F44BF4BAEE4DFA9851CA56A91145E83E99C59CF911CB8E80DAF12FC3\")\n\tsigFIPSOnly, _       = hex.DecodeString(\"EB1DF448F44BF4363CB9CE9D68047D31F28D325D5CA5873F5D80CAF6D6151BC3\")\n)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/goversion/read.go"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 41,
                  "endLine": 157,
                  "endColumn": 107,
                  "snippet": {
                    "text": "// byte signatures appearing in the goversion binary,\n// because on some systems you can't tell rodata from text.\nvar (\n\tsigBoringCrypto, _   = hex.DecodeString(\"EB1DF448F44BF4B332F52813A3B450D441CC2485F001454E92101B1D2F1950C3\")\n\tsigStandardCrypto, _ = hex.DecodeString(\"EB1DF448F44BF4BAEE4DFA9851CA56A91145E83E99C59CF911CB8E80DAF12FC3\")\n\tsigFIPSOnly, _       = hex.DecodeString(\"EB1DF448F44BF4363CB9CE9D68047D31F28D325D5CA5873F5D80CAF6D6151BC3\")\n)\n",
                    "rendered": {
                      "text": "// byte signatures appearing in the goversion binary,\n// because on some systems you can't tell rodata from text.\nvar (\n\tsigBoringCrypto, _   = hex.DecodeString(\"EB1DF448F44BF4B332F52813A3B450D441CC2485F001454E92101B1D2F1950C3\")\n\tsigStandardCrypto, _ = hex.DecodeString(\"EB1DF448F44BF4BAEE4DFA9851CA56A91145E83E99C59CF911CB8E80DAF12FC3\")\n\tsigFIPSOnly, _       = hex.DecodeString(\"EB1DF448F44BF4363CB9CE9D68047D31F28D325D5CA5873F5D80CAF6D6151BC3\")\n)\n",
                      "markdown": "`// byte signatures appearing in the goversion binary,\n// because on some systems you can't tell rodata from text.\nvar (\n\tsigBoringCrypto, _   = hex.DecodeString(\"EB1DF448F44BF4B332F52813A3B450D441CC2485F001454E92101B1D2F1950C3\")\n\tsigStandardCrypto, _ = hex.DecodeString(\"EB1DF448F44BF4BAEE4DFA9851CA56A91145E83E99C59CF911CB8E80DAF12FC3\")\n\tsigFIPSOnly, _       = hex.DecodeString(\"EB1DF448F44BF4363CB9CE9D68047D31F28D325D5CA5873F5D80CAF6D6151BC3\")\n)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/goversion/exe.go"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 4,
                  "endLine": 267,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\tbo := x.f.ByteOrder\n\t\tconst x86_THREAD_STATE64 = 4\n\t\tcmd, siz := macho.LoadCmd(bo.Uint32(b[0:4])), bo.Uint32(b[4:8])\n\t\tif cmd == macho.LoadCmdUnixThread && siz == 184 && bo.Uint32(b[8:12]) == x86_THREAD_STATE64 {\n\t\t\treturn bo.Uint64(b[144:])\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t\tbo := x.f.ByteOrder\n\t\tconst x86_THREAD_STATE64 = 4\n\t\tcmd, siz := macho.LoadCmd(bo.Uint32(b[0:4])), bo.Uint32(b[4:8])\n\t\tif cmd == macho.LoadCmdUnixThread && siz == 184 && bo.Uint32(b[8:12]) == x86_THREAD_STATE64 {\n\t\t\treturn bo.Uint64(b[144:])\n\t\t}\n\t}\n",
                      "markdown": "`\t\tbo := x.f.ByteOrder\n\t\tconst x86_THREAD_STATE64 = 4\n\t\tcmd, siz := macho.LoadCmd(bo.Uint32(b[0:4])), bo.Uint32(b[4:8])\n\t\tif cmd == macho.LoadCmdUnixThread && siz == 184 && bo.Uint32(b[8:12]) == x86_THREAD_STATE64 {\n\t\t\treturn bo.Uint64(b[144:])\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-v1/ID/GO-2022-0463.json.gz/GO-2022-0463.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 415,
                  "endLine": 1,
                  "endColumn": 424,
                  "snippet": {
                    "text": "\"aliases\":[\"CVE-2022-31259\",\"GHSA-qx32-f6g6-fcfr\"],\"details\":\"Routes in the beego HTTP router can match unintended patterns. This overly-broad matching may permit an attacker to bypass access controls.\\n\\nFor example, the pattern \\\"/a/b/:name\\\" can match the URL \\\"/a.xml/b/\\\". This may bypass access control applied to the prefix \\\"/a/\\\".\",\"affected\":[{\"package\":{\"name\":\"github.com/astaxie/beego\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/astaxie/beego\",\"symbols\":[\"App.Run\",\"ControllerRegister.FindPolicy\",\"ControllerR",
                    "rendered": {
                      "text": "\"aliases\":[\"CVE-2022-31259\",\"GHSA-qx32-f6g6-fcfr\"],\"details\":\"Routes in the beego HTTP router can match unintended patterns. This overly-broad matching may permit an attacker to bypass access controls.\\n\\nFor example, the pattern \\\"/a/b/:name\\\" can match the URL \\\"/a.xml/b/\\\". This may bypass access control applied to the prefix \\\"/a/\\\".\",\"affected\":[{\"package\":{\"name\":\"github.com/astaxie/beego\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/astaxie/beego\",\"symbols\":[\"App.Run\",\"ControllerRegister.FindPolicy\",\"ControllerR",
                      "markdown": "`\"aliases\":[\"CVE-2022-31259\",\"GHSA-qx32-f6g6-fcfr\"],\"details\":\"Routes in the beego HTTP router can match unintended patterns. This overly-broad matching may permit an attacker to bypass access controls.\\n\\nFor example, the pattern \\\"/a/b/:name\\\" can match the URL \\\"/a.xml/b/\\\". This may bypass access control applied to the prefix \\\"/a/\\\".\",\"affected\":[{\"package\":{\"name\":\"github.com/astaxie/beego\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/astaxie/beego\",\"symbols\":[\"App.Run\",\"ControllerRegister.FindPolicy\",\"ControllerR`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/static/govulncheck.css"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 12,
                  "endColumn": 3,
                  "snippet": {
                    "text": "  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu,\n    'Helvetica Neue', Arial, sans-serif;\n}\n\nul {\n  list-style-type: none;\n}\n",
                    "rendered": {
                      "text": "  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu,\n    'Helvetica Neue', Arial, sans-serif;\n}\n\nul {\n  list-style-type: none;\n}\n",
                      "markdown": "`  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu,\n    'Helvetica Neue', Arial, sans-serif;\n}\n\nul {\n  list-style-type: none;\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/query/query_multi_json.ct"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 70,
                  "endLine": 22,
                  "endColumn": 74,
                  "snippet": {
                    "text": "}\n{\n  \"progress\": {\n    \"message\": \"Looking up vulnerabilities in github.com/tidwall/gjson at v1.6.5...\"\n  }\n}\n{\n",
                    "rendered": {
                      "text": "}\n{\n  \"progress\": {\n    \"message\": \"Looking up vulnerabilities in github.com/tidwall/gjson at v1.6.5...\"\n  }\n}\n{\n",
                      "markdown": "`}\n{\n  \"progress\": {\n    \"message\": \"Looking up vulnerabilities in github.com/tidwall/gjson at v1.6.5...\"\n  }\n}\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/query/query_multi_json.ct"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 63,
                  "endLine": 17,
                  "endColumn": 67,
                  "snippet": {
                    "text": "}\n{\n  \"progress\": {\n    \"message\": \"Looking up vulnerabilities in golang.org/x/text at v0.3.0...\"\n  }\n}\n{\n",
                    "rendered": {
                      "text": "}\n{\n  \"progress\": {\n    \"message\": \"Looking up vulnerabilities in golang.org/x/text at v0.3.0...\"\n  }\n}\n{\n",
                      "markdown": "`}\n{\n  \"progress\": {\n    \"message\": \"Looking up vulnerabilities in golang.org/x/text at v0.3.0...\"\n  }\n}\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/query/query_multi_json.ct"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 170,
                  "endLine": 178,
                  "endColumn": 179,
                  "snippet": {
                    "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/query/query_multi_json.ct"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 236,
                  "endLine": 113,
                  "endColumn": 245,
                  "snippet": {
                    "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/query/query_multi_json.ct"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 305,
                  "endLine": 36,
                  "endColumn": 314,
                  "snippet": {
                    "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/query/query_json.ct"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 170,
                  "endLine": 30,
                  "endColumn": 179,
                  "snippet": {
                    "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/query/query_json.ct"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 70,
                  "endLine": 17,
                  "endColumn": 74,
                  "snippet": {
                    "text": "}\n{\n  \"progress\": {\n    \"message\": \"Looking up vulnerabilities in github.com/tidwall/gjson at v1.6.5...\"\n  }\n}\n{\n",
                    "rendered": {
                      "text": "}\n{\n  \"progress\": {\n    \"message\": \"Looking up vulnerabilities in github.com/tidwall/gjson at v1.6.5...\"\n  }\n}\n{\n",
                      "markdown": "`}\n{\n  \"progress\": {\n    \"message\": \"Looking up vulnerabilities in github.com/tidwall/gjson at v1.6.5...\"\n  }\n}\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-package/binary_package_text.ct"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 22,
                  "endLine": 1,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# Test binary scanning at the package level.\n$ govulncheck -mode=binary -scan package ${common_vuln_binary} --> FAIL 3\n=== Package Results ===\n\n",
                    "rendered": {
                      "text": "# Test binary scanning at the package level.\n$ govulncheck -mode=binary -scan package ${common_vuln_binary} --> FAIL 3\n=== Package Results ===\n\n",
                      "markdown": "`# Test binary scanning at the package level.\n$ govulncheck -mode=binary -scan package ${common_vuln_binary} --> FAIL 3\n=== Package Results ===\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-package/binary_package_text.ct"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 6,
                  "endLine": 26,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Vulnerability #3: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                    "rendered": {
                      "text": "Vulnerability #3: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                      "markdown": "`Vulnerability #3: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-package/binary_package_text.ct"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 71,
                  "endLine": 17,
                  "snippet": {
                    "text": "Vulnerability #2: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                    "rendered": {
                      "text": "Vulnerability #2: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                      "markdown": "`Vulnerability #2: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-package/binary_package_json.ct"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 22,
                  "endLine": 2,
                  "endColumn": 26,
                  "snippet": {
                    "text": "#####\n# Test binary scanning at the package level with json output\n$ govulncheck -format json -mode binary -scan package ${common_vuln_binary}\n{\n  \"config\": {\n",
                    "rendered": {
                      "text": "#####\n# Test binary scanning at the package level with json output\n$ govulncheck -format json -mode binary -scan package ${common_vuln_binary}\n{\n  \"config\": {\n",
                      "markdown": "`#####\n# Test binary scanning at the package level with json output\n$ govulncheck -format json -mode binary -scan package ${common_vuln_binary}\n{\n  \"config\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-package/binary_package_json.ct"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 170,
                  "endLine": 440,
                  "endColumn": 179,
                  "snippet": {
                    "text": "      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-package/binary_package_json.ct"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 305,
                  "endLine": 351,
                  "endColumn": 314,
                  "snippet": {
                    "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-package/binary_package_json.ct"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 170,
                  "endLine": 262,
                  "endColumn": 179,
                  "snippet": {
                    "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-package/binary_package_json.ct"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 236,
                  "endLine": 172,
                  "endColumn": 245,
                  "snippet": {
                    "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_multientry_json.ct"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 305,
                  "endLine": 243,
                  "endColumn": 314,
                  "snippet": {
                    "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_multientry_json.ct"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 236,
                  "endLine": 57,
                  "endColumn": 245,
                  "snippet": {
                    "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_vex.ct"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 244,
                  "endLine": 62,
                  "endColumn": 253,
                  "snippet": {
                    "text": "      \"vulnerability\": {\n        \"@id\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n        \"name\": \"GO-2021-0113\",\n        \"description\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n        \"aliases\": [\n          \"CVE-2021-38561\",\n          \"GHSA-ppp9-7jff-5vj2\"\n",
                    "rendered": {
                      "text": "      \"vulnerability\": {\n        \"@id\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n        \"name\": \"GO-2021-0113\",\n        \"description\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n        \"aliases\": [\n          \"CVE-2021-38561\",\n          \"GHSA-ppp9-7jff-5vj2\"\n",
                      "markdown": "`      \"vulnerability\": {\n        \"@id\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n        \"name\": \"GO-2021-0113\",\n        \"description\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n        \"aliases\": [\n          \"CVE-2021-38561\",\n          \"GHSA-ppp9-7jff-5vj2\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_vex.ct"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 178,
                  "endLine": 40,
                  "endColumn": 187,
                  "snippet": {
                    "text": "      \"vulnerability\": {\n        \"@id\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n        \"name\": \"GO-2021-0054\",\n        \"description\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n        \"aliases\": [\n          \"CVE-2020-36067\",\n          \"GHSA-p64j-r5f4-pwwx\"\n",
                    "rendered": {
                      "text": "      \"vulnerability\": {\n        \"@id\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n        \"name\": \"GO-2021-0054\",\n        \"description\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n        \"aliases\": [\n          \"CVE-2020-36067\",\n          \"GHSA-p64j-r5f4-pwwx\"\n",
                      "markdown": "`      \"vulnerability\": {\n        \"@id\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n        \"name\": \"GO-2021-0054\",\n        \"description\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n        \"aliases\": [\n          \"CVE-2020-36067\",\n          \"GHSA-p64j-r5f4-pwwx\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/sarif/handler.go"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 3,
                  "endLine": 393,
                  "endColumn": 8,
                  "snippet": {
                    "text": "}\n\nfunc fileURIInfo(filename, top, module, version string) (string, string) {\n\tif top == module {\n\t\treturn filename, SrcRootID\n\t}\n\tif module == internal.GoStdModulePath {\n",
                    "rendered": {
                      "text": "}\n\nfunc fileURIInfo(filename, top, module, version string) (string, string) {\n\tif top == module {\n\t\treturn filename, SrcRootID\n\t}\n\tif module == internal.GoStdModulePath {\n",
                      "markdown": "`}\n\nfunc fileURIInfo(filename, top, module, version string) (string, string) {\n\tif top == module {\n\t\treturn filename, SrcRootID\n\t}\n\tif module == internal.GoStdModulePath {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/sarif/handler.go"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 1,
                  "endLine": 356,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tvar tfs []ThreadFlow\n\tfor _, f := range fs {\n\t\ttrace := traces.Compact(f)\n\t\ttop := trace[len(trace)-1] // belongs to top level module\n\n\t\tvar tf []ThreadFlowLocation\n\t\tfor i := len(trace) - 1; i >= 0; i-- { // vulnerable symbol is at the top frame\n",
                    "rendered": {
                      "text": "\tvar tfs []ThreadFlow\n\tfor _, f := range fs {\n\t\ttrace := traces.Compact(f)\n\t\ttop := trace[len(trace)-1] // belongs to top level module\n\n\t\tvar tf []ThreadFlowLocation\n\t\tfor i := len(trace) - 1; i >= 0; i-- { // vulnerable symbol is at the top frame\n",
                      "markdown": "`\tvar tfs []ThreadFlow\n\tfor _, f := range fs {\n\t\ttrace := traces.Compact(f)\n\t\ttop := trace[len(trace)-1] // belongs to top level module\n\n\t\tvar tf []ThreadFlowLocation\n\t\tfor i := len(trace) - 1; i >= 0; i-- { // vulnerable symbol is at the top frame\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/sarif/handler.go"
                },
                "region": {
                  "startLine": 284,
                  "endLine": 284,
                  "endColumn": 5,
                  "snippet": {
                    "text": "// stack transforms call stack in f to a sarif stack.\nfunc stack(h *handler, f *govulncheck.Finding) Stack {\n\ttrace := f.Trace\n\ttop := trace[len(trace)-1] // belongs to top level module\n\n\tvar frames []Frame\n\tfor i := len(trace) - 1; i >= 0; i-- { // vulnerable symbol is at the top frame\n",
                    "rendered": {
                      "text": "// stack transforms call stack in f to a sarif stack.\nfunc stack(h *handler, f *govulncheck.Finding) Stack {\n\ttrace := f.Trace\n\ttop := trace[len(trace)-1] // belongs to top level module\n\n\tvar frames []Frame\n\tfor i := len(trace) - 1; i >= 0; i-- { // vulnerable symbol is at the top frame\n",
                      "markdown": "`// stack transforms call stack in f to a sarif stack.\nfunc stack(h *handler, f *govulncheck.Finding) Stack {\n\ttrace := f.Trace\n\ttop := trace[len(trace)-1] // belongs to top level module\n\n\tvar frames []Frame\n\tfor i := len(trace) - 1; i >= 0; i-- { // vulnerable symbol is at the top frame\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/sarif/handler_test.go"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 32,
                  "endLine": 245,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n",
                      "markdown": "`\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/sarif/handler_test.go"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 3,
                  "endLine": 245,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n",
                      "markdown": "`\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/sarif/handler_test.go"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 32,
                  "endLine": 193,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n",
                      "markdown": "`\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/sarif/handler_test.go"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 3,
                  "endLine": 193,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n",
                      "markdown": "`\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/sarif/handler_test.go"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 32,
                  "endLine": 119,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n",
                      "markdown": "`\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/sarif/handler_test.go"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 3,
                  "endLine": 119,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n",
                      "markdown": "`\tfor osv, fs := range h.findings {\n\t\tgot[osv] = scanLevel(fs[0])\n\t}\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want;got+): %s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-legacy/ID/GO-2022-0463.json"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 255,
                  "endLine": 9,
                  "endColumn": 264,
                  "snippet": {
                    "text": "    \"CVE-2022-31259\",\n    \"GHSA-qx32-f6g6-fcfr\"\n  ],\n  \"details\": \"Routes in the beego HTTP router can match unintended patterns.\\nThis overly-broad matching may permit an attacker to bypass access\\ncontrols.\\n\\nFor example, the pattern \\\"/a/b/:name\\\" can match the URL \\\"/a.xml/b/\\\".\\nThis may bypass access control applied to the prefix \\\"/a/\\\".\\n\",\n  \"affected\": [\n    {\n      \"package\": {\n",
                    "rendered": {
                      "text": "    \"CVE-2022-31259\",\n    \"GHSA-qx32-f6g6-fcfr\"\n  ],\n  \"details\": \"Routes in the beego HTTP router can match unintended patterns.\\nThis overly-broad matching may permit an attacker to bypass access\\ncontrols.\\n\\nFor example, the pattern \\\"/a/b/:name\\\" can match the URL \\\"/a.xml/b/\\\".\\nThis may bypass access control applied to the prefix \\\"/a/\\\".\\n\",\n  \"affected\": [\n    {\n      \"package\": {\n",
                      "markdown": "`    \"CVE-2022-31259\",\n    \"GHSA-qx32-f6g6-fcfr\"\n  ],\n  \"details\": \"Routes in the beego HTTP router can match unintended patterns.\\nThis overly-broad matching may permit an attacker to bypass access\\ncontrols.\\n\\nFor example, the pattern \\\"/a/b/:name\\\" can match the URL \\\"/a.xml/b/\\\".\\nThis may bypass access control applied to the prefix \\\"/a/\\\".\\n\",\n  \"affected\": [\n    {\n      \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-v1/ID/GO-2022-0476.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 196,
                  "endLine": 1,
                  "endColumn": 200,
                  "snippet": {
                    "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0476\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:43Z\",\"aliases\":[\"CVE-2020-28367\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious gcc flags specified via a cgo directive.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMV",
                    "rendered": {
                      "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0476\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:43Z\",\"aliases\":[\"CVE-2020-28367\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious gcc flags specified via a cgo directive.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMV",
                      "markdown": "`{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0476\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:43Z\",\"aliases\":[\"CVE-2020-28367\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious gcc flags specified via a cgo directive.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMV`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-v1/ID/GO-2022-0476.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 205,
                  "endLine": 1,
                  "endColumn": 211,
                  "snippet": {
                    "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0476\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:43Z\",\"aliases\":[\"CVE-2020-28367\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious gcc flags specified via a cgo directive.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events",
                    "rendered": {
                      "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0476\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:43Z\",\"aliases\":[\"CVE-2020-28367\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious gcc flags specified via a cgo directive.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events",
                      "markdown": "`{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0476\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:43Z\",\"aliases\":[\"CVE-2020-28367\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious gcc flags specified via a cgo directive.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-v1/ID/GO-2022-0475.json.gz/GO-2022-0475.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 196,
                  "endLine": 1,
                  "endColumn": 200,
                  "snippet": {
                    "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0475\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:30Z\",\"aliases\":[\"CVE-2020-28366\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious unquoted symbol name in a linked object file.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":",
                    "rendered": {
                      "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0475\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:30Z\",\"aliases\":[\"CVE-2020-28366\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious unquoted symbol name in a linked object file.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":",
                      "markdown": "`{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0475\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:30Z\",\"aliases\":[\"CVE-2020-28366\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious unquoted symbol name in a linked object file.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-v1/ID/GO-2022-0475.json.gz/GO-2022-0475.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 205,
                  "endLine": 1,
                  "endColumn": 211,
                  "snippet": {
                    "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0475\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:30Z\",\"aliases\":[\"CVE-2020-28366\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious unquoted symbol name in a linked object file.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"e",
                    "rendered": {
                      "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0475\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:30Z\",\"aliases\":[\"CVE-2020-28366\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious unquoted symbol name in a linked object file.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"e",
                      "markdown": "`{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0475\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:30Z\",\"aliases\":[\"CVE-2020-28366\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious unquoted symbol name in a linked object file.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"e`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/convert/convert_text.ct"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 71,
                  "endLine": 21,
                  "snippet": {
                    "text": "Vulnerability #2: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                    "rendered": {
                      "text": "Vulnerability #2: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                      "markdown": "`Vulnerability #2: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/convert/convert_input.json"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 170,
                  "endLine": 216,
                  "endColumn": 179,
                  "snippet": {
                    "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/convert/convert_input.json"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 236,
                  "endLine": 126,
                  "endColumn": 245,
                  "snippet": {
                    "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/witness_test.go"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 3,
                  "endLine": 236,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\t\tvar cp string\n\t\t\tif se.Call != nil && se.Call.Pos.IsValid() {\n\t\t\t\tcPos := se.Call.Pos\n\t\t\t\tcp = fmt.Sprintf(\"%s:%d:%d\", filepath.Base(cPos.Filename), cPos.Line, cPos.Column)\n\t\t\t}\n\n\t\t\tsse := fmt.Sprintf(\"N:%s.%s\\tF:%v\\tC:%v\", se.Function.Package.PkgPath, se.Function.Name, fp, cp)\n",
                    "rendered": {
                      "text": "\t\t\tvar cp string\n\t\t\tif se.Call != nil && se.Call.Pos.IsValid() {\n\t\t\t\tcPos := se.Call.Pos\n\t\t\t\tcp = fmt.Sprintf(\"%s:%d:%d\", filepath.Base(cPos.Filename), cPos.Line, cPos.Column)\n\t\t\t}\n\n\t\t\tsse := fmt.Sprintf(\"N:%s.%s\\tF:%v\\tC:%v\", se.Function.Package.PkgPath, se.Function.Name, fp, cp)\n",
                      "markdown": "`\t\t\tvar cp string\n\t\t\tif se.Call != nil && se.Call.Pos.IsValid() {\n\t\t\t\tcPos := se.Call.Pos\n\t\t\t\tcp = fmt.Sprintf(\"%s:%d:%d\", filepath.Base(cPos.Filename), cPos.Line, cPos.Column)\n\t\t\t}\n\n\t\t\tsse := fmt.Sprintf(\"N:%s.%s\\tF:%v\\tC:%v\", se.Function.Package.PkgPath, se.Function.Name, fp, cp)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/witness_test.go"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 6,
                  "endLine": 233,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\t\tfPos := se.Function.Pos\n\t\t\tfp := fmt.Sprintf(\"%s:%d:%d\", filepath.Base(fPos.Filename), fPos.Line, fPos.Column)\n\n\t\t\tvar cp string\n\t\t\tif se.Call != nil && se.Call.Pos.IsValid() {\n\t\t\t\tcPos := se.Call.Pos\n\t\t\t\tcp = fmt.Sprintf(\"%s:%d:%d\", filepath.Base(cPos.Filename), cPos.Line, cPos.Column)\n",
                    "rendered": {
                      "text": "\t\t\tfPos := se.Function.Pos\n\t\t\tfp := fmt.Sprintf(\"%s:%d:%d\", filepath.Base(fPos.Filename), fPos.Line, fPos.Column)\n\n\t\t\tvar cp string\n\t\t\tif se.Call != nil && se.Call.Pos.IsValid() {\n\t\t\t\tcPos := se.Call.Pos\n\t\t\t\tcp = fmt.Sprintf(\"%s:%d:%d\", filepath.Base(cPos.Filename), cPos.Line, cPos.Column)\n",
                      "markdown": "`\t\t\tfPos := se.Function.Pos\n\t\t\tfp := fmt.Sprintf(\"%s:%d:%d\", filepath.Base(fPos.Filename), fPos.Line, fPos.Column)\n\n\t\t\tvar cp string\n\t\t\tif se.Call != nil && se.Call.Pos.IsValid() {\n\t\t\t\tcPos := se.Call.Pos\n\t\t\t\tcp = fmt.Sprintf(\"%s:%d:%d\", filepath.Base(cPos.Filename), cPos.Line, cPos.Column)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/witness_test.go"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 51,
                  "endLine": 217,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t\t\t\"N:golang.org/cmod/cvuln.C\tF:cvuln.go:6:9\tC:\",\n\t\t},\n\t}\n\tif diff := cmp.Diff(want, fullStacksToString(cs)); diff != \"\" {\n\t\tt.Errorf(\"modules mismatch (-want, +got):\\n%s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\t\t\"N:golang.org/cmod/cvuln.C\tF:cvuln.go:6:9\tC:\",\n\t\t},\n\t}\n\tif diff := cmp.Diff(want, fullStacksToString(cs)); diff != \"\" {\n\t\tt.Errorf(\"modules mismatch (-want, +got):\\n%s\", diff)\n\t}\n}\n",
                      "markdown": "`\t\t\t\"N:golang.org/cmod/cvuln.C\tF:cvuln.go:6:9\tC:\",\n\t\t},\n\t}\n\tif diff := cmp.Diff(want, fullStacksToString(cs)); diff != \"\" {\n\t\tt.Errorf(\"modules mismatch (-want, +got):\\n%s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/witness_test.go"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 3,
                  "endLine": 217,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\t\t\"N:golang.org/cmod/cvuln.C\tF:cvuln.go:6:9\tC:\",\n\t\t},\n\t}\n\tif diff := cmp.Diff(want, fullStacksToString(cs)); diff != \"\" {\n\t\tt.Errorf(\"modules mismatch (-want, +got):\\n%s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\t\t\"N:golang.org/cmod/cvuln.C\tF:cvuln.go:6:9\tC:\",\n\t\t},\n\t}\n\tif diff := cmp.Diff(want, fullStacksToString(cs)); diff != \"\" {\n\t\tt.Errorf(\"modules mismatch (-want, +got):\\n%s\", diff)\n\t}\n}\n",
                      "markdown": "`\t\t\t\"N:golang.org/cmod/cvuln.C\tF:cvuln.go:6:9\tC:\",\n\t\t},\n\t}\n\tif diff := cmp.Diff(want, fullStacksToString(cs)); diff != \"\" {\n\t\tt.Errorf(\"modules mismatch (-want, +got):\\n%s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/fetch.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 1,
                  "endLine": 36,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t\tif len(resp.Entries) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tmv = append(mv, &ModVulns{\n\t\t\tModule: modules[i],\n\t\t\tVulns:  resp.Entries,\n\t\t})\n",
                    "rendered": {
                      "text": "\t\tif len(resp.Entries) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tmv = append(mv, &ModVulns{\n\t\t\tModule: modules[i],\n\t\t\tVulns:  resp.Entries,\n\t\t})\n",
                      "markdown": "`\t\tif len(resp.Entries) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tmv = append(mv, &ModVulns{\n\t\t\tModule: modules[i],\n\t\t\tVulns:  resp.Entries,\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/fetch.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 4,
                  "endLine": 31,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"fetching vulnerabilities: %v\", err)\n\t}\n\tvar mv []*ModVulns\n\tfor i, resp := range resps {\n\t\tif len(resp.Entries) == 0 {\n\t\t\tcontinue\n",
                    "rendered": {
                      "text": "\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"fetching vulnerabilities: %v\", err)\n\t}\n\tvar mv []*ModVulns\n\tfor i, resp := range resps {\n\t\tif len(resp.Entries) == 0 {\n\t\t\tcontinue\n",
                      "markdown": "`\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"fetching vulnerabilities: %v\", err)\n\t}\n\tvar mv []*ModVulns\n\tfor i, resp := range resps {\n\t\tif len(resp.Entries) == 0 {\n\t\t\tcontinue\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/gosym/additions_test.go"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 19,
                  "endLine": 60,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t}\n\tprog := progContaining(f, goFunc.Value)\n\tif prog == nil {\n\t\tt.Fatal(\"couldn't find go.func.* Prog\")\n\t}\n\tpcln := NewLineTable(pclndat, f.Section(\".text\").Addr)\n\ts := f.Section(\".gosymtab\")\n",
                    "rendered": {
                      "text": "\t}\n\tprog := progContaining(f, goFunc.Value)\n\tif prog == nil {\n\t\tt.Fatal(\"couldn't find go.func.* Prog\")\n\t}\n\tpcln := NewLineTable(pclndat, f.Section(\".text\").Addr)\n\ts := f.Section(\".gosymtab\")\n",
                      "markdown": "`\t}\n\tprog := progContaining(f, goFunc.Value)\n\tif prog == nil {\n\t\tt.Fatal(\"couldn't find go.func.* Prog\")\n\t}\n\tpcln := NewLineTable(pclndat, f.Section(\".text\").Addr)\n\ts := f.Section(\".gosymtab\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/gosym/additions_test.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 19,
                  "endLine": 56,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t// used to run the tests.\n\tgoFunc := lookupSymbol(f, FuncSymName(runtime.Version()))\n\tif goFunc == nil {\n\t\tt.Fatal(\"couldn't find go.func.*\")\n\t}\n\tprog := progContaining(f, goFunc.Value)\n\tif prog == nil {\n",
                    "rendered": {
                      "text": "\t// used to run the tests.\n\tgoFunc := lookupSymbol(f, FuncSymName(runtime.Version()))\n\tif goFunc == nil {\n\t\tt.Fatal(\"couldn't find go.func.*\")\n\t}\n\tprog := progContaining(f, goFunc.Value)\n\tif prog == nil {\n",
                      "markdown": "`\t// used to run the tests.\n\tgoFunc := lookupSymbol(f, FuncSymName(runtime.Version()))\n\tif goFunc == nil {\n\t\tt.Fatal(\"couldn't find go.func.*\")\n\t}\n\tprog := progContaining(f, goFunc.Value)\n\tif prog == nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/gosym/pclntab_test.go"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 34,
                  "endLine": 239,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t\t} else if err != nil {\n\t\t\t\tt.Errorf(\"failed to get PC of line %d: %s\", lookupline, err)\n\t\t\t} else if pc != pc2 {\n\t\t\t\tt.Errorf(\"expected PC %#x (%s) at line %d, got PC %#x (%s)\", pc, fn.Name, line, pc2, fn2.Name)\n\t\t\t}\n\t\t}\n\t\toff = pc + 1 - text.Addr\n",
                    "rendered": {
                      "text": "\t\t\t} else if err != nil {\n\t\t\t\tt.Errorf(\"failed to get PC of line %d: %s\", lookupline, err)\n\t\t\t} else if pc != pc2 {\n\t\t\t\tt.Errorf(\"expected PC %#x (%s) at line %d, got PC %#x (%s)\", pc, fn.Name, line, pc2, fn2.Name)\n\t\t\t}\n\t\t}\n\t\toff = pc + 1 - text.Addr\n",
                      "markdown": "`\t\t\t} else if err != nil {\n\t\t\t\tt.Errorf(\"failed to get PC of line %d: %s\", lookupline, err)\n\t\t\t} else if pc != pc2 {\n\t\t\t\tt.Errorf(\"expected PC %#x (%s) at line %d, got PC %#x (%s)\", pc, fn.Name, line, pc2, fn2.Name)\n\t\t\t}\n\t\t}\n\t\toff = pc + 1 - text.Addr\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/gosym/pclntab_test.go"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 29,
                  "endLine": 234,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\t\t\tif lookupline != line {\n\t\t\t\t// Should be nothing on this line\n\t\t\t\tif err == nil {\n\t\t\t\t\tt.Errorf(\"expected no PC at line %d, got %#x (%s)\", lookupline, pc2, fn2.Name)\n\t\t\t\t}\n\t\t\t} else if err != nil {\n\t\t\t\tt.Errorf(\"failed to get PC of line %d: %s\", lookupline, err)\n",
                    "rendered": {
                      "text": "\t\t\tif lookupline != line {\n\t\t\t\t// Should be nothing on this line\n\t\t\t\tif err == nil {\n\t\t\t\t\tt.Errorf(\"expected no PC at line %d, got %#x (%s)\", lookupline, pc2, fn2.Name)\n\t\t\t\t}\n\t\t\t} else if err != nil {\n\t\t\t\tt.Errorf(\"failed to get PC of line %d: %s\", lookupline, err)\n",
                      "markdown": "`\t\t\tif lookupline != line {\n\t\t\t\t// Should be nothing on this line\n\t\t\t\tif err == nil {\n\t\t\t\t\tt.Errorf(\"expected no PC at line %d, got %#x (%s)\", lookupline, pc2, fn2.Name)\n\t\t\t\t}\n\t\t\t} else if err != nil {\n\t\t\t\tt.Errorf(\"failed to get PC of line %d: %s\", lookupline, err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/gosym/pclntab_test.go"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 29,
                  "endLine": 222,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\t\t}\n\t\twantLine += int(textdat[off])\n\t\tif line != wantLine {\n\t\t\tt.Errorf(\"expected line %d at PC %#x in pcfromline, got %d\", wantLine, pc, line)\n\t\t\toff = pc + 1 - text.Addr\n\t\t\tcontinue\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t}\n\t\twantLine += int(textdat[off])\n\t\tif line != wantLine {\n\t\t\tt.Errorf(\"expected line %d at PC %#x in pcfromline, got %d\", wantLine, pc, line)\n\t\t\toff = pc + 1 - text.Addr\n\t\t\tcontinue\n\t\t}\n",
                      "markdown": "`\t\t}\n\t\twantLine += int(textdat[off])\n\t\tif line != wantLine {\n\t\t\tt.Errorf(\"expected line %d at PC %#x in pcfromline, got %d\", wantLine, pc, line)\n\t\t\toff = pc + 1 - text.Addr\n\t\t\tcontinue\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/gosym/pclntab_test.go"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 35,
                  "endLine": 115,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t\t\t}\n\t\t\tcontinue\n\t\t} else if final != -1 {\n\t\t\tt.Fatalf(\"reached end of package at absolute line %d, but absolute line %d mapped to %s:%d\", final, i, path, line)\n\t\t}\n\t\t// It's okay to see files multiple times (e.g., sys.a)\n\t\tif line == 1 {\n",
                    "rendered": {
                      "text": "\t\t\t}\n\t\t\tcontinue\n\t\t} else if final != -1 {\n\t\t\tt.Fatalf(\"reached end of package at absolute line %d, but absolute line %d mapped to %s:%d\", final, i, path, line)\n\t\t}\n\t\t// It's okay to see files multiple times (e.g., sys.a)\n\t\tif line == 1 {\n",
                      "markdown": "`\t\t\t}\n\t\t\tcontinue\n\t\t} else if final != -1 {\n\t\t\tt.Fatalf(\"reached end of package at absolute line %d, but absolute line %d mapped to %s:%d\", final, i, path, line)\n\t\t}\n\t\t// It's okay to see files multiple times (e.g., sys.a)\n\t\tif line == 1 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/gosym/pclntab_test.go"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 3,
                  "endLine": 96,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\tt.Skip(\"not relevant to Go 1.2 symbol table\")\n\t}\n\n\t// Find the sym package\n\tpkg := tab.LookupFunc(\"debug/gosym.TestLineFromAline\").Obj\n\tif pkg == nil {\n\t\tt.Fatalf(\"nil pkg\")\n",
                    "rendered": {
                      "text": "\t\tt.Skip(\"not relevant to Go 1.2 symbol table\")\n\t}\n\n\t// Find the sym package\n\tpkg := tab.LookupFunc(\"debug/gosym.TestLineFromAline\").Obj\n\tif pkg == nil {\n\t\tt.Fatalf(\"nil pkg\")\n",
                      "markdown": "`\t\tt.Skip(\"not relevant to Go 1.2 symbol table\")\n\t}\n\n\t// Find the sym package\n\tpkg := tab.LookupFunc(\"debug/gosym.TestLineFromAline\").Obj\n\tif pkg == nil {\n\t\tt.Fatalf(\"nil pkg\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-v1/ID/GO-2022-0475.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 196,
                  "endLine": 1,
                  "endColumn": 200,
                  "snippet": {
                    "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0475\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:30Z\",\"aliases\":[\"CVE-2020-28366\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious unquoted symbol name in a linked object file.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":",
                    "rendered": {
                      "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0475\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:30Z\",\"aliases\":[\"CVE-2020-28366\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious unquoted symbol name in a linked object file.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":",
                      "markdown": "`{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0475\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:30Z\",\"aliases\":[\"CVE-2020-28366\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious unquoted symbol name in a linked object file.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-v1/ID/GO-2022-0475.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 205,
                  "endLine": 1,
                  "endColumn": 211,
                  "snippet": {
                    "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0475\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:30Z\",\"aliases\":[\"CVE-2020-28366\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious unquoted symbol name in a linked object file.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"e",
                    "rendered": {
                      "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0475\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:30Z\",\"aliases\":[\"CVE-2020-28366\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious unquoted symbol name in a linked object file.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"e",
                      "markdown": "`{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0475\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:30Z\",\"aliases\":[\"CVE-2020-28366\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious unquoted symbol name in a linked object file.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"e`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/client.go"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 19,
                  "endLine": 322,
                  "endColumn": 24,
                  "snippet": {
                    "text": "func (c *Client) byID(ctx context.Context, id string) (_ *osv.Entry, err error) {\n\tderrors.Wrap(&err, \"byID(%s)\", id)\n\n\tb, err := c.source.get(ctx, entryEndpoint(id))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n",
                    "rendered": {
                      "text": "func (c *Client) byID(ctx context.Context, id string) (_ *osv.Entry, err error) {\n\tderrors.Wrap(&err, \"byID(%s)\", id)\n\n\tb, err := c.source.get(ctx, entryEndpoint(id))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n",
                      "markdown": "`func (c *Client) byID(ctx context.Context, id string) (_ *osv.Entry, err error) {\n\tderrors.Wrap(&err, \"byID(%s)\", id)\n\n\tb, err := c.source.get(ctx, entryEndpoint(id))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/client.go"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 19,
                  "endLine": 207,
                  "endColumn": 24,
                  "snippet": {
                    "text": "}\n\nfunc (c *Client) moduleMetas(ctx context.Context, reqs []*ModuleRequest) (_ []*moduleMeta, err error) {\n\tb, err := c.source.get(ctx, modulesEndpoint)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc (c *Client) moduleMetas(ctx context.Context, reqs []*ModuleRequest) (_ []*moduleMeta, err error) {\n\tb, err := c.source.get(ctx, modulesEndpoint)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n",
                      "markdown": "`}\n\nfunc (c *Client) moduleMetas(ctx context.Context, reqs []*ModuleRequest) (_ []*moduleMeta, err error) {\n\tb, err := c.source.get(ctx, modulesEndpoint)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/client.go"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 19,
                  "endLine": 139,
                  "endColumn": 24,
                  "snippet": {
                    "text": "func (c *Client) LastModifiedTime(ctx context.Context) (_ time.Time, err error) {\n\tderrors.Wrap(&err, \"LastModifiedTime()\")\n\n\tb, err := c.source.get(ctx, dbEndpoint)\n\tif err != nil {\n\t\treturn time.Time{}, err\n\t}\n",
                    "rendered": {
                      "text": "func (c *Client) LastModifiedTime(ctx context.Context) (_ time.Time, err error) {\n\tderrors.Wrap(&err, \"LastModifiedTime()\")\n\n\tb, err := c.source.get(ctx, dbEndpoint)\n\tif err != nil {\n\t\treturn time.Time{}, err\n\t}\n",
                      "markdown": "`func (c *Client) LastModifiedTime(ctx context.Context) (_ time.Time, err error) {\n\tderrors.Wrap(&err, \"LastModifiedTime()\")\n\n\tb, err := c.source.get(ctx, dbEndpoint)\n\tif err != nil {\n\t\treturn time.Time{}, err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/client.go"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 3,
                  "endLine": 157,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t// This must be set (if empty, ByModule errors).\n\tPath string\n\t// (Optional) If set, only return vulnerabilities affected\n\t// at this version.\n\tVersion string\n}\n\n",
                    "rendered": {
                      "text": "\t// This must be set (if empty, ByModule errors).\n\tPath string\n\t// (Optional) If set, only return vulnerabilities affected\n\t// at this version.\n\tVersion string\n}\n\n",
                      "markdown": "`\t// This must be set (if empty, ByModule errors).\n\tPath string\n\t// (Optional) If set, only return vulnerabilities affected\n\t// at this version.\n\tVersion string\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/client.go"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 28,
                  "endLine": 8,
                  "endColumn": 32,
                  "snippet": {
                    "text": "// Package client provides an interface for accessing vulnerability\n// databases, via either HTTP or local filesystem access.\n//\n// The protocol is described at https://go.dev/security/vuln/database.\npackage client\n\nimport (\n",
                    "rendered": {
                      "text": "// Package client provides an interface for accessing vulnerability\n// databases, via either HTTP or local filesystem access.\n//\n// The protocol is described at https://go.dev/security/vuln/database.\npackage client\n\nimport (\n",
                      "markdown": "`// Package client provides an interface for accessing vulnerability\n// databases, via either HTTP or local filesystem access.\n//\n// The protocol is described at https://go.dev/security/vuln/database.\npackage client\n\nimport (\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_json.ct"
                },
                "region": {
                  "startLine": 548,
                  "startColumn": 170,
                  "endLine": 548,
                  "endColumn": 179,
                  "snippet": {
                    "text": "      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_json.ct"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 305,
                  "endLine": 459,
                  "endColumn": 314,
                  "snippet": {
                    "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_json.ct"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 170,
                  "endLine": 289,
                  "endColumn": 179,
                  "snippet": {
                    "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-call/source_call_json.ct"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 236,
                  "endLine": 199,
                  "endColumn": 245,
                  "snippet": {
                    "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/modules/vuln/subdir/subdir.go"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 15,
                  "endLine": 8,
                  "endColumn": 20,
                  "snippet": {
                    "text": ")\n\nfunc Foo() {\n\tgjson.Result{}.Get(\"\")\n}\n",
                    "rendered": {
                      "text": ")\n\nfunc Foo() {\n\tgjson.Result{}.Get(\"\")\n}\n",
                      "markdown": "`)\n\nfunc Foo() {\n\tgjson.Result{}.Get(\"\")\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/query_test.go"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 47,
                  "endLine": 130,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif diff := cmp.Diff(h.OSVMessages, tc.want); diff != \"\" {\n\t\t\t\tt.Errorf(\"runQuery: unexpected diff:\\n%s\", diff)\n\t\t\t}\n\t\t})\n",
                    "rendered": {
                      "text": "\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif diff := cmp.Diff(h.OSVMessages, tc.want); diff != \"\" {\n\t\t\t\tt.Errorf(\"runQuery: unexpected diff:\\n%s\", diff)\n\t\t\t}\n\t\t})\n",
                      "markdown": "`\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif diff := cmp.Diff(h.OSVMessages, tc.want); diff != \"\" {\n\t\t\t\tt.Errorf(\"runQuery: unexpected diff:\\n%s\", diff)\n\t\t\t}\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/query_test.go"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 5,
                  "endLine": 130,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif diff := cmp.Diff(h.OSVMessages, tc.want); diff != \"\" {\n\t\t\t\tt.Errorf(\"runQuery: unexpected diff:\\n%s\", diff)\n\t\t\t}\n\t\t})\n",
                    "rendered": {
                      "text": "\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif diff := cmp.Diff(h.OSVMessages, tc.want); diff != \"\" {\n\t\t\t\tt.Errorf(\"runQuery: unexpected diff:\\n%s\", diff)\n\t\t\t}\n\t\t})\n",
                      "markdown": "`\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif diff := cmp.Diff(h.OSVMessages, tc.want); diff != \"\" {\n\t\t\t\tt.Errorf(\"runQuery: unexpected diff:\\n%s\", diff)\n\t\t\t}\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/fetch_test.go"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 32,
                  "endLine": 53,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t\tVulns:  []*osv.Entry{c},\n\t\t},\n\t}\n\tif diff := cmp.Diff(got, want); diff != \"\" {\n\t\tt.Fatalf(\"mismatch (-want, +got):\\n%s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\t\tVulns:  []*osv.Entry{c},\n\t\t},\n\t}\n\tif diff := cmp.Diff(got, want); diff != \"\" {\n\t\tt.Fatalf(\"mismatch (-want, +got):\\n%s\", diff)\n\t}\n}\n",
                      "markdown": "`\t\t\tVulns:  []*osv.Entry{c},\n\t\t},\n\t}\n\tif diff := cmp.Diff(got, want); diff != \"\" {\n\t\tt.Fatalf(\"mismatch (-want, +got):\\n%s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/fetch_test.go"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 3,
                  "endLine": 53,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\t\tVulns:  []*osv.Entry{c},\n\t\t},\n\t}\n\tif diff := cmp.Diff(got, want); diff != \"\" {\n\t\tt.Fatalf(\"mismatch (-want, +got):\\n%s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\t\tVulns:  []*osv.Entry{c},\n\t\t},\n\t}\n\tif diff := cmp.Diff(got, want); diff != \"\" {\n\t\tt.Fatalf(\"mismatch (-want, +got):\\n%s\", diff)\n\t}\n}\n",
                      "markdown": "`\t\t\tVulns:  []*osv.Entry{c},\n\t\t},\n\t}\n\tif diff := cmp.Diff(got, want); diff != \"\" {\n\t\tt.Fatalf(\"mismatch (-want, +got):\\n%s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/buildinfo/additions_stripped_test.go"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 34,
                  "endLine": 59,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\t\t\t{\"main\", \"main\"},\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want,+got):%s\", diff)\n\t\t\t}\n\t\t})\n",
                    "rendered": {
                      "text": "\t\t\t\t{\"main\", \"main\"},\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want,+got):%s\", diff)\n\t\t\t}\n\t\t})\n",
                      "markdown": "`\t\t\t\t{\"main\", \"main\"},\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want,+got):%s\", diff)\n\t\t\t}\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/buildinfo/additions_stripped_test.go"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 5,
                  "endLine": 59,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\t\t{\"main\", \"main\"},\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want,+got):%s\", diff)\n\t\t\t}\n\t\t})\n",
                    "rendered": {
                      "text": "\t\t\t\t{\"main\", \"main\"},\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want,+got):%s\", diff)\n\t\t\t}\n\t\t})\n",
                      "markdown": "`\t\t\t\t{\"main\", \"main\"},\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want,+got):%s\", diff)\n\t\t\t}\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-v1/ID/GO-2022-0463.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 415,
                  "endLine": 1,
                  "endColumn": 424,
                  "snippet": {
                    "text": "\"aliases\":[\"CVE-2022-31259\",\"GHSA-qx32-f6g6-fcfr\"],\"details\":\"Routes in the beego HTTP router can match unintended patterns. This overly-broad matching may permit an attacker to bypass access controls.\\n\\nFor example, the pattern \\\"/a/b/:name\\\" can match the URL \\\"/a.xml/b/\\\". This may bypass access control applied to the prefix \\\"/a/\\\".\",\"affected\":[{\"package\":{\"name\":\"github.com/astaxie/beego\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/astaxie/beego\",\"symbols\":[\"App.Run\",\"ControllerRegister.FindPolicy\",\"ControllerR",
                    "rendered": {
                      "text": "\"aliases\":[\"CVE-2022-31259\",\"GHSA-qx32-f6g6-fcfr\"],\"details\":\"Routes in the beego HTTP router can match unintended patterns. This overly-broad matching may permit an attacker to bypass access controls.\\n\\nFor example, the pattern \\\"/a/b/:name\\\" can match the URL \\\"/a.xml/b/\\\". This may bypass access control applied to the prefix \\\"/a/\\\".\",\"affected\":[{\"package\":{\"name\":\"github.com/astaxie/beego\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/astaxie/beego\",\"symbols\":[\"App.Run\",\"ControllerRegister.FindPolicy\",\"ControllerR",
                      "markdown": "`\"aliases\":[\"CVE-2022-31259\",\"GHSA-qx32-f6g6-fcfr\"],\"details\":\"Routes in the beego HTTP router can match unintended patterns. This overly-broad matching may permit an attacker to bypass access controls.\\n\\nFor example, the pattern \\\"/a/b/:name\\\" can match the URL \\\"/a.xml/b/\\\". This may bypass access control applied to the prefix \\\"/a/\\\".\",\"affected\":[{\"package\":{\"name\":\"github.com/astaxie/beego\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/astaxie/beego\",\"symbols\":[\"App.Run\",\"ControllerRegister.FindPolicy\",\"ControllerR`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/source_test.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 16,
                  "endLine": 29,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t}\n\tfor _, tc := range tcs {\n\t\ttest := func(t *testing.T, s source) {\n\t\t\tgot, err := s.get(context.Background(), tc.endpoint)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t}\n\tfor _, tc := range tcs {\n\t\ttest := func(t *testing.T, s source) {\n\t\t\tgot, err := s.get(context.Background(), tc.endpoint)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n",
                      "markdown": "`\t}\n\tfor _, tc := range tcs {\n\t\ttest := func(t *testing.T, s source) {\n\t\t\tgot, err := s.get(context.Background(), tc.endpoint)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/extract/vuln.blob"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 5180,
                  "endLine": 2,
                  "endColumn": 5186,
                  "snippet": {
                    "text": "{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint32\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint64\"},{\"pkg\":\"encoding/binary\",\"name\":\"init\"},{\"pkg\":\"encoding/json\",\"name\":\"HTMLEscape\"},{\"pkg\":\"encoding/json\",\"name\":\"InvalidUnmarshalError.Error\"},{\"pkg\":\"encoding/json\",\"name",
                    "rendered": {
                      "text": "{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint32\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint64\"},{\"pkg\":\"encoding/binary\",\"name\":\"init\"},{\"pkg\":\"encoding/json\",\"name\":\"HTMLEscape\"},{\"pkg\":\"encoding/json\",\"name\":\"InvalidUnmarshalError.Error\"},{\"pkg\":\"encoding/json\",\"name",
                      "markdown": "`{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint32\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint64\"},{\"pkg\":\"encoding/binary\",\"name\":\"init\"},{\"pkg\":\"encoding/json\",\"name\":\"HTMLEscape\"},{\"pkg\":\"encoding/json\",\"name\":\"InvalidUnmarshalError.Error\"},{\"pkg\":\"encoding/json\",\"name`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/extract/vuln.blob"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 5131,
                  "endLine": 2,
                  "endColumn": 5137,
                  "snippet": {
                    "text": "ncoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint32\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint64\"},{\"pkg\":\"encoding/binary\",\"name\":\"init\"},{\"pkg\":\"encoding/json\",\"name\":\"HTMLEscape\"},{\"pkg\":\"encoding/json\",\"name\":\"InvalidUn",
                    "rendered": {
                      "text": "ncoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint32\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint64\"},{\"pkg\":\"encoding/binary\",\"name\":\"init\"},{\"pkg\":\"encoding/json\",\"name\":\"HTMLEscape\"},{\"pkg\":\"encoding/json\",\"name\":\"InvalidUn",
                      "markdown": "`ncoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint32\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint64\"},{\"pkg\":\"encoding/binary\",\"name\":\"init\"},{\"pkg\":\"encoding/json\",\"name\":\"HTMLEscape\"},{\"pkg\":\"encoding/json\",\"name\":\"InvalidUn`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/extract/vuln.blob"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 5082,
                  "endLine": 2,
                  "endColumn": 5088,
                  "snippet": {
                    "text": "/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint32\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint64\"},{\"pkg\":\"encoding/binary\",\"name\":\"init\"},{\"pkg\":\"encoding/json\",\"name\":\"HTML",
                    "rendered": {
                      "text": "/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint32\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint64\"},{\"pkg\":\"encoding/binary\",\"name\":\"init\"},{\"pkg\":\"encoding/json\",\"name\":\"HTML",
                      "markdown": "`/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint32\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint64\"},{\"pkg\":\"encoding/binary\",\"name\":\"init\"},{\"pkg\":\"encoding/json\",\"name\":\"HTML`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/extract/vuln.blob"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 5036,
                  "endLine": 2,
                  "endColumn": 5042,
                  "snippet": {
                    "text": "\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint32\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint64\"},{\"pkg\":\"encoding/binary\",\"nam",
                    "rendered": {
                      "text": "\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint32\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint64\"},{\"pkg\":\"encoding/binary\",\"nam",
                      "markdown": "`\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint32\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint64\"},{\"pkg\":\"encoding/binary\",\"nam`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/extract/vuln.blob"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4990,
                  "endLine": 2,
                  "endColumn": 4996,
                  "snippet": {
                    "text": "\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint32\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEn",
                    "rendered": {
                      "text": "\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint32\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEn",
                      "markdown": "`\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.PutUint32\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEn`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/extract/vuln.blob"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4943,
                  "endLine": 2,
                  "endColumn": 4949,
                  "snippet": {
                    "text": "ing.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.Put",
                    "rendered": {
                      "text": "ing.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.Put",
                      "markdown": "`ing.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},{\"pkg\":\"encoding/binary\",\"name\":\"bigEndian.Put`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/extract/vuln.blob"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4897,
                  "endLine": 2,
                  "endColumn": 4903,
                  "snippet": {
                    "text": "ecode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},",
                    "rendered": {
                      "text": "ecode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},",
                      "markdown": "`ecode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Write\"},{\"pkg\":\"encoding/base64\",\"name\":\"init\"},`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/extract/vuln.blob"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4839,
                  "endLine": 2,
                  "endColumn": 4845,
                  "snippet": {
                    "text": "tError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\"",
                    "rendered": {
                      "text": "tError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\"",
                      "markdown": "`tError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\",\"name\":\"encoder.Close\"},{\"pkg\":\"encoding/base64\",\"name\"`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/extract/vuln.blob"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4783,
                  "endLine": 2,
                  "endColumn": 4789,
                  "snippet": {
                    "text": "htUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\"",
                    "rendered": {
                      "text": "htUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\"",
                      "markdown": "`htUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble64\"},{\"pkg\":\"encoding/base64\"`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/extract/vuln.blob"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4728,
                  "endLine": 2,
                  "endColumn": 4734,
                  "snippet": {
                    "text": ",\"name\":\"trimRightByte\"},{\"pkg\":\"bytes\",\"name\":\"trimRightUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encodin",
                    "rendered": {
                      "text": ",\"name\":\"trimRightByte\"},{\"pkg\":\"bytes\",\"name\":\"trimRightUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encodin",
                      "markdown": "`,\"name\":\"trimRightByte\"},{\"pkg\":\"bytes\",\"name\":\"trimRightUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"encoding/base64\",\"name\":\"assemble32\"},{\"pkg\":\"encodin`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/extract/vuln.blob"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4677,
                  "endLine": 2,
                  "endColumn": 4683,
                  "snippet": {
                    "text": "kg\":\"bytes\",\"name\":\"trimRightASCII\"},{\"pkg\":\"bytes\",\"name\":\"trimRightByte\"},{\"pkg\":\"bytes\",\"name\":\"trimRightUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"en",
                    "rendered": {
                      "text": "kg\":\"bytes\",\"name\":\"trimRightASCII\"},{\"pkg\":\"bytes\",\"name\":\"trimRightByte\"},{\"pkg\":\"bytes\",\"name\":\"trimRightUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"en",
                      "markdown": "`kg\":\"bytes\",\"name\":\"trimRightASCII\"},{\"pkg\":\"bytes\",\"name\":\"trimRightByte\"},{\"pkg\":\"bytes\",\"name\":\"trimRightUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoding\"},{\"pkg\":\"en`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/extract/vuln.blob"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4622,
                  "endLine": 2,
                  "endColumn": 4628,
                  "snippet": {
                    "text": "stIndexFunc\"},{\"pkg\":\"bytes\",\"name\":\"makeASCIISet\"},{\"pkg\":\"bytes\",\"name\":\"trimRightASCII\"},{\"pkg\":\"bytes\",\"name\":\"trimRightByte\"},{\"pkg\":\"bytes\",\"name\":\"trimRightUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"",
                    "rendered": {
                      "text": "stIndexFunc\"},{\"pkg\":\"bytes\",\"name\":\"makeASCIISet\"},{\"pkg\":\"bytes\",\"name\":\"trimRightASCII\"},{\"pkg\":\"bytes\",\"name\":\"trimRightByte\"},{\"pkg\":\"bytes\",\"name\":\"trimRightUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"",
                      "markdown": "`stIndexFunc\"},{\"pkg\":\"bytes\",\"name\":\"makeASCIISet\"},{\"pkg\":\"bytes\",\"name\":\"trimRightASCII\"},{\"pkg\":\"bytes\",\"name\":\"trimRightByte\"},{\"pkg\":\"bytes\",\"name\":\"trimRightUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum\"},{\"pkg\":\"encoding/base64\",\"name\":\"NewEncoder\"},{\"`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/extract/vuln.blob"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4571,
                  "endLine": 2,
                  "endColumn": 4577,
                  "snippet": {
                    "text": "g\":\"bytes\",\"name\":\"init\"},{\"pkg\":\"bytes\",\"name\":\"lastIndexFunc\"},{\"pkg\":\"bytes\",\"name\":\"makeASCIISet\"},{\"pkg\":\"bytes\",\"name\":\"trimRightASCII\"},{\"pkg\":\"bytes\",\"name\":\"trimRightByte\"},{\"pkg\":\"bytes\",\"name\":\"trimRightUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum",
                    "rendered": {
                      "text": "g\":\"bytes\",\"name\":\"init\"},{\"pkg\":\"bytes\",\"name\":\"lastIndexFunc\"},{\"pkg\":\"bytes\",\"name\":\"makeASCIISet\"},{\"pkg\":\"bytes\",\"name\":\"trimRightASCII\"},{\"pkg\":\"bytes\",\"name\":\"trimRightByte\"},{\"pkg\":\"bytes\",\"name\":\"trimRightUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum",
                      "markdown": "`g\":\"bytes\",\"name\":\"init\"},{\"pkg\":\"bytes\",\"name\":\"lastIndexFunc\"},{\"pkg\":\"bytes\",\"name\":\"makeASCIISet\"},{\"pkg\":\"bytes\",\"name\":\"trimRightASCII\"},{\"pkg\":\"bytes\",\"name\":\"trimRightByte\"},{\"pkg\":\"bytes\",\"name\":\"trimRightUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPadding\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.decodeQuantum`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/extract/vuln.blob"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4512,
                  "endLine": 2,
                  "endColumn": 4518,
                  "snippet": {
                    "text": ":\"growSlice.func1\"},{\"pkg\":\"bytes\",\"name\":\"indexFunc\"},{\"pkg\":\"bytes\",\"name\":\"init\"},{\"pkg\":\"bytes\",\"name\":\"lastIndexFunc\"},{\"pkg\":\"bytes\",\"name\":\"makeASCIISet\"},{\"pkg\":\"bytes\",\"name\":\"trimRightASCII\"},{\"pkg\":\"bytes\",\"name\":\"trimRightByte\"},{\"pkg\":\"bytes\",\"name\":\"trimRightUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPaddin",
                    "rendered": {
                      "text": ":\"growSlice.func1\"},{\"pkg\":\"bytes\",\"name\":\"indexFunc\"},{\"pkg\":\"bytes\",\"name\":\"init\"},{\"pkg\":\"bytes\",\"name\":\"lastIndexFunc\"},{\"pkg\":\"bytes\",\"name\":\"makeASCIISet\"},{\"pkg\":\"bytes\",\"name\":\"trimRightASCII\"},{\"pkg\":\"bytes\",\"name\":\"trimRightByte\"},{\"pkg\":\"bytes\",\"name\":\"trimRightUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPaddin",
                      "markdown": "`:\"growSlice.func1\"},{\"pkg\":\"bytes\",\"name\":\"indexFunc\"},{\"pkg\":\"bytes\",\"name\":\"init\"},{\"pkg\":\"bytes\",\"name\":\"lastIndexFunc\"},{\"pkg\":\"bytes\",\"name\":\"makeASCIISet\"},{\"pkg\":\"bytes\",\"name\":\"trimRightASCII\"},{\"pkg\":\"bytes\",\"name\":\"trimRightByte\"},{\"pkg\":\"bytes\",\"name\":\"trimRightUnicode\"},{\"pkg\":\"encoding/base64\",\"name\":\"CorruptInputError.Error\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Decode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.DecodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.Encode\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.EncodedLen\"},{\"pkg\":\"encoding/base64\",\"name\":\"Encoding.WithPaddin`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/extract/binary_extract.ct"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 6,
                  "endLine": 32,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Vulnerability #3: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                    "rendered": {
                      "text": "Vulnerability #3: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                      "markdown": "`Vulnerability #3: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/extract/binary_extract.ct"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 71,
                  "endLine": 21,
                  "snippet": {
                    "text": "Vulnerability #2: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                    "rendered": {
                      "text": "Vulnerability #2: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                      "markdown": "`Vulnerability #2: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/strip/vulndb-v1/ID/GO-2021-0113.json.gz/GO-2021-0113.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 397,
                  "endLine": 1,
                  "endColumn": 406,
                  "snippet": {
                    "text": "-10-06T17:51:21Z\",\"aliases\":[\"CVE-2021-38561\",\"GHSA-ppp9-7jff-5vj2\"],\"details\":\"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/language\",\"symbols\":[\"MatchStrings\",\"MustParse\",\"Parse\",\"ParseAcceptLanguage\",\"Compos",
                    "rendered": {
                      "text": "-10-06T17:51:21Z\",\"aliases\":[\"CVE-2021-38561\",\"GHSA-ppp9-7jff-5vj2\"],\"details\":\"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/language\",\"symbols\":[\"MatchStrings\",\"MustParse\",\"Parse\",\"ParseAcceptLanguage\",\"Compos",
                      "markdown": "`-10-06T17:51:21Z\",\"aliases\":[\"CVE-2021-38561\",\"GHSA-ppp9-7jff-5vj2\"],\"details\":\"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/language\",\"symbols\":[\"MatchStrings\",\"MustParse\",\"Parse\",\"ParseAcceptLanguage\",\"Compos`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/strip/vulndb-v1/ID/GO-2020-0015.json.gz/GO-2020-0015.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 539,
                  "endLine": 1,
                  "endColumn": 548,
                  "snippet": {
                    "text": "\"details\":\"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.3\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/encoding/unicode\",\"symbols\":[\"bomOverride.Transform\",\"utf16Decoder.Transform\"]},{\"pat",
                    "rendered": {
                      "text": "\"details\":\"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.3\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/encoding/unicode\",\"symbols\":[\"bomOverride.Transform\",\"utf16Decoder.Transform\"]},{\"pat",
                      "markdown": "`\"details\":\"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.3\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/encoding/unicode\",\"symbols\":[\"bomOverride.Transform\",\"utf16Decoder.Transform\"]},{\"pat`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/strip/vulndb-v1/ID/GO-2020-0015.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 539,
                  "endLine": 1,
                  "endColumn": 548,
                  "snippet": {
                    "text": "\"details\":\"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.3\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/encoding/unicode\",\"symbols\":[\"bomOverride.Transform\",\"utf16Decoder.Transform\"]},{\"pat",
                    "rendered": {
                      "text": "\"details\":\"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.3\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/encoding/unicode\",\"symbols\":[\"bomOverride.Transform\",\"utf16Decoder.Transform\"]},{\"pat",
                      "markdown": "`\"details\":\"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.3\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/encoding/unicode\",\"symbols\":[\"bomOverride.Transform\",\"utf16Decoder.Transform\"]},{\"pat`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/strip/vulndb-v1/ID/GO-2021-0113.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 397,
                  "endLine": 1,
                  "endColumn": 406,
                  "snippet": {
                    "text": "-10-06T17:51:21Z\",\"aliases\":[\"CVE-2021-38561\",\"GHSA-ppp9-7jff-5vj2\"],\"details\":\"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/language\",\"symbols\":[\"MatchStrings\",\"MustParse\",\"Parse\",\"ParseAcceptLanguage\",\"Compos",
                    "rendered": {
                      "text": "-10-06T17:51:21Z\",\"aliases\":[\"CVE-2021-38561\",\"GHSA-ppp9-7jff-5vj2\"],\"details\":\"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/language\",\"symbols\":[\"MatchStrings\",\"MustParse\",\"Parse\",\"ParseAcceptLanguage\",\"Compos",
                      "markdown": "`-10-06T17:51:21Z\",\"aliases\":[\"CVE-2021-38561\",\"GHSA-ppp9-7jff-5vj2\"],\"details\":\"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/language\",\"symbols\":[\"MatchStrings\",\"MustParse\",\"Parse\",\"ParseAcceptLanguage\",\"Compos`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/integration/integration_test.sh"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 64,
                  "endLine": 15,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# version of both govulncheck and its vuln dependencies\ndocker build -f Dockerfile -t govulncheck-integration ../../../\n\necho \"Running govulncheck integration tests in the docker image\"\ndocker run govulncheck-integration ./integration_run.sh\n",
                    "rendered": {
                      "text": "# version of both govulncheck and its vuln dependencies\ndocker build -f Dockerfile -t govulncheck-integration ../../../\n\necho \"Running govulncheck integration tests in the docker image\"\ndocker run govulncheck-integration ./integration_run.sh\n",
                      "markdown": "`# version of both govulncheck and its vuln dependencies\ndocker build -f Dockerfile -t govulncheck-integration ../../../\n\necho \"Running govulncheck integration tests in the docker image\"\ndocker run govulncheck-integration ./integration_run.sh\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/integration/integration_test.sh"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 50,
                  "endLine": 14,
                  "endColumn": 58,
                  "snippet": {
                    "text": "# version of both govulncheck and its vuln dependencies\ndocker build -f Dockerfile -t govulncheck-integration ../../../\n\necho \"Running govulncheck integration tests in the docker image\"\ndocker run govulncheck-integration ./integration_run.sh\n",
                    "rendered": {
                      "text": "# version of both govulncheck and its vuln dependencies\ndocker build -f Dockerfile -t govulncheck-integration ../../../\n\necho \"Running govulncheck integration tests in the docker image\"\ndocker run govulncheck-integration ./integration_run.sh\n",
                      "markdown": "`# version of both govulncheck and its vuln dependencies\ndocker build -f Dockerfile -t govulncheck-integration ../../../\n\necho \"Running govulncheck integration tests in the docker image\"\ndocker run govulncheck-integration ./integration_run.sh\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/integration/integration_test.sh"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 55,
                  "endLine": 12,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\necho \"Building govulncheck docker image\"\n# The building context is vuln/ so we can have the current\n# version of both govulncheck and its vuln dependencies\ndocker build -f Dockerfile -t govulncheck-integration ../../../\n\necho \"Running govulncheck integration tests in the docker image\"\ndocker run govulncheck-integration ./integration_run.sh\n",
                    "rendered": {
                      "text": "\necho \"Building govulncheck docker image\"\n# The building context is vuln/ so we can have the current\n# version of both govulncheck and its vuln dependencies\ndocker build -f Dockerfile -t govulncheck-integration ../../../\n\necho \"Running govulncheck integration tests in the docker image\"\ndocker run govulncheck-integration ./integration_run.sh\n",
                      "markdown": "`\necho \"Building govulncheck docker image\"\n# The building context is vuln/ so we can have the current\n# version of both govulncheck and its vuln dependencies\ndocker build -f Dockerfile -t govulncheck-integration ../../../\n\necho \"Running govulncheck integration tests in the docker image\"\ndocker run govulncheck-integration ./integration_run.sh\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/integration/integration_test.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 26,
                  "endLine": 9,
                  "endColumn": 34,
                  "snippet": {
                    "text": "# Runs the integration tests for whole program analysis.\n# Assumes this is run from vuln/cmd/govulncheck/integration\n\necho \"Building govulncheck docker image\"\n# The building context is vuln/ so we can have the current\n# version of both govulncheck and its vuln dependencies\ndocker build -f Dockerfile -t govulncheck-integration ../../../\n",
                    "rendered": {
                      "text": "# Runs the integration tests for whole program analysis.\n# Assumes this is run from vuln/cmd/govulncheck/integration\n\necho \"Building govulncheck docker image\"\n# The building context is vuln/ so we can have the current\n# version of both govulncheck and its vuln dependencies\ndocker build -f Dockerfile -t govulncheck-integration ../../../\n",
                      "markdown": "`# Runs the integration tests for whole program analysis.\n# Assumes this is run from vuln/cmd/govulncheck/integration\n\necho \"Building govulncheck docker image\"\n# The building context is vuln/ so we can have the current\n# version of both govulncheck and its vuln dependencies\ndocker build -f Dockerfile -t govulncheck-integration ../../../\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/main.go"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n\tctx := context.Background()\n\n\tcmd := scan.Command(ctx, os.Args[1:]...)\n\terr := cmd.Start()\n\tif err == nil {\n\t\terr = cmd.Wait()\n",
                    "rendered": {
                      "text": "\n\tctx := context.Background()\n\n\tcmd := scan.Command(ctx, os.Args[1:]...)\n\terr := cmd.Start()\n\tif err == nil {\n\t\terr = cmd.Wait()\n",
                      "markdown": "`\n\tctx := context.Background()\n\n\tcmd := scan.Command(ctx, os.Args[1:]...)\n\terr := cmd.Start()\n\tif err == nil {\n\t\terr = cmd.Wait()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/main_test.go"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 3,
                  "endLine": 219,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\treturn nil, nil\n\t}\n\n\tif update {\n\t\tts.Run(t, true)\n\t\treturn\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn nil, nil\n\t}\n\n\tif update {\n\t\tts.Run(t, true)\n\t\treturn\n\t}\n",
                      "markdown": "`\t\treturn nil, nil\n\t}\n\n\tif update {\n\t\tts.Run(t, true)\n\t\treturn\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/main_test.go"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 1,
                  "endLine": 141,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\tnewargs := append([]string{\"-db\", vulndbDir}, args...)\n\n\t\tbuf := &bytes.Buffer{}\n\t\tcmd := scan.Command(context.Background(), newargs...)\n\t\tcmd.Stdout = buf\n\t\tcmd.Stderr = buf\n\t\tif inputFile != \"\" {\n",
                    "rendered": {
                      "text": "\t\tnewargs := append([]string{\"-db\", vulndbDir}, args...)\n\n\t\tbuf := &bytes.Buffer{}\n\t\tcmd := scan.Command(context.Background(), newargs...)\n\t\tcmd.Stdout = buf\n\t\tcmd.Stderr = buf\n\t\tif inputFile != \"\" {\n",
                      "markdown": "`\t\tnewargs := append([]string{\"-db\", vulndbDir}, args...)\n\n\t\tbuf := &bytes.Buffer{}\n\t\tcmd := scan.Command(context.Background(), newargs...)\n\t\tcmd.Stdout = buf\n\t\tcmd.Stderr = buf\n\t\tif inputFile != \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/main_test.go"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 86,
                  "endLine": 120,
                  "endColumn": 94,
                  "snippet": {
                    "text": "// testSuite creates a cmdtest suite from testfilesDir. It also defines\n// a govulncheck command on the suite that runs govulncheck against\n// vulnerability database available at vulndbDir.\nfunc runTestSuite(t *testing.T, testfilesDir string, vulndbDir string, fixups []fixup, update bool) {\n\tparallelLimiterInit.Do(func() {\n\t\tlimit := (runtime.GOMAXPROCS(0) + 3) / 4\n\t\tif limit > 2 && unsafe.Sizeof(uintptr(0)) < 8 {\n",
                    "rendered": {
                      "text": "// testSuite creates a cmdtest suite from testfilesDir. It also defines\n// a govulncheck command on the suite that runs govulncheck against\n// vulnerability database available at vulndbDir.\nfunc runTestSuite(t *testing.T, testfilesDir string, vulndbDir string, fixups []fixup, update bool) {\n\tparallelLimiterInit.Do(func() {\n\t\tlimit := (runtime.GOMAXPROCS(0) + 3) / 4\n\t\tif limit > 2 && unsafe.Sizeof(uintptr(0)) < 8 {\n",
                      "markdown": "`// testSuite creates a cmdtest suite from testfilesDir. It also defines\n// a govulncheck command on the suite that runs govulncheck against\n// vulnerability database available at vulndbDir.\nfunc runTestSuite(t *testing.T, testfilesDir string, vulndbDir string, fixups []fixup, update bool) {\n\tparallelLimiterInit.Do(func() {\n\t\tlimit := (runtime.GOMAXPROCS(0) + 3) / 4\n\t\tif limit > 2 && unsafe.Sizeof(uintptr(0)) < 8 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/main_test.go"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 3,
                  "endLine": 27,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\"golang.org/x/vuln/scan\"\n)\n\nvar update = flag.Bool(\"update\", false, \"update test files with results\")\n\nfunc TestCommand(t *testing.T) {\n\tif testing.Short() {\n",
                    "rendered": {
                      "text": "\t\"golang.org/x/vuln/scan\"\n)\n\nvar update = flag.Bool(\"update\", false, \"update test files with results\")\n\nfunc TestCommand(t *testing.T) {\n\tif testing.Short() {\n",
                      "markdown": "`\t\"golang.org/x/vuln/scan\"\n)\n\nvar update = flag.Bool(\"update\", false, \"update test files with results\")\n\nfunc TestCommand(t *testing.T) {\n\tif testing.Short() {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/main_test.go"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 33,
                  "endLine": 213,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t\t}\n\t\twant := string(file)\n\n\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\treturn nil, &cmdtest.ExitCodeErr{Msg: \"govulncheck output not matching the file contents:\\n\" + diff, Code: 1}\n\t\t}\n\t\treturn nil, nil\n",
                    "rendered": {
                      "text": "\t\t}\n\t\twant := string(file)\n\n\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\treturn nil, &cmdtest.ExitCodeErr{Msg: \"govulncheck output not matching the file contents:\\n\" + diff, Code: 1}\n\t\t}\n\t\treturn nil, nil\n",
                      "markdown": "`\t\t}\n\t\twant := string(file)\n\n\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\treturn nil, &cmdtest.ExitCodeErr{Msg: \"govulncheck output not matching the file contents:\\n\" + diff, Code: 1}\n\t\t}\n\t\treturn nil, nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/main_test.go"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 4,
                  "endLine": 213,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\t}\n\t\twant := string(file)\n\n\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\treturn nil, &cmdtest.ExitCodeErr{Msg: \"govulncheck output not matching the file contents:\\n\" + diff, Code: 1}\n\t\t}\n\t\treturn nil, nil\n",
                    "rendered": {
                      "text": "\t\t}\n\t\twant := string(file)\n\n\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\treturn nil, &cmdtest.ExitCodeErr{Msg: \"govulncheck output not matching the file contents:\\n\" + diff, Code: 1}\n\t\t}\n\t\treturn nil, nil\n",
                      "markdown": "`\t\t}\n\t\twant := string(file)\n\n\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\treturn nil, &cmdtest.ExitCodeErr{Msg: \"govulncheck output not matching the file contents:\\n\" + diff, Code: 1}\n\t\t}\n\t\treturn nil, nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/main_test.go"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 12,
                  "endLine": 171,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t\t}\n\t\tsorted := buf\n\t\tif err == nil && isJSONMode(args) {\n\t\t\t// parse, sort and reprint the output for test stability\n\t\t\tgather := test.NewMockHandler()\n\t\t\tif err := govulncheck.HandleJSON(buf, gather); err != nil {\n\t\t\t\treturn nil, err\n",
                    "rendered": {
                      "text": "\t\t}\n\t\tsorted := buf\n\t\tif err == nil && isJSONMode(args) {\n\t\t\t// parse, sort and reprint the output for test stability\n\t\t\tgather := test.NewMockHandler()\n\t\t\tif err := govulncheck.HandleJSON(buf, gather); err != nil {\n\t\t\t\treturn nil, err\n",
                      "markdown": "`\t\t}\n\t\tsorted := buf\n\t\tif err == nil && isJSONMode(args) {\n\t\t\t// parse, sort and reprint the output for test stability\n\t\t\tgather := test.NewMockHandler()\n\t\t\tif err := govulncheck.HandleJSON(buf, gather); err != nil {\n\t\t\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/emit.go"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 7,
                  "endLine": 19,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n// emitOSVs emits all OSV vuln entries in modVulns to handler.\nfunc emitOSVs(handler govulncheck.Handler, modVulns []*ModVulns) error {\n\tfor _, mv := range modVulns {\n\t\tfor _, v := range mv.Vulns {\n\t\t\tif err := handler.OSV(v); err != nil {\n\t\t\t\treturn err\n",
                    "rendered": {
                      "text": "\n// emitOSVs emits all OSV vuln entries in modVulns to handler.\nfunc emitOSVs(handler govulncheck.Handler, modVulns []*ModVulns) error {\n\tfor _, mv := range modVulns {\n\t\tfor _, v := range mv.Vulns {\n\t\t\tif err := handler.OSV(v); err != nil {\n\t\t\t\treturn err\n",
                      "markdown": "`\n// emitOSVs emits all OSV vuln entries in modVulns to handler.\nfunc emitOSVs(handler govulncheck.Handler, modVulns []*ModVulns) error {\n\tfor _, mv := range modVulns {\n\t\tfor _, v := range mv.Vulns {\n\t\t\tif err := handler.OSV(v); err != nil {\n\t\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/packages.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 34,
                  "endLine": 66,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t}\n\n\tvar visit func(*packages.Package, bool)\n\tvisit = func(p *packages.Package, top bool) {\n\t\tpath := p.PkgPath\n\t\tif _, ok := depPkgs[path]; ok {\n\t\t\treturn\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar visit func(*packages.Package, bool)\n\tvisit = func(p *packages.Package, top bool) {\n\t\tpath := p.PkgPath\n\t\tif _, ok := depPkgs[path]; ok {\n\t\t\treturn\n",
                      "markdown": "`\t}\n\n\tvar visit func(*packages.Package, bool)\n\tvisit = func(p *packages.Package, top bool) {\n\t\tpath := p.PkgPath\n\t\tif _, ok := depPkgs[path]; ok {\n\t\t\treturn\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/vulncheck_test.go"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 32,
                  "endLine": 398,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n",
                      "markdown": "`\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/vulncheck_test.go"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 3,
                  "endLine": 398,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n",
                      "markdown": "`\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/vulncheck_test.go"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 32,
                  "endLine": 334,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n",
                      "markdown": "`\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/vulncheck_test.go"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 3,
                  "endLine": 334,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n",
                      "markdown": "`\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/vulncheck_test.go"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 32,
                  "endLine": 278,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n",
                      "markdown": "`\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/vulncheck_test.go"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 3,
                  "endLine": 278,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n",
                      "markdown": "`\t\t}}},\n\t}\n\n\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/vulncheck_test.go"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 5,
                  "endLine": 209,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\tgot := affectingVulnerabilities(mv, \"linux\", \"amd64\")\n\tif diff := cmp.Diff(want, got, cmp.Exporter(func(t reflect.Type) bool {\n\t\treturn reflect.TypeOf(affectingVulns{}) == t || reflect.TypeOf(ModVulns{}) == t\n\t})); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n",
                    "rendered": {
                      "text": "\tgot := affectingVulnerabilities(mv, \"linux\", \"amd64\")\n\tif diff := cmp.Diff(want, got, cmp.Exporter(func(t reflect.Type) bool {\n\t\treturn reflect.TypeOf(affectingVulns{}) == t || reflect.TypeOf(ModVulns{}) == t\n\t})); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n",
                      "markdown": "`\tgot := affectingVulnerabilities(mv, \"linux\", \"amd64\")\n\tif diff := cmp.Diff(want, got, cmp.Exporter(func(t reflect.Type) bool {\n\t\treturn reflect.TypeOf(affectingVulns{}) == t || reflect.TypeOf(ModVulns{}) == t\n\t})); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/vulncheck_test.go"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 3,
                  "endLine": 207,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t}\n\n\tgot := affectingVulnerabilities(mv, \"linux\", \"amd64\")\n\tif diff := cmp.Diff(want, got, cmp.Exporter(func(t reflect.Type) bool {\n\t\treturn reflect.TypeOf(affectingVulns{}) == t || reflect.TypeOf(ModVulns{}) == t\n\t})); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n",
                    "rendered": {
                      "text": "\t}\n\n\tgot := affectingVulnerabilities(mv, \"linux\", \"amd64\")\n\tif diff := cmp.Diff(want, got, cmp.Exporter(func(t reflect.Type) bool {\n\t\treturn reflect.TypeOf(affectingVulns{}) == t || reflect.TypeOf(ModVulns{}) == t\n\t})); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n",
                      "markdown": "`\t}\n\n\tgot := affectingVulnerabilities(mv, \"linux\", \"amd64\")\n\tif diff := cmp.Diff(want, got, cmp.Exporter(func(t reflect.Type) bool {\n\t\treturn reflect.TypeOf(affectingVulns{}) == t || reflect.TypeOf(ModVulns{}) == t\n\t})); diff != \"\" {\n\t\tt.Errorf(\"(-want,+got):\\n%s\", diff)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/vulncheck/vulncheck_test.go"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nfunc TestFilterVulns(t *testing.T) {\n\tpast := time.Now().Add(-3 * time.Hour)\n\tmv := []*ModVulns{\n\t\t{\n\t\t\tModule: &packages.Module{\n\t\t\t\tPath:    \"example.mod/a\",\n",
                    "rendered": {
                      "text": "\nfunc TestFilterVulns(t *testing.T) {\n\tpast := time.Now().Add(-3 * time.Hour)\n\tmv := []*ModVulns{\n\t\t{\n\t\t\tModule: &packages.Module{\n\t\t\t\tPath:    \"example.mod/a\",\n",
                      "markdown": "`\nfunc TestFilterVulns(t *testing.T) {\n\tpast := time.Now().Add(-3 * time.Hour)\n\tmv := []*ModVulns{\n\t\t{\n\t\t\tModule: &packages.Module{\n\t\t\t\tPath:    \"example.mod/a\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/README.md"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 26,
                  "endLine": 39,
                  "endColumn": 30,
                  "snippet": {
                    "text": "Unless otherwise noted, the Go source files are distributed under the BSD-style\nlicense found in the LICENSE file.\n\nDatabase entries available at https://vuln.go.dev are distributed under the\nterms of the [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0/) license.\n",
                    "rendered": {
                      "text": "Unless otherwise noted, the Go source files are distributed under the BSD-style\nlicense found in the LICENSE file.\n\nDatabase entries available at https://vuln.go.dev are distributed under the\nterms of the [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0/) license.\n",
                      "markdown": "`Unless otherwise noted, the Go source files are distributed under the BSD-style\nlicense found in the LICENSE file.\n\nDatabase entries available at https://vuln.go.dev are distributed under the\nterms of the [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0/) license.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/README.md"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 49,
                  "endLine": 32,
                  "snippet": {
                    "text": "\n## Privacy Policy\n\nThe privacy policy for `govulncheck` can be found at\n[https://vuln.go.dev/privacy](https://vuln.go.dev/privacy).\n\n## License\n\n",
                    "rendered": {
                      "text": "\n## Privacy Policy\n\nThe privacy policy for `govulncheck` can be found at\n[https://vuln.go.dev/privacy](https://vuln.go.dev/privacy).\n\n## License\n\n",
                      "markdown": "`\n## Privacy Policy\n\nThe privacy policy for `govulncheck` can be found at\n[https://vuln.go.dev/privacy](https://vuln.go.dev/privacy).\n\n## License\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/README.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 26,
                  "endLine": 27,
                  "snippet": {
                    "text": "See [the govulncheck tutorial](https://go.dev/doc/tutorial/govulncheck) to get\nstarted, and [https://go.dev/security/vuln](https://go.dev/security/vuln) for\nmore information about Go's support for vulnerability management. The API\ndocumentation can be found at\n[https://pkg.go.dev/golang.org/x/vuln/scan](https://pkg.go.dev/golang.org/x/vuln/scan).\n\n## Privacy Policy\n\n",
                    "rendered": {
                      "text": "See [the govulncheck tutorial](https://go.dev/doc/tutorial/govulncheck) to get\nstarted, and [https://go.dev/security/vuln](https://go.dev/security/vuln) for\nmore information about Go's support for vulnerability management. The API\ndocumentation can be found at\n[https://pkg.go.dev/golang.org/x/vuln/scan](https://pkg.go.dev/golang.org/x/vuln/scan).\n\n## Privacy Policy\n\n",
                      "markdown": "`See [the govulncheck tutorial](https://go.dev/doc/tutorial/govulncheck) to get\nstarted, and [https://go.dev/security/vuln](https://go.dev/security/vuln) for\nmore information about Go's support for vulnerability management. The API\ndocumentation can be found at\n[https://pkg.go.dev/golang.org/x/vuln/scan](https://pkg.go.dev/golang.org/x/vuln/scan).\n\n## Privacy Policy\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/vulndb-v1/ID/GO-2021-0113.json.gz/GO-2021-0113.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 397,
                  "endLine": 1,
                  "endColumn": 406,
                  "snippet": {
                    "text": "-10-06T17:51:21Z\",\"aliases\":[\"CVE-2021-38561\",\"GHSA-ppp9-7jff-5vj2\"],\"details\":\"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/language\",\"symbols\":[\"MatchStrings\",\"MustParse\",\"Parse\",\"ParseAcceptLanguage\"]}]}}],\"",
                    "rendered": {
                      "text": "-10-06T17:51:21Z\",\"aliases\":[\"CVE-2021-38561\",\"GHSA-ppp9-7jff-5vj2\"],\"details\":\"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/language\",\"symbols\":[\"MatchStrings\",\"MustParse\",\"Parse\",\"ParseAcceptLanguage\"]}]}}],\"",
                      "markdown": "`-10-06T17:51:21Z\",\"aliases\":[\"CVE-2021-38561\",\"GHSA-ppp9-7jff-5vj2\"],\"details\":\"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/language\",\"symbols\":[\"MatchStrings\",\"MustParse\",\"Parse\",\"ParseAcceptLanguage\"]}]}}],\"`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/vulndb-v1/ID/GO-2021-0059.json.gz/GO-2021-0059.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 331,
                  "endLine": 1,
                  "endColumn": 340,
                  "snippet": {
                    "text": "\"GO-2021-0059\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2020-35380\",\"GHSA-w942-gw6m-p62c\"],\"details\":\"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"github.com/tidwall/gjson\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.6.4\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/tidwall/gjson\",\"symbols\":[\"Get\",\"GetBytes\",\"GetMany\",\"GetManyBytes\",\"Result.Array\",\"R",
                    "rendered": {
                      "text": "\"GO-2021-0059\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2020-35380\",\"GHSA-w942-gw6m-p62c\"],\"details\":\"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"github.com/tidwall/gjson\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.6.4\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/tidwall/gjson\",\"symbols\":[\"Get\",\"GetBytes\",\"GetMany\",\"GetManyBytes\",\"Result.Array\",\"R",
                      "markdown": "`\"GO-2021-0059\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2020-35380\",\"GHSA-w942-gw6m-p62c\"],\"details\":\"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"github.com/tidwall/gjson\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.6.4\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/tidwall/gjson\",\"symbols\":[\"Get\",\"GetBytes\",\"GetMany\",\"GetManyBytes\",\"Result.Array\",\"R`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/vulndb-v1/ID/GO-2021-0054.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 331,
                  "endLine": 1,
                  "endColumn": 340,
                  "snippet": {
                    "text": "\"GO-2021-0054\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2020-36067\",\"GHSA-p64j-r5f4-pwwx\"],\"details\":\"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"github.com/tidwall/gjson\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.6.6\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/tidwall/gjson\",\"symbols\":[\"Result.ForEach\",\"unwrap\"]}]}}],\"references\":[{\"type\":\"FIX\"",
                    "rendered": {
                      "text": "\"GO-2021-0054\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2020-36067\",\"GHSA-p64j-r5f4-pwwx\"],\"details\":\"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"github.com/tidwall/gjson\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.6.6\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/tidwall/gjson\",\"symbols\":[\"Result.ForEach\",\"unwrap\"]}]}}],\"references\":[{\"type\":\"FIX\"",
                      "markdown": "`\"GO-2021-0054\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2020-36067\",\"GHSA-p64j-r5f4-pwwx\"],\"details\":\"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"github.com/tidwall/gjson\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.6.6\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"github.com/tidwall/gjson\",\"symbols\":[\"Result.ForEach\",\"unwrap\"]}]}}],\"references\":[{\"type\":\"FIX\"`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/vulndb-v1/ID/GO-2020-0015.json.gz/GO-2020-0015.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 539,
                  "endLine": 1,
                  "endColumn": 548,
                  "snippet": {
                    "text": "\"details\":\"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.3\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/encoding/unicode\",\"symbols\":[\"bomOverride.Transform\",\"utf16Decoder.Transform\"]},{\"pat",
                    "rendered": {
                      "text": "\"details\":\"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.3\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/encoding/unicode\",\"symbols\":[\"bomOverride.Transform\",\"utf16Decoder.Transform\"]},{\"pat",
                      "markdown": "`\"details\":\"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\"affected\":[{\"package\":{\"name\":\"golang.org/x/text\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"0.3.3\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"golang.org/x/text/encoding/unicode\",\"symbols\":[\"bomOverride.Transform\",\"utf16Decoder.Transform\"]},{\"pat`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/doc/vulndb.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n## Accessing the database\n\nThe Go vulnerability database is rooted at\n`https://vuln.go.dev` and provides data as JSON.\n\nDo not rely on the contents of the x/vulndb repository. The YAML files in that\nrepository are maintained using an internal format that is subject to change\n",
                    "rendered": {
                      "text": "\n## Accessing the database\n\nThe Go vulnerability database is rooted at\n`https://vuln.go.dev` and provides data as JSON.\n\nDo not rely on the contents of the x/vulndb repository. The YAML files in that\nrepository are maintained using an internal format that is subject to change\n",
                      "markdown": "`\n## Accessing the database\n\nThe Go vulnerability database is rooted at\n`https://vuln.go.dev` and provides data as JSON.\n\nDo not rely on the contents of the x/vulndb repository. The YAML files in that\nrepository are maintained using an internal format that is subject to change\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/scan/scan.go"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 4,
                  "endLine": 25,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n// Cmd represents an external govulncheck command being prepared or run,\n// similar to exec.Cmd.\ntype Cmd struct {\n\t// Stdin specifies the standard input. If provided, it is expected to be\n\t// the output of govulncheck -json.\n\tStdin io.Reader\n",
                    "rendered": {
                      "text": "\n// Cmd represents an external govulncheck command being prepared or run,\n// similar to exec.Cmd.\ntype Cmd struct {\n\t// Stdin specifies the standard input. If provided, it is expected to be\n\t// the output of govulncheck -json.\n\tStdin io.Reader\n",
                      "markdown": "`\n// Cmd represents an external govulncheck command being prepared or run,\n// similar to exec.Cmd.\ntype Cmd struct {\n\t// Stdin specifies the standard input. If provided, it is expected to be\n\t// the output of govulncheck -json.\n\tStdin io.Reader\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/scan/scan.go"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t//\n\t//\topt.Env = append(os.Environ(), \"GOOS=plan9\", \"GOARCH=386\")\n\t//\n\tEnv []string\n\n\tctx  context.Context\n\targs []string\n",
                    "rendered": {
                      "text": "\t//\n\t//\topt.Env = append(os.Environ(), \"GOOS=plan9\", \"GOARCH=386\")\n\t//\n\tEnv []string\n\n\tctx  context.Context\n\targs []string\n",
                      "markdown": "`\t//\n\t//\topt.Env = append(os.Environ(), \"GOOS=plan9\", \"GOARCH=386\")\n\t//\n\tEnv []string\n\n\tctx  context.Context\n\targs []string\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/text.go"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 6,
                  "endLine": 312,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\tif len(platforms) > 0 {\n\t\t\th.style(keyStyle, \"    Platforms: \")\n\t\t\tfor ip, p := range platforms {\n\t\t\t\tif ip > 0 {\n\t\t\t\t\th.print(\", \")\n\t\t\t\t}\n\t\t\t\th.print(p)\n",
                    "rendered": {
                      "text": "\t\tif len(platforms) > 0 {\n\t\t\th.style(keyStyle, \"    Platforms: \")\n\t\t\tfor ip, p := range platforms {\n\t\t\t\tif ip > 0 {\n\t\t\t\t\th.print(\", \")\n\t\t\t\t}\n\t\t\t\th.print(p)\n",
                      "markdown": "`\t\tif len(platforms) > 0 {\n\t\t\th.style(keyStyle, \"    Platforms: \")\n\t\t\tfor ip, p := range platforms {\n\t\t\t\tif ip > 0 {\n\t\t\t\t\th.print(\", \")\n\t\t\t\t}\n\t\t\t\th.print(p)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/template_test.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 37,
                  "endLine": 58,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\tt.Run(tc.want, func(t *testing.T) {\n\t\t\tf := &govulncheck.Finding{Trace: tc.trace}\n\t\t\tgot := compactTrace(f)\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want got+) %s\", diff)\n\t\t\t}\n\t\t})\n",
                    "rendered": {
                      "text": "\t\tt.Run(tc.want, func(t *testing.T) {\n\t\t\tf := &govulncheck.Finding{Trace: tc.trace}\n\t\t\tgot := compactTrace(f)\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want got+) %s\", diff)\n\t\t\t}\n\t\t})\n",
                      "markdown": "`\t\tt.Run(tc.want, func(t *testing.T) {\n\t\t\tf := &govulncheck.Finding{Trace: tc.trace}\n\t\t\tgot := compactTrace(f)\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want got+) %s\", diff)\n\t\t\t}\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/template_test.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 5,
                  "endLine": 58,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\tt.Run(tc.want, func(t *testing.T) {\n\t\t\tf := &govulncheck.Finding{Trace: tc.trace}\n\t\t\tgot := compactTrace(f)\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want got+) %s\", diff)\n\t\t\t}\n\t\t})\n",
                    "rendered": {
                      "text": "\t\tt.Run(tc.want, func(t *testing.T) {\n\t\t\tf := &govulncheck.Finding{Trace: tc.trace}\n\t\t\tgot := compactTrace(f)\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want got+) %s\", diff)\n\t\t\t}\n\t\t})\n",
                      "markdown": "`\t\tt.Run(tc.want, func(t *testing.T) {\n\t\t\tf := &govulncheck.Finding{Trace: tc.trace}\n\t\t\tgot := compactTrace(f)\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want got+) %s\", diff)\n\t\t\t}\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/gosym/symtab.go"
                },
                "region": {
                  "startLine": 774,
                  "startColumn": 21,
                  "endLine": 774,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\tif e.val != nil {\n\t\tmsg += fmt.Sprintf(\" '%v'\", e.val)\n\t}\n\tmsg += fmt.Sprintf(\" at byte %#x\", e.off)\n\treturn msg\n}\n",
                    "rendered": {
                      "text": "\tif e.val != nil {\n\t\tmsg += fmt.Sprintf(\" '%v'\", e.val)\n\t}\n\tmsg += fmt.Sprintf(\" at byte %#x\", e.off)\n\treturn msg\n}\n",
                      "markdown": "`\tif e.val != nil {\n\t\tmsg += fmt.Sprintf(\" '%v'\", e.val)\n\t}\n\tmsg += fmt.Sprintf(\" at byte %#x\", e.off)\n\treturn msg\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/gosym/symtab.go"
                },
                "region": {
                  "startLine": 758,
                  "startColumn": 16,
                  "endLine": 758,
                  "endColumn": 20,
                  "snippet": {
                    "text": "}\n\nfunc (e *UnknownLineError) Error() string {\n\treturn \"no code at \" + e.File + \":\" + strconv.Itoa(e.Line)\n}\n\n// DecodingError represents an error during the decoding of\n",
                    "rendered": {
                      "text": "}\n\nfunc (e *UnknownLineError) Error() string {\n\treturn \"no code at \" + e.File + \":\" + strconv.Itoa(e.Line)\n}\n\n// DecodingError represents an error during the decoding of\n",
                      "markdown": "`}\n\nfunc (e *UnknownLineError) Error() string {\n\treturn \"no code at \" + e.File + \":\" + strconv.Itoa(e.Line)\n}\n\n// DecodingError represents an error during the decoding of\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/gosym/symtab.go"
                },
                "region": {
                  "startLine": 743,
                  "startColumn": 43,
                  "endLine": 743,
                  "endColumn": 49,
                  "snippet": {
                    "text": " * Errors\n */\n\n// UnknownFileError represents a failure to find the specific file in\n// the symbol table.\ntype UnknownFileError string\n\n",
                    "rendered": {
                      "text": " * Errors\n */\n\n// UnknownFileError represents a failure to find the specific file in\n// the symbol table.\ntype UnknownFileError string\n\n",
                      "markdown": "` * Errors\n */\n\n// UnknownFileError represents a failure to find the specific file in\n// the symbol table.\ntype UnknownFileError string\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/traces/traces_test.go"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 36,
                  "endLine": 82,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t} {\n\t\tf := &govulncheck.Finding{Trace: tc.trace}\n\t\tgot := Compact(f)\n\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\tt.Errorf(\"(-want; got+): %s\", diff)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t} {\n\t\tf := &govulncheck.Finding{Trace: tc.trace}\n\t\tgot := Compact(f)\n\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\tt.Errorf(\"(-want; got+): %s\", diff)\n\t\t}\n\t}\n",
                      "markdown": "`\t} {\n\t\tf := &govulncheck.Finding{Trace: tc.trace}\n\t\tgot := Compact(f)\n\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\tt.Errorf(\"(-want; got+): %s\", diff)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/traces/traces_test.go"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 4,
                  "endLine": 82,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t} {\n\t\tf := &govulncheck.Finding{Trace: tc.trace}\n\t\tgot := Compact(f)\n\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\tt.Errorf(\"(-want; got+): %s\", diff)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t} {\n\t\tf := &govulncheck.Finding{Trace: tc.trace}\n\t\tgot := Compact(f)\n\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\tt.Errorf(\"(-want; got+): %s\", diff)\n\t\t}\n\t}\n",
                      "markdown": "`\t} {\n\t\tf := &govulncheck.Finding{Trace: tc.trace}\n\t\tgot := Compact(f)\n\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\tt.Errorf(\"(-want; got+): %s\", diff)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-v1/ID/GO-2021-0068.json.gz/GO-2021-0068.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 195,
                  "endLine": 1,
                  "endColumn": 199,
                  "snippet": {
                    "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},",
                    "rendered": {
                      "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},",
                      "markdown": "`{\"schema_version\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-v1/ID/GO-2021-0068.json.gz/GO-2021-0068.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 312,
                  "endLine": 1,
                  "endColumn": 318,
                  "snippet": {
                    "text": "sion\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},{\"fixed\":\"1.15.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"cmd/go\",\"goos\":[\"windows\"]}]}}],\"references\":[{\"type\":\"",
                    "rendered": {
                      "text": "sion\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},{\"fixed\":\"1.15.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"cmd/go\",\"goos\":[\"windows\"]}]}}],\"references\":[{\"type\":\"",
                      "markdown": "`sion\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},{\"fixed\":\"1.15.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"cmd/go\",\"goos\":[\"windows\"]}]}}],\"references\":[{\"type\":\"`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-v1/ID/GO-2021-0068.json.gz/GO-2021-0068.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 204,
                  "endLine": 1,
                  "endColumn": 210,
                  "snippet": {
                    "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},{\"fixed\":\"1",
                    "rendered": {
                      "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},{\"fixed\":\"1",
                      "markdown": "`{\"schema_version\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},{\"fixed\":\"1`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/all_test.go"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tt.Helper()\n\ttestenv.NeedsGoBuild(t)\n\n\tcmd := exec.Command(\"go\", args...)\n\tif output, err := cmd.CombinedOutput(); err != nil {\n\t\tif ee := (*exec.ExitError)(nil); errors.As(err, &ee) && len(ee.Stderr) > 0 {\n\t\t\tt.Fatalf(\"%v: %v\\n%s\", cmd, err, ee.Stderr)\n",
                    "rendered": {
                      "text": "\tt.Helper()\n\ttestenv.NeedsGoBuild(t)\n\n\tcmd := exec.Command(\"go\", args...)\n\tif output, err := cmd.CombinedOutput(); err != nil {\n\t\tif ee := (*exec.ExitError)(nil); errors.As(err, &ee) && len(ee.Stderr) > 0 {\n\t\t\tt.Fatalf(\"%v: %v\\n%s\", cmd, err, ee.Stderr)\n",
                      "markdown": "`\tt.Helper()\n\ttestenv.NeedsGoBuild(t)\n\n\tcmd := exec.Command(\"go\", args...)\n\tif output, err := cmd.CombinedOutput(); err != nil {\n\t\tif ee := (*exec.ExitError)(nil); errors.As(err, &ee) && len(ee.Stderr) > 0 {\n\t\t\tt.Fatalf(\"%v: %v\\n%s\", cmd, err, ee.Stderr)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/failures/binary_fail.ct"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 29,
                  "endLine": 59,
                  "endColumn": 33,
                  "snippet": {
                    "text": "#####\n# Test of trying to analyze multiple binaries\n$ govulncheck -mode=binary ${common_vuln_binary} ${common_vuln_binary} --> FAIL 2\nonly 1 binary can be analyzed at a time\n\n#####\n# Test of trying to run -mode=binary with -tags flag\n",
                    "rendered": {
                      "text": "#####\n# Test of trying to analyze multiple binaries\n$ govulncheck -mode=binary ${common_vuln_binary} ${common_vuln_binary} --> FAIL 2\nonly 1 binary can be analyzed at a time\n\n#####\n# Test of trying to run -mode=binary with -tags flag\n",
                      "markdown": "`#####\n# Test of trying to analyze multiple binaries\n$ govulncheck -mode=binary ${common_vuln_binary} ${common_vuln_binary} --> FAIL 2\nonly 1 binary can be analyzed at a time\n\n#####\n# Test of trying to run -mode=binary with -tags flag\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/failures/binary_fail.ct"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 34,
                  "endLine": 60,
                  "snippet": {
                    "text": "#####\n# Test of trying to analyze multiple binaries\n$ govulncheck -mode=binary ${common_vuln_binary} ${common_vuln_binary} --> FAIL 2\nonly 1 binary can be analyzed at a time\n\n#####\n# Test of trying to run -mode=binary with -tags flag\n$ govulncheck -tags=foo -mode=binary ${common_vuln_binary} --> FAIL 2\n",
                    "rendered": {
                      "text": "#####\n# Test of trying to analyze multiple binaries\n$ govulncheck -mode=binary ${common_vuln_binary} ${common_vuln_binary} --> FAIL 2\nonly 1 binary can be analyzed at a time\n\n#####\n# Test of trying to run -mode=binary with -tags flag\n$ govulncheck -tags=foo -mode=binary ${common_vuln_binary} --> FAIL 2\n",
                      "markdown": "`#####\n# Test of trying to analyze multiple binaries\n$ govulncheck -mode=binary ${common_vuln_binary} ${common_vuln_binary} --> FAIL 2\nonly 1 binary can be analyzed at a time\n\n#####\n# Test of trying to run -mode=binary with -tags flag\n$ govulncheck -tags=foo -mode=binary ${common_vuln_binary} --> FAIL 2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/print_test.go"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 3,
                  "endLine": 20,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\"golang.org/x/vuln/internal/scan\"\n)\n\nvar update = flag.Bool(\"update\", false, \"update test files with results\")\n\nfunc TestPrinting(t *testing.T) {\n\ttestdata := os.DirFS(\"testdata\")\n",
                    "rendered": {
                      "text": "\t\"golang.org/x/vuln/internal/scan\"\n)\n\nvar update = flag.Bool(\"update\", false, \"update test files with results\")\n\nfunc TestPrinting(t *testing.T) {\n\ttestdata := os.DirFS(\"testdata\")\n",
                      "markdown": "`\t\"golang.org/x/vuln/internal/scan\"\n)\n\nvar update = flag.Bool(\"update\", false, \"update test files with results\")\n\nfunc TestPrinting(t *testing.T) {\n\ttestdata := os.DirFS(\"testdata\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/print_test.go"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 92,
                  "endLine": 57,
                  "endColumn": 98,
                  "snippet": {
                    "text": "\t\t\t// this effectively tests that we can round trip the json\n\t\t\tgot := &strings.Builder{}\n\t\t\ttestRunHandler(t, rawJSON, govulncheck.NewJSONHandler(got))\n\t\t\tif diff := cmp.Diff(strings.TrimSpace(string(rawJSON)), strings.TrimSpace(got.String())); diff != \"\" {\n\t\t\t\tt.Errorf(\"JSON mismatch (-want, +got):\\n%s\", diff)\n\t\t\t}\n\t\t})\n",
                    "rendered": {
                      "text": "\t\t\t// this effectively tests that we can round trip the json\n\t\t\tgot := &strings.Builder{}\n\t\t\ttestRunHandler(t, rawJSON, govulncheck.NewJSONHandler(got))\n\t\t\tif diff := cmp.Diff(strings.TrimSpace(string(rawJSON)), strings.TrimSpace(got.String())); diff != \"\" {\n\t\t\t\tt.Errorf(\"JSON mismatch (-want, +got):\\n%s\", diff)\n\t\t\t}\n\t\t})\n",
                      "markdown": "`\t\t\t// this effectively tests that we can round trip the json\n\t\t\tgot := &strings.Builder{}\n\t\t\ttestRunHandler(t, rawJSON, govulncheck.NewJSONHandler(got))\n\t\t\tif diff := cmp.Diff(strings.TrimSpace(string(rawJSON)), strings.TrimSpace(got.String())); diff != \"\" {\n\t\t\t\tt.Errorf(\"JSON mismatch (-want, +got):\\n%s\", diff)\n\t\t\t}\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/print_test.go"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 5,
                  "endLine": 57,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\t// this effectively tests that we can round trip the json\n\t\t\tgot := &strings.Builder{}\n\t\t\ttestRunHandler(t, rawJSON, govulncheck.NewJSONHandler(got))\n\t\t\tif diff := cmp.Diff(strings.TrimSpace(string(rawJSON)), strings.TrimSpace(got.String())); diff != \"\" {\n\t\t\t\tt.Errorf(\"JSON mismatch (-want, +got):\\n%s\", diff)\n\t\t\t}\n\t\t})\n",
                    "rendered": {
                      "text": "\t\t\t// this effectively tests that we can round trip the json\n\t\t\tgot := &strings.Builder{}\n\t\t\ttestRunHandler(t, rawJSON, govulncheck.NewJSONHandler(got))\n\t\t\tif diff := cmp.Diff(strings.TrimSpace(string(rawJSON)), strings.TrimSpace(got.String())); diff != \"\" {\n\t\t\t\tt.Errorf(\"JSON mismatch (-want, +got):\\n%s\", diff)\n\t\t\t}\n\t\t})\n",
                      "markdown": "`\t\t\t// this effectively tests that we can round trip the json\n\t\t\tgot := &strings.Builder{}\n\t\t\ttestRunHandler(t, rawJSON, govulncheck.NewJSONHandler(got))\n\t\t\tif diff := cmp.Diff(strings.TrimSpace(string(rawJSON)), strings.TrimSpace(got.String())); diff != \"\" {\n\t\t\t\tt.Errorf(\"JSON mismatch (-want, +got):\\n%s\", diff)\n\t\t\t}\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/print_test.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 56,
                  "endLine": 43,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\t\t\t\thandler := scan.NewTextHandler(got)\n\t\t\t\tscan.ShowFlag(strings.Split(textname, \"_\")[1:]).Update(handler)\n\t\t\t\ttestRunHandler(t, rawJSON, handler)\n\t\t\t\tif diff := cmp.Diff(string(wantText), got.String()); diff != \"\" {\n\t\t\t\t\tif *update {\n\t\t\t\t\t\t// write the output back to the file\n\t\t\t\t\t\tos.WriteFile(filepath.Join(\"testdata\", textfile), got.Bytes(), 0644)\n",
                    "rendered": {
                      "text": "\t\t\t\thandler := scan.NewTextHandler(got)\n\t\t\t\tscan.ShowFlag(strings.Split(textname, \"_\")[1:]).Update(handler)\n\t\t\t\ttestRunHandler(t, rawJSON, handler)\n\t\t\t\tif diff := cmp.Diff(string(wantText), got.String()); diff != \"\" {\n\t\t\t\t\tif *update {\n\t\t\t\t\t\t// write the output back to the file\n\t\t\t\t\t\tos.WriteFile(filepath.Join(\"testdata\", textfile), got.Bytes(), 0644)\n",
                      "markdown": "`\t\t\t\thandler := scan.NewTextHandler(got)\n\t\t\t\tscan.ShowFlag(strings.Split(textname, \"_\")[1:]).Update(handler)\n\t\t\t\ttestRunHandler(t, rawJSON, handler)\n\t\t\t\tif diff := cmp.Diff(string(wantText), got.String()); diff != \"\" {\n\t\t\t\t\tif *update {\n\t\t\t\t\t\t// write the output back to the file\n\t\t\t\t\t\tos.WriteFile(filepath.Join(\"testdata\", textfile), got.Bytes(), 0644)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/print_test.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 6,
                  "endLine": 43,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t\thandler := scan.NewTextHandler(got)\n\t\t\t\tscan.ShowFlag(strings.Split(textname, \"_\")[1:]).Update(handler)\n\t\t\t\ttestRunHandler(t, rawJSON, handler)\n\t\t\t\tif diff := cmp.Diff(string(wantText), got.String()); diff != \"\" {\n\t\t\t\t\tif *update {\n\t\t\t\t\t\t// write the output back to the file\n\t\t\t\t\t\tos.WriteFile(filepath.Join(\"testdata\", textfile), got.Bytes(), 0644)\n",
                    "rendered": {
                      "text": "\t\t\t\thandler := scan.NewTextHandler(got)\n\t\t\t\tscan.ShowFlag(strings.Split(textname, \"_\")[1:]).Update(handler)\n\t\t\t\ttestRunHandler(t, rawJSON, handler)\n\t\t\t\tif diff := cmp.Diff(string(wantText), got.String()); diff != \"\" {\n\t\t\t\t\tif *update {\n\t\t\t\t\t\t// write the output back to the file\n\t\t\t\t\t\tos.WriteFile(filepath.Join(\"testdata\", textfile), got.Bytes(), 0644)\n",
                      "markdown": "`\t\t\t\thandler := scan.NewTextHandler(got)\n\t\t\t\tscan.ShowFlag(strings.Split(textname, \"_\")[1:]).Update(handler)\n\t\t\t\ttestRunHandler(t, rawJSON, handler)\n\t\t\t\tif diff := cmp.Diff(string(wantText), got.String()); diff != \"\" {\n\t\t\t\t\tif *update {\n\t\t\t\t\t\t// write the output back to the file\n\t\t\t\t\t\tos.WriteFile(filepath.Join(\"testdata\", textfile), got.Bytes(), 0644)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/run.go"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 3,
                  "endLine": 131,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\tbuf.WriteString(\"-\")\n\t\tbuf.WriteString(revision[:12])\n\t}\n\tif at != \"\" {\n\t\t// commit time is of the form 2023-01-25T19:57:54Z\n\t\tp, err := time.Parse(time.RFC3339, at)\n\t\tif err == nil {\n",
                    "rendered": {
                      "text": "\t\tbuf.WriteString(\"-\")\n\t\tbuf.WriteString(revision[:12])\n\t}\n\tif at != \"\" {\n\t\t// commit time is of the form 2023-01-25T19:57:54Z\n\t\tp, err := time.Parse(time.RFC3339, at)\n\t\tif err == nil {\n",
                      "markdown": "`\t\tbuf.WriteString(\"-\")\n\t\tbuf.WriteString(revision[:12])\n\t}\n\tif at != \"\" {\n\t\t// commit time is of the form 2023-01-25T19:57:54Z\n\t\tp, err := time.Parse(time.RFC3339, at)\n\t\tif err == nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/run.go"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 2,
                  "endLine": 122,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\t\trevision = s.Value\n\t\t}\n\t\tif s.Key == \"vcs.time\" {\n\t\t\tat = s.Value\n\t\t}\n\t}\n\tbuf := strings.Builder{}\n",
                    "rendered": {
                      "text": "\t\t\trevision = s.Value\n\t\t}\n\t\tif s.Key == \"vcs.time\" {\n\t\t\tat = s.Value\n\t\t}\n\t}\n\tbuf := strings.Builder{}\n",
                      "markdown": "`\t\t\trevision = s.Value\n\t\t}\n\t\tif s.Key == \"vcs.time\" {\n\t\t\tat = s.Value\n\t\t}\n\t}\n\tbuf := strings.Builder{}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/run.go"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 14,
                  "endLine": 116,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n\t// TODO(https://go.dev/issue/29228): we need to manually construct the\n\t// version string when it is \"(devel)\" until #29228 is resolved.\n\tvar revision, at string\n\tfor _, s := range bi.Settings {\n\t\tif s.Key == \"vcs.revision\" {\n\t\t\trevision = s.Value\n",
                    "rendered": {
                      "text": "\n\t// TODO(https://go.dev/issue/29228): we need to manually construct the\n\t// version string when it is \"(devel)\" until #29228 is resolved.\n\tvar revision, at string\n\tfor _, s := range bi.Settings {\n\t\tif s.Key == \"vcs.revision\" {\n\t\t\trevision = s.Value\n",
                      "markdown": "`\n\t// TODO(https://go.dev/issue/29228): we need to manually construct the\n\t// version string when it is \"(devel)\" until #29228 is resolved.\n\tvar revision, at string\n\tfor _, s := range bi.Settings {\n\t\tif s.Key == \"vcs.revision\" {\n\t\t\trevision = s.Value\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/run.go"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 57,
                  "endLine": 85,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\tif cfg.ScanMode == govulncheck.ScanModeSource && cfg.GoVersion == \"\" {\n\t\tconst goverPrefix = \"GOVERSION=\"\n\t\tfor _, env := range cfg.env {\n\t\t\tif val := strings.TrimPrefix(env, goverPrefix); val != env {\n\t\t\t\tcfg.GoVersion = val\n\t\t\t}\n\t\t}\n",
                    "rendered": {
                      "text": "\tif cfg.ScanMode == govulncheck.ScanModeSource && cfg.GoVersion == \"\" {\n\t\tconst goverPrefix = \"GOVERSION=\"\n\t\tfor _, env := range cfg.env {\n\t\t\tif val := strings.TrimPrefix(env, goverPrefix); val != env {\n\t\t\t\tcfg.GoVersion = val\n\t\t\t}\n\t\t}\n",
                      "markdown": "`\tif cfg.ScanMode == govulncheck.ScanModeSource && cfg.GoVersion == \"\" {\n\t\tconst goverPrefix = \"GOVERSION=\"\n\t\tfor _, env := range cfg.env {\n\t\t\tif val := strings.TrimPrefix(env, goverPrefix); val != env {\n\t\t\t\tcfg.GoVersion = val\n\t\t\t}\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/run.go"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 8,
                  "endLine": 84,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tcfg.DB = cfg.db\n\tif cfg.ScanMode == govulncheck.ScanModeSource && cfg.GoVersion == \"\" {\n\t\tconst goverPrefix = \"GOVERSION=\"\n\t\tfor _, env := range cfg.env {\n\t\t\tif val := strings.TrimPrefix(env, goverPrefix); val != env {\n\t\t\t\tcfg.GoVersion = val\n\t\t\t}\n",
                    "rendered": {
                      "text": "\tcfg.DB = cfg.db\n\tif cfg.ScanMode == govulncheck.ScanModeSource && cfg.GoVersion == \"\" {\n\t\tconst goverPrefix = \"GOVERSION=\"\n\t\tfor _, env := range cfg.env {\n\t\t\tif val := strings.TrimPrefix(env, goverPrefix); val != env {\n\t\t\t\tcfg.GoVersion = val\n\t\t\t}\n",
                      "markdown": "`\tcfg.DB = cfg.db\n\tif cfg.ScanMode == govulncheck.ScanModeSource && cfg.GoVersion == \"\" {\n\t\tconst goverPrefix = \"GOVERSION=\"\n\t\tfor _, env := range cfg.env {\n\t\t\tif val := strings.TrimPrefix(env, goverPrefix); val != env {\n\t\t\t\tcfg.GoVersion = val\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/run.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 40,
                  "endLine": 28,
                  "endColumn": 45,
                  "snippet": {
                    "text": "// RunGovulncheck performs main govulncheck functionality and exits the\n// program upon success with an appropriate exit status. Otherwise,\n// returns an error.\nfunc RunGovulncheck(ctx context.Context, env []string, r io.Reader, stdout io.Writer, stderr io.Writer, args []string) error {\n\tcfg := &config{env: env}\n\tif err := parseFlags(cfg, stderr, args); err != nil {\n\t\treturn err\n",
                    "rendered": {
                      "text": "// RunGovulncheck performs main govulncheck functionality and exits the\n// program upon success with an appropriate exit status. Otherwise,\n// returns an error.\nfunc RunGovulncheck(ctx context.Context, env []string, r io.Reader, stdout io.Writer, stderr io.Writer, args []string) error {\n\tcfg := &config{env: env}\n\tif err := parseFlags(cfg, stderr, args); err != nil {\n\t\treturn err\n",
                      "markdown": "`// RunGovulncheck performs main govulncheck functionality and exits the\n// program upon success with an appropriate exit status. Otherwise,\n// returns an error.\nfunc RunGovulncheck(ctx context.Context, env []string, r io.Reader, stdout io.Writer, stderr io.Writer, args []string) error {\n\tcfg := &config{env: env}\n\tif err := parseFlags(cfg, stderr, args); err != nil {\n\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/test/buildtest.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 57,
                  "endLine": 29,
                  "endColumn": 111,
                  "snippet": {
                    "text": "// envVarVals, which should be an alternating list of variables and values.\n// It returns the path to the resulting binary, and a function\n// to call when finished with the binary.\nfunc GoBuild(t *testing.T, dir, tags string, strip bool, envVarVals ...string) (binaryPath string, cleanup func()) {\n\ttestenv.NeedsGoBuild(t)\n\n\tif len(envVarVals)%2 != 0 {\n",
                    "rendered": {
                      "text": "// envVarVals, which should be an alternating list of variables and values.\n// It returns the path to the resulting binary, and a function\n// to call when finished with the binary.\nfunc GoBuild(t *testing.T, dir, tags string, strip bool, envVarVals ...string) (binaryPath string, cleanup func()) {\n\ttestenv.NeedsGoBuild(t)\n\n\tif len(envVarVals)%2 != 0 {\n",
                      "markdown": "`// envVarVals, which should be an alternating list of variables and values.\n// It returns the path to the resulting binary, and a function\n// to call when finished with the binary.\nfunc GoBuild(t *testing.T, dir, tags string, strip bool, envVarVals ...string) (binaryPath string, cleanup func()) {\n\ttestenv.NeedsGoBuild(t)\n\n\tif len(envVarVals)%2 != 0 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/test/buildtest.go"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tif strip {\n\t\targs = append(args, \"-ldflags\", \"-s -w\")\n\t}\n\tcmd := exec.Command(goCommandPath, args...)\n\tcmd.Dir = dir\n\tcmd.Env = env\n\tcmd.Stdout = os.Stdout\n",
                    "rendered": {
                      "text": "\tif strip {\n\t\targs = append(args, \"-ldflags\", \"-s -w\")\n\t}\n\tcmd := exec.Command(goCommandPath, args...)\n\tcmd.Dir = dir\n\tcmd.Env = env\n\tcmd.Stdout = os.Stdout\n",
                      "markdown": "`\tif strip {\n\t\targs = append(args, \"-ldflags\", \"-s -w\")\n\t}\n\tcmd := exec.Command(goCommandPath, args...)\n\tcmd.Dir = dir\n\tcmd.Env = env\n\tcmd.Stdout = os.Stdout\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/test/buildtest.go"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 19,
                  "endLine": 90,
                  "endColumn": 24,
                  "snippet": {
                    "text": "// lookEnv looks for name in env, a list of \"VAR=VALUE\" strings. It returns\n// the value if name is found, and defaultValue if it is not.\nfunc lookupEnv(name string, env []string, defaultValue string) string {\n\tfor _, vv := range env {\n\t\ti := strings.IndexByte(vv, '=')\n\t\tif i < 0 {\n\t\t\t// malformed env entry; just ignore it\n",
                    "rendered": {
                      "text": "// lookEnv looks for name in env, a list of \"VAR=VALUE\" strings. It returns\n// the value if name is found, and defaultValue if it is not.\nfunc lookupEnv(name string, env []string, defaultValue string) string {\n\tfor _, vv := range env {\n\t\ti := strings.IndexByte(vv, '=')\n\t\tif i < 0 {\n\t\t\t// malformed env entry; just ignore it\n",
                      "markdown": "`// lookEnv looks for name in env, a list of \"VAR=VALUE\" strings. It returns\n// the value if name is found, and defaultValue if it is not.\nfunc lookupEnv(name string, env []string, defaultValue string) string {\n\tfor _, vv := range env {\n\t\ti := strings.IndexByte(vv, '=')\n\t\tif i < 0 {\n\t\t\t// malformed env entry; just ignore it\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/test/buildtest.go"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 27,
                  "endLine": 89,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n// lookEnv looks for name in env, a list of \"VAR=VALUE\" strings. It returns\n// the value if name is found, and defaultValue if it is not.\nfunc lookupEnv(name string, env []string, defaultValue string) string {\n\tfor _, vv := range env {\n\t\ti := strings.IndexByte(vv, '=')\n\t\tif i < 0 {\n",
                    "rendered": {
                      "text": "\n// lookEnv looks for name in env, a list of \"VAR=VALUE\" strings. It returns\n// the value if name is found, and defaultValue if it is not.\nfunc lookupEnv(name string, env []string, defaultValue string) string {\n\tfor _, vv := range env {\n\t\ti := strings.IndexByte(vv, '=')\n\t\tif i < 0 {\n",
                      "markdown": "`\n// lookEnv looks for name in env, a list of \"VAR=VALUE\" strings. It returns\n// the value if name is found, and defaultValue if it is not.\nfunc lookupEnv(name string, env []string, defaultValue string) string {\n\tfor _, vv := range env {\n\t\ti := strings.IndexByte(vv, '=')\n\t\tif i < 0 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/test/buildtest.go"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 10,
                  "endLine": 76,
                  "snippet": {
                    "text": "\t}\n\tcmd := exec.Command(goCommandPath, args...)\n\tcmd.Dir = dir\n\tcmd.Env = env\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\tif err := cmd.Run(); err != nil {\n\t\tif ee := (*exec.ExitError)(nil); errors.As(err, &ee) && len(ee.Stderr) > 0 {\n",
                    "rendered": {
                      "text": "\t}\n\tcmd := exec.Command(goCommandPath, args...)\n\tcmd.Dir = dir\n\tcmd.Env = env\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\tif err := cmd.Run(); err != nil {\n\t\tif ee := (*exec.ExitError)(nil); errors.As(err, &ee) && len(ee.Stderr) > 0 {\n",
                      "markdown": "`\t}\n\tcmd := exec.Command(goCommandPath, args...)\n\tcmd.Dir = dir\n\tcmd.Env = env\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\tif err := cmd.Run(); err != nil {\n\t\tif ee := (*exec.ExitError)(nil); errors.As(err, &ee) && len(ee.Stderr) > 0 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/test/buildtest.go"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 2,
                  "endLine": 39,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\tif len(envVarVals) > 0 {\n\t\tenv = os.Environ()\n\t\tfor i := 0; i < len(envVarVals); i += 2 {\n\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", envVarVals[i], envVarVals[i+1]))\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\tif len(envVarVals) > 0 {\n\t\tenv = os.Environ()\n\t\tfor i := 0; i < len(envVarVals); i += 2 {\n\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", envVarVals[i], envVarVals[i+1]))\n\t\t}\n\t}\n\n",
                      "markdown": "`\tif len(envVarVals) > 0 {\n\t\tenv = os.Environ()\n\t\tfor i := 0; i < len(envVarVals); i += 2 {\n\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", envVarVals[i], envVarVals[i+1]))\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/test/buildtest.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t}\n\tvar env []string\n\tif len(envVarVals) > 0 {\n\t\tenv = os.Environ()\n\t\tfor i := 0; i < len(envVarVals); i += 2 {\n\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", envVarVals[i], envVarVals[i+1]))\n\t\t}\n",
                    "rendered": {
                      "text": "\t}\n\tvar env []string\n\tif len(envVarVals) > 0 {\n\t\tenv = os.Environ()\n\t\tfor i := 0; i < len(envVarVals); i += 2 {\n\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", envVarVals[i], envVarVals[i+1]))\n\t\t}\n",
                      "markdown": "`\t}\n\tvar env []string\n\tif len(envVarVals) > 0 {\n\t\tenv = os.Environ()\n\t\tfor i := 0; i < len(envVarVals); i += 2 {\n\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", envVarVals[i], envVarVals[i+1]))\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/test/buildtest.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 4,
                  "endLine": 35,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tif len(envVarVals)%2 != 0 {\n\t\tt.Fatal(\"last args should be alternating variables and values\")\n\t}\n\tvar env []string\n\tif len(envVarVals) > 0 {\n\t\tenv = os.Environ()\n\t\tfor i := 0; i < len(envVarVals); i += 2 {\n",
                    "rendered": {
                      "text": "\tif len(envVarVals)%2 != 0 {\n\t\tt.Fatal(\"last args should be alternating variables and values\")\n\t}\n\tvar env []string\n\tif len(envVarVals) > 0 {\n\t\tenv = os.Environ()\n\t\tfor i := 0; i < len(envVarVals); i += 2 {\n",
                      "markdown": "`\tif len(envVarVals)%2 != 0 {\n\t\tt.Fatal(\"last args should be alternating variables and values\")\n\t}\n\tvar env []string\n\tif len(envVarVals) > 0 {\n\t\tenv = os.Environ()\n\t\tfor i := 0; i < len(envVarVals); i += 2 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-legacy/github.com/!bee!go/beego.json"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 257,
                  "endLine": 10,
                  "endColumn": 266,
                  "snippet": {
                    "text": "      \"CVE-2022-31259\",\n      \"GHSA-qx32-f6g6-fcfr\"\n    ],\n    \"details\": \"Routes in the beego HTTP router can match unintended patterns.\\nThis overly-broad matching may permit an attacker to bypass access\\ncontrols.\\n\\nFor example, the pattern \\\"/a/b/:name\\\" can match the URL \\\"/a.xml/b/\\\".\\nThis may bypass access control applied to the prefix \\\"/a/\\\".\\n\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2022-31259\",\n      \"GHSA-qx32-f6g6-fcfr\"\n    ],\n    \"details\": \"Routes in the beego HTTP router can match unintended patterns.\\nThis overly-broad matching may permit an attacker to bypass access\\ncontrols.\\n\\nFor example, the pattern \\\"/a/b/:name\\\" can match the URL \\\"/a.xml/b/\\\".\\nThis may bypass access control applied to the prefix \\\"/a/\\\".\\n\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2022-31259\",\n      \"GHSA-qx32-f6g6-fcfr\"\n    ],\n    \"details\": \"Routes in the beego HTTP router can match unintended patterns.\\nThis overly-broad matching may permit an attacker to bypass access\\ncontrols.\\n\\nFor example, the pattern \\\"/a/b/:name\\\" can match the URL \\\"/a.xml/b/\\\".\\nThis may bypass access control applied to the prefix \\\"/a/\\\".\\n\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-legacy/github.com/tidwall/gjson.json"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 174,
                  "endLine": 67,
                  "endColumn": 183,
                  "snippet": {
                    "text": "            \"CVE-2020-35380\",\n            \"GHSA-w942-gw6m-p62c\"\n        ],\n        \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n        \"affected\": [\n            {\n                \"package\": {\n",
                    "rendered": {
                      "text": "            \"CVE-2020-35380\",\n            \"GHSA-w942-gw6m-p62c\"\n        ],\n        \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n        \"affected\": [\n            {\n                \"package\": {\n",
                      "markdown": "`            \"CVE-2020-35380\",\n            \"GHSA-w942-gw6m-p62c\"\n        ],\n        \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n        \"affected\": [\n            {\n                \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-legacy/github.com/tidwall/gjson.json"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 174,
                  "endLine": 8,
                  "endColumn": 183,
                  "snippet": {
                    "text": "        \"aliases\": [\n            \"CVE-2020-36067\"\n        ],\n        \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n        \"affected\": [\n            {\n                \"package\": {\n",
                    "rendered": {
                      "text": "        \"aliases\": [\n            \"CVE-2020-36067\"\n        ],\n        \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n        \"affected\": [\n            {\n                \"package\": {\n",
                      "markdown": "`        \"aliases\": [\n            \"CVE-2020-36067\"\n        ],\n        \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n        \"affected\": [\n            {\n                \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-v1/ID/GO-2022-0476.json.gz/GO-2022-0476.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 196,
                  "endLine": 1,
                  "endColumn": 200,
                  "snippet": {
                    "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0476\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:43Z\",\"aliases\":[\"CVE-2020-28367\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious gcc flags specified via a cgo directive.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMV",
                    "rendered": {
                      "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0476\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:43Z\",\"aliases\":[\"CVE-2020-28367\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious gcc flags specified via a cgo directive.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMV",
                      "markdown": "`{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0476\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:43Z\",\"aliases\":[\"CVE-2020-28367\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious gcc flags specified via a cgo directive.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMV`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-v1/ID/GO-2022-0476.json.gz/GO-2022-0476.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 205,
                  "endLine": 1,
                  "endColumn": 211,
                  "snippet": {
                    "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0476\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:43Z\",\"aliases\":[\"CVE-2020-28367\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious gcc flags specified via a cgo directive.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events",
                    "rendered": {
                      "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0476\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:43Z\",\"aliases\":[\"CVE-2020-28367\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious gcc flags specified via a cgo directive.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events",
                      "markdown": "`{\"schema_version\":\"1.3.1\",\"id\":\"GO-2022-0476\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2022-07-28T17:24:43Z\",\"aliases\":[\"CVE-2020-28367\"],\"details\":\"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.\\n\\nThis can be caused by malicious gcc flags specified via a cgo directive.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-v1/ID/GO-2021-0068.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 195,
                  "endLine": 1,
                  "endColumn": 199,
                  "snippet": {
                    "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},",
                    "rendered": {
                      "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},",
                      "markdown": "`{\"schema_version\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-v1/ID/GO-2021-0068.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 312,
                  "endLine": 1,
                  "endColumn": 318,
                  "snippet": {
                    "text": "sion\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},{\"fixed\":\"1.15.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"cmd/go\",\"goos\":[\"windows\"]}]}}],\"references\":[{\"type\":\"",
                    "rendered": {
                      "text": "sion\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},{\"fixed\":\"1.15.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"cmd/go\",\"goos\":[\"windows\"]}]}}],\"references\":[{\"type\":\"",
                      "markdown": "`sion\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},{\"fixed\":\"1.15.7\"}]}],\"ecosystem_specific\":{\"imports\":[{\"path\":\"cmd/go\",\"goos\":[\"windows\"]}]}}],\"references\":[{\"type\":\"`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/testdata/vulndb-v1/ID/GO-2021-0068.json"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 204,
                  "endLine": 1,
                  "endColumn": 210,
                  "snippet": {
                    "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},{\"fixed\":\"1",
                    "rendered": {
                      "text": "{\"schema_version\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},{\"fixed\":\"1",
                      "markdown": "`{\"schema_version\":\"1.3.1\",\"id\":\"GO-2021-0068\",\"modified\":\"2023-04-03T15:57:51Z\",\"published\":\"2021-04-14T20:04:52Z\",\"aliases\":[\"CVE-2021-3115\"],\"details\":\"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.\",\"affected\":[{\"package\":{\"name\":\"toolchain\",\"ecosystem\":\"Go\"},\"ranges\":[{\"type\":\"SEMVER\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1.14.14\"},{\"introduced\":\"1.15.0\"},{\"fixed\":\"1`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/source.go"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 14,
                  "endLine": 116,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\treturn hs.index.get(ctx, endpoint)\n\t}\n\n\treturn hs.osv.get(ctx, file)\n}\n\n// newInMemorySource creates a new in-memory source from OSV entries.\n",
                    "rendered": {
                      "text": "\t\treturn hs.index.get(ctx, endpoint)\n\t}\n\n\treturn hs.osv.get(ctx, file)\n}\n\n// newInMemorySource creates a new in-memory source from OSV entries.\n",
                      "markdown": "`\t\treturn hs.index.get(ctx, endpoint)\n\t}\n\n\treturn hs.osv.get(ctx, file)\n}\n\n// newInMemorySource creates a new in-memory source from OSV entries.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/source.go"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 17,
                  "endLine": 113,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tdir, file := filepath.Split(endpoint)\n\n\tif filepath.Dir(dir) == indexDir {\n\t\treturn hs.index.get(ctx, endpoint)\n\t}\n\n\treturn hs.osv.get(ctx, file)\n",
                    "rendered": {
                      "text": "\tdir, file := filepath.Split(endpoint)\n\n\tif filepath.Dir(dir) == indexDir {\n\t\treturn hs.index.get(ctx, endpoint)\n\t}\n\n\treturn hs.osv.get(ctx, file)\n",
                      "markdown": "`\tdir, file := filepath.Split(endpoint)\n\n\tif filepath.Dir(dir) == indexDir {\n\t\treturn hs.index.get(ctx, endpoint)\n\t}\n\n\treturn hs.osv.get(ctx, file)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/source.go"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 39,
                  "endLine": 147,
                  "endColumn": 43,
                  "snippet": {
                    "text": "func (db *inMemorySource) get(ctx context.Context, endpoint string) ([]byte, error) {\n\tb, ok := db.data[endpoint]\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"no data found at endpoint %q\", endpoint)\n\t}\n\treturn b, nil\n}\n",
                    "rendered": {
                      "text": "func (db *inMemorySource) get(ctx context.Context, endpoint string) ([]byte, error) {\n\tb, ok := db.data[endpoint]\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"no data found at endpoint %q\", endpoint)\n\t}\n\treturn b, nil\n}\n",
                      "markdown": "`func (db *inMemorySource) get(ctx context.Context, endpoint string) ([]byte, error) {\n\tb, ok := db.data[endpoint]\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"no data found at endpoint %q\", endpoint)\n\t}\n\treturn b, nil\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/source.go"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 43,
                  "endLine": 23,
                  "endColumn": 47,
                  "snippet": {
                    "text": ")\n\ntype source interface {\n\t// get returns the raw, uncompressed bytes at the\n\t// requested endpoint, which should be bare with no file extensions\n\t// (e.g., \"index/modules\" instead of \"index/modules.json.gz\").\n\t// It errors if the endpoint cannot be reached or does not exist\n",
                    "rendered": {
                      "text": ")\n\ntype source interface {\n\t// get returns the raw, uncompressed bytes at the\n\t// requested endpoint, which should be bare with no file extensions\n\t// (e.g., \"index/modules\" instead of \"index/modules.json.gz\").\n\t// It errors if the endpoint cannot be reached or does not exist\n",
                      "markdown": "`)\n\ntype source interface {\n\t// get returns the raw, uncompressed bytes at the\n\t// requested endpoint, which should be bare with no file extensions\n\t// (e.g., \"index/modules\" instead of \"index/modules.json.gz\").\n\t// It errors if the endpoint cannot be reached or does not exist\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/PATENTS"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 10,
                  "endLine": 1,
                  "endColumn": 14,
                  "snippet": {
                    "text": "Additional IP Rights Grant (Patents)\n\n\"This implementation\" means the copyrightable works distributed by\nGoogle as part of the Go project.\n",
                    "rendered": {
                      "text": "Additional IP Rights Grant (Patents)\n\n\"This implementation\" means the copyrightable works distributed by\nGoogle as part of the Go project.\n",
                      "markdown": "`Additional IP Rights Grant (Patents)\n\n\"This implementation\" means the copyrightable works distributed by\nGoogle as part of the Go project.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_vendored_json.ct"
                },
                "region": {
                  "startLine": 479,
                  "startColumn": 170,
                  "endLine": 479,
                  "endColumn": 179,
                  "snippet": {
                    "text": "      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_vendored_json.ct"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 305,
                  "endLine": 390,
                  "endColumn": 314,
                  "snippet": {
                    "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_vendored_json.ct"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 170,
                  "endLine": 301,
                  "endColumn": 179,
                  "snippet": {
                    "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_vendored_json.ct"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 236,
                  "endLine": 197,
                  "endColumn": 245,
                  "snippet": {
                    "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_call_text.ct"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 6,
                  "endLine": 20,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                    "rendered": {
                      "text": "Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                      "markdown": "`Vulnerability #2: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_vex.ct"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 244,
                  "endLine": 62,
                  "endColumn": 253,
                  "snippet": {
                    "text": "      \"vulnerability\": {\n        \"@id\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n        \"name\": \"GO-2021-0113\",\n        \"description\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n        \"aliases\": [\n          \"CVE-2021-38561\",\n          \"GHSA-ppp9-7jff-5vj2\"\n",
                    "rendered": {
                      "text": "      \"vulnerability\": {\n        \"@id\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n        \"name\": \"GO-2021-0113\",\n        \"description\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n        \"aliases\": [\n          \"CVE-2021-38561\",\n          \"GHSA-ppp9-7jff-5vj2\"\n",
                      "markdown": "`      \"vulnerability\": {\n        \"@id\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n        \"name\": \"GO-2021-0113\",\n        \"description\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n        \"aliases\": [\n          \"CVE-2021-38561\",\n          \"GHSA-ppp9-7jff-5vj2\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-call/binary_vex.ct"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 178,
                  "endLine": 40,
                  "endColumn": 187,
                  "snippet": {
                    "text": "      \"vulnerability\": {\n        \"@id\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n        \"name\": \"GO-2021-0054\",\n        \"description\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n        \"aliases\": [\n          \"CVE-2020-36067\",\n          \"GHSA-p64j-r5f4-pwwx\"\n",
                    "rendered": {
                      "text": "      \"vulnerability\": {\n        \"@id\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n        \"name\": \"GO-2021-0054\",\n        \"description\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n        \"aliases\": [\n          \"CVE-2020-36067\",\n          \"GHSA-p64j-r5f4-pwwx\"\n",
                      "markdown": "`      \"vulnerability\": {\n        \"@id\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n        \"name\": \"GO-2021-0054\",\n        \"description\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n        \"aliases\": [\n          \"CVE-2020-36067\",\n          \"GHSA-p64j-r5f4-pwwx\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-module/binary_module_text.ct"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 22,
                  "endLine": 2,
                  "endColumn": 26,
                  "snippet": {
                    "text": "#####\n# Test binary scanning at the module level\n$ govulncheck -mode=binary -scan module ${common_vuln_binary} --> FAIL 3\n=== Module Results ===\n\n",
                    "rendered": {
                      "text": "#####\n# Test binary scanning at the module level\n$ govulncheck -mode=binary -scan module ${common_vuln_binary} --> FAIL 3\n=== Module Results ===\n\n",
                      "markdown": "`#####\n# Test binary scanning at the module level\n$ govulncheck -mode=binary -scan module ${common_vuln_binary} --> FAIL 3\n=== Module Results ===\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-module/binary_module_text.ct"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 6,
                  "endLine": 27,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Vulnerability #3: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                    "rendered": {
                      "text": "Vulnerability #3: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n",
                      "markdown": "`Vulnerability #3: GO-2021-0054\n    Due to improper bounds checking, maliciously crafted JSON objects can cause\n    an out-of-bounds panic. If parsing user input, this may be used as a denial\n    of service vector.\n  More info: https://pkg.go.dev/vuln/GO-2021-0054\n  Module: github.com/tidwall/gjson\n    Found in: github.com/tidwall/gjson@v1.6.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-module/binary_module_text.ct"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 71,
                  "endLine": 18,
                  "snippet": {
                    "text": "Vulnerability #2: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                    "rendered": {
                      "text": "Vulnerability #2: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                      "markdown": "`Vulnerability #2: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-module/binary_module_json.ct"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 22,
                  "endLine": 2,
                  "endColumn": 26,
                  "snippet": {
                    "text": "#####\n# Test binary scanning at the module level with json output\n$ govulncheck -format json -mode binary -scan module ${common_vuln_binary}\n{\n  \"config\": {\n",
                    "rendered": {
                      "text": "#####\n# Test binary scanning at the module level with json output\n$ govulncheck -format json -mode binary -scan module ${common_vuln_binary}\n{\n  \"config\": {\n",
                      "markdown": "`#####\n# Test binary scanning at the module level with json output\n$ govulncheck -format json -mode binary -scan module ${common_vuln_binary}\n{\n  \"config\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-module/binary_module_json.ct"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 170,
                  "endLine": 401,
                  "endColumn": 179,
                  "snippet": {
                    "text": "      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2020-35380\",\n      \"GHSA-w942-gw6m-p62c\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-module/binary_module_json.ct"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 305,
                  "endLine": 312,
                  "endColumn": 314,
                  "snippet": {
                    "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-module/binary_module_json.ct"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 170,
                  "endLine": 236,
                  "endColumn": 179,
                  "snippet": {
                    "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2020-36067\",\n      \"GHSA-p64j-r5f4-pwwx\"\n    ],\n    \"details\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/binary-module/binary_module_json.ct"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 236,
                  "endLine": 159,
                  "endColumn": 245,
                  "snippet": {
                    "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-package/source_package_text.ct"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 71,
                  "endLine": 40,
                  "snippet": {
                    "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n",
                    "rendered": {
                      "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n",
                      "markdown": "`Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-package/source_package_text.ct"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 71,
                  "endLine": 10,
                  "snippet": {
                    "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n",
                    "rendered": {
                      "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n",
                      "markdown": "`Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-package/source_package_sarif.ct"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 245,
                  "endLine": 72,
                  "endColumn": 254,
                  "snippet": {
                    "text": "vice attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n              \"properties\": {\n                \"tags\": [\n                  \"CVE-2021-38561\",\n                  \"GHSA-ppp9-7jff-5vj2\"\n                ]\n              }\n            },\n            {\n              ",
                    "rendered": {
                      "text": "vice attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n              \"properties\": {\n                \"tags\": [\n                  \"CVE-2021-38561\",\n                  \"GHSA-ppp9-7jff-5vj2\"\n                ]\n              }\n            },\n            {\n              ",
                      "markdown": "`vice attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0113\",\n              \"properties\": {\n                \"tags\": [\n                  \"CVE-2021-38561\",\n                  \"GHSA-ppp9-7jff-5vj2\"\n                ]\n              }\n            },\n            {\n              `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-package/source_package_sarif.ct"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 245,
                  "endLine": 69,
                  "endColumn": 254,
                  "snippet": {
                    "text": ".\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of serv",
                    "rendered": {
                      "text": ".\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of serv",
                      "markdown": "`.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of serv`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-package/source_package_sarif.ct"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 260,
                  "endLine": 66,
                  "endColumn": 269,
                  "snippet": {
                    "text": "3\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0113] Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a den",
                    "rendered": {
                      "text": "3\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0113] Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a den",
                      "markdown": "`3\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0113] Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a den`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-package/source_package_sarif.ct"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 179,
                  "endLine": 53,
                  "endColumn": 188,
                  "snippet": {
                    "text": "                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n              \"properties\": {\n",
                    "rendered": {
                      "text": "                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n              \"properties\": {\n",
                      "markdown": "`                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2021-0054\",\n              \"properties\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-package/source_package_sarif.ct"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 179,
                  "endLine": 50,
                  "endColumn": 188,
                  "snippet": {
                    "text": "parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pk",
                    "rendered": {
                      "text": "parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pk",
                      "markdown": "`parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"help\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pk`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-package/source_package_sarif.ct"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 194,
                  "endLine": 47,
                  "endColumn": 203,
                  "snippet": {
                    "text": "            {\n              \"id\": \"GO-2021-0054\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0054] Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n",
                    "rendered": {
                      "text": "            {\n              \"id\": \"GO-2021-0054\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0054] Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n",
                      "markdown": "`            {\n              \"id\": \"GO-2021-0054\",\n              \"shortDescription\": {\n                \"text\": \"[GO-2021-0054] Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n              },\n              \"fullDescription\": {\n                \"text\": \"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-package/source_package_sarif.ct"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 314,
                  "endLine": 34,
                  "endColumn": 323,
                  "snippet": {
                    "text": "                \"text\": \"Infinite loop when decoding some inputs in golang.org/x/text\"\n              },\n              \"help\": {\n                \"text\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2020-0015\",\n              \"properties\": {\n",
                    "rendered": {
                      "text": "                \"text\": \"Infinite loop when decoding some inputs in golang.org/x/text\"\n              },\n              \"help\": {\n                \"text\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2020-0015\",\n              \"properties\": {\n",
                      "markdown": "`                \"text\": \"Infinite loop when decoding some inputs in golang.org/x/text\"\n              },\n              \"help\": {\n                \"text\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\"\n              },\n              \"helpUri\": \"https://pkg.go.dev/vuln/GO-2020-0015\",\n              \"properties\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-package/source_package_json.ct"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 305,
                  "endLine": 148,
                  "endColumn": 314,
                  "snippet": {
                    "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"GHSA-5rcv-m4m3-hfh7\"\n    ],\n    \"summary\": \"Infinite loop when decoding some inputs in golang.org/x/text\",\n    \"details\": \"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/testfiles/source-package/source_package_json.ct"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 236,
                  "endLine": 57,
                  "endColumn": 245,
                  "snippet": {
                    "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                    "rendered": {
                      "text": "      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n",
                      "markdown": "`      \"CVE-2021-38561\",\n      \"GHSA-ppp9-7jff-5vj2\"\n    ],\n    \"details\": \"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.\",\n    \"affected\": [\n      {\n        \"package\": {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/common/modules/vuln/vuln.go"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 15,
                  "endLine": 14,
                  "endColumn": 20,
                  "snippet": {
                    "text": "func main() {\n\tfmt.Println(\"hello\")\n\tlanguage.CompactIndex(language.English)\n\tgjson.Result{}.Get(\"\")\n\t_, _ = pem.Decode([]byte(\"test\"))\n}\n",
                    "rendered": {
                      "text": "func main() {\n\tfmt.Println(\"hello\")\n\tlanguage.CompactIndex(language.English)\n\tgjson.Result{}.Get(\"\")\n\t_, _ = pem.Decode([]byte(\"test\"))\n}\n",
                      "markdown": "`func main() {\n\tfmt.Println(\"hello\")\n\tlanguage.CompactIndex(language.English)\n\tgjson.Result{}.Get(\"\")\n\t_, _ = pem.Decode([]byte(\"test\"))\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/strip/testfiles/binary/strip.ct"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 71,
                  "endLine": 47,
                  "snippet": {
                    "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                    "rendered": {
                      "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                      "markdown": "`Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/testdata/strip/testfiles/binary/strip.ct"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 71,
                  "endLine": 10,
                  "snippet": {
                    "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                    "rendered": {
                      "text": "Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n",
                      "markdown": "`Vulnerability #1: GO-2021-0113\n    Due to improper index calculation, an incorrectly formatted language tag can\n    cause Parse to panic via an out of bounds read. If Parse is used to process\n    untrusted user inputs, this may be used as a vector for a denial of service\n    attack.\n  More info: https://pkg.go.dev/vuln/GO-2021-0113\n  Module: golang.org/x/text\n    Found in: golang.org/x/text@v0.3.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/integration/integration_run.sh"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 13,
                  "endLine": 50,
                  "endColumn": 17,
                  "snippet": {
                    "text": "fi\n\npushd \"$dir\" || exit\n# Use scanner at specific commit and tag version for reproducibility.\ngit checkout 29b8761da747\ngo build -trimpath -ldflags=\"-X github.com/stackrox/scanner/pkg/version.Version=2.26-29-g29b8761da7-dirty\" -o image/scanner/bin/scanner ./cmd/clair\ngovulncheck -mode=binary --json ./image/scanner/bin/scanner &> scan.txt\n",
                    "rendered": {
                      "text": "fi\n\npushd \"$dir\" || exit\n# Use scanner at specific commit and tag version for reproducibility.\ngit checkout 29b8761da747\ngo build -trimpath -ldflags=\"-X github.com/stackrox/scanner/pkg/version.Version=2.26-29-g29b8761da7-dirty\" -o image/scanner/bin/scanner ./cmd/clair\ngovulncheck -mode=binary --json ./image/scanner/bin/scanner &> scan.txt\n",
                      "markdown": "`fi\n\npushd \"$dir\" || exit\n# Use scanner at specific commit and tag version for reproducibility.\ngit checkout 29b8761da747\ngo build -trimpath -ldflags=\"-X github.com/stackrox/scanner/pkg/version.Version=2.26-29-g29b8761da7-dirty\" -o image/scanner/bin/scanner ./cmd/clair\ngovulncheck -mode=binary --json ./image/scanner/bin/scanner &> scan.txt\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/integration/integration_run.sh"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# List of all projects for which integration test failed, if any.\nfailed=()\n\n# Update status of the integration script. The first argument is\n# the exit code for the integration run of a project and the second\n# argument is the project name.\nupdate_status(){\n",
                    "rendered": {
                      "text": "# List of all projects for which integration test failed, if any.\nfailed=()\n\n# Update status of the integration script. The first argument is\n# the exit code for the integration run of a project and the second\n# argument is the project name.\nupdate_status(){\n",
                      "markdown": "`# List of all projects for which integration test failed, if any.\nfailed=()\n\n# Update status of the integration script. The first argument is\n# the exit code for the integration run of a project and the second\n# argument is the project name.\nupdate_status(){\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/integration/integration_run.sh"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 69,
                  "endLine": 51,
                  "endColumn": 4,
                  "snippet": {
                    "text": "fi\n\npushd \"$dir\" || exit\n# Use scanner at specific commit and tag version for reproducibility.\ngit checkout 29b8761da747\ngo build -trimpath -ldflags=\"-X github.com/stackrox/scanner/pkg/version.Version=2.26-29-g29b8761da7-dirty\" -o image/scanner/bin/scanner ./cmd/clair\ngovulncheck -mode=binary --json ./image/scanner/bin/scanner &> scan.txt\nstackrox-scanner scan.txt\n",
                    "rendered": {
                      "text": "fi\n\npushd \"$dir\" || exit\n# Use scanner at specific commit and tag version for reproducibility.\ngit checkout 29b8761da747\ngo build -trimpath -ldflags=\"-X github.com/stackrox/scanner/pkg/version.Version=2.26-29-g29b8761da7-dirty\" -o image/scanner/bin/scanner ./cmd/clair\ngovulncheck -mode=binary --json ./image/scanner/bin/scanner &> scan.txt\nstackrox-scanner scan.txt\n",
                      "markdown": "`fi\n\npushd \"$dir\" || exit\n# Use scanner at specific commit and tag version for reproducibility.\ngit checkout 29b8761da747\ngo build -trimpath -ldflags=\"-X github.com/stackrox/scanner/pkg/version.Version=2.26-29-g29b8761da7-dirty\" -o image/scanner/bin/scanner ./cmd/clair\ngovulncheck -mode=binary --json ./image/scanner/bin/scanner &> scan.txt\nstackrox-scanner scan.txt\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/integration/integration_run.sh"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 6,
                  "snippet": {
                    "text": "if [ -d \"$dir\" ]; then\n  echo \"Destination scanner already exists. Using the existing code.\"\nelse\n  git clone https://github.com/stackrox/scanner.git \"${dir}\"\nfi\n\npushd \"$dir\" || exit\n",
                    "rendered": {
                      "text": "if [ -d \"$dir\" ]; then\n  echo \"Destination scanner already exists. Using the existing code.\"\nelse\n  git clone https://github.com/stackrox/scanner.git \"${dir}\"\nfi\n\npushd \"$dir\" || exit\n",
                      "markdown": "`if [ -d \"$dir\" ]; then\n  echo \"Destination scanner already exists. Using the existing code.\"\nelse\n  git clone https://github.com/stackrox/scanner.git \"${dir}\"\nfi\n\npushd \"$dir\" || exit\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/integration/integration_run.sh"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 14,
                  "endLine": 35,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Checkout kubernetes version v1.15.11 that\n# is known to have vulnerabilities.\npushd \"$dir\" || exit\ncd pkg || exit\ngit checkout tags/v1.15.11\ngovulncheck --json ./... &> k8s.txt\nk8s k8s.txt\nupdate_status $? \"kubernetes(source)\"\n",
                    "rendered": {
                      "text": "# Checkout kubernetes version v1.15.11 that\n# is known to have vulnerabilities.\npushd \"$dir\" || exit\ncd pkg || exit\ngit checkout tags/v1.15.11\ngovulncheck --json ./... &> k8s.txt\nk8s k8s.txt\nupdate_status $? \"kubernetes(source)\"\n",
                      "markdown": "`# Checkout kubernetes version v1.15.11 that\n# is known to have vulnerabilities.\npushd \"$dir\" || exit\ncd pkg || exit\ngit checkout tags/v1.15.11\ngovulncheck --json ./... &> k8s.txt\nk8s k8s.txt\nupdate_status $? \"kubernetes(source)\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/integration/integration_run.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 6,
                  "snippet": {
                    "text": "if [ -d \"$dir\" ]; then\n  echo \"Destination kubernetes already exists. Using the existing code.\"\nelse\n  git clone https://github.com/kubernetes/kubernetes.git \"${dir}\"\nfi\n\n# Checkout kubernetes version v1.15.11 that\n",
                    "rendered": {
                      "text": "if [ -d \"$dir\" ]; then\n  echo \"Destination kubernetes already exists. Using the existing code.\"\nelse\n  git clone https://github.com/kubernetes/kubernetes.git \"${dir}\"\nfi\n\n# Checkout kubernetes version v1.15.11 that\n",
                      "markdown": "`if [ -d \"$dir\" ]; then\n  echo \"Destination kubernetes already exists. Using the existing code.\"\nelse\n  git clone https://github.com/kubernetes/kubernetes.git \"${dir}\"\nfi\n\n# Checkout kubernetes version v1.15.11 that\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/integration/Dockerfile"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 25,
                  "endLine": 7,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# This assumes the build context, i.e., CWD is vuln/\n\n# ---- Step 0: Setup shared build tools. ----\nRUN apk update && apk add bash git gcc musl-dev linux-headers gcompat\n\n# ---- Step 1: Build govulncheck ----\nCOPY . /go/src/golang.org/x/vuln\n",
                    "rendered": {
                      "text": "# This assumes the build context, i.e., CWD is vuln/\n\n# ---- Step 0: Setup shared build tools. ----\nRUN apk update && apk add bash git gcc musl-dev linux-headers gcompat\n\n# ---- Step 1: Build govulncheck ----\nCOPY . /go/src/golang.org/x/vuln\n",
                      "markdown": "`# This assumes the build context, i.e., CWD is vuln/\n\n# ---- Step 0: Setup shared build tools. ----\nRUN apk update && apk add bash git gcc musl-dev linux-headers gcompat\n\n# ---- Step 1: Build govulncheck ----\nCOPY . /go/src/golang.org/x/vuln\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/integration/Dockerfile"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 7,
                  "endLine": 7,
                  "endColumn": 15,
                  "snippet": {
                    "text": "# This assumes the build context, i.e., CWD is vuln/\n\n# ---- Step 0: Setup shared build tools. ----\nRUN apk update && apk add bash git gcc musl-dev linux-headers gcompat\n\n# ---- Step 1: Build govulncheck ----\nCOPY . /go/src/golang.org/x/vuln\n",
                    "rendered": {
                      "text": "# This assumes the build context, i.e., CWD is vuln/\n\n# ---- Step 0: Setup shared build tools. ----\nRUN apk update && apk add bash git gcc musl-dev linux-headers gcompat\n\n# ---- Step 1: Build govulncheck ----\nCOPY . /go/src/golang.org/x/vuln\n",
                      "markdown": "`# This assumes the build context, i.e., CWD is vuln/\n\n# ---- Step 0: Setup shared build tools. ----\nRUN apk update && apk add bash git gcc musl-dev linux-headers gcompat\n\n# ---- Step 1: Build govulncheck ----\nCOPY . /go/src/golang.org/x/vuln\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/cmd/govulncheck/integration/Dockerfile"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 25,
                  "endLine": 7,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# This assumes the build context, i.e., CWD is vuln/\n\n# ---- Step 0: Setup shared build tools. ----\nRUN apk update && apk add bash git gcc musl-dev linux-headers gcompat\n\n# ---- Step 1: Build govulncheck ----\nCOPY . /go/src/golang.org/x/vuln\n",
                    "rendered": {
                      "text": "# This assumes the build context, i.e., CWD is vuln/\n\n# ---- Step 0: Setup shared build tools. ----\nRUN apk update && apk add bash git gcc musl-dev linux-headers gcompat\n\n# ---- Step 1: Build govulncheck ----\nCOPY . /go/src/golang.org/x/vuln\n",
                      "markdown": "`# This assumes the build context, i.e., CWD is vuln/\n\n# ---- Step 0: Setup shared build tools. ----\nRUN apk update && apk add bash git gcc musl-dev linux-headers gcompat\n\n# ---- Step 1: Build govulncheck ----\nCOPY . /go/src/golang.org/x/vuln\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/util.go"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "}\n\nfunc gomodExists(dir string) bool {\n\tcmd := exec.Command(\"go\", \"env\", \"GOMOD\")\n\tcmd.Dir = dir\n\tout, err := cmd.Output()\n\toutput := strings.TrimSpace(string(out))\n",
                    "rendered": {
                      "text": "}\n\nfunc gomodExists(dir string) bool {\n\tcmd := exec.Command(\"go\", \"env\", \"GOMOD\")\n\tcmd.Dir = dir\n\tout, err := cmd.Output()\n\toutput := strings.TrimSpace(string(out))\n",
                      "markdown": "`}\n\nfunc gomodExists(dir string) bool {\n\tcmd := exec.Command(\"go\", \"env\", \"GOMOD\")\n\tcmd.Dir = dir\n\tout, err := cmd.Output()\n\toutput := strings.TrimSpace(string(out))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/util.go"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 63,
                  "endLine": 25,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\t\t\treturn fmt.Errorf(\"invalid finding: all findings must have an associated OSV\")\n\t\t}\n\t\tif len(f.Trace) < 1 {\n\t\t\treturn fmt.Errorf(\"invalid finding: all callstacks must have at least one frame\")\n\t\t}\n\t\tfor _, frame := range f.Trace {\n\t\t\tif frame.Version != \"\" && frame.Module == \"\" {\n",
                    "rendered": {
                      "text": "\t\t\treturn fmt.Errorf(\"invalid finding: all findings must have an associated OSV\")\n\t\t}\n\t\tif len(f.Trace) < 1 {\n\t\t\treturn fmt.Errorf(\"invalid finding: all callstacks must have at least one frame\")\n\t\t}\n\t\tfor _, frame := range f.Trace {\n\t\t\tif frame.Version != \"\" && frame.Module == \"\" {\n",
                      "markdown": "`\t\t\treturn fmt.Errorf(\"invalid finding: all findings must have an associated OSV\")\n\t\t}\n\t\tif len(f.Trace) < 1 {\n\t\t\treturn fmt.Errorf(\"invalid finding: all callstacks must have at least one frame\")\n\t\t}\n\t\tfor _, frame := range f.Trace {\n\t\t\tif frame.Version != \"\" && frame.Module == \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/query.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 56,
                  "endLine": 56,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\nfunc queryProgressMessage(module, version string) *govulncheck.Progress {\n\treturn &govulncheck.Progress{\n\t\tMessage: fmt.Sprintf(\"Looking up vulnerabilities in %s at %s...\", module, version),\n\t}\n}\n\n",
                    "rendered": {
                      "text": "\nfunc queryProgressMessage(module, version string) *govulncheck.Progress {\n\treturn &govulncheck.Progress{\n\t\tMessage: fmt.Sprintf(\"Looking up vulnerabilities in %s at %s...\", module, version),\n\t}\n}\n\n",
                      "markdown": "`\nfunc queryProgressMessage(module, version string) *govulncheck.Progress {\n\treturn &govulncheck.Progress{\n\t\tMessage: fmt.Sprintf(\"Looking up vulnerabilities in %s at %s...\", module, version),\n\t}\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/flags.go"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 52,
                  "endLine": 138,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\t\t\treturn fmt.Errorf(\"the -tags flag is not supported in extract mode\")\n\t\t}\n\t\tif len(cfg.patterns) != 1 {\n\t\t\treturn fmt.Errorf(\"only 1 binary can be extracted at a time\")\n\t\t}\n\t\tif cfg.format == formatJSON {\n\t\t\treturn fmt.Errorf(\"the json format must be off in extract mode\")\n",
                    "rendered": {
                      "text": "\t\t\treturn fmt.Errorf(\"the -tags flag is not supported in extract mode\")\n\t\t}\n\t\tif len(cfg.patterns) != 1 {\n\t\t\treturn fmt.Errorf(\"only 1 binary can be extracted at a time\")\n\t\t}\n\t\tif cfg.format == formatJSON {\n\t\t\treturn fmt.Errorf(\"the json format must be off in extract mode\")\n",
                      "markdown": "`\t\t\treturn fmt.Errorf(\"the -tags flag is not supported in extract mode\")\n\t\t}\n\t\tif len(cfg.patterns) != 1 {\n\t\t\treturn fmt.Errorf(\"only 1 binary can be extracted at a time\")\n\t\t}\n\t\tif cfg.format == formatJSON {\n\t\t\treturn fmt.Errorf(\"the json format must be off in extract mode\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/flags.go"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 51,
                  "endLine": 125,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t\t\treturn fmt.Errorf(\"the -tags flag is not supported in binary mode\")\n\t\t}\n\t\tif len(cfg.patterns) != 1 {\n\t\t\treturn fmt.Errorf(\"only 1 binary can be analyzed at a time\")\n\t\t}\n\t\tif !isFile(cfg.patterns[0]) {\n\t\t\treturn fmt.Errorf(\"%q is not a file\", cfg.patterns[0])\n",
                    "rendered": {
                      "text": "\t\t\treturn fmt.Errorf(\"the -tags flag is not supported in binary mode\")\n\t\t}\n\t\tif len(cfg.patterns) != 1 {\n\t\t\treturn fmt.Errorf(\"only 1 binary can be analyzed at a time\")\n\t\t}\n\t\tif !isFile(cfg.patterns[0]) {\n\t\t\treturn fmt.Errorf(\"%q is not a file\", cfg.patterns[0])\n",
                      "markdown": "`\t\t\treturn fmt.Errorf(\"the -tags flag is not supported in binary mode\")\n\t\t}\n\t\tif len(cfg.patterns) != 1 {\n\t\t\treturn fmt.Errorf(\"only 1 binary can be analyzed at a time\")\n\t\t}\n\t\tif !isFile(cfg.patterns[0]) {\n\t\t\treturn fmt.Errorf(\"%q is not a file\", cfg.patterns[0])\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/scan/flags.go"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest     bool\n\tshow     ShowFlag\n\tformat   FormatFlag\n\tenv      []string\n}\n\nfunc parseFlags(cfg *config, stderr io.Writer, args []string) error {\n",
                    "rendered": {
                      "text": "\ttest     bool\n\tshow     ShowFlag\n\tformat   FormatFlag\n\tenv      []string\n}\n\nfunc parseFlags(cfg *config, stderr io.Writer, args []string) error {\n",
                      "markdown": "`\ttest     bool\n\tshow     ShowFlag\n\tformat   FormatFlag\n\tenv      []string\n}\n\nfunc parseFlags(cfg *config, stderr io.Writer, args []string) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/test/testenv.go"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 10,
                  "endLine": 12,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\t\"testing\"\n)\n\n// NeedsGoEnv skips t if the current system can't get the environment with\n// “go env” in a subprocess.\nfunc NeedsGoEnv(t testing.TB) {\n\tt.Helper()\n",
                    "rendered": {
                      "text": "\t\"testing\"\n)\n\n// NeedsGoEnv skips t if the current system can't get the environment with\n// “go env” in a subprocess.\nfunc NeedsGoEnv(t testing.TB) {\n\tt.Helper()\n",
                      "markdown": "`\t\"testing\"\n)\n\n// NeedsGoEnv skips t if the current system can't get the environment with\n// “go env” in a subprocess.\nfunc NeedsGoEnv(t testing.TB) {\n\tt.Helper()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/buildinfo/additions_scan_test.go"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 2,
                  "endLine": 148,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\t\t})\n\t\t\tdefer e.Cleanup()\n\n\t\t\tcmd := exec.Command(\"go\", \"build\", \"-o\", \"entry\")\n\t\t\tcmd.Dir = e.Config.Dir\n\t\t\tcmd.Env = e.Config.Env\n\t\t\tout, err := cmd.CombinedOutput()\n",
                    "rendered": {
                      "text": "\t\t\t})\n\t\t\tdefer e.Cleanup()\n\n\t\t\tcmd := exec.Command(\"go\", \"build\", \"-o\", \"entry\")\n\t\t\tcmd.Dir = e.Config.Dir\n\t\t\tcmd.Env = e.Config.Env\n\t\t\tout, err := cmd.CombinedOutput()\n",
                      "markdown": "`\t\t\t})\n\t\t\tdefer e.Cleanup()\n\n\t\t\tcmd := exec.Command(\"go\", \"build\", \"-o\", \"entry\")\n\t\t\tcmd.Dir = e.Config.Dir\n\t\t\tcmd.Env = e.Config.Env\n\t\t\tout, err := cmd.CombinedOutput()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/buildinfo/additions_scan_test.go"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 34,
                  "endLine": 67,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\t\t\t{\"main\", \"main\"},\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want,+got):%s\", diff)\n\t\t\t}\n\t\t})\n",
                    "rendered": {
                      "text": "\t\t\t\t{\"main\", \"main\"},\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want,+got):%s\", diff)\n\t\t\t}\n\t\t})\n",
                      "markdown": "`\t\t\t\t{\"main\", \"main\"},\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want,+got):%s\", diff)\n\t\t\t}\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/buildinfo/additions_scan_test.go"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 5,
                  "endLine": 67,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\t\t{\"main\", \"main\"},\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want,+got):%s\", diff)\n\t\t\t}\n\t\t})\n",
                    "rendered": {
                      "text": "\t\t\t\t{\"main\", \"main\"},\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want,+got):%s\", diff)\n\t\t\t}\n\t\t})\n",
                      "markdown": "`\t\t\t\t{\"main\", \"main\"},\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"(-want,+got):%s\", diff)\n\t\t\t}\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/testenv/testenv.go"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 103,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\tif err := os.WriteFile(mainGo, []byte(\"package main\\nfunc main() {}\\n\"), 0644); err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tcmd := exec.Command(\"go\", \"build\", \"-o\", os.DevNull, mainGo)\n\t\tcmd.Dir = dir\n\t\tif err := cmd.Run(); err != nil {\n\t\t\tgoBuildErr = fmt.Errorf(\"%v: %v\", cmd, err)\n",
                    "rendered": {
                      "text": "\t\tif err := os.WriteFile(mainGo, []byte(\"package main\\nfunc main() {}\\n\"), 0644); err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tcmd := exec.Command(\"go\", \"build\", \"-o\", os.DevNull, mainGo)\n\t\tcmd.Dir = dir\n\t\tif err := cmd.Run(); err != nil {\n\t\t\tgoBuildErr = fmt.Errorf(\"%v: %v\", cmd, err)\n",
                      "markdown": "`\t\tif err := os.WriteFile(mainGo, []byte(\"package main\\nfunc main() {}\\n\"), 0644); err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tcmd := exec.Command(\"go\", \"build\", \"-o\", os.DevNull, mainGo)\n\t\tcmd.Dir = dir\n\t\tif err := cmd.Run(); err != nil {\n\t\t\tgoBuildErr = fmt.Errorf(\"%v: %v\", cmd, err)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/testenv/testenv.go"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tif err != nil {\n\t\treturn fmt.Errorf(\"can't probe for exec support: %w\", err)\n\t}\n\tcmd := exec.Command(exe, \"-test.list=^$\")\n\tcmd.Env = origEnv\n\treturn cmd.Run()\n}\n",
                    "rendered": {
                      "text": "\tif err != nil {\n\t\treturn fmt.Errorf(\"can't probe for exec support: %w\", err)\n\t}\n\tcmd := exec.Command(exe, \"-test.list=^$\")\n\tcmd.Env = origEnv\n\treturn cmd.Run()\n}\n",
                      "markdown": "`\tif err != nil {\n\t\treturn fmt.Errorf(\"can't probe for exec support: %w\", err)\n\t}\n\tcmd := exec.Command(exe, \"-test.list=^$\")\n\tcmd.Env = origEnv\n\treturn cmd.Run()\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/client_test.go"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 34,
                  "endLine": 289,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"ByModules() mismatch (-want +got):\\n%s\", diff)\n\t\t\t}\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"ByModules() mismatch (-want +got):\\n%s\", diff)\n\t\t\t}\n\t\t}\n",
                      "markdown": "`\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"ByModules() mismatch (-want +got):\\n%s\", diff)\n\t\t\t}\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/client_test.go"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 5,
                  "endLine": 289,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"ByModules() mismatch (-want +got):\\n%s\", diff)\n\t\t\t}\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"ByModules() mismatch (-want +got):\\n%s\", diff)\n\t\t\t}\n\t\t}\n",
                      "markdown": "`\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"ByModules() mismatch (-want +got):\\n%s\", diff)\n\t\t\t}\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/client_test.go"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 35,
                  "endLine": 258,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\t\t\t\tVersion: tc.module.Version,\n\t\t\t\t\tEntries: wantEntries,\n\t\t\t\t}}\n\t\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\t\tt.Errorf(\"ByModule() mismatch (-want +got):\\n%s\", diff)\n\t\t\t\t}\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\t\tVersion: tc.module.Version,\n\t\t\t\t\tEntries: wantEntries,\n\t\t\t\t}}\n\t\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\t\tt.Errorf(\"ByModule() mismatch (-want +got):\\n%s\", diff)\n\t\t\t\t}\n\t\t\t}\n",
                      "markdown": "`\t\t\t\t\tVersion: tc.module.Version,\n\t\t\t\t\tEntries: wantEntries,\n\t\t\t\t}}\n\t\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\t\tt.Errorf(\"ByModule() mismatch (-want +got):\\n%s\", diff)\n\t\t\t\t}\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/internal/client/client_test.go"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 6,
                  "endLine": 258,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t\t\tVersion: tc.module.Version,\n\t\t\t\t\tEntries: wantEntries,\n\t\t\t\t}}\n\t\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\t\tt.Errorf(\"ByModule() mismatch (-want +got):\\n%s\", diff)\n\t\t\t\t}\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\t\tVersion: tc.module.Version,\n\t\t\t\t\tEntries: wantEntries,\n\t\t\t\t}}\n\t\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\t\tt.Errorf(\"ByModule() mismatch (-want +got):\\n%s\", diff)\n\t\t\t\t}\n\t\t\t}\n",
                      "markdown": "`\t\t\t\t\tVersion: tc.module.Version,\n\t\t\t\t\tEntries: wantEntries,\n\t\t\t\t}}\n\t\t\t\tif diff := cmp.Diff(want, got); diff != \"\" {\n\t\t\t\t\tt.Errorf(\"ByModule() mismatch (-want +got):\\n%s\", diff)\n\t\t\t\t}\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 37,
                  "endLine": 22,
                  "endColumn": 43,
                  "snippet": {
                    "text": "Contributions to this project must be accompanied by a Contributor License\nAgreement (CLA). You (or your employer) retain the copyright to your\ncontribution; this simply gives us permission to use and redistribute your\ncontributions as part of the project. Head over to\n<https://cla.developers.google.com/> to see your current agreements on file or\nto sign a new one.\n\n",
                    "rendered": {
                      "text": "Contributions to this project must be accompanied by a Contributor License\nAgreement (CLA). You (or your employer) retain the copyright to your\ncontribution; this simply gives us permission to use and redistribute your\ncontributions as part of the project. Head over to\n<https://cla.developers.google.com/> to see your current agreements on file or\nto sign a new one.\n\n",
                      "markdown": "`Contributions to this project must be accompanied by a Contributor License\nAgreement (CLA). You (or your employer) retain the copyright to your\ncontribution; this simply gives us permission to use and redistribute your\ncontributions as part of the project. Head over to\n<https://cla.developers.google.com/> to see your current agreements on file or\nto sign a new one.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/govulncheck.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 20,
                  "endLine": 11,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\nTo report a new *public* vulnerability,\n[open an issue](https://github.com/golang/vulndb/issues/new),\nsend a GitHub PR, or mail a Gerrit CL.\n\nPlease read the\n[Contribution Guidelines](https://golang.org/doc/contribute.html)\n",
                    "rendered": {
                      "text": "\nTo report a new *public* vulnerability,\n[open an issue](https://github.com/golang/vulndb/issues/new),\nsend a GitHub PR, or mail a Gerrit CL.\n\nPlease read the\n[Contribution Guidelines](https://golang.org/doc/contribute.html)\n",
                      "markdown": "`\nTo report a new *public* vulnerability,\n[open an issue](https://github.com/golang/vulndb/issues/new),\nsend a GitHub PR, or mail a Gerrit CL.\n\nPlease read the\n[Contribution Guidelines](https://golang.org/doc/contribute.html)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}