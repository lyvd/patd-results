{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-test"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 112,
                  "endLine": 80,
                  "endColumn": 118,
                  "snippet": {
                    "text": "  export BATS_TEST_TMPDIR\n}\n\n# load the test helper functions like `load` or `run` that are needed to run a (preprocessed) .bats file without bash errors\n# shellcheck source=lib/bats-core/test_functions.bash disable=SC2153\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/test_functions.bash\"\n_bats_test_functions_setup \"$BATS_TEST_NUMBER\"\n",
                    "rendered": {
                      "text": "  export BATS_TEST_TMPDIR\n}\n\n# load the test helper functions like `load` or `run` that are needed to run a (preprocessed) .bats file without bash errors\n# shellcheck source=lib/bats-core/test_functions.bash disable=SC2153\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/test_functions.bash\"\n_bats_test_functions_setup \"$BATS_TEST_NUMBER\"\n",
                      "markdown": "`  export BATS_TEST_TMPDIR\n}\n\n# load the test helper functions like `load` or `run` that are needed to run a (preprocessed) .bats file without bash errors\n# shellcheck source=lib/bats-core/test_functions.bash disable=SC2153\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/test_functions.bash\"\n_bats_test_functions_setup \"$BATS_TEST_NUMBER\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-test"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -eET\n\n# Variables used in other scripts.\nBATS_ENABLE_TIMING=''\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -eET\n\n# Variables used in other scripts.\nBATS_ENABLE_TIMING=''\n",
                      "markdown": "`#!/usr/bin/env bash\nset -eET\n\n# Variables used in other scripts.\nBATS_ENABLE_TIMING=''\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-test"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 33,
                  "endLine": 270,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  # shellcheck disable=SC2064\n  trap \"bats_timeout_trap $target_pid\" ABRT\n  if ! (command -v ps || command -v pkill) >/dev/null; then\n    printf \"Error: Cannot execute timeout because neither pkill nor ps are available on this system!\\n\" >&2\n    exit 1\n  fi\n  # Start another process to kill the children of this process\n",
                    "rendered": {
                      "text": "  # shellcheck disable=SC2064\n  trap \"bats_timeout_trap $target_pid\" ABRT\n  if ! (command -v ps || command -v pkill) >/dev/null; then\n    printf \"Error: Cannot execute timeout because neither pkill nor ps are available on this system!\\n\" >&2\n    exit 1\n  fi\n  # Start another process to kill the children of this process\n",
                      "markdown": "`  # shellcheck disable=SC2064\n  trap \"bats_timeout_trap $target_pid\" ABRT\n  if ! (command -v ps || command -v pkill) >/dev/null; then\n    printf \"Error: Cannot execute timeout because neither pkill nor ps are available on this system!\\n\" >&2\n    exit 1\n  fi\n  # Start another process to kill the children of this process\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-test"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 8,
                  "endLine": 256,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  fi >/dev/null\n}\n\n# sets a timeout for this process\n#\n# using SIGABRT for interprocess communication.\n# Ruled out:\n",
                    "rendered": {
                      "text": "  fi >/dev/null\n}\n\n# sets a timeout for this process\n#\n# using SIGABRT for interprocess communication.\n# Ruled out:\n",
                      "markdown": "`  fi >/dev/null\n}\n\n# sets a timeout for this process\n#\n# using SIGABRT for interprocess communication.\n# Ruled out:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-test"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 56,
                  "endLine": 252,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    # kill in reverse order (latest first)\n    while read -r pid; do\n      kill \"$pid\"\n    done < <(bats_get_child_processes_of \"$parent_pid\" | sort -r)\n  fi >/dev/null\n}\n\n",
                    "rendered": {
                      "text": "    # kill in reverse order (latest first)\n    while read -r pid; do\n      kill \"$pid\"\n    done < <(bats_get_child_processes_of \"$parent_pid\" | sort -r)\n  fi >/dev/null\n}\n\n",
                      "markdown": "`    # kill in reverse order (latest first)\n    while read -r pid; do\n      kill \"$pid\"\n    done < <(bats_get_child_processes_of \"$parent_pid\" | sort -r)\n  fi >/dev/null\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-test"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 3,
                  "endLine": 207,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    if [[ -n \"$should_retry\" ]]; then\n      try_suffix=\"-try$BATS_TEST_TRY_NUMBER\"\n    fi\n    cp \"$BATS_OUT\" \"$BATS_GATHER_TEST_OUTPUTS_IN/$BATS_SUITE_TEST_NUMBER$try_suffix-${BATS_TEST_DESCRIPTION//\\//%2F}.log\"\n  fi\n  rm -f \"$BATS_OUT\"\n  exit \"$status\"\n",
                    "rendered": {
                      "text": "    if [[ -n \"$should_retry\" ]]; then\n      try_suffix=\"-try$BATS_TEST_TRY_NUMBER\"\n    fi\n    cp \"$BATS_OUT\" \"$BATS_GATHER_TEST_OUTPUTS_IN/$BATS_SUITE_TEST_NUMBER$try_suffix-${BATS_TEST_DESCRIPTION//\\//%2F}.log\"\n  fi\n  rm -f \"$BATS_OUT\"\n  exit \"$status\"\n",
                      "markdown": "`    if [[ -n \"$should_retry\" ]]; then\n      try_suffix=\"-try$BATS_TEST_TRY_NUMBER\"\n    fi\n    cp \"$BATS_OUT\" \"$BATS_GATHER_TEST_OUTPUTS_IN/$BATS_SUITE_TEST_NUMBER$try_suffix-${BATS_TEST_DESCRIPTION//\\//%2F}.log\"\n  fi\n  rm -f \"$BATS_OUT\"\n  exit \"$status\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-test"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 21,
                  "endLine": 134,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      exit_metadata+=\" $BATS_TEST_SKIPPED\"\n    fi\n  elif [[ \"${BATS_TIMED_OUT-NOTSET}\" != NOTSET ]]; then\n    exit_metadata=\" # timeout after ${BATS_TEST_TIMEOUT}s\"\n  fi\n\n  BATS_TEST_TIME=''\n",
                    "rendered": {
                      "text": "      exit_metadata+=\" $BATS_TEST_SKIPPED\"\n    fi\n  elif [[ \"${BATS_TIMED_OUT-NOTSET}\" != NOTSET ]]; then\n    exit_metadata=\" # timeout after ${BATS_TEST_TIMEOUT}s\"\n  fi\n\n  BATS_TEST_TIME=''\n",
                      "markdown": "`      exit_metadata+=\" $BATS_TEST_SKIPPED\"\n    fi\n  elif [[ \"${BATS_TIMED_OUT-NOTSET}\" != NOTSET ]]; then\n    exit_metadata=\" # timeout after ${BATS_TEST_TIMEOUT}s\"\n  fi\n\n  BATS_TEST_TIME=''\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-test"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 68,
                  "endLine": 125,
                  "snippet": {
                    "text": "  local killer_pid=${1:-}\n  trap - ERR EXIT\n  if [[ -n \"${BATS_TEST_TIMEOUT:-}\" ]]; then\n    # Kill the watchdog in the case of of kernel finished before the timeout\n    bats_abort_timeout_countdown \"$killer_pid\" || status=1\n  fi\n\n  if [[ -n \"$BATS_TEST_SKIPPED\" ]]; then\n",
                    "rendered": {
                      "text": "  local killer_pid=${1:-}\n  trap - ERR EXIT\n  if [[ -n \"${BATS_TEST_TIMEOUT:-}\" ]]; then\n    # Kill the watchdog in the case of of kernel finished before the timeout\n    bats_abort_timeout_countdown \"$killer_pid\" || status=1\n  fi\n\n  if [[ -n \"$BATS_TEST_SKIPPED\" ]]; then\n",
                      "markdown": "`  local killer_pid=${1:-}\n  trap - ERR EXIT\n  if [[ -n \"${BATS_TEST_TIMEOUT:-}\" ]]; then\n    # Kill the watchdog in the case of of kernel finished before the timeout\n    bats_abort_timeout_countdown \"$killer_pid\" || status=1\n  fi\n\n  if [[ -n \"$BATS_TEST_SKIPPED\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-test"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 112,
                  "endLine": 80,
                  "endColumn": 118,
                  "snippet": {
                    "text": "  export BATS_TEST_TMPDIR\n}\n\n# load the test helper functions like `load` or `run` that are needed to run a (preprocessed) .bats file without bash errors\n# shellcheck source=lib/bats-core/test_functions.bash disable=SC2153\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/test_functions.bash\"\n_bats_test_functions_setup \"$BATS_TEST_NUMBER\"\n",
                    "rendered": {
                      "text": "  export BATS_TEST_TMPDIR\n}\n\n# load the test helper functions like `load` or `run` that are needed to run a (preprocessed) .bats file without bash errors\n# shellcheck source=lib/bats-core/test_functions.bash disable=SC2153\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/test_functions.bash\"\n_bats_test_functions_setup \"$BATS_TEST_NUMBER\"\n",
                      "markdown": "`  export BATS_TEST_TMPDIR\n}\n\n# load the test helper functions like `load` or `run` that are needed to run a (preprocessed) .bats file without bash errors\n# shellcheck source=lib/bats-core/test_functions.bash disable=SC2153\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/test_functions.bash\"\n_bats_test_functions_setup \"$BATS_TEST_NUMBER\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-test"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -eET\n\n# Variables used in other scripts.\nBATS_ENABLE_TIMING=''\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -eET\n\n# Variables used in other scripts.\nBATS_ENABLE_TIMING=''\n",
                      "markdown": "`#!/usr/bin/env bash\nset -eET\n\n# Variables used in other scripts.\nBATS_ENABLE_TIMING=''\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/exit_11.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nexit 11",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nexit 11",
                      "markdown": "`#!/usr/bin/env bash\nexit 11`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/exit_11.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nexit 11",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nexit 11",
                      "markdown": "`#!/usr/bin/env bash\nexit 11`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/whitespace_no_shellcheck.bats"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 12,
                  "endLine": 21,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t  :\n\t}\n\n\t@test\t\"tabs at beginning, before description, before brace\"\t{\n\t  :\n\t}\n\n",
                    "rendered": {
                      "text": "\t  :\n\t}\n\n\t@test\t\"tabs at beginning, before description, before brace\"\t{\n\t  :\n\t}\n\n",
                      "markdown": "`\t  :\n\t}\n\n\t@test\t\"tabs at beginning, before description, before brace\"\t{\n\t  :\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/whitespace_no_shellcheck.bats"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 12,
                  "endLine": 17,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  :\n}\n\n\t@test\t\"tabs at beginning of line and before description\" {\n\t  :\n\t}\n\n",
                    "rendered": {
                      "text": "  :\n}\n\n\t@test\t\"tabs at beginning of line and before description\" {\n\t  :\n\t}\n\n",
                      "markdown": "`  :\n}\n\n\t@test\t\"tabs at beginning of line and before description\" {\n\t  :\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/whitespace_no_shellcheck.bats"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 11,
                  "endLine": 5,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  :\n}\n\n\t@test \"tab at beginning of line\" {\n\t  :\n\t}\n\n",
                    "rendered": {
                      "text": "  :\n}\n\n\t@test \"tab at beginning of line\" {\n\t  :\n\t}\n\n",
                      "markdown": "`  :\n}\n\n\t@test \"tab at beginning of line\" {\n\t  :\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/single_line_no_shellcheck.bats"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 27,
                  "endLine": 5,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n@test \"passing\" { true; }\n\n@test \"input redirection\" { diff - <(echo hello); } <<EOS\nhello\nEOS\n\n",
                    "rendered": {
                      "text": "\n@test \"passing\" { true; }\n\n@test \"input redirection\" { diff - <(echo hello); } <<EOS\nhello\nEOS\n\n",
                      "markdown": "`\n@test \"passing\" { true; }\n\n@test \"input redirection\" { diff - <(echo hello); } <<EOS\nhello\nEOS\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-file"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 54,
                  "endLine": 360,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\ntrap 'BATS_INTERRUPTED=true' INT\n\nBATS_FILE_FIRST_TEST_NUMBER_IN_SUITE=0 # predeclare as Bash 3.2 does not support declare -g\nbats_read_tests_list_file\n\n# don't run potentially expensive setup/teardown_file\n",
                    "rendered": {
                      "text": "\ntrap 'BATS_INTERRUPTED=true' INT\n\nBATS_FILE_FIRST_TEST_NUMBER_IN_SUITE=0 # predeclare as Bash 3.2 does not support declare -g\nbats_read_tests_list_file\n\n# don't run potentially expensive setup/teardown_file\n",
                      "markdown": "`\ntrap 'BATS_INTERRUPTED=true' INT\n\nBATS_FILE_FIRST_TEST_NUMBER_IN_SUITE=0 # predeclare as Bash 3.2 does not support declare -g\nbats_read_tests_list_file\n\n# don't run potentially expensive setup/teardown_file\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-file"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -eET\n\nflags=('--dummy-flag')\nnum_jobs=${BATS_NUMBER_OF_PARALLEL_JOBS:-1}\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -eET\n\nflags=('--dummy-flag')\nnum_jobs=${BATS_NUMBER_OF_PARALLEL_JOBS:-1}\n",
                      "markdown": "`#!/usr/bin/env bash\nset -eET\n\nflags=('--dummy-flag')\nnum_jobs=${BATS_NUMBER_OF_PARALLEL_JOBS:-1}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-file"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 54,
                  "endLine": 360,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\ntrap 'BATS_INTERRUPTED=true' INT\n\nBATS_FILE_FIRST_TEST_NUMBER_IN_SUITE=0 # predeclare as Bash 3.2 does not support declare -g\nbats_read_tests_list_file\n\n# don't run potentially expensive setup/teardown_file\n",
                    "rendered": {
                      "text": "\ntrap 'BATS_INTERRUPTED=true' INT\n\nBATS_FILE_FIRST_TEST_NUMBER_IN_SUITE=0 # predeclare as Bash 3.2 does not support declare -g\nbats_read_tests_list_file\n\n# don't run potentially expensive setup/teardown_file\n",
                      "markdown": "`\ntrap 'BATS_INTERRUPTED=true' INT\n\nBATS_FILE_FIRST_TEST_NUMBER_IN_SUITE=0 # predeclare as Bash 3.2 does not support declare -g\nbats_read_tests_list_file\n\n# don't run potentially expensive setup/teardown_file\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-file"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 1,
                  "endLine": 191,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  local status=0\n  wait \"$(cat \"$output_folder/$test_number_in_suite/pid\")\" || status=1\n  cat \"$output_folder/$test_number_in_suite/stdout\"\n  cat \"$output_folder/$test_number_in_suite/stderr\" >&2\n  return $status\n}\n\n",
                    "rendered": {
                      "text": "  local status=0\n  wait \"$(cat \"$output_folder/$test_number_in_suite/pid\")\" || status=1\n  cat \"$output_folder/$test_number_in_suite/stdout\"\n  cat \"$output_folder/$test_number_in_suite/stderr\" >&2\n  return $status\n}\n\n",
                      "markdown": "`  local status=0\n  wait \"$(cat \"$output_folder/$test_number_in_suite/pid\")\" || status=1\n  cat \"$output_folder/$test_number_in_suite/stdout\"\n  cat \"$output_folder/$test_number_in_suite/stderr\" >&2\n  return $status\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-file"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 1,
                  "endLine": 190,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  local test_number_in_suite=$1\n  local status=0\n  wait \"$(cat \"$output_folder/$test_number_in_suite/pid\")\" || status=1\n  cat \"$output_folder/$test_number_in_suite/stdout\"\n  cat \"$output_folder/$test_number_in_suite/stderr\" >&2\n  return $status\n}\n",
                    "rendered": {
                      "text": "  local test_number_in_suite=$1\n  local status=0\n  wait \"$(cat \"$output_folder/$test_number_in_suite/pid\")\" || status=1\n  cat \"$output_folder/$test_number_in_suite/stdout\"\n  cat \"$output_folder/$test_number_in_suite/stderr\" >&2\n  return $status\n}\n",
                      "markdown": "`  local test_number_in_suite=$1\n  local status=0\n  wait \"$(cat \"$output_folder/$test_number_in_suite/pid\")\" || status=1\n  cat \"$output_folder/$test_number_in_suite/stdout\"\n  cat \"$output_folder/$test_number_in_suite/stderr\" >&2\n  return $status\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-file"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -eET\n\nflags=('--dummy-flag')\nnum_jobs=${BATS_NUMBER_OF_PARALLEL_JOBS:-1}\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -eET\n\nflags=('--dummy-flag')\nnum_jobs=${BATS_NUMBER_OF_PARALLEL_JOBS:-1}\n",
                      "markdown": "`#!/usr/bin/env bash\nset -eET\n\nflags=('--dummy-flag')\nnum_jobs=${BATS_NUMBER_OF_PARALLEL_JOBS:-1}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-tap"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -e\ntrap '' INT\n\n# shellcheck source=lib/bats-core/formatter.bash\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -e\ntrap '' INT\n\n# shellcheck source=lib/bats-core/formatter.bash\n",
                      "markdown": "`#!/usr/bin/env bash\nset -e\ntrap '' INT\n\n# shellcheck source=lib/bats-core/formatter.bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-tap"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 14,
                  "endLine": 30,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    printf \" # in %d ms\" \"$BATS_FORMATTER_TEST_DURATION\"\n  fi\n  if [[ \"${BATS_FORMATTER_TEST_TIMEOUT-x}\" != x ]]; then\n    printf \" # timeout after %d s\" \"${BATS_FORMATTER_TEST_TIMEOUT}\"\n  fi\n  printf \"\\n\"\n}\n",
                    "rendered": {
                      "text": "    printf \" # in %d ms\" \"$BATS_FORMATTER_TEST_DURATION\"\n  fi\n  if [[ \"${BATS_FORMATTER_TEST_TIMEOUT-x}\" != x ]]; then\n    printf \" # timeout after %d s\" \"${BATS_FORMATTER_TEST_TIMEOUT}\"\n  fi\n  printf \"\\n\"\n}\n",
                      "markdown": "`    printf \" # in %d ms\" \"$BATS_FORMATTER_TEST_DURATION\"\n  fi\n  if [[ \"${BATS_FORMATTER_TEST_TIMEOUT-x}\" != x ]]; then\n    printf \" # timeout after %d s\" \"${BATS_FORMATTER_TEST_TIMEOUT}\"\n  fi\n  printf \"\\n\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-tap"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -e\ntrap '' INT\n\n# shellcheck source=lib/bats-core/formatter.bash\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -e\ntrap '' INT\n\n# shellcheck source=lib/bats-core/formatter.bash\n",
                      "markdown": "`#!/usr/bin/env bash\nset -e\ntrap '' INT\n\n# shellcheck source=lib/bats-core/formatter.bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 21,
                  "endLine": 393,
                  "endColumn": 25,
                  "snippet": {
                    "text": "fi\n\nif [[ \"${#arguments[@]}\" -eq 0 ]]; then\n  abort 'Must specify at least one <test>'\nfi\n\nif [[ -n \"$report_formatter\" ]]; then\n",
                    "rendered": {
                      "text": "fi\n\nif [[ \"${#arguments[@]}\" -eq 0 ]]; then\n  abort 'Must specify at least one <test>'\nfi\n\nif [[ -n \"$report_formatter\" ]]; then\n",
                      "markdown": "`fi\n\nif [[ \"${#arguments[@]}\" -eq 0 ]]; then\n  abort 'Must specify at least one <test>'\nfi\n\nif [[ -n \"$report_formatter\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 116,
                  "endLine": 165,
                  "endColumn": 122,
                  "snippet": {
                    "text": "\nunset flags recursive formatter_flags\nflags=('--dummy-flag')           # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter_flags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter=${BATS_FORMATTER:-'tap'}\nreport_formatter=''\nrecursive=\n",
                    "rendered": {
                      "text": "\nunset flags recursive formatter_flags\nflags=('--dummy-flag')           # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter_flags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter=${BATS_FORMATTER:-'tap'}\nreport_formatter=''\nrecursive=\n",
                      "markdown": "`\nunset flags recursive formatter_flags\nflags=('--dummy-flag')           # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter_flags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter=${BATS_FORMATTER:-'tap'}\nreport_formatter=''\nrecursive=\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 116,
                  "endLine": 164,
                  "endColumn": 122,
                  "snippet": {
                    "text": "arguments=()\n\nunset flags recursive formatter_flags\nflags=('--dummy-flag')           # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter_flags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter=${BATS_FORMATTER:-'tap'}\nreport_formatter=''\n",
                    "rendered": {
                      "text": "arguments=()\n\nunset flags recursive formatter_flags\nflags=('--dummy-flag')           # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter_flags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter=${BATS_FORMATTER:-'tap'}\nreport_formatter=''\n",
                      "markdown": "`arguments=()\n\nunset flags recursive formatter_flags\nflags=('--dummy-flag')           # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter_flags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter=${BATS_FORMATTER:-'tap'}\nreport_formatter=''\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -e\n\nexport BATS_VERSION='1.11.0'\nVALID_FORMATTERS=\"pretty, junit, tap, tap13\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -e\n\nexport BATS_VERSION='1.11.0'\nVALID_FORMATTERS=\"pretty, junit, tap, tap13\"\n",
                      "markdown": "`#!/usr/bin/env bash\nset -e\n\nexport BATS_VERSION='1.11.0'\nVALID_FORMATTERS=\"pretty, junit, tap, tap13\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats"
                },
                "region": {
                  "startLine": 500,
                  "startColumn": 1,
                  "endLine": 500,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  local output_file=$1 status=0\n  shift\n  exec 3<&1 # use FD3 to get around pipe\n  tee >(cat >&3) | \"$@\" >\"$output_file\" || status=$?\n  if (( status != 0 )); then\n    printf \"ERROR: command \\`%s\\` failed with status %d\\n\" \"$*\" \"$status\" >&2\n  fi\n",
                    "rendered": {
                      "text": "  local output_file=$1 status=0\n  shift\n  exec 3<&1 # use FD3 to get around pipe\n  tee >(cat >&3) | \"$@\" >\"$output_file\" || status=$?\n  if (( status != 0 )); then\n    printf \"ERROR: command \\`%s\\` failed with status %d\\n\" \"$*\" \"$status\" >&2\n  fi\n",
                      "markdown": "`  local output_file=$1 status=0\n  shift\n  exec 3<&1 # use FD3 to get around pipe\n  tee >(cat >&3) | \"$@\" >\"$output_file\" || status=$?\n  if (( status != 0 )); then\n    printf \"ERROR: command \\`%s\\` failed with status %d\\n\" \"$*\" \"$status\" >&2\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 91,
                  "endLine": 471,
                  "endColumn": 97,
                  "snippet": {
                    "text": "    if [[ \"$recursive\" -eq 1 ]]; then\n      while IFS= read -r -d $'\\0' file; do\n        filenames+=(\"$file\")\n      done < <(find -L \"$filename\" -type f -name \"*.${BATS_FILE_EXTENSION:-bats}\" -print0 | sort -z)\n    else\n      for suite_filename in \"$filename\"/*.\"${BATS_FILE_EXTENSION:-bats}\"; do\n        filenames+=(\"$suite_filename\")\n",
                    "rendered": {
                      "text": "    if [[ \"$recursive\" -eq 1 ]]; then\n      while IFS= read -r -d $'\\0' file; do\n        filenames+=(\"$file\")\n      done < <(find -L \"$filename\" -type f -name \"*.${BATS_FILE_EXTENSION:-bats}\" -print0 | sort -z)\n    else\n      for suite_filename in \"$filename\"/*.\"${BATS_FILE_EXTENSION:-bats}\"; do\n        filenames+=(\"$suite_filename\")\n",
                      "markdown": "`    if [[ \"$recursive\" -eq 1 ]]; then\n      while IFS= read -r -d $'\\0' file; do\n        filenames+=(\"$file\")\n      done < <(find -L \"$filename\" -type f -name \"*.${BATS_FILE_EXTENSION:-bats}\" -print0 | sort -z)\n    else\n      for suite_filename in \"$filename\"/*.\"${BATS_FILE_EXTENSION:-bats}\"; do\n        filenames+=(\"$suite_filename\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 3,
                  "endLine": 335,
                  "endColumn": 8,
                  "snippet": {
                    "text": "      post_cat=$'\\x1B[0m'\n    fi\n    printf \"\\nThe following warnings were encountered during tests:\\n%s\" \"$pre_cat\"\n    cat \"$BATS_WARNING_FILE\"\n    printf \"%s\" \"$post_cat\"\n  fi >&2\n\n",
                    "rendered": {
                      "text": "      post_cat=$'\\x1B[0m'\n    fi\n    printf \"\\nThe following warnings were encountered during tests:\\n%s\" \"$pre_cat\"\n    cat \"$BATS_WARNING_FILE\"\n    printf \"%s\" \"$post_cat\"\n  fi >&2\n\n",
                      "markdown": "`      post_cat=$'\\x1B[0m'\n    fi\n    printf \"\\nThe following warnings were encountered during tests:\\n%s\" \"$pre_cat\"\n    cat \"$BATS_WARNING_FILE\"\n    printf \"%s\" \"$post_cat\"\n  fi >&2\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 10,
                  "endLine": 269,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    shift\n    output_dir=\"$1\"\n    if [ -d \"$output_dir\" ]; then\n      if ! find \"$output_dir\" -mindepth 1 -exec false {} + 2>/dev/null; then\n        abort --no-print-usage \"Directory '$output_dir' must be empty for --gather-test-outputs-in\"\n      fi\n    elif ! mkdir \"$output_dir\" 2>/dev/null; then\n",
                    "rendered": {
                      "text": "    shift\n    output_dir=\"$1\"\n    if [ -d \"$output_dir\" ]; then\n      if ! find \"$output_dir\" -mindepth 1 -exec false {} + 2>/dev/null; then\n        abort --no-print-usage \"Directory '$output_dir' must be empty for --gather-test-outputs-in\"\n      fi\n    elif ! mkdir \"$output_dir\" 2>/dev/null; then\n",
                      "markdown": "`    shift\n    output_dir=\"$1\"\n    if [ -d \"$output_dir\" ]; then\n      if ! find \"$output_dir\" -mindepth 1 -exec false {} + 2>/dev/null; then\n        abort --no-print-usage \"Directory '$output_dir' must be empty for --gather-test-outputs-in\"\n      fi\n    elif ! mkdir \"$output_dir\" 2>/dev/null; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 11,
                  "endLine": 195,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    ;;\n  -F | --formatter)\n    shift\n    # allow cat formatter to see extended output but don't advertise to users\n    if [[ $1 =~ ^(pretty|junit|tap|tap13|cat|/.*)$ ]]; then\n      formatter=\"$1\"\n    else\n",
                    "rendered": {
                      "text": "    ;;\n  -F | --formatter)\n    shift\n    # allow cat formatter to see extended output but don't advertise to users\n    if [[ $1 =~ ^(pretty|junit|tap|tap13|cat|/.*)$ ]]; then\n      formatter=\"$1\"\n    else\n",
                      "markdown": "`    ;;\n  -F | --formatter)\n    shift\n    # allow cat formatter to see extended output but don't advertise to users\n    if [[ $1 =~ ^(pretty|junit|tap|tap13|cat|/.*)$ ]]; then\n      formatter=\"$1\"\n    else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 116,
                  "endLine": 165,
                  "endColumn": 122,
                  "snippet": {
                    "text": "\nunset flags recursive formatter_flags\nflags=('--dummy-flag')           # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter_flags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter=${BATS_FORMATTER:-'tap'}\nreport_formatter=''\nrecursive=\n",
                    "rendered": {
                      "text": "\nunset flags recursive formatter_flags\nflags=('--dummy-flag')           # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter_flags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter=${BATS_FORMATTER:-'tap'}\nreport_formatter=''\nrecursive=\n",
                      "markdown": "`\nunset flags recursive formatter_flags\nflags=('--dummy-flag')           # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter_flags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter=${BATS_FORMATTER:-'tap'}\nreport_formatter=''\nrecursive=\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 116,
                  "endLine": 164,
                  "endColumn": 122,
                  "snippet": {
                    "text": "arguments=()\n\nunset flags recursive formatter_flags\nflags=('--dummy-flag')           # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter_flags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter=${BATS_FORMATTER:-'tap'}\nreport_formatter=''\n",
                    "rendered": {
                      "text": "arguments=()\n\nunset flags recursive formatter_flags\nflags=('--dummy-flag')           # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter_flags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter=${BATS_FORMATTER:-'tap'}\nreport_formatter=''\n",
                      "markdown": "`arguments=()\n\nunset flags recursive formatter_flags\nflags=('--dummy-flag')           # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter_flags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nformatter=${BATS_FORMATTER:-'tap'}\nreport_formatter=''\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 40,
                  "endLine": 136,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\narguments=()\n\n# list of single char options that don't expect a value\nsingle_char_flags=\"hvcprtTx\"\n\n# Unpack single-character options bundled together, e.g. -cr, -pr.\n",
                    "rendered": {
                      "text": "\narguments=()\n\n# list of single char options that don't expect a value\nsingle_char_flags=\"hvcprtTx\"\n\n# Unpack single-character options bundled together, e.g. -cr, -pr.\n",
                      "markdown": "`\narguments=()\n\n# list of single char options that don't expect a value\nsingle_char_flags=\"hvcprtTx\"\n\n# Unpack single-character options bundled together, e.g. -cr, -pr.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nHELP_TEXT_HEADER\n\n  cat <<'HELP_TEXT_BODY'\n  <tests> is the path to a Bats test file, or the path to a directory\n  containing Bats test files (ending with \".bats\")\n\n",
                    "rendered": {
                      "text": "\nHELP_TEXT_HEADER\n\n  cat <<'HELP_TEXT_BODY'\n  <tests> is the path to a Bats test file, or the path to a directory\n  containing Bats test files (ending with \".bats\")\n\n",
                      "markdown": "`\nHELP_TEXT_HEADER\n\n  cat <<'HELP_TEXT_BODY'\n  <tests> is the path to a Bats test file, or the path to a directory\n  containing Bats test files (ending with \".bats\")\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  local cmd=\"${0##*/}\"\n  local line\n\n  cat <<HELP_TEXT_HEADER\nUsage: ${cmd} [OPTIONS] <tests>\n       ${cmd} [-h | -v]\n\n",
                    "rendered": {
                      "text": "  local cmd=\"${0##*/}\"\n  local line\n\n  cat <<HELP_TEXT_HEADER\nUsage: ${cmd} [OPTIONS] <tests>\n       ${cmd} [-h | -v]\n\n",
                      "markdown": "`  local cmd=\"${0##*/}\"\n  local line\n\n  cat <<HELP_TEXT_HEADER\nUsage: ${cmd} [OPTIONS] <tests>\n       ${cmd} [-h | -v]\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -e\n\nexport BATS_VERSION='1.11.0'\nVALID_FORMATTERS=\"pretty, junit, tap, tap13\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -e\n\nexport BATS_VERSION='1.11.0'\nVALID_FORMATTERS=\"pretty, junit, tap, tap13\"\n",
                      "markdown": "`#!/usr/bin/env bash\nset -e\n\nexport BATS_VERSION='1.11.0'\nVALID_FORMATTERS=\"pretty, junit, tap, tap13\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-tap13"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -e\n\nyaml_block_open=''\nadd_yaml_entry() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -e\n\nyaml_block_open=''\nadd_yaml_entry() {\n",
                      "markdown": "`#!/usr/bin/env bash\nset -e\n\nyaml_block_open=''\nadd_yaml_entry() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-tap13"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -e\n\nyaml_block_open=''\nadd_yaml_entry() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -e\n\nyaml_block_open=''\nadd_yaml_entry() {\n",
                      "markdown": "`#!/usr/bin/env bash\nset -e\n\nyaml_block_open=''\nadd_yaml_entry() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.devcontainer/Dockerfile"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 7,
                  "endLine": 8,
                  "endColumn": 15,
                  "snippet": {
                    "text": "# Install parallel and accept the citation notice (we aren't using this in a\n# context where it make sense to cite GNU Parallel).\nRUN echo \"@edgecomm http://dl-cdn.alpinelinux.org/alpine/edge/community\"  >> /etc/apk/repositories && \\\n    apk update && \\\n    apk add --no-cache parallel ncurses shellcheck@edgecomm && \\\n    mkdir -p ~/.parallel && touch ~/.parallel/will-cite && \\\n    curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | tar xzf - -C /usr/local/bin && \\\n",
                    "rendered": {
                      "text": "# Install parallel and accept the citation notice (we aren't using this in a\n# context where it make sense to cite GNU Parallel).\nRUN echo \"@edgecomm http://dl-cdn.alpinelinux.org/alpine/edge/community\"  >> /etc/apk/repositories && \\\n    apk update && \\\n    apk add --no-cache parallel ncurses shellcheck@edgecomm && \\\n    mkdir -p ~/.parallel && touch ~/.parallel/will-cite && \\\n    curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | tar xzf - -C /usr/local/bin && \\\n",
                      "markdown": "`# Install parallel and accept the citation notice (we aren't using this in a\n# context where it make sense to cite GNU Parallel).\nRUN echo \"@edgecomm http://dl-cdn.alpinelinux.org/alpine/edge/community\"  >> /etc/apk/repositories && \\\n    apk update && \\\n    apk add --no-cache parallel ncurses shellcheck@edgecomm && \\\n    mkdir -p ~/.parallel && touch ~/.parallel/will-cite && \\\n    curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | tar xzf - -C /usr/local/bin && \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.devcontainer/Dockerfile"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 3,
                  "endLine": 12,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    apk add --no-cache parallel ncurses shellcheck@edgecomm && \\\n    mkdir -p ~/.parallel && touch ~/.parallel/will-cite && \\\n    curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | tar xzf - -C /usr/local/bin && \\\n    chmod +x /usr/local/bin/rush\n\nRUN ln -s /opt/bats/bin/bats /usr/sbin/bats\nCOPY . /opt/bats/\n",
                    "rendered": {
                      "text": "    apk add --no-cache parallel ncurses shellcheck@edgecomm && \\\n    mkdir -p ~/.parallel && touch ~/.parallel/will-cite && \\\n    curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | tar xzf - -C /usr/local/bin && \\\n    chmod +x /usr/local/bin/rush\n\nRUN ln -s /opt/bats/bin/bats /usr/sbin/bats\nCOPY . /opt/bats/\n",
                      "markdown": "`    apk add --no-cache parallel ncurses shellcheck@edgecomm && \\\n    mkdir -p ~/.parallel && touch ~/.parallel/will-cite && \\\n    curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | tar xzf - -C /usr/local/bin && \\\n    chmod +x /usr/local/bin/rush\n\nRUN ln -s /opt/bats/bin/bats /usr/sbin/bats\nCOPY . /opt/bats/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.devcontainer/Dockerfile"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 100,
                  "endLine": 11,
                  "endColumn": 105,
                  "snippet": {
                    "text": "    apk update && \\\n    apk add --no-cache parallel ncurses shellcheck@edgecomm && \\\n    mkdir -p ~/.parallel && touch ~/.parallel/will-cite && \\\n    curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | tar xzf - -C /usr/local/bin && \\\n    chmod +x /usr/local/bin/rush\n\nRUN ln -s /opt/bats/bin/bats /usr/sbin/bats\n",
                    "rendered": {
                      "text": "    apk update && \\\n    apk add --no-cache parallel ncurses shellcheck@edgecomm && \\\n    mkdir -p ~/.parallel && touch ~/.parallel/will-cite && \\\n    curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | tar xzf - -C /usr/local/bin && \\\n    chmod +x /usr/local/bin/rush\n\nRUN ln -s /opt/bats/bin/bats /usr/sbin/bats\n",
                      "markdown": "`    apk update && \\\n    apk add --no-cache parallel ncurses shellcheck@edgecomm && \\\n    mkdir -p ~/.parallel && touch ~/.parallel/will-cite && \\\n    curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | tar xzf - -C /usr/local/bin && \\\n    chmod +x /usr/local/bin/rush\n\nRUN ln -s /opt/bats/bin/bats /usr/sbin/bats\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.devcontainer/Dockerfile"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 3,
                  "endLine": 11,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    apk update && \\\n    apk add --no-cache parallel ncurses shellcheck@edgecomm && \\\n    mkdir -p ~/.parallel && touch ~/.parallel/will-cite && \\\n    curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | tar xzf - -C /usr/local/bin && \\\n    chmod +x /usr/local/bin/rush\n\nRUN ln -s /opt/bats/bin/bats /usr/sbin/bats\n",
                    "rendered": {
                      "text": "    apk update && \\\n    apk add --no-cache parallel ncurses shellcheck@edgecomm && \\\n    mkdir -p ~/.parallel && touch ~/.parallel/will-cite && \\\n    curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | tar xzf - -C /usr/local/bin && \\\n    chmod +x /usr/local/bin/rush\n\nRUN ln -s /opt/bats/bin/bats /usr/sbin/bats\n",
                      "markdown": "`    apk update && \\\n    apk add --no-cache parallel ncurses shellcheck@edgecomm && \\\n    mkdir -p ~/.parallel && touch ~/.parallel/will-cite && \\\n    curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | tar xzf - -C /usr/local/bin && \\\n    chmod +x /usr/local/bin/rush\n\nRUN ln -s /opt/bats/bin/bats /usr/sbin/bats\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/formatter/echo-formatter"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -e\n\n# shellcheck source=lib/bats-core/formatter.bash\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -e\n\n# shellcheck source=lib/bats-core/formatter.bash\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -e\n\n# shellcheck source=lib/bats-core/formatter.bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/formatter/echo-formatter"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -e\n\n# shellcheck source=lib/bats-core/formatter.bash\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -e\n\n# shellcheck source=lib/bats-core/formatter.bash\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -e\n\n# shellcheck source=lib/bats-core/formatter.bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/formatter/dummy-formatter"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\ncat >/dev/null # ignore input\n\necho \"Dummy Formatter!\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\ncat >/dev/null # ignore input\n\necho \"Dummy Formatter!\"\n",
                      "markdown": "`#!/usr/bin/env bash\n\ncat >/dev/null # ignore input\n\necho \"Dummy Formatter!\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/formatter/dummy-formatter"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 3,
                  "endColumn": 4,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\ncat >/dev/null # ignore input\n\necho \"Dummy Formatter!\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\ncat >/dev/null # ignore input\n\necho \"Dummy Formatter!\"\n",
                      "markdown": "`#!/usr/bin/env bash\n\ncat >/dev/null # ignore input\n\necho \"Dummy Formatter!\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/formatter/dummy-formatter"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\ncat >/dev/null # ignore input\n\necho \"Dummy Formatter!\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\ncat >/dev/null # ignore input\n\necho \"Dummy Formatter!\"\n",
                      "markdown": "`#!/usr/bin/env bash\n\ncat >/dev/null # ignore input\n\necho \"Dummy Formatter!\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/load/find_library_helper_err.bats"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 15,
                  "endLine": 1,
                  "endColumn": 21,
                  "snippet": {
                    "text": "@test \"does not find a library\" {\n  run find_in_bats_lib_path \"$LIBRARY_NAME\"\n  [ $status -eq 1 ]\n}\n",
                    "rendered": {
                      "text": "@test \"does not find a library\" {\n  run find_in_bats_lib_path \"$LIBRARY_NAME\"\n  [ $status -eq 1 ]\n}\n",
                      "markdown": "`@test \"does not find a library\" {\n  run find_in_bats_lib_path \"$LIBRARY_NAME\"\n  [ $status -eq 1 ]\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/intact.bats"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 5,
                  "endLine": 2,
                  "endColumn": 10,
                  "snippet": {
                    "text": "@test \"dash-e on beginning of line\" {\n  run cat - <<INPUT\n-e\nINPUT\n  test \"$output\" = \"-e\"\n",
                    "rendered": {
                      "text": "@test \"dash-e on beginning of line\" {\n  run cat - <<INPUT\n-e\nINPUT\n  test \"$output\" = \"-e\"\n",
                      "markdown": "`@test \"dash-e on beginning of line\" {\n  run cat - <<INPUT\n-e\nINPUT\n  test \"$output\" = \"-e\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/unofficial_bash_strict_mode.bats"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 17,
                  "endLine": 2,
                  "endColumn": 23,
                  "snippet": {
                    "text": "load unofficial_bash_strict_mode\n@test \"unofficial Bash strict mode conditions met\" {\n  :\n}\n",
                    "rendered": {
                      "text": "load unofficial_bash_strict_mode\n@test \"unofficial Bash strict mode conditions met\" {\n  :\n}\n",
                      "markdown": "`load unofficial_bash_strict_mode\n@test \"unofficial Bash strict mode conditions met\" {\n  :\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/unofficial_bash_strict_mode.bats"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 17,
                  "endLine": 2,
                  "endColumn": 23,
                  "snippet": {
                    "text": "load unofficial_bash_strict_mode\n@test \"unofficial Bash strict mode conditions met\" {\n  :\n}\n",
                    "rendered": {
                      "text": "load unofficial_bash_strict_mode\n@test \"unofficial Bash strict mode conditions met\" {\n  :\n}\n",
                      "markdown": "`load unofficial_bash_strict_mode\n@test \"unofficial Bash strict mode conditions met\" {\n  :\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/cmd_using_stdin.bash"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 33,
                  "endLine": 3,
                  "endColumn": 39,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Fractional timeout supported in bash 4+\nif [ \"${BASH_VERSINFO[0]}\" -lt 4 ]; then\n  timeout=1\nelse\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Fractional timeout supported in bash 4+\nif [ \"${BASH_VERSINFO[0]}\" -lt 4 ]; then\n  timeout=1\nelse\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Fractional timeout supported in bash 4+\nif [ \"${BASH_VERSINFO[0]}\" -lt 4 ]; then\n  timeout=1\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/cmd_using_stdin.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Fractional timeout supported in bash 4+\nif [ \"${BASH_VERSINFO[0]}\" -lt 4 ]; then\n  timeout=1\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Fractional timeout supported in bash 4+\nif [ \"${BASH_VERSINFO[0]}\" -lt 4 ]; then\n  timeout=1\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Fractional timeout supported in bash 4+\nif [ \"${BASH_VERSINFO[0]}\" -lt 4 ]; then\n  timeout=1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/cmd_using_stdin.bash"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 33,
                  "endLine": 3,
                  "endColumn": 39,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Fractional timeout supported in bash 4+\nif [ \"${BASH_VERSINFO[0]}\" -lt 4 ]; then\n  timeout=1\nelse\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Fractional timeout supported in bash 4+\nif [ \"${BASH_VERSINFO[0]}\" -lt 4 ]; then\n  timeout=1\nelse\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Fractional timeout supported in bash 4+\nif [ \"${BASH_VERSINFO[0]}\" -lt 4 ]; then\n  timeout=1\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/cmd_using_stdin.bash"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 12,
                  "endLine": 3,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Fractional timeout supported in bash 4+\nif [ \"${BASH_VERSINFO[0]}\" -lt 4 ]; then\n  timeout=1\nelse\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Fractional timeout supported in bash 4+\nif [ \"${BASH_VERSINFO[0]}\" -lt 4 ]; then\n  timeout=1\nelse\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Fractional timeout supported in bash 4+\nif [ \"${BASH_VERSINFO[0]}\" -lt 4 ]; then\n  timeout=1\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/cmd_using_stdin.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# Fractional timeout supported in bash 4+\nif [ \"${BASH_VERSINFO[0]}\" -lt 4 ]; then\n  timeout=1\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# Fractional timeout supported in bash 4+\nif [ \"${BASH_VERSINFO[0]}\" -lt 4 ]; then\n  timeout=1\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# Fractional timeout supported in bash 4+\nif [ \"${BASH_VERSINFO[0]}\" -lt 4 ]; then\n  timeout=1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/issue-205.bats"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 25,
                  "endLine": 52,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        fi\n      done\n      if [[ $fd_column_index -eq -1 ]]; then\n        printf \"Could not find FD column in procstat\" >&2\n        exit 1\n      fi\n      while read -r -a columns; do\n",
                    "rendered": {
                      "text": "        fi\n      done\n      if [[ $fd_column_index -eq -1 ]]; then\n        printf \"Could not find FD column in procstat\" >&2\n        exit 1\n      fi\n      while read -r -a columns; do\n",
                      "markdown": "`        fi\n      done\n      if [[ $fd_column_index -eq -1 ]]; then\n        printf \"Could not find FD column in procstat\" >&2\n        exit 1\n      fi\n      while read -r -a columns; do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/issue-205.bats"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 31,
                  "endLine": 35,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    for fd in \"${fds[@]}\"; do\n      case $fd in\n      f[0-9]*)                # filter non fd entries (mainly pid?)\n        open_fds+=(\"${fd#f}\") # cut off f prefix\n        ;;\n      esac\n    done\n",
                    "rendered": {
                      "text": "    for fd in \"${fds[@]}\"; do\n      case $fd in\n      f[0-9]*)                # filter non fd entries (mainly pid?)\n        open_fds+=(\"${fd#f}\") # cut off f prefix\n        ;;\n      esac\n    done\n",
                      "markdown": "`    for fd in \"${fds[@]}\"; do\n      case $fd in\n      f[0-9]*)                # filter non fd entries (mainly pid?)\n        open_fds+=(\"${fd#f}\") # cut off f prefix\n        ;;\n      esac\n    done\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 1,
                  "endLine": 177,
                  "endColumn": 5,
                  "snippet": {
                    "text": "@test \"bats_load_library errors when a library errors while sourcing\" {\n  path_dir=\"$BATS_TEST_TMPDIR/libraries_err_sourcing/\"\n  mkdir -p \"$path_dir/return1\"\n  cp \"${FIXTURE_ROOT}/return1.bash\" \"$path_dir/return1/load.bash\"\n\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"$path_dir\"\n",
                    "rendered": {
                      "text": "@test \"bats_load_library errors when a library errors while sourcing\" {\n  path_dir=\"$BATS_TEST_TMPDIR/libraries_err_sourcing/\"\n  mkdir -p \"$path_dir/return1\"\n  cp \"${FIXTURE_ROOT}/return1.bash\" \"$path_dir/return1/load.bash\"\n\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"$path_dir\"\n",
                      "markdown": "`@test \"bats_load_library errors when a library errors while sourcing\" {\n  path_dir=\"$BATS_TEST_TMPDIR/libraries_err_sourcing/\"\n  mkdir -p \"$path_dir/return1\"\n  cp \"${FIXTURE_ROOT}/return1.bash\" \"$path_dir/return1/load.bash\"\n\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"$path_dir\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 1,
                  "endLine": 168,
                  "endColumn": 5,
                  "snippet": {
                    "text": "    cp \"${FIXTURE_ROOT}/exit1.bash\" \"$path_dir/$lib/load.bash\"\n  done\n  mkdir -p \"$path_dir/$BATS_TEST_NAME\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"$path_dir/$BATS_TEST_NAME/load.bash\"\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"$path_dir\" HELPER_NAME=\"$BATS_TEST_NAME\"\n  reentrant_run -0 bats \"$FIXTURE_ROOT/bats_load_library.bats\"\n",
                    "rendered": {
                      "text": "    cp \"${FIXTURE_ROOT}/exit1.bash\" \"$path_dir/$lib/load.bash\"\n  done\n  mkdir -p \"$path_dir/$BATS_TEST_NAME\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"$path_dir/$BATS_TEST_NAME/load.bash\"\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"$path_dir\" HELPER_NAME=\"$BATS_TEST_NAME\"\n  reentrant_run -0 bats \"$FIXTURE_ROOT/bats_load_library.bats\"\n",
                      "markdown": "`    cp \"${FIXTURE_ROOT}/exit1.bash\" \"$path_dir/$lib/load.bash\"\n  done\n  mkdir -p \"$path_dir/$BATS_TEST_NAME\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"$path_dir/$BATS_TEST_NAME/load.bash\"\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"$path_dir\" HELPER_NAME=\"$BATS_TEST_NAME\"\n  reentrant_run -0 bats \"$FIXTURE_ROOT/bats_load_library.bats\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 3,
                  "endLine": 165,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  path_dir=\"$BATS_TEST_TMPDIR/libraries with spaces/\"\n  for lib in liba libb libc; do\n    mkdir -p \"$path_dir/$lib\"\n    cp \"${FIXTURE_ROOT}/exit1.bash\" \"$path_dir/$lib/load.bash\"\n  done\n  mkdir -p \"$path_dir/$BATS_TEST_NAME\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"$path_dir/$BATS_TEST_NAME/load.bash\"\n",
                    "rendered": {
                      "text": "  path_dir=\"$BATS_TEST_TMPDIR/libraries with spaces/\"\n  for lib in liba libb libc; do\n    mkdir -p \"$path_dir/$lib\"\n    cp \"${FIXTURE_ROOT}/exit1.bash\" \"$path_dir/$lib/load.bash\"\n  done\n  mkdir -p \"$path_dir/$BATS_TEST_NAME\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"$path_dir/$BATS_TEST_NAME/load.bash\"\n",
                      "markdown": "`  path_dir=\"$BATS_TEST_TMPDIR/libraries with spaces/\"\n  for lib in liba libb libc; do\n    mkdir -p \"$path_dir/$lib\"\n    cp \"${FIXTURE_ROOT}/exit1.bash\" \"$path_dir/$lib/load.bash\"\n  done\n  mkdir -p \"$path_dir/$BATS_TEST_NAME\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"$path_dir/$BATS_TEST_NAME/load.bash\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 1,
                  "endLine": 154,
                  "endColumn": 5,
                  "snippet": {
                    "text": "    cp \"${FIXTURE_ROOT}/exit1.bash\" \"$path_dir/$lib/load.bash\"\n  done\n  mkdir -p \"$path_dir/$BATS_TEST_NAME\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"$path_dir/$BATS_TEST_NAME/load.bash\"\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"$path_dir\" HELPER_NAME=\"$BATS_TEST_NAME\"\n  reentrant_run -0 bats \"$FIXTURE_ROOT/bats_load_library.bats\"\n",
                    "rendered": {
                      "text": "    cp \"${FIXTURE_ROOT}/exit1.bash\" \"$path_dir/$lib/load.bash\"\n  done\n  mkdir -p \"$path_dir/$BATS_TEST_NAME\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"$path_dir/$BATS_TEST_NAME/load.bash\"\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"$path_dir\" HELPER_NAME=\"$BATS_TEST_NAME\"\n  reentrant_run -0 bats \"$FIXTURE_ROOT/bats_load_library.bats\"\n",
                      "markdown": "`    cp \"${FIXTURE_ROOT}/exit1.bash\" \"$path_dir/$lib/load.bash\"\n  done\n  mkdir -p \"$path_dir/$BATS_TEST_NAME\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"$path_dir/$BATS_TEST_NAME/load.bash\"\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"$path_dir\" HELPER_NAME=\"$BATS_TEST_NAME\"\n  reentrant_run -0 bats \"$FIXTURE_ROOT/bats_load_library.bats\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 3,
                  "endLine": 151,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  path_dir=\"$BATS_TEST_TMPDIR/libraries/\"\n  for lib in liba libb libc; do\n    mkdir -p \"$path_dir/$lib\"\n    cp \"${FIXTURE_ROOT}/exit1.bash\" \"$path_dir/$lib/load.bash\"\n  done\n  mkdir -p \"$path_dir/$BATS_TEST_NAME\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"$path_dir/$BATS_TEST_NAME/load.bash\"\n",
                    "rendered": {
                      "text": "  path_dir=\"$BATS_TEST_TMPDIR/libraries/\"\n  for lib in liba libb libc; do\n    mkdir -p \"$path_dir/$lib\"\n    cp \"${FIXTURE_ROOT}/exit1.bash\" \"$path_dir/$lib/load.bash\"\n  done\n  mkdir -p \"$path_dir/$BATS_TEST_NAME\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"$path_dir/$BATS_TEST_NAME/load.bash\"\n",
                      "markdown": "`  path_dir=\"$BATS_TEST_TMPDIR/libraries/\"\n  for lib in liba libb libc; do\n    mkdir -p \"$path_dir/$lib\"\n    cp \"${FIXTURE_ROOT}/exit1.bash\" \"$path_dir/$lib/load.bash\"\n  done\n  mkdir -p \"$path_dir/$BATS_TEST_NAME\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"$path_dir/$BATS_TEST_NAME/load.bash\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 1,
                  "endLine": 140,
                  "endColumn": 5,
                  "snippet": {
                    "text": "  path_dir=\"$BATS_TEST_TMPDIR/libraries/$BATS_TEST_NAME\"\n  mkdir -p \"$path_dir\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"${path_dir}/load.bash\"\n  cp \"${FIXTURE_ROOT}/exit1.bash\" \"${path_dir}/exit1.bash\"\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"${BATS_TEST_TMPDIR}/libraries\" HELPER_NAME=\"$BATS_TEST_NAME\"\n  reentrant_run -0 bats \"$FIXTURE_ROOT/bats_load_library.bats\"\n",
                    "rendered": {
                      "text": "  path_dir=\"$BATS_TEST_TMPDIR/libraries/$BATS_TEST_NAME\"\n  mkdir -p \"$path_dir\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"${path_dir}/load.bash\"\n  cp \"${FIXTURE_ROOT}/exit1.bash\" \"${path_dir}/exit1.bash\"\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"${BATS_TEST_TMPDIR}/libraries\" HELPER_NAME=\"$BATS_TEST_NAME\"\n  reentrant_run -0 bats \"$FIXTURE_ROOT/bats_load_library.bats\"\n",
                      "markdown": "`  path_dir=\"$BATS_TEST_TMPDIR/libraries/$BATS_TEST_NAME\"\n  mkdir -p \"$path_dir\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"${path_dir}/load.bash\"\n  cp \"${FIXTURE_ROOT}/exit1.bash\" \"${path_dir}/exit1.bash\"\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"${BATS_TEST_TMPDIR}/libraries\" HELPER_NAME=\"$BATS_TEST_NAME\"\n  reentrant_run -0 bats \"$FIXTURE_ROOT/bats_load_library.bats\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 1,
                  "endLine": 139,
                  "endColumn": 5,
                  "snippet": {
                    "text": "@test \"bats_load_library supports libraries with loaders on the BATS_LIB_PATH\" {\n  path_dir=\"$BATS_TEST_TMPDIR/libraries/$BATS_TEST_NAME\"\n  mkdir -p \"$path_dir\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"${path_dir}/load.bash\"\n  cp \"${FIXTURE_ROOT}/exit1.bash\" \"${path_dir}/exit1.bash\"\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"${BATS_TEST_TMPDIR}/libraries\" HELPER_NAME=\"$BATS_TEST_NAME\"\n",
                    "rendered": {
                      "text": "@test \"bats_load_library supports libraries with loaders on the BATS_LIB_PATH\" {\n  path_dir=\"$BATS_TEST_TMPDIR/libraries/$BATS_TEST_NAME\"\n  mkdir -p \"$path_dir\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"${path_dir}/load.bash\"\n  cp \"${FIXTURE_ROOT}/exit1.bash\" \"${path_dir}/exit1.bash\"\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"${BATS_TEST_TMPDIR}/libraries\" HELPER_NAME=\"$BATS_TEST_NAME\"\n",
                      "markdown": "`@test \"bats_load_library supports libraries with loaders on the BATS_LIB_PATH\" {\n  path_dir=\"$BATS_TEST_TMPDIR/libraries/$BATS_TEST_NAME\"\n  mkdir -p \"$path_dir\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"${path_dir}/load.bash\"\n  cp \"${FIXTURE_ROOT}/exit1.bash\" \"${path_dir}/exit1.bash\"\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"${BATS_TEST_TMPDIR}/libraries\" HELPER_NAME=\"$BATS_TEST_NAME\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 1,
                  "endLine": 130,
                  "endColumn": 5,
                  "snippet": {
                    "text": "@test \"load supports scripts on the PATH\" {\n  path_dir=\"$BATS_TEST_TMPDIR/path\"\n  mkdir -p \"$path_dir\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"${path_dir}/on_path\"\n  # shellcheck disable=SC2030,SC2031\n  export PATH=\"${path_dir}:$PATH\" HELPER_NAME=\"on_path\"\n  reentrant_run -0 bats \"$FIXTURE_ROOT/load.bats\"\n",
                    "rendered": {
                      "text": "@test \"load supports scripts on the PATH\" {\n  path_dir=\"$BATS_TEST_TMPDIR/path\"\n  mkdir -p \"$path_dir\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"${path_dir}/on_path\"\n  # shellcheck disable=SC2030,SC2031\n  export PATH=\"${path_dir}:$PATH\" HELPER_NAME=\"on_path\"\n  reentrant_run -0 bats \"$FIXTURE_ROOT/load.bats\"\n",
                      "markdown": "`@test \"load supports scripts on the PATH\" {\n  path_dir=\"$BATS_TEST_TMPDIR/path\"\n  mkdir -p \"$path_dir\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"${path_dir}/on_path\"\n  # shellcheck disable=SC2030,SC2031\n  export PATH=\"${path_dir}:$PATH\" HELPER_NAME=\"on_path\"\n  reentrant_run -0 bats \"$FIXTURE_ROOT/load.bats\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 1,
                  "endLine": 83,
                  "endColumn": 5,
                  "snippet": {
                    "text": "@test \"load does not use the BATS_LIB_PATH\" {\n  path_dir=\"$BATS_TEST_TMPDIR/path\"\n  mkdir -p \"$path_dir/on_path\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"${path_dir}/on_path/load.bash\"\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"${path_dir}\" HELPER_NAME=\"on_path\"\n  reentrant_run ! bats \"$FIXTURE_ROOT/load.bats\"\n",
                    "rendered": {
                      "text": "@test \"load does not use the BATS_LIB_PATH\" {\n  path_dir=\"$BATS_TEST_TMPDIR/path\"\n  mkdir -p \"$path_dir/on_path\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"${path_dir}/on_path/load.bash\"\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"${path_dir}\" HELPER_NAME=\"on_path\"\n  reentrant_run ! bats \"$FIXTURE_ROOT/load.bats\"\n",
                      "markdown": "`@test \"load does not use the BATS_LIB_PATH\" {\n  path_dir=\"$BATS_TEST_TMPDIR/path\"\n  mkdir -p \"$path_dir/on_path\"\n  cp \"${FIXTURE_ROOT}/test_helper.bash\" \"${path_dir}/on_path/load.bash\"\n  # shellcheck disable=SC2030,SC2031\n  export BATS_LIB_PATH=\"${path_dir}\" HELPER_NAME=\"on_path\"\n  reentrant_run ! bats \"$FIXTURE_ROOT/load.bats\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 20,
                  "endLine": 75,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  [ $status -eq 1 ]\n}\n\n@test \"load relative script with ambiguous name\" {\n  HELPER_NAME=\"ambiguous\" reentrant_run bats \"$FIXTURE_ROOT/load.bats\"\n  [ $status -eq 0 ]\n}\n",
                    "rendered": {
                      "text": "  [ $status -eq 1 ]\n}\n\n@test \"load relative script with ambiguous name\" {\n  HELPER_NAME=\"ambiguous\" reentrant_run bats \"$FIXTURE_ROOT/load.bats\"\n  [ $status -eq 0 ]\n}\n",
                      "markdown": "`  [ $status -eq 1 ]\n}\n\n@test \"load relative script with ambiguous name\" {\n  HELPER_NAME=\"ambiguous\" reentrant_run bats \"$FIXTURE_ROOT/load.bats\"\n  [ $status -eq 0 ]\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 35,
                  "endLine": 60,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  [ $status -eq 0 ]\n}\n\n@test \"load aborts if the specified script does not exist\" {\n  HELPER_NAME=\"nonexistent\" reentrant_run bats \"$FIXTURE_ROOT/load.bats\"\n  [ $status -eq 1 ]\n}\n",
                    "rendered": {
                      "text": "  [ $status -eq 0 ]\n}\n\n@test \"load aborts if the specified script does not exist\" {\n  HELPER_NAME=\"nonexistent\" reentrant_run bats \"$FIXTURE_ROOT/load.bats\"\n  [ $status -eq 1 ]\n}\n",
                      "markdown": "`  [ $status -eq 0 ]\n}\n\n@test \"load aborts if the specified script does not exist\" {\n  HELPER_NAME=\"nonexistent\" reentrant_run bats \"$FIXTURE_ROOT/load.bats\"\n  [ $status -eq 1 ]\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n  second_dir=\"$test_dir/second\"\n  mkdir -p \"$second_dir\"\n  cp \"$FIXTURE_ROOT/exit1.bash\" \"$second_dir/target.bash\"\n\n  BATS_LIB_PATH=\"$first_dir:$second_dir\" LIBRARY_NAME=\"target\" LIBRARY_PATH=\"$first_dir/target.bash\" reentrant_run bats \"$FIXTURE_ROOT/find_library_helper.bats\"\n}\n",
                    "rendered": {
                      "text": "\n  second_dir=\"$test_dir/second\"\n  mkdir -p \"$second_dir\"\n  cp \"$FIXTURE_ROOT/exit1.bash\" \"$second_dir/target.bash\"\n\n  BATS_LIB_PATH=\"$first_dir:$second_dir\" LIBRARY_NAME=\"target\" LIBRARY_PATH=\"$first_dir/target.bash\" reentrant_run bats \"$FIXTURE_ROOT/find_library_helper.bats\"\n}\n",
                      "markdown": "`\n  second_dir=\"$test_dir/second\"\n  mkdir -p \"$second_dir\"\n  cp \"$FIXTURE_ROOT/exit1.bash\" \"$second_dir/target.bash\"\n\n  BATS_LIB_PATH=\"$first_dir:$second_dir\" LIBRARY_NAME=\"target\" LIBRARY_PATH=\"$first_dir/target.bash\" reentrant_run bats \"$FIXTURE_ROOT/find_library_helper.bats\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n  first_dir=\"$test_dir/first\"\n  mkdir -p \"$first_dir\"\n  cp \"$FIXTURE_ROOT/test_helper.bash\" \"$first_dir/target.bash\"\n\n  second_dir=\"$test_dir/second\"\n  mkdir -p \"$second_dir\"\n",
                    "rendered": {
                      "text": "\n  first_dir=\"$test_dir/first\"\n  mkdir -p \"$first_dir\"\n  cp \"$FIXTURE_ROOT/test_helper.bash\" \"$first_dir/target.bash\"\n\n  second_dir=\"$test_dir/second\"\n  mkdir -p \"$second_dir\"\n",
                      "markdown": "`\n  first_dir=\"$test_dir/first\"\n  mkdir -p \"$first_dir\"\n  cp \"$FIXTURE_ROOT/test_helper.bash\" \"$first_dir/target.bash\"\n\n  second_dir=\"$test_dir/second\"\n  mkdir -p \"$second_dir\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 5,
                  "snippet": {
                    "text": "@test \"find_in_bats_lib_path returns 1 if no load path is found\" {\n  test_dir=\"$BATS_TEST_TMPDIR/find_in_bats_lib_path/no_load_path_found\"\n  mkdir -p \"$test_dir\"\n  cp \"$FIXTURE_ROOT/test_helper.bash\" \"$test_dir/\"\n\n  BATS_LIB_PATH=\"$test_dir\" LIBRARY_NAME=\"test_helper\" reentrant_run bats \"$FIXTURE_ROOT/find_library_helper_err.bats\"\n}\n",
                    "rendered": {
                      "text": "@test \"find_in_bats_lib_path returns 1 if no load path is found\" {\n  test_dir=\"$BATS_TEST_TMPDIR/find_in_bats_lib_path/no_load_path_found\"\n  mkdir -p \"$test_dir\"\n  cp \"$FIXTURE_ROOT/test_helper.bash\" \"$test_dir/\"\n\n  BATS_LIB_PATH=\"$test_dir\" LIBRARY_NAME=\"test_helper\" reentrant_run bats \"$FIXTURE_ROOT/find_library_helper_err.bats\"\n}\n",
                      "markdown": "`@test \"find_in_bats_lib_path returns 1 if no load path is found\" {\n  test_dir=\"$BATS_TEST_TMPDIR/find_in_bats_lib_path/no_load_path_found\"\n  mkdir -p \"$test_dir\"\n  cp \"$FIXTURE_ROOT/test_helper.bash\" \"$test_dir/\"\n\n  BATS_LIB_PATH=\"$test_dir\" LIBRARY_NAME=\"test_helper\" reentrant_run bats \"$FIXTURE_ROOT/find_library_helper_err.bats\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 5,
                  "snippet": {
                    "text": "@test \"find_in_bats_lib_path recognizes files in BATS_LIB_PATH\" {\n  test_dir=\"$BATS_TEST_TMPDIR/find_in_bats_lib_path/bats_test_dirname_priority\"\n  mkdir -p \"$test_dir\"\n  cp \"$FIXTURE_ROOT/test_helper.bash\" \"$test_dir/\"\n\n  BATS_LIB_PATH=\"$test_dir\" LIBRARY_NAME=\"test_helper\" LIBRARY_PATH=\"$test_dir/test_helper.bash\" reentrant_run bats \"$FIXTURE_ROOT/find_library_helper.bats\"\n}\n",
                    "rendered": {
                      "text": "@test \"find_in_bats_lib_path recognizes files in BATS_LIB_PATH\" {\n  test_dir=\"$BATS_TEST_TMPDIR/find_in_bats_lib_path/bats_test_dirname_priority\"\n  mkdir -p \"$test_dir\"\n  cp \"$FIXTURE_ROOT/test_helper.bash\" \"$test_dir/\"\n\n  BATS_LIB_PATH=\"$test_dir\" LIBRARY_NAME=\"test_helper\" LIBRARY_PATH=\"$test_dir/test_helper.bash\" reentrant_run bats \"$FIXTURE_ROOT/find_library_helper.bats\"\n}\n",
                      "markdown": "`@test \"find_in_bats_lib_path recognizes files in BATS_LIB_PATH\" {\n  test_dir=\"$BATS_TEST_TMPDIR/find_in_bats_lib_path/bats_test_dirname_priority\"\n  mkdir -p \"$test_dir\"\n  cp \"$FIXTURE_ROOT/test_helper.bash\" \"$test_dir/\"\n\n  BATS_LIB_PATH=\"$test_dir\" LIBRARY_NAME=\"test_helper\" LIBRARY_PATH=\"$test_dir/test_helper.bash\" reentrant_run bats \"$FIXTURE_ROOT/find_library_helper.bats\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 5,
                  "snippet": {
                    "text": "  test_dir=\"$BATS_TEST_TMPDIR/find_in_bats_lib_path/bats_test_dirname_priority\"\n  mkdir -p \"$test_dir\"\n  cp \"$FIXTURE_ROOT/test_helper.bash\" \"$test_dir/\"\n  cp \"$FIXTURE_ROOT/find_library_helper.bats\" \"$test_dir\"\n\n  BATS_LIB_PATH=\"\" LIBRARY_NAME=\"test_helper\" LIBRARY_PATH=\"$test_dir/test_helper.bash\" reentrant_run bats \"$test_dir/find_library_helper.bats\"\n}\n",
                    "rendered": {
                      "text": "  test_dir=\"$BATS_TEST_TMPDIR/find_in_bats_lib_path/bats_test_dirname_priority\"\n  mkdir -p \"$test_dir\"\n  cp \"$FIXTURE_ROOT/test_helper.bash\" \"$test_dir/\"\n  cp \"$FIXTURE_ROOT/find_library_helper.bats\" \"$test_dir\"\n\n  BATS_LIB_PATH=\"\" LIBRARY_NAME=\"test_helper\" LIBRARY_PATH=\"$test_dir/test_helper.bash\" reentrant_run bats \"$test_dir/find_library_helper.bats\"\n}\n",
                      "markdown": "`  test_dir=\"$BATS_TEST_TMPDIR/find_in_bats_lib_path/bats_test_dirname_priority\"\n  mkdir -p \"$test_dir\"\n  cp \"$FIXTURE_ROOT/test_helper.bash\" \"$test_dir/\"\n  cp \"$FIXTURE_ROOT/find_library_helper.bats\" \"$test_dir\"\n\n  BATS_LIB_PATH=\"\" LIBRARY_NAME=\"test_helper\" LIBRARY_PATH=\"$test_dir/test_helper.bash\" reentrant_run bats \"$test_dir/find_library_helper.bats\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/load.bats"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 5,
                  "snippet": {
                    "text": "@test \"find_in_bats_lib_path recognizes files relative to test file\" {\n  test_dir=\"$BATS_TEST_TMPDIR/find_in_bats_lib_path/bats_test_dirname_priority\"\n  mkdir -p \"$test_dir\"\n  cp \"$FIXTURE_ROOT/test_helper.bash\" \"$test_dir/\"\n  cp \"$FIXTURE_ROOT/find_library_helper.bats\" \"$test_dir\"\n\n  BATS_LIB_PATH=\"\" LIBRARY_NAME=\"test_helper\" LIBRARY_PATH=\"$test_dir/test_helper.bash\" reentrant_run bats \"$test_dir/find_library_helper.bats\"\n",
                    "rendered": {
                      "text": "@test \"find_in_bats_lib_path recognizes files relative to test file\" {\n  test_dir=\"$BATS_TEST_TMPDIR/find_in_bats_lib_path/bats_test_dirname_priority\"\n  mkdir -p \"$test_dir\"\n  cp \"$FIXTURE_ROOT/test_helper.bash\" \"$test_dir/\"\n  cp \"$FIXTURE_ROOT/find_library_helper.bats\" \"$test_dir\"\n\n  BATS_LIB_PATH=\"\" LIBRARY_NAME=\"test_helper\" LIBRARY_PATH=\"$test_dir/test_helper.bash\" reentrant_run bats \"$test_dir/find_library_helper.bats\"\n",
                      "markdown": "`@test \"find_in_bats_lib_path recognizes files relative to test file\" {\n  test_dir=\"$BATS_TEST_TMPDIR/find_in_bats_lib_path/bats_test_dirname_priority\"\n  mkdir -p \"$test_dir\"\n  cp \"$FIXTURE_ROOT/test_helper.bash\" \"$test_dir/\"\n  cp \"$FIXTURE_ROOT/find_library_helper.bats\" \"$test_dir\"\n\n  BATS_LIB_PATH=\"\" LIBRARY_NAME=\"test_helper\" LIBRARY_PATH=\"$test_dir/test_helper.bash\" reentrant_run bats \"$test_dir/find_library_helper.bats\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite.bats"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 30,
                  "endLine": 226,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  bats \"${FIXTURE_ROOT}/skip\"\n}\n\n@test \"BATS_TEST_NUMBER starts at 1 in each individual test file\" {\n  reentrant_run bats \"${FIXTURE_ROOT}/test_number\"\n  echo \"$output\"\n  [ \"$status\" -eq 0 ]\n",
                    "rendered": {
                      "text": "  bats \"${FIXTURE_ROOT}/skip\"\n}\n\n@test \"BATS_TEST_NUMBER starts at 1 in each individual test file\" {\n  reentrant_run bats \"${FIXTURE_ROOT}/test_number\"\n  echo \"$output\"\n  [ \"$status\" -eq 0 ]\n",
                      "markdown": "`  bats \"${FIXTURE_ROOT}/skip\"\n}\n\n@test \"BATS_TEST_NUMBER starts at 1 in each individual test file\" {\n  reentrant_run bats \"${FIXTURE_ROOT}/test_number\"\n  echo \"$output\"\n  [ \"$status\" -eq 0 ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite.bats"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 62,
                  "endLine": 78,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    if (( BASH_VERSINFO[0] == 4)); then\n      [ \"${lines[7]}\" = \"#   \\`load test_helper' failed\" ]\n      [ \"${lines[8]}\" = \"# $FIXTURE_ROOT/errors_in_multiple_load/test_helper.bash: line 1: call-to-undefined-command: command not found\" ]\n      [ \"${lines[9]}\" = \"# Error while sourcing library loader at '$FIXTURE_ROOT/errors_in_multiple_load/test_helper.bash'\" ]\n      [ \"${#lines[@]}\" -eq 10 ]\n    else\n      [ \"${lines[7]}\" = \"#   \\`load test_helper' failed with status 127\" ]\n",
                    "rendered": {
                      "text": "    if (( BASH_VERSINFO[0] == 4)); then\n      [ \"${lines[7]}\" = \"#   \\`load test_helper' failed\" ]\n      [ \"${lines[8]}\" = \"# $FIXTURE_ROOT/errors_in_multiple_load/test_helper.bash: line 1: call-to-undefined-command: command not found\" ]\n      [ \"${lines[9]}\" = \"# Error while sourcing library loader at '$FIXTURE_ROOT/errors_in_multiple_load/test_helper.bash'\" ]\n      [ \"${#lines[@]}\" -eq 10 ]\n    else\n      [ \"${lines[7]}\" = \"#   \\`load test_helper' failed with status 127\" ]\n",
                      "markdown": "`    if (( BASH_VERSINFO[0] == 4)); then\n      [ \"${lines[7]}\" = \"#   \\`load test_helper' failed\" ]\n      [ \"${lines[8]}\" = \"# $FIXTURE_ROOT/errors_in_multiple_load/test_helper.bash: line 1: call-to-undefined-command: command not found\" ]\n      [ \"${lines[9]}\" = \"# Error while sourcing library loader at '$FIXTURE_ROOT/errors_in_multiple_load/test_helper.bash'\" ]\n      [ \"${#lines[@]}\" -eq 10 ]\n    else\n      [ \"${lines[7]}\" = \"#   \\`load test_helper' failed with status 127\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite.bats"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 60,
                  "endLine": 67,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    [ \"${lines[2]}\" = \"# (in test file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/a.bats, line 1)\" ]\n    [ \"${lines[3]}\" = \"#   \\`load test_helper' failed\" ]\n    [ \"${lines[4]}\" = \"# $FIXTURE_ROOT/errors_in_multiple_load/test_helper.bash: line 1: call-to-undefined-command: command not found\" ]\n    [ \"${lines[5]}\" = \"# Error while sourcing library loader at '$FIXTURE_ROOT/errors_in_multiple_load/test_helper.bash'\" ]\n    [ \"${#lines[@]}\" -eq 6 ]\n  else\n    [ \"${lines[2]}\" = \"# (in file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/test_helper.bash, line 1,\" ]\n",
                    "rendered": {
                      "text": "    [ \"${lines[2]}\" = \"# (in test file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/a.bats, line 1)\" ]\n    [ \"${lines[3]}\" = \"#   \\`load test_helper' failed\" ]\n    [ \"${lines[4]}\" = \"# $FIXTURE_ROOT/errors_in_multiple_load/test_helper.bash: line 1: call-to-undefined-command: command not found\" ]\n    [ \"${lines[5]}\" = \"# Error while sourcing library loader at '$FIXTURE_ROOT/errors_in_multiple_load/test_helper.bash'\" ]\n    [ \"${#lines[@]}\" -eq 6 ]\n  else\n    [ \"${lines[2]}\" = \"# (in file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/test_helper.bash, line 1,\" ]\n",
                      "markdown": "`    [ \"${lines[2]}\" = \"# (in test file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/a.bats, line 1)\" ]\n    [ \"${lines[3]}\" = \"#   \\`load test_helper' failed\" ]\n    [ \"${lines[4]}\" = \"# $FIXTURE_ROOT/errors_in_multiple_load/test_helper.bash: line 1: call-to-undefined-command: command not found\" ]\n    [ \"${lines[5]}\" = \"# Error while sourcing library loader at '$FIXTURE_ROOT/errors_in_multiple_load/test_helper.bash'\" ]\n    [ \"${#lines[@]}\" -eq 6 ]\n  else\n    [ \"${lines[2]}\" = \"# (in file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/test_helper.bash, line 1,\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite.bats"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 3,
                  "endLine": 62,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n    [ \"${lines[2]}\" = \"# (in test file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/a.bats, line 1)\" ]\n    [ \"${lines[3]}\" = \"#   \\`load test_helper' failed\" ]\n",
                    "rendered": {
                      "text": "\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n    [ \"${lines[2]}\" = \"# (in test file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/a.bats, line 1)\" ]\n    [ \"${lines[3]}\" = \"#   \\`load test_helper' failed\" ]\n",
                      "markdown": "`\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n    [ \"${lines[2]}\" = \"# (in test file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/a.bats, line 1)\" ]\n    [ \"${lines[3]}\" = \"#   \\`load test_helper' failed\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite.bats"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3,
                  "endLine": 61,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [ \"${lines[1]}\" = \"not ok 1 bats-gather-tests\" ]\n\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n    [ \"${lines[2]}\" = \"# (in test file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/a.bats, line 1)\" ]\n",
                    "rendered": {
                      "text": "  [ \"${lines[1]}\" = \"not ok 1 bats-gather-tests\" ]\n\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n    [ \"${lines[2]}\" = \"# (in test file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/a.bats, line 1)\" ]\n",
                      "markdown": "`  [ \"${lines[1]}\" = \"not ok 1 bats-gather-tests\" ]\n\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n    [ \"${lines[2]}\" = \"# (in test file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/a.bats, line 1)\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite.bats"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 3,
                  "endLine": 60,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [ \"${lines[0]}\" = \"1..1\" ]\n  [ \"${lines[1]}\" = \"not ok 1 bats-gather-tests\" ]\n\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n",
                    "rendered": {
                      "text": "  [ \"${lines[0]}\" = \"1..1\" ]\n  [ \"${lines[1]}\" = \"not ok 1 bats-gather-tests\" ]\n\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n",
                      "markdown": "`  [ \"${lines[0]}\" = \"1..1\" ]\n  [ \"${lines[1]}\" = \"not ok 1 bats-gather-tests\" ]\n\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite.bats"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 18,
                  "endLine": 95,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n\n@test \"extended syntax in suite\" {\n",
                    "rendered": {
                      "text": "  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n\n@test \"extended syntax in suite\" {\n",
                      "markdown": "`  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n\n@test \"extended syntax in suite\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite.bats"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 18,
                  "endLine": 94,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  [ $status -eq 0 ]\n  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n\n",
                    "rendered": {
                      "text": "  [ $status -eq 0 ]\n  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n\n",
                      "markdown": "`  [ $status -eq 0 ]\n  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite.bats"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 18,
                  "endLine": 93,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  reentrant_run bats \"$FIXTURE_ROOT/multiple/a.bats\" \"$FIXTURE_ROOT/multiple/b.bats\"\n  [ $status -eq 0 ]\n  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n",
                    "rendered": {
                      "text": "  reentrant_run bats \"$FIXTURE_ROOT/multiple/a.bats\" \"$FIXTURE_ROOT/multiple/b.bats\"\n  [ $status -eq 0 ]\n  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n",
                      "markdown": "`  reentrant_run bats \"$FIXTURE_ROOT/multiple/a.bats\" \"$FIXTURE_ROOT/multiple/b.bats\"\n  [ $status -eq 0 ]\n  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite.bats"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 3,
                  "endLine": 62,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n    [ \"${lines[2]}\" = \"# (in test file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/a.bats, line 1)\" ]\n    [ \"${lines[3]}\" = \"#   \\`load test_helper' failed\" ]\n",
                    "rendered": {
                      "text": "\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n    [ \"${lines[2]}\" = \"# (in test file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/a.bats, line 1)\" ]\n    [ \"${lines[3]}\" = \"#   \\`load test_helper' failed\" ]\n",
                      "markdown": "`\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n    [ \"${lines[2]}\" = \"# (in test file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/a.bats, line 1)\" ]\n    [ \"${lines[3]}\" = \"#   \\`load test_helper' failed\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite.bats"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3,
                  "endLine": 61,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [ \"${lines[1]}\" = \"not ok 1 bats-gather-tests\" ]\n\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n    [ \"${lines[2]}\" = \"# (in test file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/a.bats, line 1)\" ]\n",
                    "rendered": {
                      "text": "  [ \"${lines[1]}\" = \"not ok 1 bats-gather-tests\" ]\n\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n    [ \"${lines[2]}\" = \"# (in test file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/a.bats, line 1)\" ]\n",
                      "markdown": "`  [ \"${lines[1]}\" = \"not ok 1 bats-gather-tests\" ]\n\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n    [ \"${lines[2]}\" = \"# (in test file $RELATIVE_FIXTURE_ROOT/errors_in_multiple_load/a.bats, line 1)\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite.bats"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 3,
                  "endLine": 60,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  [ \"${lines[0]}\" = \"1..1\" ]\n  [ \"${lines[1]}\" = \"not ok 1 bats-gather-tests\" ]\n\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n",
                    "rendered": {
                      "text": "  [ \"${lines[0]}\" = \"1..1\" ]\n  [ \"${lines[1]}\" = \"not ok 1 bats-gather-tests\" ]\n\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n",
                      "markdown": "`  [ \"${lines[0]}\" = \"1..1\" ]\n  [ \"${lines[1]}\" = \"not ok 1 bats-gather-tests\" ]\n\n  # bash > 4.0 returns error codes from source\n  # bash < 4.0 does not handle the status on source, it fails through the ERREXIT instead, which creates another trace\n  # bash == 4.0 seems to be sonwhere in between\n  if (( BASH_VERSINFO[0] > 4 )) || (( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] > 0 )); then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite.bats"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 18,
                  "endLine": 51,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  FLUNK=1 reentrant_run bats \"$FIXTURE_ROOT/multiple\"\n  [ $status -eq 1 ]\n  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^not ok . quasi-truth\"\n}\n\n@test \"errors when loading common helper from multiple tests in a suite\" {\n",
                    "rendered": {
                      "text": "  FLUNK=1 reentrant_run bats \"$FIXTURE_ROOT/multiple\"\n  [ $status -eq 1 ]\n  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^not ok . quasi-truth\"\n}\n\n@test \"errors when loading common helper from multiple tests in a suite\" {\n",
                      "markdown": "`  FLUNK=1 reentrant_run bats \"$FIXTURE_ROOT/multiple\"\n  [ $status -eq 1 ]\n  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^not ok . quasi-truth\"\n}\n\n@test \"errors when loading common helper from multiple tests in a suite\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite.bats"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 18,
                  "endLine": 36,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n\n@test \"aggregated output of multiple tests in a suite loading common constants\" {\n",
                    "rendered": {
                      "text": "  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n\n@test \"aggregated output of multiple tests in a suite loading common constants\" {\n",
                      "markdown": "`  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n\n@test \"aggregated output of multiple tests in a suite loading common constants\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite.bats"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 18,
                  "endLine": 35,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  [ $status -eq 0 ]\n  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n\n",
                    "rendered": {
                      "text": "  [ $status -eq 0 ]\n  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n\n",
                      "markdown": "`  [ $status -eq 0 ]\n  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite.bats"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 18,
                  "endLine": 34,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  reentrant_run bats \"$FIXTURE_ROOT/multiple\"\n  [ $status -eq 0 ]\n  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n",
                    "rendered": {
                      "text": "  reentrant_run bats \"$FIXTURE_ROOT/multiple\"\n  [ $status -eq 0 ]\n  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n",
                      "markdown": "`  reentrant_run bats \"$FIXTURE_ROOT/multiple\"\n  [ $status -eq 0 ]\n  [ \"${lines[0]}\" = \"1..3\" ]\n  echo \"$output\" | grep \"^ok . truth\"\n  echo \"$output\" | grep \"^ok . more truth\"\n  echo \"$output\" | grep \"^ok . quasi-truth\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/trace.bats"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 5,
                  "endLine": 67,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  check_bash_4_1() { check_bash_4_0; }\n\n  check_bash_4_0() {\n    # bash bug: the lineno from the debug_trap spills over -> ignore it\n    [ \"${lines[25]}\" = '# $ false' ]\n    [ ${#lines[@]} -eq 26 ]\n  }\n",
                    "rendered": {
                      "text": "  check_bash_4_1() { check_bash_4_0; }\n\n  check_bash_4_0() {\n    # bash bug: the lineno from the debug_trap spills over -> ignore it\n    [ \"${lines[25]}\" = '# $ false' ]\n    [ ${#lines[@]} -eq 26 ]\n  }\n",
                      "markdown": "`  check_bash_4_1() { check_bash_4_0; }\n\n  check_bash_4_0() {\n    # bash bug: the lineno from the debug_trap spills over -> ignore it\n    [ \"${lines[25]}\" = '# $ false' ]\n    [ ${#lines[@]} -eq 26 ]\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/trace.bats"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 55,
                  "endLine": 55,
                  "endColumn": 61,
                  "snippet": {
                    "text": "  [ \"${lines[23]}\" = '# $ run fun 2' ]\n  [ \"${lines[24]}\" = '# $ false' ]\n\n  # the trace on return from a function differs between bash versions\n  check_bash_5() {\n    [ ${#lines[@]} -eq 25 ]\n  }\n",
                    "rendered": {
                      "text": "  [ \"${lines[23]}\" = '# $ run fun 2' ]\n  [ \"${lines[24]}\" = '# $ false' ]\n\n  # the trace on return from a function differs between bash versions\n  check_bash_5() {\n    [ ${#lines[@]} -eq 25 ]\n  }\n",
                      "markdown": "`  [ \"${lines[23]}\" = '# $ run fun 2' ]\n  [ \"${lines[24]}\" = '# $ false' ]\n\n  # the trace on return from a function differs between bash versions\n  check_bash_5() {\n    [ ${#lines[@]} -eq 25 ]\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/trace.bats"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 5,
                  "endLine": 67,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  check_bash_4_1() { check_bash_4_0; }\n\n  check_bash_4_0() {\n    # bash bug: the lineno from the debug_trap spills over -> ignore it\n    [ \"${lines[25]}\" = '# $ false' ]\n    [ ${#lines[@]} -eq 26 ]\n  }\n",
                    "rendered": {
                      "text": "  check_bash_4_1() { check_bash_4_0; }\n\n  check_bash_4_0() {\n    # bash bug: the lineno from the debug_trap spills over -> ignore it\n    [ \"${lines[25]}\" = '# $ false' ]\n    [ ${#lines[@]} -eq 26 ]\n  }\n",
                      "markdown": "`  check_bash_4_1() { check_bash_4_0; }\n\n  check_bash_4_0() {\n    # bash bug: the lineno from the debug_trap spills over -> ignore it\n    [ \"${lines[25]}\" = '# $ false' ]\n    [ ${#lines[@]} -eq 26 ]\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/trace.bats"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 55,
                  "endLine": 55,
                  "endColumn": 61,
                  "snippet": {
                    "text": "  [ \"${lines[23]}\" = '# $ run fun 2' ]\n  [ \"${lines[24]}\" = '# $ false' ]\n\n  # the trace on return from a function differs between bash versions\n  check_bash_5() {\n    [ ${#lines[@]} -eq 25 ]\n  }\n",
                    "rendered": {
                      "text": "  [ \"${lines[23]}\" = '# $ run fun 2' ]\n  [ \"${lines[24]}\" = '# $ false' ]\n\n  # the trace on return from a function differs between bash versions\n  check_bash_5() {\n    [ ${#lines[@]} -eq 25 ]\n  }\n",
                      "markdown": "`  [ \"${lines[23]}\" = '# $ run fun 2' ]\n  [ \"${lines[24]}\" = '# $ false' ]\n\n  # the trace on return from a function differs between bash versions\n  check_bash_5() {\n    [ ${#lines[@]} -eq 25 ]\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/install.bats"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 1,
                  "endLine": 143,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  printf '%s\\n' '#! /usr/bin/env bash' \\\n    \"cd '$INSTALL_DIR/bin'\" \\\n    './bats \"$@\"' >\"$bats_symlink\"\n  chmod 700 \"$bats_symlink\"\n\n  reentrant_run \"$bats_symlink\" -v\n  [ \"$status\" -eq 0 ]\n",
                    "rendered": {
                      "text": "  printf '%s\\n' '#! /usr/bin/env bash' \\\n    \"cd '$INSTALL_DIR/bin'\" \\\n    './bats \"$@\"' >\"$bats_symlink\"\n  chmod 700 \"$bats_symlink\"\n\n  reentrant_run \"$bats_symlink\" -v\n  [ \"$status\" -eq 0 ]\n",
                      "markdown": "`  printf '%s\\n' '#! /usr/bin/env bash' \\\n    \"cd '$INSTALL_DIR/bin'\" \\\n    './bats \"$@\"' >\"$bats_symlink\"\n  chmod 700 \"$bats_symlink\"\n\n  reentrant_run \"$bats_symlink\" -v\n  [ \"$status\" -eq 0 ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/install.bats"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 25,
                  "endLine": 135,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  [ \"$status\" -eq 0 ]\n\n  # Simulate a symlink to bin/bats (without using a symlink, for Windows sake)\n  # by creating a wrapper script that executes bin/bats via a relative path.\n  #\n  # root.bats contains tests that use real symlinks on platforms that support\n  # them.\n",
                    "rendered": {
                      "text": "  [ \"$status\" -eq 0 ]\n\n  # Simulate a symlink to bin/bats (without using a symlink, for Windows sake)\n  # by creating a wrapper script that executes bin/bats via a relative path.\n  #\n  # root.bats contains tests that use real symlinks on platforms that support\n  # them.\n",
                      "markdown": "`  [ \"$status\" -eq 0 ]\n\n  # Simulate a symlink to bin/bats (without using a symlink, for Windows sake)\n  # by creating a wrapper script that executes bin/bats via a relative path.\n  #\n  # root.bats contains tests that use real symlinks on platforms that support\n  # them.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/pretty-formatter.bats"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 45,
                  "endLine": 67,
                  "endColumn": 54,
                  "snippet": {
                    "text": "HERE\n  # yellow bold text, green timing\n  [[ \"${lines[1]}\" == *$'\\x1b[2G\\x1b[33;1m\\x1b[1G ✗ test timing=0, timeout=1\\x1b[32;22m [timeout: 0s]'* ]]\n  [[ \"${lines[2]}\" == *$'\\x1b[0m\\x1b[33;22m   timeout text'* ]]\n  [[ \"${lines[4]}\" == *$'1 test, 0 failures, 1 timed out'* ]]\n}\n",
                    "rendered": {
                      "text": "HERE\n  # yellow bold text, green timing\n  [[ \"${lines[1]}\" == *$'\\x1b[2G\\x1b[33;1m\\x1b[1G ✗ test timing=0, timeout=1\\x1b[32;22m [timeout: 0s]'* ]]\n  [[ \"${lines[2]}\" == *$'\\x1b[0m\\x1b[33;22m   timeout text'* ]]\n  [[ \"${lines[4]}\" == *$'1 test, 0 failures, 1 timed out'* ]]\n}\n",
                      "markdown": "`HERE\n  # yellow bold text, green timing\n  [[ \"${lines[1]}\" == *$'\\x1b[2G\\x1b[33;1m\\x1b[1G ✗ test timing=0, timeout=1\\x1b[32;22m [timeout: 0s]'* ]]\n  [[ \"${lines[2]}\" == *$'\\x1b[0m\\x1b[33;22m   timeout text'* ]]\n  [[ \"${lines[4]}\" == *$'1 test, 0 failures, 1 timed out'* ]]\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/pretty-formatter.bats"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 1,
                  "endLine": 63,
                  "endColumn": 10,
                  "snippet": {
                    "text": "suite /test/path\nbegin 1 test timing=0, timeout=1\nnot ok 1 test timing=0, timeout=1 # timeout after 0s\n# timeout text\nHERE\n  # yellow bold text, green timing\n  [[ \"${lines[1]}\" == *$'\\x1b[2G\\x1b[33;1m\\x1b[1G ✗ test timing=0, timeout=1\\x1b[32;22m [timeout: 0s]'* ]]\n",
                    "rendered": {
                      "text": "suite /test/path\nbegin 1 test timing=0, timeout=1\nnot ok 1 test timing=0, timeout=1 # timeout after 0s\n# timeout text\nHERE\n  # yellow bold text, green timing\n  [[ \"${lines[1]}\" == *$'\\x1b[2G\\x1b[33;1m\\x1b[1G ✗ test timing=0, timeout=1\\x1b[32;22m [timeout: 0s]'* ]]\n",
                      "markdown": "`suite /test/path\nbegin 1 test timing=0, timeout=1\nnot ok 1 test timing=0, timeout=1 # timeout after 0s\n# timeout text\nHERE\n  # yellow bold text, green timing\n  [[ \"${lines[1]}\" == *$'\\x1b[2G\\x1b[33;1m\\x1b[1G ✗ test timing=0, timeout=1\\x1b[32;22m [timeout: 0s]'* ]]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/pretty-formatter.bats"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 35,
                  "endLine": 62,
                  "endColumn": 44,
                  "snippet": {
                    "text": "1..1\nsuite /test/path\nbegin 1 test timing=0, timeout=1\nnot ok 1 test timing=0, timeout=1 # timeout after 0s\n# timeout text\nHERE\n  # yellow bold text, green timing\n",
                    "rendered": {
                      "text": "1..1\nsuite /test/path\nbegin 1 test timing=0, timeout=1\nnot ok 1 test timing=0, timeout=1 # timeout after 0s\n# timeout text\nHERE\n  # yellow bold text, green timing\n",
                      "markdown": "`1..1\nsuite /test/path\nbegin 1 test timing=0, timeout=1\nnot ok 1 test timing=0, timeout=1 # timeout after 0s\n# timeout text\nHERE\n  # yellow bold text, green timing\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/pretty-formatter.bats"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 3,
                  "endLine": 54,
                  "endColumn": 8,
                  "snippet": {
                    "text": "HERE\n  # black text, green timing\n  [[ \"${lines[1]}\" == *$'\\x1b[2G\\x1b[1G ✓ test timing=1, timeout=0\\x1b[32;22m [123]'* ]] || false\n  # red bold text, green timing\n  [[ \"${lines[2]}\" == *$'\\x1b[2G\\x1b[33;1m\\x1b[1G ✗ test timing=1, timeout=1\\x1b[32;22m [456 (timeout: 0s)]'* ]] || false\n  [[ \"${lines[4]}\" == *'2 tests, 0 failures, 1 timed out in '*' seconds' ]] || false\n\n",
                    "rendered": {
                      "text": "HERE\n  # black text, green timing\n  [[ \"${lines[1]}\" == *$'\\x1b[2G\\x1b[1G ✓ test timing=1, timeout=0\\x1b[32;22m [123]'* ]] || false\n  # red bold text, green timing\n  [[ \"${lines[2]}\" == *$'\\x1b[2G\\x1b[33;1m\\x1b[1G ✗ test timing=1, timeout=1\\x1b[32;22m [456 (timeout: 0s)]'* ]] || false\n  [[ \"${lines[4]}\" == *'2 tests, 0 failures, 1 timed out in '*' seconds' ]] || false\n\n",
                      "markdown": "`HERE\n  # black text, green timing\n  [[ \"${lines[1]}\" == *$'\\x1b[2G\\x1b[1G ✓ test timing=1, timeout=0\\x1b[32;22m [123]'* ]] || false\n  # red bold text, green timing\n  [[ \"${lines[2]}\" == *$'\\x1b[2G\\x1b[33;1m\\x1b[1G ✗ test timing=1, timeout=1\\x1b[32;22m [456 (timeout: 0s)]'* ]] || false\n  [[ \"${lines[4]}\" == *'2 tests, 0 failures, 1 timed out in '*' seconds' ]] || false\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/pretty-formatter.bats"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 44,
                  "endLine": 50,
                  "endColumn": 53,
                  "snippet": {
                    "text": "begin 1 test timing=1, timeout=0\nok 1 test timing=1, timeout=0 in 123ms\nbegin 2 test timing=1, timeout=1\nnot ok 2 test timing=1, timeout=1 in 456ms # timeout after 0s\nHERE\n  # black text, green timing\n  [[ \"${lines[1]}\" == *$'\\x1b[2G\\x1b[1G ✓ test timing=1, timeout=0\\x1b[32;22m [123]'* ]] || false\n",
                    "rendered": {
                      "text": "begin 1 test timing=1, timeout=0\nok 1 test timing=1, timeout=0 in 123ms\nbegin 2 test timing=1, timeout=1\nnot ok 2 test timing=1, timeout=1 in 456ms # timeout after 0s\nHERE\n  # black text, green timing\n  [[ \"${lines[1]}\" == *$'\\x1b[2G\\x1b[1G ✓ test timing=1, timeout=0\\x1b[32;22m [123]'* ]] || false\n",
                      "markdown": "`begin 1 test timing=1, timeout=0\nok 1 test timing=1, timeout=0 in 123ms\nbegin 2 test timing=1, timeout=1\nnot ok 2 test timing=1, timeout=1 in 456ms # timeout after 0s\nHERE\n  # black text, green timing\n  [[ \"${lines[1]}\" == *$'\\x1b[2G\\x1b[1G ✓ test timing=1, timeout=0\\x1b[32;22m [123]'* ]] || false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/pretty-formatter.bats"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 44,
                  "endLine": 25,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  [[ \"${lines[3]}\" == *'test3 (skipped) [345]'* ]]\n}\n\n@test \"pretty formatter summary is colorized red on failure\" {\n  bats_require_minimum_version 1.5.0\n  reentrant_run -1 bats --pretty \"$FIXTURE_ROOT/failing.bats\"\n\n",
                    "rendered": {
                      "text": "  [[ \"${lines[3]}\" == *'test3 (skipped) [345]'* ]]\n}\n\n@test \"pretty formatter summary is colorized red on failure\" {\n  bats_require_minimum_version 1.5.0\n  reentrant_run -1 bats --pretty \"$FIXTURE_ROOT/failing.bats\"\n\n",
                      "markdown": "`  [[ \"${lines[3]}\" == *'test3 (skipped) [345]'* ]]\n}\n\n@test \"pretty formatter summary is colorized red on failure\" {\n  bats_require_minimum_version 1.5.0\n  reentrant_run -1 bats --pretty \"$FIXTURE_ROOT/failing.bats\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite_setup_teardown.bats"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 9,
                  "endLine": 90,
                  "endColumn": 15,
                  "snippet": {
                    "text": "@test \"failure in setup_suite skips further setup and suite but runs teardown_suite\" {\n  reentrant_run ! bats \"$FIXTURE_ROOT/failure_in_setup_suite/\"\n  [ \"${lines[0]}\" == \"1..1\" ]\n  # get a nice error message\n  [ \"${lines[1]}\" == \"not ok 1 setup_suite\" ]\n  [ \"${lines[2]}\" == \"# (from function \\`setup_suite' in test file $RELATIVE_FIXTURE_ROOT/failure_in_setup_suite/setup_suite.bash, line 3)\" ]\n  [ \"${lines[3]}\" == \"#   \\`false' failed\" ]\n",
                    "rendered": {
                      "text": "@test \"failure in setup_suite skips further setup and suite but runs teardown_suite\" {\n  reentrant_run ! bats \"$FIXTURE_ROOT/failure_in_setup_suite/\"\n  [ \"${lines[0]}\" == \"1..1\" ]\n  # get a nice error message\n  [ \"${lines[1]}\" == \"not ok 1 setup_suite\" ]\n  [ \"${lines[2]}\" == \"# (from function \\`setup_suite' in test file $RELATIVE_FIXTURE_ROOT/failure_in_setup_suite/setup_suite.bash, line 3)\" ]\n  [ \"${lines[3]}\" == \"#   \\`false' failed\" ]\n",
                      "markdown": "`@test \"failure in setup_suite skips further setup and suite but runs teardown_suite\" {\n  reentrant_run ! bats \"$FIXTURE_ROOT/failure_in_setup_suite/\"\n  [ \"${lines[0]}\" == \"1..1\" ]\n  # get a nice error message\n  [ \"${lines[1]}\" == \"not ok 1 setup_suite\" ]\n  [ \"${lines[2]}\" == \"# (from function \\`setup_suite' in test file $RELATIVE_FIXTURE_ROOT/failure_in_setup_suite/setup_suite.bash, line 3)\" ]\n  [ \"${lines[3]}\" == \"#   \\`false' failed\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite_setup_teardown.bats"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 5,
                  "endLine": 43,
                  "endColumn": 10,
                  "snippet": {
                    "text": "@test \"--setup-suite-file takes precedence over convention\" {\n  reentrant_run -0 bats \"$FIXTURE_ROOT/default_name/\" \\\n    --setup-suite-file \"$FIXTURE_ROOT/non_default_name/setup_suite_non_default.bash\"\n  run cat \"$LOGFILE\"\n  [ \"${lines[0]}\" == \"setup_suite non_default\" ]\n  [ \"${lines[1]}\" == \"teardown_suite non_default\" ]\n}\n",
                    "rendered": {
                      "text": "@test \"--setup-suite-file takes precedence over convention\" {\n  reentrant_run -0 bats \"$FIXTURE_ROOT/default_name/\" \\\n    --setup-suite-file \"$FIXTURE_ROOT/non_default_name/setup_suite_non_default.bash\"\n  run cat \"$LOGFILE\"\n  [ \"${lines[0]}\" == \"setup_suite non_default\" ]\n  [ \"${lines[1]}\" == \"teardown_suite non_default\" ]\n}\n",
                      "markdown": "`@test \"--setup-suite-file takes precedence over convention\" {\n  reentrant_run -0 bats \"$FIXTURE_ROOT/default_name/\" \\\n    --setup-suite-file \"$FIXTURE_ROOT/non_default_name/setup_suite_non_default.bash\"\n  run cat \"$LOGFILE\"\n  [ \"${lines[0]}\" == \"setup_suite non_default\" ]\n  [ \"${lines[1]}\" == \"teardown_suite non_default\" ]\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite_setup_teardown.bats"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 5,
                  "endLine": 35,
                  "endColumn": 10,
                  "snippet": {
                    "text": "@test \"setup_suite is picked up from --setup-suite-file\" {\n  reentrant_run -0 bats \"$FIXTURE_ROOT/non_default_name/\" \\\n    --setup-suite-file \"$FIXTURE_ROOT/non_default_name/setup_suite_non_default.bash\"\n  run cat \"$LOGFILE\"\n  [ \"${lines[0]}\" == \"setup_suite non_default\" ]\n  [ \"${lines[1]}\" == \"teardown_suite non_default\" ]\n}\n",
                    "rendered": {
                      "text": "@test \"setup_suite is picked up from --setup-suite-file\" {\n  reentrant_run -0 bats \"$FIXTURE_ROOT/non_default_name/\" \\\n    --setup-suite-file \"$FIXTURE_ROOT/non_default_name/setup_suite_non_default.bash\"\n  run cat \"$LOGFILE\"\n  [ \"${lines[0]}\" == \"setup_suite non_default\" ]\n  [ \"${lines[1]}\" == \"teardown_suite non_default\" ]\n}\n",
                      "markdown": "`@test \"setup_suite is picked up from --setup-suite-file\" {\n  reentrant_run -0 bats \"$FIXTURE_ROOT/non_default_name/\" \\\n    --setup-suite-file \"$FIXTURE_ROOT/non_default_name/setup_suite_non_default.bash\"\n  run cat \"$LOGFILE\"\n  [ \"${lines[0]}\" == \"setup_suite non_default\" ]\n  [ \"${lines[1]}\" == \"teardown_suite non_default\" ]\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite_setup_teardown.bats"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 5,
                  "endLine": 27,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n@test \"setup_suite is not picked up from wrongly named file\" {\n  reentrant_run -0 bats \"$FIXTURE_ROOT/non_default_name/\"\n  run cat \"$LOGFILE\"\n  [[ \"${output}\" != *\"setup_suite\"* ]] || false\n  [[ \"${output}\" != *\"teardown_suite\"* ]] || false\n}\n",
                    "rendered": {
                      "text": "\n@test \"setup_suite is not picked up from wrongly named file\" {\n  reentrant_run -0 bats \"$FIXTURE_ROOT/non_default_name/\"\n  run cat \"$LOGFILE\"\n  [[ \"${output}\" != *\"setup_suite\"* ]] || false\n  [[ \"${output}\" != *\"teardown_suite\"* ]] || false\n}\n",
                      "markdown": "`\n@test \"setup_suite is not picked up from wrongly named file\" {\n  reentrant_run -0 bats \"$FIXTURE_ROOT/non_default_name/\"\n  run cat \"$LOGFILE\"\n  [[ \"${output}\" != *\"setup_suite\"* ]] || false\n  [[ \"${output}\" != *\"teardown_suite\"* ]] || false\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite_setup_teardown.bats"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 5,
                  "endLine": 19,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n@test \"setup_suite.bash is picked up in folder of first test file\" {\n  reentrant_run -0 bats \"$FIXTURE_ROOT/pick_up_toplevel/folder1/test.bats\" \"$FIXTURE_ROOT/pick_up_toplevel/folder2/test.bats\"\n  run cat \"$LOGFILE\"\n\n  [ \"${lines[0]}\" = \"$FIXTURE_ROOT/pick_up_toplevel/folder1/setup_suite.bash setup_suite\" ]\n  [ \"${lines[1]}\" = \"$FIXTURE_ROOT/pick_up_toplevel/folder1/setup_suite.bash teardown_suite\" ]\n",
                    "rendered": {
                      "text": "\n@test \"setup_suite.bash is picked up in folder of first test file\" {\n  reentrant_run -0 bats \"$FIXTURE_ROOT/pick_up_toplevel/folder1/test.bats\" \"$FIXTURE_ROOT/pick_up_toplevel/folder2/test.bats\"\n  run cat \"$LOGFILE\"\n\n  [ \"${lines[0]}\" = \"$FIXTURE_ROOT/pick_up_toplevel/folder1/setup_suite.bash setup_suite\" ]\n  [ \"${lines[1]}\" = \"$FIXTURE_ROOT/pick_up_toplevel/folder1/setup_suite.bash teardown_suite\" ]\n",
                      "markdown": "`\n@test \"setup_suite.bash is picked up in folder of first test file\" {\n  reentrant_run -0 bats \"$FIXTURE_ROOT/pick_up_toplevel/folder1/test.bats\" \"$FIXTURE_ROOT/pick_up_toplevel/folder2/test.bats\"\n  run cat \"$LOGFILE\"\n\n  [ \"${lines[0]}\" = \"$FIXTURE_ROOT/pick_up_toplevel/folder1/setup_suite.bash setup_suite\" ]\n  [ \"${lines[1]}\" = \"$FIXTURE_ROOT/pick_up_toplevel/folder1/setup_suite.bash teardown_suite\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/suite_setup_teardown.bats"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 5,
                  "endLine": 11,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n@test \"setup_suite.bash is picked up in toplevel folder of suite\" {\n  reentrant_run -0 bats -r \"$FIXTURE_ROOT/pick_up_toplevel\"\n  run cat \"$LOGFILE\"\n\n  [ \"${lines[0]}\" = \"$FIXTURE_ROOT/pick_up_toplevel/setup_suite.bash setup_suite\" ]\n  [ \"${lines[1]}\" = \"$FIXTURE_ROOT/pick_up_toplevel/setup_suite.bash teardown_suite\" ]\n",
                    "rendered": {
                      "text": "\n@test \"setup_suite.bash is picked up in toplevel folder of suite\" {\n  reentrant_run -0 bats -r \"$FIXTURE_ROOT/pick_up_toplevel\"\n  run cat \"$LOGFILE\"\n\n  [ \"${lines[0]}\" = \"$FIXTURE_ROOT/pick_up_toplevel/setup_suite.bash setup_suite\" ]\n  [ \"${lines[1]}\" = \"$FIXTURE_ROOT/pick_up_toplevel/setup_suite.bash teardown_suite\" ]\n",
                      "markdown": "`\n@test \"setup_suite.bash is picked up in toplevel folder of suite\" {\n  reentrant_run -0 bats -r \"$FIXTURE_ROOT/pick_up_toplevel\"\n  run cat \"$LOGFILE\"\n\n  [ \"${lines[0]}\" = \"$FIXTURE_ROOT/pick_up_toplevel/setup_suite.bash setup_suite\" ]\n  [ \"${lines[1]}\" = \"$FIXTURE_ROOT/pick_up_toplevel/setup_suite.bash teardown_suite\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/timeout.bats"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 54,
                  "endLine": 21,
                  "endColumn": 63,
                  "snippet": {
                    "text": "  SECONDS=0\n  reentrant_run ! env BATS_TEST_TIMEOUT=1 SLEEP=10 bats -T \"$FIXTURE_ROOT\"\n  [ \"${lines[0]}\" == '1..1' ]\n  [[ \"${lines[1]}\" == 'not ok 1 my sleep 10 in '*'ms # timeout after 1s' ]] || false\n  [ \"${lines[2]}\" == \"# (in test file $RELATIVE_FIXTURE_ROOT/sleep2.bats, line 2)\" ]\n  [ \"${lines[3]}\" == \"#   \\`sleep \\\"\\${SLEEP?}\\\"' failed due to timeout\" ]\n  ((SECONDS < 10)) || false\n",
                    "rendered": {
                      "text": "  SECONDS=0\n  reentrant_run ! env BATS_TEST_TIMEOUT=1 SLEEP=10 bats -T \"$FIXTURE_ROOT\"\n  [ \"${lines[0]}\" == '1..1' ]\n  [[ \"${lines[1]}\" == 'not ok 1 my sleep 10 in '*'ms # timeout after 1s' ]] || false\n  [ \"${lines[2]}\" == \"# (in test file $RELATIVE_FIXTURE_ROOT/sleep2.bats, line 2)\" ]\n  [ \"${lines[3]}\" == \"#   \\`sleep \\\"\\${SLEEP?}\\\"' failed due to timeout\" ]\n  ((SECONDS < 10)) || false\n",
                      "markdown": "`  SECONDS=0\n  reentrant_run ! env BATS_TEST_TIMEOUT=1 SLEEP=10 bats -T \"$FIXTURE_ROOT\"\n  [ \"${lines[0]}\" == '1..1' ]\n  [[ \"${lines[1]}\" == 'not ok 1 my sleep 10 in '*'ms # timeout after 1s' ]] || false\n  [ \"${lines[2]}\" == \"# (in test file $RELATIVE_FIXTURE_ROOT/sleep2.bats, line 2)\" ]\n  [ \"${lines[3]}\" == \"#   \\`sleep \\\"\\${SLEEP?}\\\"' failed due to timeout\" ]\n  ((SECONDS < 10)) || false\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/timeout.bats"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 17,
                  "endLine": 19,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n@test \"test longer than timeout\" {\n  SECONDS=0\n  reentrant_run ! env BATS_TEST_TIMEOUT=1 SLEEP=10 bats -T \"$FIXTURE_ROOT\"\n  [ \"${lines[0]}\" == '1..1' ]\n  [[ \"${lines[1]}\" == 'not ok 1 my sleep 10 in '*'ms # timeout after 1s' ]] || false\n  [ \"${lines[2]}\" == \"# (in test file $RELATIVE_FIXTURE_ROOT/sleep2.bats, line 2)\" ]\n",
                    "rendered": {
                      "text": "\n@test \"test longer than timeout\" {\n  SECONDS=0\n  reentrant_run ! env BATS_TEST_TIMEOUT=1 SLEEP=10 bats -T \"$FIXTURE_ROOT\"\n  [ \"${lines[0]}\" == '1..1' ]\n  [[ \"${lines[1]}\" == 'not ok 1 my sleep 10 in '*'ms # timeout after 1s' ]] || false\n  [ \"${lines[2]}\" == \"# (in test file $RELATIVE_FIXTURE_ROOT/sleep2.bats, line 2)\" ]\n",
                      "markdown": "`\n@test \"test longer than timeout\" {\n  SECONDS=0\n  reentrant_run ! env BATS_TEST_TIMEOUT=1 SLEEP=10 bats -T \"$FIXTURE_ROOT\"\n  [ \"${lines[0]}\" == '1..1' ]\n  [[ \"${lines[1]}\" == 'not ok 1 my sleep 10 in '*'ms # timeout after 1s' ]] || false\n  [ \"${lines[2]}\" == \"# (in test file $RELATIVE_FIXTURE_ROOT/sleep2.bats, line 2)\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/timeout.bats"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 7,
                  "endLine": 13,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  [ \"${lines[0]}\" == '1..1' ]\n  [[ \"${lines[1]}\" == 'ok 1 my sleep 1 in '*'ms' ]] || false\n  [ \"${#lines[@]}\" -eq 2 ]\n  # the timeout background process should not hold up execution\n  ((SECONDS < TIMEOUT)) || false\n}\n\n",
                    "rendered": {
                      "text": "  [ \"${lines[0]}\" == '1..1' ]\n  [[ \"${lines[1]}\" == 'ok 1 my sleep 1 in '*'ms' ]] || false\n  [ \"${#lines[@]}\" -eq 2 ]\n  # the timeout background process should not hold up execution\n  ((SECONDS < TIMEOUT)) || false\n}\n\n",
                      "markdown": "`  [ \"${lines[0]}\" == '1..1' ]\n  [[ \"${lines[1]}\" == 'ok 1 my sleep 1 in '*'ms' ]] || false\n  [ \"${#lines[@]}\" -eq 2 ]\n  # the timeout background process should not hold up execution\n  ((SECONDS < TIMEOUT)) || false\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/timeout.bats"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 18,
                  "endLine": 9,
                  "endColumn": 23,
                  "snippet": {
                    "text": "@test \"test faster than timeout\" {\n  SECONDS=0\n  TIMEOUT=10\n  reentrant_run -0 env BATS_TEST_TIMEOUT=$TIMEOUT SLEEP=1 bats -T \"$FIXTURE_ROOT\"\n  [ \"${lines[0]}\" == '1..1' ]\n  [[ \"${lines[1]}\" == 'ok 1 my sleep 1 in '*'ms' ]] || false\n  [ \"${#lines[@]}\" -eq 2 ]\n",
                    "rendered": {
                      "text": "@test \"test faster than timeout\" {\n  SECONDS=0\n  TIMEOUT=10\n  reentrant_run -0 env BATS_TEST_TIMEOUT=$TIMEOUT SLEEP=1 bats -T \"$FIXTURE_ROOT\"\n  [ \"${lines[0]}\" == '1..1' ]\n  [[ \"${lines[1]}\" == 'ok 1 my sleep 1 in '*'ms' ]] || false\n  [ \"${#lines[@]}\" -eq 2 ]\n",
                      "markdown": "`@test \"test faster than timeout\" {\n  SECONDS=0\n  TIMEOUT=10\n  reentrant_run -0 env BATS_TEST_TIMEOUT=$TIMEOUT SLEEP=1 bats -T \"$FIXTURE_ROOT\"\n  [ \"${lines[0]}\" == '1..1' ]\n  [[ \"${lines[1]}\" == 'ok 1 my sleep 1 in '*'ms' ]] || false\n  [ \"${#lines[@]}\" -eq 2 ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/timeout.bats"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 8,
                  "endLine": 3,
                  "snippet": {
                    "text": "load test_helper\nfixtures timeout\n\nbats_require_minimum_version 1.5.0\n\n@test \"test faster than timeout\" {\n",
                    "rendered": {
                      "text": "load test_helper\nfixtures timeout\n\nbats_require_minimum_version 1.5.0\n\n@test \"test faster than timeout\" {\n",
                      "markdown": "`load test_helper\nfixtures timeout\n\nbats_require_minimum_version 1.5.0\n\n@test \"test faster than timeout\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/warnings.bats"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 59,
                  "endLine": 45,
                  "endColumn": 63,
                  "snippet": {
                    "text": "without guaranteed version >= 1.5.0\" {\n  reentrant_run -0 bats \"$FIXTURE_ROOT/BW02.bats\"\n  [ \"${lines[0]}\" == \"1..1\" ]\n  [ \"${lines[1]}\" == \"ok 1 Trigger BW02\" ]\n  [ \"${lines[2]}\" == \"The following warnings were encountered during tests:\" ]\n  [ \"${lines[3]}\" == \"BW02: Using flags on \\`run\\` requires at least BATS_VERSION=1.5.0. Use \\`bats_require_minimum_version 1.5.0\\` to fix this message.\" ]\n  [[ \"${lines[4]}\" == \"      (from function \\`bats_warn_minimum_guaranteed_version' in file ${RELATIVE_BATS_ROOT}${BATS_LIBDIR}/bats-core/warnings.bash, line \"* ]]\n  [[ \"${lines[5]}\" == \"       from function",
                    "rendered": {
                      "text": "without guaranteed version >= 1.5.0\" {\n  reentrant_run -0 bats \"$FIXTURE_ROOT/BW02.bats\"\n  [ \"${lines[0]}\" == \"1..1\" ]\n  [ \"${lines[1]}\" == \"ok 1 Trigger BW02\" ]\n  [ \"${lines[2]}\" == \"The following warnings were encountered during tests:\" ]\n  [ \"${lines[3]}\" == \"BW02: Using flags on \\`run\\` requires at least BATS_VERSION=1.5.0. Use \\`bats_require_minimum_version 1.5.0\\` to fix this message.\" ]\n  [[ \"${lines[4]}\" == \"      (from function \\`bats_warn_minimum_guaranteed_version' in file ${RELATIVE_BATS_ROOT}${BATS_LIBDIR}/bats-core/warnings.bash, line \"* ]]\n  [[ \"${lines[5]}\" == \"       from function",
                      "markdown": "`without guaranteed version >= 1.5.0\" {\n  reentrant_run -0 bats \"$FIXTURE_ROOT/BW02.bats\"\n  [ \"${lines[0]}\" == \"1..1\" ]\n  [ \"${lines[1]}\" == \"ok 1 Trigger BW02\" ]\n  [ \"${lines[2]}\" == \"The following warnings were encountered during tests:\" ]\n  [ \"${lines[3]}\" == \"BW02: Using flags on \\`run\\` requires at least BATS_VERSION=1.5.0. Use \\`bats_require_minimum_version 1.5.0\\` to fix this message.\" ]\n  [[ \"${lines[4]}\" == \"      (from function \\`bats_warn_minimum_guaranteed_version' in file ${RELATIVE_BATS_ROOT}${BATS_LIBDIR}/bats-core/warnings.bash, line \"* ]]\n  [[ \"${lines[5]}\" == \"       from function`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/warnings/index.rst"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 108,
                  "endLine": 20,
                  "endColumn": 112,
                  "snippet": {
                    "text": "           (from function `run' in file lib/bats-core/test_functions.bash, line 299,\n            in test file test/fixtures/warnings/BW01.bats, line 3)\n\nA warning will not make a successful run fail but should be investigated and taken seriously, since it hints at a possible error.\n\nCurrently, Bats emits the following warnings:\n\n",
                    "rendered": {
                      "text": "           (from function `run' in file lib/bats-core/test_functions.bash, line 299,\n            in test file test/fixtures/warnings/BW01.bats, line 3)\n\nA warning will not make a successful run fail but should be investigated and taken seriously, since it hints at a possible error.\n\nCurrently, Bats emits the following warnings:\n\n",
                      "markdown": "`           (from function `run' in file lib/bats-core/test_functions.bash, line 299,\n            in test file test/fixtures/warnings/BW01.bats, line 3)\n\nA warning will not make a successful run fail but should be investigated and taken seriously, since it hints at a possible error.\n\nCurrently, Bats emits the following warnings:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/warnings/index.rst"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 15,
                  "endLine": 8,
                  "snippet": {
                    "text": "Starting with version 1.7.0 Bats shows warnings about issues it found during the test run.\nThey are printed on stderr after all other output:\n\n.. code-block:: bash\n\n     BW01.bats\n     ✓ Trigger BW01\n    \n",
                    "rendered": {
                      "text": "Starting with version 1.7.0 Bats shows warnings about issues it found during the test run.\nThey are printed on stderr after all other output:\n\n.. code-block:: bash\n\n     BW01.bats\n     ✓ Trigger BW01\n    \n",
                      "markdown": "`Starting with version 1.7.0 Bats shows warnings about issues it found during the test run.\nThey are printed on stderr after all other output:\n\n.. code-block:: bash\n\n     BW01.bats\n     ✓ Trigger BW01\n    \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/warnings/index.rst"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 15,
                  "endLine": 8,
                  "snippet": {
                    "text": "Starting with version 1.7.0 Bats shows warnings about issues it found during the test run.\nThey are printed on stderr after all other output:\n\n.. code-block:: bash\n\n     BW01.bats\n     ✓ Trigger BW01\n    \n",
                    "rendered": {
                      "text": "Starting with version 1.7.0 Bats shows warnings about issues it found during the test run.\nThey are printed on stderr after all other output:\n\n.. code-block:: bash\n\n     BW01.bats\n     ✓ Trigger BW01\n    \n",
                      "markdown": "`Starting with version 1.7.0 Bats shows warnings about issues it found during the test run.\nThey are printed on stderr after all other output:\n\n.. code-block:: bash\n\n     BW01.bats\n     ✓ Trigger BW01\n    \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 129,
                  "endLine": 58,
                  "endColumn": 133,
                  "snippet": {
                    "text": "\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies required into the Docker image. These can be mounted in at runtime (for test files, configuration, etc). For binary dependencies it may be better to extend the base Docker image with further tools and files.\n\n```dockerfile\nFROM bats/bats\n",
                    "rendered": {
                      "text": "\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies required into the Docker image. These can be mounted in at runtime (for test files, configuration, etc). For binary dependencies it may be better to extend the base Docker image with further tools and files.\n\n```dockerfile\nFROM bats/bats\n",
                      "markdown": "`\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies required into the Docker image. These can be mounted in at runtime (for test files, configuration, etc). For binary dependencies it may be better to extend the base Docker image with further tools and files.\n\n```dockerfile\nFROM bats/bats\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 228,
                  "endLine": 54,
                  "endColumn": 234,
                  "snippet": {
                    "text": "ide the mounted test directory) will fail when running inside Docker. \n\n`--interactive`/`-i` attaches an interactive terminal and is useful to kill hanging processes (otherwise has to be done via docker stop command). `--tty`/`-t` simulates a tty (often not used, but most similar to test runs from a Bash prompt). Interactivity is important to a user, but not a build, and TTYs are probably more important to a headless build. Everything's least-surprising to a new Docker use if both are used.\n\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies r",
                    "rendered": {
                      "text": "ide the mounted test directory) will fail when running inside Docker. \n\n`--interactive`/`-i` attaches an interactive terminal and is useful to kill hanging processes (otherwise has to be done via docker stop command). `--tty`/`-t` simulates a tty (often not used, but most similar to test runs from a Bash prompt). Interactivity is important to a user, but not a build, and TTYs are probably more important to a headless build. Everything's least-surprising to a new Docker use if both are used.\n\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies r",
                      "markdown": "`ide the mounted test directory) will fail when running inside Docker. \n\n`--interactive`/`-i` attaches an interactive terminal and is useful to kill hanging processes (otherwise has to be done via docker stop command). `--tty`/`-t` simulates a tty (often not used, but most similar to test runs from a Bash prompt). Interactivity is important to a user, but not a build, and TTYs are probably more important to a headless build. Everything's least-surprising to a new Docker use if both are used.\n\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies r`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 238,
                  "endLine": 58,
                  "endColumn": 246,
                  "snippet": {
                    "text": "\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies required into the Docker image. These can be mounted in at runtime (for test files, configuration, etc). For binary dependencies it may be better to extend the base Docker image with further tools and files.\n\n```dockerfile\nFROM bats/bats\n",
                    "rendered": {
                      "text": "\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies required into the Docker image. These can be mounted in at runtime (for test files, configuration, etc). For binary dependencies it may be better to extend the base Docker image with further tools and files.\n\n```dockerfile\nFROM bats/bats\n",
                      "markdown": "`\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies required into the Docker image. These can be mounted in at runtime (for test files, configuration, etc). For binary dependencies it may be better to extend the base Docker image with further tools and files.\n\n```dockerfile\nFROM bats/bats\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 91,
                  "endLine": 58,
                  "endColumn": 99,
                  "snippet": {
                    "text": "\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies required into the Docker image. These can be mounted in at runtime (for test files, configuration, etc). For binary dependencies it may be better to extend the base Docker image with further tools and files.\n\n```dockerfile\nFROM bats/bats\n",
                    "rendered": {
                      "text": "\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies required into the Docker image. These can be mounted in at runtime (for test files, configuration, etc). For binary dependencies it may be better to extend the base Docker image with further tools and files.\n\n```dockerfile\nFROM bats/bats\n",
                      "markdown": "`\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies required into the Docker image. These can be mounted in at runtime (for test files, configuration, etc). For binary dependencies it may be better to extend the base Docker image with further tools and files.\n\n```dockerfile\nFROM bats/bats\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 58,
                  "endColumn": 7,
                  "snippet": {
                    "text": " simulates a tty (often not used, but most similar to test runs from a Bash prompt). Interactivity is important to a user, but not a build, and TTYs are probably more important to a headless build. Everything's least-surprising to a new Docker use if both are used.\n\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies required into the Docker image. These can be mounted in at runtime (for test files, configuration, etc). For binary dependencies it may be better to extend the base Docker image with further tools and files.\n\n```dockerfile\nFROM bats/",
                    "rendered": {
                      "text": " simulates a tty (often not used, but most similar to test runs from a Bash prompt). Interactivity is important to a user, but not a build, and TTYs are probably more important to a headless build. Everything's least-surprising to a new Docker use if both are used.\n\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies required into the Docker image. These can be mounted in at runtime (for test files, configuration, etc). For binary dependencies it may be better to extend the base Docker image with further tools and files.\n\n```dockerfile\nFROM bats/",
                      "markdown": "` simulates a tty (often not used, but most similar to test runs from a Bash prompt). Interactivity is important to a user, but not a build, and TTYs are probably more important to a headless build. Everything's least-surprising to a new Docker use if both are used.\n\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies required into the Docker image. These can be mounted in at runtime (for test files, configuration, etc). For binary dependencies it may be better to extend the base Docker image with further tools and files.\n\n```dockerfile\nFROM bats/`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 394,
                  "endLine": 54,
                  "endColumn": 402,
                  "snippet": {
                    "text": "(otherwise has to be done via docker stop command). `--tty`/`-t` simulates a tty (often not used, but most similar to test runs from a Bash prompt). Interactivity is important to a user, but not a build, and TTYs are probably more important to a headless build. Everything's least-surprising to a new Docker use if both are used.\n\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies required into the Docker image. These can be mounted in at runtime (for test files, configuration, etc). For binary dependencies it may be better to extend the base Dock",
                    "rendered": {
                      "text": "(otherwise has to be done via docker stop command). `--tty`/`-t` simulates a tty (often not used, but most similar to test runs from a Bash prompt). Interactivity is important to a user, but not a build, and TTYs are probably more important to a headless build. Everything's least-surprising to a new Docker use if both are used.\n\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies required into the Docker image. These can be mounted in at runtime (for test files, configuration, etc). For binary dependencies it may be better to extend the base Dock",
                      "markdown": "`(otherwise has to be done via docker stop command). `--tty`/`-t` simulates a tty (often not used, but most similar to test runs from a Bash prompt). Interactivity is important to a user, but not a build, and TTYs are probably more important to a headless build. Everything's least-surprising to a new Docker use if both are used.\n\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies required into the Docker image. These can be mounted in at runtime (for test files, configuration, etc). For binary dependencies it may be better to extend the base Dock`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 228,
                  "endLine": 54,
                  "endColumn": 234,
                  "snippet": {
                    "text": "ide the mounted test directory) will fail when running inside Docker. \n\n`--interactive`/`-i` attaches an interactive terminal and is useful to kill hanging processes (otherwise has to be done via docker stop command). `--tty`/`-t` simulates a tty (often not used, but most similar to test runs from a Bash prompt). Interactivity is important to a user, but not a build, and TTYs are probably more important to a headless build. Everything's least-surprising to a new Docker use if both are used.\n\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies r",
                    "rendered": {
                      "text": "ide the mounted test directory) will fail when running inside Docker. \n\n`--interactive`/`-i` attaches an interactive terminal and is useful to kill hanging processes (otherwise has to be done via docker stop command). `--tty`/`-t` simulates a tty (often not used, but most similar to test runs from a Bash prompt). Interactivity is important to a user, but not a build, and TTYs are probably more important to a headless build. Everything's least-surprising to a new Docker use if both are used.\n\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies r",
                      "markdown": "`ide the mounted test directory) will fail when running inside Docker. \n\n`--interactive`/`-i` attaches an interactive terminal and is useful to kill hanging processes (otherwise has to be done via docker stop command). `--tty`/`-t` simulates a tty (often not used, but most similar to test runs from a Bash prompt). Interactivity is important to a user, but not a build, and TTYs are probably more important to a headless build. Everything's least-surprising to a new Docker use if both are used.\n\n## Extending from the base image\n\nDocker operates on a principle of isolation, and bundles all dependencies r`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 123,
                  "endLine": 54,
                  "endColumn": 131,
                  "snippet": {
                    "text": "lying on functionality provided by your environment (ssh keys or agent, installed binaries, fixtures outside the mounted test directory) will fail when running inside Docker. \n\n`--interactive`/`-i` attaches an interactive terminal and is useful to kill hanging processes (otherwise has to be done via docker stop command). `--tty`/`-t` simulates a tty (often not used, but most similar to test runs from a Bash prompt). Interactivity is important to a user, but not a build, and TTYs are probably more important to a headless build. Everything's least-surprising to a new Docker use if both are used.\n\n## Ext",
                    "rendered": {
                      "text": "lying on functionality provided by your environment (ssh keys or agent, installed binaries, fixtures outside the mounted test directory) will fail when running inside Docker. \n\n`--interactive`/`-i` attaches an interactive terminal and is useful to kill hanging processes (otherwise has to be done via docker stop command). `--tty`/`-t` simulates a tty (often not used, but most similar to test runs from a Bash prompt). Interactivity is important to a user, but not a build, and TTYs are probably more important to a headless build. Everything's least-surprising to a new Docker use if both are used.\n\n## Ext",
                      "markdown": "`lying on functionality provided by your environment (ssh keys or agent, installed binaries, fixtures outside the mounted test directory) will fail when running inside Docker. \n\n`--interactive`/`-i` attaches an interactive terminal and is useful to kill hanging processes (otherwise has to be done via docker stop command). `--tty`/`-t` simulates a tty (often not used, but most similar to test runs from a Bash prompt). Interactivity is important to a user, but not a build, and TTYs are probably more important to a headless build. Everything's least-surprising to a new Docker use if both are used.\n\n## Ext`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 2,
                  "endLine": 50,
                  "endColumn": 10,
                  "snippet": {
                    "text": "```\nThis runs the `test/` directory from the bats-core repository inside the bats Docker container.\n\n## Docker Gotchas\n\nRelying on functionality provided by your environment (ssh keys or agent, installed binaries, fixtures outside the mounted test directory) will fail when running inside Docker. \n\n",
                    "rendered": {
                      "text": "```\nThis runs the `test/` directory from the bats-core repository inside the bats Docker container.\n\n## Docker Gotchas\n\nRelying on functionality provided by your environment (ssh keys or agent, installed binaries, fixtures outside the mounted test directory) will fail when running inside Docker. \n\n",
                      "markdown": "````\nThis runs the `test/` directory from the bats-core repository inside the bats Docker container.\n\n## Docker Gotchas\n\nRelying on functionality provided by your environment (ssh keys or agent, installed binaries, fixtures outside the mounted test directory) will fail when running inside Docker. \n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 77,
                  "endLine": 48,
                  "endColumn": 85,
                  "snippet": {
                    "text": "```bash\n$ docker run -it -v \"$PWD:/opt/bats\" bats/bats:latest /opt/bats/test\n```\nThis runs the `test/` directory from the bats-core repository inside the bats Docker container.\n\n## Docker Gotchas\n\n",
                    "rendered": {
                      "text": "```bash\n$ docker run -it -v \"$PWD:/opt/bats\" bats/bats:latest /opt/bats/test\n```\nThis runs the `test/` directory from the bats-core repository inside the bats Docker container.\n\n## Docker Gotchas\n\n",
                      "markdown": "````bash\n$ docker run -it -v \"$PWD:/opt/bats\" bats/bats:latest /opt/bats/test\n```\nThis runs the `test/` directory from the bats-core repository inside the bats Docker container.\n\n## Docker Gotchas\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nTo mount your tests into the container, first build the image as above. Then, for example with `bats`:\n```bash\n$ docker run -it -v \"$PWD:/opt/bats\" bats/bats:latest /opt/bats/test\n```\nThis runs the `test/` directory from the bats-core repository inside the bats Docker container.\n\n",
                    "rendered": {
                      "text": "\nTo mount your tests into the container, first build the image as above. Then, for example with `bats`:\n```bash\n$ docker run -it -v \"$PWD:/opt/bats\" bats/bats:latest /opt/bats/test\n```\nThis runs the `test/` directory from the bats-core repository inside the bats Docker container.\n\n",
                      "markdown": "`\nTo mount your tests into the container, first build the image as above. Then, for example with `bats`:\n```bash\n$ docker run -it -v \"$PWD:/opt/bats\" bats/bats:latest /opt/bats/test\n```\nThis runs the `test/` directory from the bats-core repository inside the bats Docker container.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 2,
                  "endLine": 44,
                  "endColumn": 9,
                  "snippet": {
                    "text": "$ docker run -it bats/bats:latest --formatter tap /opt/bats/test\n```\n\nTo mount your tests into the container, first build the image as above. Then, for example with `bats`:\n```bash\n$ docker run -it -v \"$PWD:/opt/bats\" bats/bats:latest /opt/bats/test\n```\n",
                    "rendered": {
                      "text": "$ docker run -it bats/bats:latest --formatter tap /opt/bats/test\n```\n\nTo mount your tests into the container, first build the image as above. Then, for example with `bats`:\n```bash\n$ docker run -it -v \"$PWD:/opt/bats\" bats/bats:latest /opt/bats/test\n```\n",
                      "markdown": "`$ docker run -it bats/bats:latest --formatter tap /opt/bats/test\n```\n\nTo mount your tests into the container, first build the image as above. Then, for example with `bats`:\n```bash\n$ docker run -it -v \"$PWD:/opt/bats\" bats/bats:latest /opt/bats/test\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 9,
                  "snippet": {
                    "text": "$ cd bats-core/\n$ docker build --tag bats/bats:latest .\n...\n$ docker run -it bats/bats:latest --formatter tap /opt/bats/test\n```\n\nTo mount your tests into the container, first build the image as above. Then, for example with `bats`:\n",
                    "rendered": {
                      "text": "$ cd bats-core/\n$ docker build --tag bats/bats:latest .\n...\n$ docker run -it bats/bats:latest --formatter tap /opt/bats/test\n```\n\nTo mount your tests into the container, first build the image as above. Then, for example with `bats`:\n",
                      "markdown": "`$ cd bats-core/\n$ docker build --tag bats/bats:latest .\n...\n$ docker run -it bats/bats:latest --formatter tap /opt/bats/test\n```\n\nTo mount your tests into the container, first build the image as above. Then, for example with `bats`:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Resolving deltas: 100% (661/661), done.\n\n$ cd bats-core/\n$ docker build --tag bats/bats:latest .\n...\n$ docker run -it bats/bats:latest --formatter tap /opt/bats/test\n```\n",
                    "rendered": {
                      "text": "Resolving deltas: 100% (661/661), done.\n\n$ cd bats-core/\n$ docker build --tag bats/bats:latest .\n...\n$ docker run -it bats/bats:latest --formatter tap /opt/bats/test\n```\n",
                      "markdown": "`Resolving deltas: 100% (661/661), done.\n\n$ cd bats-core/\n$ docker build --tag bats/bats:latest .\n...\n$ docker run -it bats/bats:latest --formatter tap /opt/bats/test\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nTo build and run `bats`' own tests:\n```bash\n$ git clone https://github.com/bats-core/bats-core.git\nCloning into 'bats-core'...\nremote: Counting objects: 1222, done.\nremote: Compressing objects: 100% (53/53), done.\n",
                    "rendered": {
                      "text": "\nTo build and run `bats`' own tests:\n```bash\n$ git clone https://github.com/bats-core/bats-core.git\nCloning into 'bats-core'...\nremote: Counting objects: 1222, done.\nremote: Compressing objects: 100% (53/53), done.\n",
                      "markdown": "`\nTo build and run `bats`' own tests:\n```bash\n$ git clone https://github.com/bats-core/bats-core.git\nCloning into 'bats-core'...\nremote: Counting objects: 1222, done.\nremote: Compressing objects: 100% (53/53), done.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 4,
                  "endLine": 17,
                  "endColumn": 12,
                  "snippet": {
                    "text": "$ docker run -it -v \"$PWD:/code\" bats/bats:latest /code/test\n```\n\nThis Docker image includes libraries like [bats-support](https://github.com/bats-core/bats-support) and [bats-assert](https://github.com/bats-core/bats-assert), which can be loaded in `setup` like this:\n\n```bash\nsetup() {\n",
                    "rendered": {
                      "text": "$ docker run -it -v \"$PWD:/code\" bats/bats:latest /code/test\n```\n\nThis Docker image includes libraries like [bats-support](https://github.com/bats-core/bats-support) and [bats-assert](https://github.com/bats-core/bats-assert), which can be loaded in `setup` like this:\n\n```bash\nsetup() {\n",
                      "markdown": "`$ docker run -it -v \"$PWD:/code\" bats/bats:latest /code/test\n```\n\nThis Docker image includes libraries like [bats-support](https://github.com/bats-core/bats-support) and [bats-assert](https://github.com/bats-core/bats-assert), which can be loaded in `setup` like this:\n\n```bash\nsetup() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 9,
                  "snippet": {
                    "text": "For test suites that are intended to run in isolation from their project code, you can mount the test directory and run the [official bats docker image](https://hub.docker.com/r/bats/bats):\n\n```bash\n$ docker run -it -v \"$PWD:/code\" bats/bats:latest /code/test\n```\n\nThis Docker image includes libraries like [bats-support](https://github.com/bats-core/bats-support) and [bats-assert](https://github.com/bats-core/bats-assert), which can be loaded in `setup` like this:\n",
                    "rendered": {
                      "text": "For test suites that are intended to run in isolation from their project code, you can mount the test directory and run the [official bats docker image](https://hub.docker.com/r/bats/bats):\n\n```bash\n$ docker run -it -v \"$PWD:/code\" bats/bats:latest /code/test\n```\n\nThis Docker image includes libraries like [bats-support](https://github.com/bats-core/bats-support) and [bats-assert](https://github.com/bats-core/bats-assert), which can be loaded in `setup` like this:\n",
                      "markdown": "`For test suites that are intended to run in isolation from their project code, you can mount the test directory and run the [official bats docker image](https://hub.docker.com/r/bats/bats):\n\n```bash\n$ docker run -it -v \"$PWD:/code\" bats/bats:latest /code/test\n```\n\nThis Docker image includes libraries like [bats-support](https://github.com/bats-core/bats-support) and [bats-assert](https://github.com/bats-core/bats-assert), which can be loaded in `setup` like this:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 138,
                  "endLine": 11,
                  "endColumn": 146,
                  "snippet": {
                    "text": "  \n## Basic Usage\n\nFor test suites that are intended to run in isolation from their project code, you can mount the test directory and run the [official bats docker image](https://hub.docker.com/r/bats/bats):\n\n```bash\n$ docker run -it -v \"$PWD:/code\" bats/bats:latest /code/test\n",
                    "rendered": {
                      "text": "  \n## Basic Usage\n\nFor test suites that are intended to run in isolation from their project code, you can mount the test directory and run the [official bats docker image](https://hub.docker.com/r/bats/bats):\n\n```bash\n$ docker run -it -v \"$PWD:/code\" bats/bats:latest /code/test\n",
                      "markdown": "`  \n## Basic Usage\n\nFor test suites that are intended to run in isolation from their project code, you can mount the test directory and run the [official bats docker image](https://hub.docker.com/r/bats/bats):\n\n```bash\n$ docker run -it -v \"$PWD:/code\" bats/bats:latest /code/test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 86,
                  "endLine": 11,
                  "endColumn": 93,
                  "snippet": {
                    "text": "  \n## Basic Usage\n\nFor test suites that are intended to run in isolation from their project code, you can mount the test directory and run the [official bats docker image](https://hub.docker.com/r/bats/bats):\n\n```bash\n$ docker run -it -v \"$PWD:/code\" bats/bats:latest /code/test\n",
                    "rendered": {
                      "text": "  \n## Basic Usage\n\nFor test suites that are intended to run in isolation from their project code, you can mount the test directory and run the [official bats docker image](https://hub.docker.com/r/bats/bats):\n\n```bash\n$ docker run -it -v \"$PWD:/code\" bats/bats:latest /code/test\n",
                      "markdown": "`  \n## Basic Usage\n\nFor test suites that are intended to run in isolation from their project code, you can mount the test directory and run the [official bats docker image](https://hub.docker.com/r/bats/bats):\n\n```bash\n$ docker run -it -v \"$PWD:/code\" bats/bats:latest /code/test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/docker-usage.md"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# Docker Usage Guide\n\n- [Docker Usage Guide](#docker-usage-guide)\n  * [Basic Usage](#basic-usage)\n",
                    "rendered": {
                      "text": "# Docker Usage Guide\n\n- [Docker Usage Guide](#docker-usage-guide)\n  * [Basic Usage](#basic-usage)\n",
                      "markdown": "`# Docker Usage Guide\n\n- [Docker Usage Guide](#docker-usage-guide)\n  * [Basic Usage](#basic-usage)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 639,
                  "startColumn": 67,
                  "endLine": 639,
                  "endColumn": 75,
                  "snippet": {
                    "text": "  The default of 0 means the test must pass on the first attempt.\n- `BATS_TEST_TIMEOUT` is the number of seconds after which a test (including setup)\n  will be aborted and marked as failed. Updates to this value in `setup()` or `@test`\n  cannot change the running timeout countdown, so the latest useful update location\n  is `setup_file()`.\n- `$BATS_TEST_NUMBER` is the (1-based) index of the current test case in the test file.\n- `$BATS_SUITE_TEST_NUMBER` is the (1-based) index of the current test case in the test suite (over all files).\n",
                    "rendered": {
                      "text": "  The default of 0 means the test must pass on the first attempt.\n- `BATS_TEST_TIMEOUT` is the number of seconds after which a test (including setup)\n  will be aborted and marked as failed. Updates to this value in `setup()` or `@test`\n  cannot change the running timeout countdown, so the latest useful update location\n  is `setup_file()`.\n- `$BATS_TEST_NUMBER` is the (1-based) index of the current test case in the test file.\n- `$BATS_SUITE_TEST_NUMBER` is the (1-based) index of the current test case in the test suite (over all files).\n",
                      "markdown": "`  The default of 0 means the test must pass on the first attempt.\n- `BATS_TEST_TIMEOUT` is the number of seconds after which a test (including setup)\n  will be aborted and marked as failed. Updates to this value in `setup()` or `@test`\n  cannot change the running timeout countdown, so the latest useful update location\n  is `setup_file()`.\n- `$BATS_TEST_NUMBER` is the (1-based) index of the current test case in the test file.\n- `$BATS_SUITE_TEST_NUMBER` is the (1-based) index of the current test case in the test suite (over all files).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 11,
                  "endLine": 554,
                  "endColumn": 15,
                  "snippet": {
                    "text": "and fail immediately if they're not present. \n\nIn general, you should avoid printing outside of `@test`, `setup*` or `teardown*` functions.\nHave a look at section [printing to the terminal](#printing-to-the-terminal) for more details.\n## File descriptor 3 (read this if Bats hangs)\n\nBats makes a separation between output from the code under test and output that\n",
                    "rendered": {
                      "text": "and fail immediately if they're not present. \n\nIn general, you should avoid printing outside of `@test`, `setup*` or `teardown*` functions.\nHave a look at section [printing to the terminal](#printing-to-the-terminal) for more details.\n## File descriptor 3 (read this if Bats hangs)\n\nBats makes a separation between output from the code under test and output that\n",
                      "markdown": "`and fail immediately if they're not present. \n\nIn general, you should avoid printing outside of `@test`, `setup*` or `teardown*` functions.\nHave a look at section [printing to the terminal](#printing-to-the-terminal) for more details.\n## File descriptor 3 (read this if Bats hangs)\n\nBats makes a separation between output from the code under test and output that\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 48,
                  "endLine": 405,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n## `skip`: Easily skip tests\n\nTests can be skipped by using the `skip` command at the point in a test you wish\nto skip.\n\n```bash\n",
                    "rendered": {
                      "text": "\n## `skip`: Easily skip tests\n\nTests can be skipped by using the `skip` command at the point in a test you wish\nto skip.\n\n```bash\n",
                      "markdown": "`\n## `skip`: Easily skip tests\n\nTests can be skipped by using the `skip` command at the point in a test you wish\nto skip.\n\n```bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 51,
                  "endLine": 314,
                  "endColumn": 57,
                  "snippet": {
                    "text": "## `load`: Share common code\n\nYou may want to share common code across multiple test files. Bats\nincludes a convenient `load` command for sourcing a Bash source files\nrelative to the current test file and from absolute paths.\n\nFor example, if you have a Bats test in `test/foo.bats`, the command\n",
                    "rendered": {
                      "text": "## `load`: Share common code\n\nYou may want to share common code across multiple test files. Bats\nincludes a convenient `load` command for sourcing a Bash source files\nrelative to the current test file and from absolute paths.\n\nFor example, if you have a Bats test in `test/foo.bats`, the command\n",
                      "markdown": "`## `load`: Share common code\n\nYou may want to share common code across multiple test files. Bats\nincludes a convenient `load` command for sourcing a Bash source files\nrelative to the current test file and from absolute paths.\n\nFor example, if you have a Bats test in `test/foo.bats`, the command\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 68,
                  "endLine": 251,
                  "snippet": {
                    "text": "within the context of the `run` command, and thus have the output and status\nvariables properly contained within the normal `output` and `status` variables.\n\nNote that this requires the usage of `\\|`, not `|`. This is to avoid bash\nparsing out `|` first, instead sending `\\|` to the `bats_pipe` command for it to\nparse and set up intended piping. Running `bats_pipe` with no instances of `\\|`\nwill always fail; this is intended to catch typos (accidentally using `|`) by\nthe test author.\n",
                    "rendered": {
                      "text": "within the context of the `run` command, and thus have the output and status\nvariables properly contained within the normal `output` and `status` variables.\n\nNote that this requires the usage of `\\|`, not `|`. This is to avoid bash\nparsing out `|` first, instead sending `\\|` to the `bats_pipe` command for it to\nparse and set up intended piping. Running `bats_pipe` with no instances of `\\|`\nwill always fail; this is intended to catch typos (accidentally using `|`) by\nthe test author.\n",
                      "markdown": "`within the context of the `run` command, and thus have the output and status\nvariables properly contained within the normal `output` and `status` variables.\n\nNote that this requires the usage of `\\|`, not `|`. This is to avoid bash\nparsing out `|` first, instead sending `\\|` to the `bats_pipe` command for it to\nparse and set up intended piping. Running `bats_pipe` with no instances of `\\|`\nwill always fail; this is intended to catch typos (accidentally using `|`) by\nthe test author.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 2,
                  "endLine": 243,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nThe `bats_pipe` helper command is meant to handle piping between commands. Its\nmain purpose is to aide the `run` helper command (which cannot handle pipes, due\nto bash parsing priority). `run command0 | command1` will parse `|` before\n`run`, which is commonly not intended by test authors.\n\nRunning `run bats_pipe command0 \\| command1` will have the piped commands run\n",
                    "rendered": {
                      "text": "\nThe `bats_pipe` helper command is meant to handle piping between commands. Its\nmain purpose is to aide the `run` helper command (which cannot handle pipes, due\nto bash parsing priority). `run command0 | command1` will parse `|` before\n`run`, which is commonly not intended by test authors.\n\nRunning `run bats_pipe command0 \\| command1` will have the piped commands run\n",
                      "markdown": "`\nThe `bats_pipe` helper command is meant to handle piping between commands. Its\nmain purpose is to aide the `run` helper command (which cannot handle pipes, due\nto bash parsing priority). `run command0 | command1` will parse `|` before\n`run`, which is commonly not intended by test authors.\n\nRunning `run bats_pipe command0 \\| command1` will have the piped commands run\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 48,
                  "endLine": 227,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n### `run` and pipes\n\nDon't fool yourself with pipes when using `run`. Bash parses the pipe outside of `run`, not internal to its command. Take this example:\n\n```bash\nrun command args ... | jq -e '.limit == 42'\n",
                    "rendered": {
                      "text": "\n### `run` and pipes\n\nDon't fool yourself with pipes when using `run`. Bash parses the pipe outside of `run`, not internal to its command. Take this example:\n\n```bash\nrun command args ... | jq -e '.limit == 42'\n",
                      "markdown": "`\n### `run` and pipes\n\nDon't fool yourself with pipes when using `run`. Bash parses the pipe outside of `run`, not internal to its command. Take this example:\n\n```bash\nrun command args ... | jq -e '.limit == 42'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 38,
                  "endLine": 99,
                  "endColumn": 42,
                  "snippet": {
                    "text": "To put it more formally, `--filter-tags` is a boolean conjunction.\n\nTo allow for more complex queries, you can specify multiple `--filter-tags`.\nA test will be executed, if it matches at least one of them.\nThis means multiple `--filter-tags` form a boolean disjunction.\n\nA query of `--filter-tags a,!b --filter-tags b,c` can be translated to:\n",
                    "rendered": {
                      "text": "To put it more formally, `--filter-tags` is a boolean conjunction.\n\nTo allow for more complex queries, you can specify multiple `--filter-tags`.\nA test will be executed, if it matches at least one of them.\nThis means multiple `--filter-tags` form a boolean disjunction.\n\nA query of `--filter-tags a,!b --filter-tags b,c` can be translated to:\n",
                      "markdown": "`To put it more formally, `--filter-tags` is a boolean conjunction.\n\nTo allow for more complex queries, you can specify multiple `--filter-tags`.\nA test will be executed, if it matches at least one of them.\nThis means multiple `--filter-tags` form a boolean disjunction.\n\nA query of `--filter-tags a,!b --filter-tags b,c` can be translated to:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 639,
                  "startColumn": 27,
                  "endLine": 639,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  The default of 0 means the test must pass on the first attempt.\n- `BATS_TEST_TIMEOUT` is the number of seconds after which a test (including setup)\n  will be aborted and marked as failed. Updates to this value in `setup()` or `@test`\n  cannot change the running timeout countdown, so the latest useful update location\n  is `setup_file()`.\n- `$BATS_TEST_NUMBER` is the (1-based) index of the current test case in the test file.\n- `$BATS_SUITE_TEST_NUMBER` is the (1-based) index of the current test case in the test suite (over all files).\n",
                    "rendered": {
                      "text": "  The default of 0 means the test must pass on the first attempt.\n- `BATS_TEST_TIMEOUT` is the number of seconds after which a test (including setup)\n  will be aborted and marked as failed. Updates to this value in `setup()` or `@test`\n  cannot change the running timeout countdown, so the latest useful update location\n  is `setup_file()`.\n- `$BATS_TEST_NUMBER` is the (1-based) index of the current test case in the test file.\n- `$BATS_SUITE_TEST_NUMBER` is the (1-based) index of the current test case in the test suite (over all files).\n",
                      "markdown": "`  The default of 0 means the test must pass on the first attempt.\n- `BATS_TEST_TIMEOUT` is the number of seconds after which a test (including setup)\n  will be aborted and marked as failed. Updates to this value in `setup()` or `@test`\n  cannot change the running timeout countdown, so the latest useful update location\n  is `setup_file()`.\n- `$BATS_TEST_NUMBER` is the (1-based) index of the current test case in the test file.\n- `$BATS_SUITE_TEST_NUMBER` is the (1-based) index of the current test case in the test suite (over all files).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 74,
                  "endLine": 570,
                  "endColumn": 8,
                  "snippet": {
                    "text": "case, the child process will inherit file descriptor 3. Bats, as the parent\nprocess, will wait for the file descriptor to be closed by the child process\nbefore continuing execution. If the child process takes a lot of time to\ncomplete (eg if the child process is a `sleep 100` command or a background\nservice that will run indefinitely), Bats will be similarly blocked for the same\namount of time.\n\n**To prevent this from happening, close FD 3 explicitly when running any command\n",
                    "rendered": {
                      "text": "case, the child process will inherit file descriptor 3. Bats, as the parent\nprocess, will wait for the file descriptor to be closed by the child process\nbefore continuing execution. If the child process takes a lot of time to\ncomplete (eg if the child process is a `sleep 100` command or a background\nservice that will run indefinitely), Bats will be similarly blocked for the same\namount of time.\n\n**To prevent this from happening, close FD 3 explicitly when running any command\n",
                      "markdown": "`case, the child process will inherit file descriptor 3. Bats, as the parent\nprocess, will wait for the file descriptor to be closed by the child process\nbefore continuing execution. If the child process takes a lot of time to\ncomplete (eg if the child process is a `sleep 100` command or a background\nservice that will run indefinitely), Bats will be similarly blocked for the same\namount of time.\n\n**To prevent this from happening, close FD 3 explicitly when running any command\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 64,
                  "endLine": 568,
                  "endColumn": 70,
                  "snippet": {
                    "text": "happen if a child process is spawned in the background from a test. In this\ncase, the child process will inherit file descriptor 3. Bats, as the parent\nprocess, will wait for the file descriptor to be closed by the child process\nbefore continuing execution. If the child process takes a lot of time to\ncomplete (eg if the child process is a `sleep 100` command or a background\nservice that will run indefinitely), Bats will be similarly blocked for the same\namount of time.\n",
                    "rendered": {
                      "text": "happen if a child process is spawned in the background from a test. In this\ncase, the child process will inherit file descriptor 3. Bats, as the parent\nprocess, will wait for the file descriptor to be closed by the child process\nbefore continuing execution. If the child process takes a lot of time to\ncomplete (eg if the child process is a `sleep 100` command or a background\nservice that will run indefinitely), Bats will be similarly blocked for the same\namount of time.\n",
                      "markdown": "`happen if a child process is spawned in the background from a test. In this\ncase, the child process will inherit file descriptor 3. Bats, as the parent\nprocess, will wait for the file descriptor to be closed by the child process\nbefore continuing execution. If the child process takes a lot of time to\ncomplete (eg if the child process is a `sleep 100` command or a background\nservice that will run indefinitely), Bats will be similarly blocked for the same\namount of time.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 75,
                  "endLine": 406,
                  "snippet": {
                    "text": "\n## `skip`: Easily skip tests\n\nTests can be skipped by using the `skip` command at the point in a test you wish\nto skip.\n\n```bash\n@test \"A test I don't want to execute for now\" {\n",
                    "rendered": {
                      "text": "\n## `skip`: Easily skip tests\n\nTests can be skipped by using the `skip` command at the point in a test you wish\nto skip.\n\n```bash\n@test \"A test I don't want to execute for now\" {\n",
                      "markdown": "`\n## `skip`: Easily skip tests\n\nTests can be skipped by using the `skip` command at the point in a test you wish\nto skip.\n\n```bash\n@test \"A test I don't want to execute for now\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 15,
                  "endLine": 323,
                  "endColumn": 23,
                  "snippet": {
                    "text": "load test_helper.bash\n```\n\nwill source the script `test/test_helper.bash` in your test file (limitations\napply, see below). This can be useful for sharing functions to set up your\nenvironment or load fixtures. `load` delegates to Bash's `source` command after\nresolving paths.\n",
                    "rendered": {
                      "text": "load test_helper.bash\n```\n\nwill source the script `test/test_helper.bash` in your test file (limitations\napply, see below). This can be useful for sharing functions to set up your\nenvironment or load fixtures. `load` delegates to Bash's `source` command after\nresolving paths.\n",
                      "markdown": "`load test_helper.bash\n```\n\nwill source the script `test/test_helper.bash` in your test file (limitations\napply, see below). This can be useful for sharing functions to set up your\nenvironment or load fixtures. `load` delegates to Bash's `source` command after\nresolving paths.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 51,
                  "endLine": 314,
                  "endColumn": 57,
                  "snippet": {
                    "text": "## `load`: Share common code\n\nYou may want to share common code across multiple test files. Bats\nincludes a convenient `load` command for sourcing a Bash source files\nrelative to the current test file and from absolute paths.\n\nFor example, if you have a Bats test in `test/foo.bats`, the command\n",
                    "rendered": {
                      "text": "## `load`: Share common code\n\nYou may want to share common code across multiple test files. Bats\nincludes a convenient `load` command for sourcing a Bash source files\nrelative to the current test file and from absolute paths.\n\nFor example, if you have a Bats test in `test/foo.bats`, the command\n",
                      "markdown": "`## `load`: Share common code\n\nYou may want to share common code across multiple test files. Bats\nincludes a convenient `load` command for sourcing a Bash source files\nrelative to the current test file and from absolute paths.\n\nFor example, if you have a Bats test in `test/foo.bats`, the command\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 68,
                  "endLine": 251,
                  "snippet": {
                    "text": "within the context of the `run` command, and thus have the output and status\nvariables properly contained within the normal `output` and `status` variables.\n\nNote that this requires the usage of `\\|`, not `|`. This is to avoid bash\nparsing out `|` first, instead sending `\\|` to the `bats_pipe` command for it to\nparse and set up intended piping. Running `bats_pipe` with no instances of `\\|`\nwill always fail; this is intended to catch typos (accidentally using `|`) by\nthe test author.\n",
                    "rendered": {
                      "text": "within the context of the `run` command, and thus have the output and status\nvariables properly contained within the normal `output` and `status` variables.\n\nNote that this requires the usage of `\\|`, not `|`. This is to avoid bash\nparsing out `|` first, instead sending `\\|` to the `bats_pipe` command for it to\nparse and set up intended piping. Running `bats_pipe` with no instances of `\\|`\nwill always fail; this is intended to catch typos (accidentally using `|`) by\nthe test author.\n",
                      "markdown": "`within the context of the `run` command, and thus have the output and status\nvariables properly contained within the normal `output` and `status` variables.\n\nNote that this requires the usage of `\\|`, not `|`. This is to avoid bash\nparsing out `|` first, instead sending `\\|` to the `bats_pipe` command for it to\nparse and set up intended piping. Running `bats_pipe` with no instances of `\\|`\nwill always fail; this is intended to catch typos (accidentally using `|`) by\nthe test author.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 2,
                  "endLine": 243,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nThe `bats_pipe` helper command is meant to handle piping between commands. Its\nmain purpose is to aide the `run` helper command (which cannot handle pipes, due\nto bash parsing priority). `run command0 | command1` will parse `|` before\n`run`, which is commonly not intended by test authors.\n\nRunning `run bats_pipe command0 \\| command1` will have the piped commands run\n",
                    "rendered": {
                      "text": "\nThe `bats_pipe` helper command is meant to handle piping between commands. Its\nmain purpose is to aide the `run` helper command (which cannot handle pipes, due\nto bash parsing priority). `run command0 | command1` will parse `|` before\n`run`, which is commonly not intended by test authors.\n\nRunning `run bats_pipe command0 \\| command1` will have the piped commands run\n",
                      "markdown": "`\nThe `bats_pipe` helper command is meant to handle piping between commands. Its\nmain purpose is to aide the `run` helper command (which cannot handle pipes, due\nto bash parsing priority). `run command0 | command1` will parse `|` before\n`run`, which is commonly not intended by test authors.\n\nRunning `run bats_pipe command0 \\| command1` will have the piped commands run\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 48,
                  "endLine": 227,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n### `run` and pipes\n\nDon't fool yourself with pipes when using `run`. Bash parses the pipe outside of `run`, not internal to its command. Take this example:\n\n```bash\nrun command args ... | jq -e '.limit == 42'\n",
                    "rendered": {
                      "text": "\n### `run` and pipes\n\nDon't fool yourself with pipes when using `run`. Bash parses the pipe outside of `run`, not internal to its command. Take this example:\n\n```bash\nrun command args ... | jq -e '.limit == 42'\n",
                      "markdown": "`\n### `run` and pipes\n\nDon't fool yourself with pipes when using `run`. Bash parses the pipe outside of `run`, not internal to its command. Take this example:\n\n```bash\nrun command args ... | jq -e '.limit == 42'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 5,
                  "endLine": 155,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n```pre\n    -N  expect exit status N (0-255), fail if otherwise\n    ! expect nonzero exit status (1-255), fail if command succeeds\n```\n\nWe can then write the above more elegantly as:\n",
                    "rendered": {
                      "text": "\n```pre\n    -N  expect exit status N (0-255), fail if otherwise\n    ! expect nonzero exit status (1-255), fail if command succeeds\n```\n\nWe can then write the above more elegantly as:\n",
                      "markdown": "`\n```pre\n    -N  expect exit status N (0-255), fail if otherwise\n    ! expect nonzero exit status (1-255), fail if command succeeds\n```\n\nWe can then write the above more elegantly as:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/writing-tests.md"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 7,
                  "endLine": 154,
                  "endColumn": 15,
                  "snippet": {
                    "text": "will perform an implicit check on the exit status of the invoked command:\n\n```pre\n    -N  expect exit status N (0-255), fail if otherwise\n    ! expect nonzero exit status (1-255), fail if command succeeds\n```\n\n",
                    "rendered": {
                      "text": "will perform an implicit check on the exit status of the invoked command:\n\n```pre\n    -N  expect exit status N (0-255), fail if otherwise\n    ! expect nonzero exit status (1-255), fail if command succeeds\n```\n\n",
                      "markdown": "`will perform an implicit check on the exit status of the invoked command:\n\n```pre\n    -N  expect exit status N (0-255), fail if otherwise\n    ! expect nonzero exit status (1-255), fail if command succeeds\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/usage.md"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 67,
                  "endLine": 104,
                  "endColumn": 71,
                  "snippet": {
                    "text": "identify any inter-test dependencies or non-deterministic test behaviour.\n\nWhen parallelizing, the results of a file only become visible after it has been finished.\nYou can use `--no-parallelize-across-files` to get immediate output at the cost of reduced\noverall parallelity, as parallelization will only happen within files and files will be run\nsequentially.\n\n",
                    "rendered": {
                      "text": "identify any inter-test dependencies or non-deterministic test behaviour.\n\nWhen parallelizing, the results of a file only become visible after it has been finished.\nYou can use `--no-parallelize-across-files` to get immediate output at the cost of reduced\noverall parallelity, as parallelization will only happen within files and files will be run\nsequentially.\n\n",
                      "markdown": "`identify any inter-test dependencies or non-deterministic test behaviour.\n\nWhen parallelizing, the results of a file only become visible after it has been finished.\nYou can use `--no-parallelize-across-files` to get immediate output at the cost of reduced\noverall parallelity, as parallelization will only happen within files and files will be run\nsequentially.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/usage.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 46,
                  "endLine": 15,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\nTo run your tests, invoke the `bats` interpreter with one or more paths to test\nfiles ending with the `.bats` extension, or paths to directories containing test\nfiles. (`bats` will only execute `.bats` files at the top level of each\ndirectory; it will not recurse unless you specify the `-r` flag.)\n\nTest cases from each file are run sequentially and in isolation. If all the test\n",
                    "rendered": {
                      "text": "\nTo run your tests, invoke the `bats` interpreter with one or more paths to test\nfiles ending with the `.bats` extension, or paths to directories containing test\nfiles. (`bats` will only execute `.bats` files at the top level of each\ndirectory; it will not recurse unless you specify the `-r` flag.)\n\nTest cases from each file are run sequentially and in isolation. If all the test\n",
                      "markdown": "`\nTo run your tests, invoke the `bats` interpreter with one or more paths to test\nfiles ending with the `.bats` extension, or paths to directories containing test\nfiles. (`bats` will only execute `.bats` files at the top level of each\ndirectory; it will not recurse unless you specify the `-r` flag.)\n\nTest cases from each file are run sequentially and in isolation. If all the test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/usage.md"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 31,
                  "endLine": 100,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\nOrdering of parallelised tests is not guaranteed, so this mode may break suites\nwith dependencies between tests (or tests that write to shared locations). When\nenabling `--jobs` for the first time be sure to re-run bats multiple times to\nidentify any inter-test dependencies or non-deterministic test behaviour.\n\nWhen parallelizing, the results of a file only become visible after it has been finished.\n",
                    "rendered": {
                      "text": "\nOrdering of parallelised tests is not guaranteed, so this mode may break suites\nwith dependencies between tests (or tests that write to shared locations). When\nenabling `--jobs` for the first time be sure to re-run bats multiple times to\nidentify any inter-test dependencies or non-deterministic test behaviour.\n\nWhen parallelizing, the results of a file only become visible after it has been finished.\n",
                      "markdown": "`\nOrdering of parallelised tests is not guaranteed, so this mode may break suites\nwith dependencies between tests (or tests that write to shared locations). When\nenabling `--jobs` for the first time be sure to re-run bats multiple times to\nidentify any inter-test dependencies or non-deterministic test behaviour.\n\nWhen parallelizing, the results of a file only become visible after it has been finished.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/usage.md"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 1,
                  "endLine": 76,
                  "endColumn": 6,
                  "snippet": {
                    "text": "ok 1 addition using bc\nok 2 addition using dc\n\n$ cat /tmp/report.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites time=\"0.073\">\n<testsuite name=\"addition.bats\" tests=\"2\" failures=\"0\" errors=\"0\" skipped=\"0\">\n",
                    "rendered": {
                      "text": "ok 1 addition using bc\nok 2 addition using dc\n\n$ cat /tmp/report.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites time=\"0.073\">\n<testsuite name=\"addition.bats\" tests=\"2\" failures=\"0\" errors=\"0\" skipped=\"0\">\n",
                      "markdown": "`ok 1 addition using bc\nok 2 addition using dc\n\n$ cat /tmp/report.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites time=\"0.073\">\n<testsuite name=\"addition.bats\" tests=\"2\" failures=\"0\" errors=\"0\" skipped=\"0\">\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/usage.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 53,
                  "endLine": 15,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\nTo run your tests, invoke the `bats` interpreter with one or more paths to test\nfiles ending with the `.bats` extension, or paths to directories containing test\nfiles. (`bats` will only execute `.bats` files at the top level of each\ndirectory; it will not recurse unless you specify the `-r` flag.)\n\nTest cases from each file are run sequentially and in isolation. If all the test\n",
                    "rendered": {
                      "text": "\nTo run your tests, invoke the `bats` interpreter with one or more paths to test\nfiles ending with the `.bats` extension, or paths to directories containing test\nfiles. (`bats` will only execute `.bats` files at the top level of each\ndirectory; it will not recurse unless you specify the `-r` flag.)\n\nTest cases from each file are run sequentially and in isolation. If all the test\n",
                      "markdown": "`\nTo run your tests, invoke the `bats` interpreter with one or more paths to test\nfiles ending with the `.bats` extension, or paths to directories containing test\nfiles. (`bats` will only execute `.bats` files at the top level of each\ndirectory; it will not recurse unless you specify the `-r` flag.)\n\nTest cases from each file are run sequentially and in isolation. If all the test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/warnings.bash"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 14,
                  "endLine": 42,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  'PADDING'\n  # see issue #578 for context\n  \"\\`run\\`'s command \\`%s\\` exited with code 127, indicating 'Command not found'. Use run's return code checks, e.g. \\`run -127\\`, to fix this message.\"\n  \"%s requires at least BATS_VERSION=%s. Use \\`bats_require_minimum_version %s\\` to fix this message.\"\n  \"\\`setup_suite\\` is visible to test file '%s', but was not executed. It belongs into 'setup_suite.bash' to be picked up automatically.\"\n)\n",
                    "rendered": {
                      "text": "  'PADDING'\n  # see issue #578 for context\n  \"\\`run\\`'s command \\`%s\\` exited with code 127, indicating 'Command not found'. Use run's return code checks, e.g. \\`run -127\\`, to fix this message.\"\n  \"%s requires at least BATS_VERSION=%s. Use \\`bats_require_minimum_version %s\\` to fix this message.\"\n  \"\\`setup_suite\\` is visible to test file '%s', but was not executed. It belongs into 'setup_suite.bash' to be picked up automatically.\"\n)\n",
                      "markdown": "`  'PADDING'\n  # see issue #578 for context\n  \"\\`run\\`'s command \\`%s\\` exited with code 127, indicating 'Command not found'. Use run's return code checks, e.g. \\`run -127\\`, to fix this message.\"\n  \"%s requires at least BATS_VERSION=%s. Use \\`bats_require_minimum_version %s\\` to fix this message.\"\n  \"\\`setup_suite\\` is visible to test file '%s', but was not executed. It belongs into 'setup_suite.bash' to be picked up automatically.\"\n)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/warnings.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/warnings.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/preprocessing.bash"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 45,
                  "endLine": 10,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\nbats_preprocess_source() {\n  # export to make it visible to bats_evaluate_preprocessed_source\n  # since the latter runs in bats-exec-test's bash while this runs in bats-exec-file's\n  export BATS_TEST_SOURCE=\"${BATS_TMPNAME}.src\"\n  # shellcheck disable=SC2153\n  CHECK_BATS_COMMENT_COMMANDS=1 \"$BATS_ROOT/libexec/bats-core/bats-preprocess\" \"$BATS_TEST_FILENAME\" >\"$BATS_TEST_SOURCE\"\n",
                    "rendered": {
                      "text": "\nbats_preprocess_source() {\n  # export to make it visible to bats_evaluate_preprocessed_source\n  # since the latter runs in bats-exec-test's bash while this runs in bats-exec-file's\n  export BATS_TEST_SOURCE=\"${BATS_TMPNAME}.src\"\n  # shellcheck disable=SC2153\n  CHECK_BATS_COMMENT_COMMANDS=1 \"$BATS_ROOT/libexec/bats-core/bats-preprocess\" \"$BATS_TEST_FILENAME\" >\"$BATS_TEST_SOURCE\"\n",
                      "markdown": "`\nbats_preprocess_source() {\n  # export to make it visible to bats_evaluate_preprocessed_source\n  # since the latter runs in bats-exec-test's bash while this runs in bats-exec-file's\n  export BATS_TEST_SOURCE=\"${BATS_TMPNAME}.src\"\n  # shellcheck disable=SC2153\n  CHECK_BATS_COMMENT_COMMANDS=1 \"$BATS_ROOT/libexec/bats-core/bats-preprocess\" \"$BATS_TEST_FILENAME\" >\"$BATS_TEST_SOURCE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/preprocessing.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nBATS_TMPNAME=\"$BATS_RUN_TMPDIR/bats.$$\"\nBATS_PARENT_TMPNAME=\"$BATS_RUN_TMPDIR/bats.$PPID\"\n# shellcheck disable=SC2034\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nBATS_TMPNAME=\"$BATS_RUN_TMPDIR/bats.$$\"\nBATS_PARENT_TMPNAME=\"$BATS_RUN_TMPDIR/bats.$PPID\"\n# shellcheck disable=SC2034\n",
                      "markdown": "`#!/usr/bin/env bash\n\nBATS_TMPNAME=\"$BATS_RUN_TMPDIR/bats.$$\"\nBATS_PARENT_TMPNAME=\"$BATS_RUN_TMPDIR/bats.$PPID\"\n# shellcheck disable=SC2034\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/preprocessing.bash"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 45,
                  "endLine": 10,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\nbats_preprocess_source() {\n  # export to make it visible to bats_evaluate_preprocessed_source\n  # since the latter runs in bats-exec-test's bash while this runs in bats-exec-file's\n  export BATS_TEST_SOURCE=\"${BATS_TMPNAME}.src\"\n  # shellcheck disable=SC2153\n  CHECK_BATS_COMMENT_COMMANDS=1 \"$BATS_ROOT/libexec/bats-core/bats-preprocess\" \"$BATS_TEST_FILENAME\" >\"$BATS_TEST_SOURCE\"\n",
                    "rendered": {
                      "text": "\nbats_preprocess_source() {\n  # export to make it visible to bats_evaluate_preprocessed_source\n  # since the latter runs in bats-exec-test's bash while this runs in bats-exec-file's\n  export BATS_TEST_SOURCE=\"${BATS_TMPNAME}.src\"\n  # shellcheck disable=SC2153\n  CHECK_BATS_COMMENT_COMMANDS=1 \"$BATS_ROOT/libexec/bats-core/bats-preprocess\" \"$BATS_TEST_FILENAME\" >\"$BATS_TEST_SOURCE\"\n",
                      "markdown": "`\nbats_preprocess_source() {\n  # export to make it visible to bats_evaluate_preprocessed_source\n  # since the latter runs in bats-exec-test's bash while this runs in bats-exec-file's\n  export BATS_TEST_SOURCE=\"${BATS_TMPNAME}.src\"\n  # shellcheck disable=SC2153\n  CHECK_BATS_COMMENT_COMMANDS=1 \"$BATS_ROOT/libexec/bats-core/bats-preprocess\" \"$BATS_TEST_FILENAME\" >\"$BATS_TEST_SOURCE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/preprocessing.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nBATS_TMPNAME=\"$BATS_RUN_TMPDIR/bats.$$\"\nBATS_PARENT_TMPNAME=\"$BATS_RUN_TMPDIR/bats.$PPID\"\n# shellcheck disable=SC2034\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nBATS_TMPNAME=\"$BATS_RUN_TMPDIR/bats.$$\"\nBATS_PARENT_TMPNAME=\"$BATS_RUN_TMPDIR/bats.$PPID\"\n# shellcheck disable=SC2034\n",
                      "markdown": "`#!/usr/bin/env bash\n\nBATS_TMPNAME=\"$BATS_RUN_TMPDIR/bats.$$\"\nBATS_PARENT_TMPNAME=\"$BATS_RUN_TMPDIR/bats.$PPID\"\n# shellcheck disable=SC2034\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 56,
                  "endLine": 306,
                  "endColumn": 60,
                  "snippet": {
                    "text": "# command failure, but the `EXIT` trap will. Also, some command failures may not\n# set `$?` properly. See #72 and #81 for details.\n#\n# For this reason, we call `bats_check_status_from_trap` at the very beginning\n# of `bats_teardown_trap` and check the value of `$BATS_TEST_COMPLETED` before\n# taking other actions. We also adjust the exit status value if needed.\n#\n",
                    "rendered": {
                      "text": "# command failure, but the `EXIT` trap will. Also, some command failures may not\n# set `$?` properly. See #72 and #81 for details.\n#\n# For this reason, we call `bats_check_status_from_trap` at the very beginning\n# of `bats_teardown_trap` and check the value of `$BATS_TEST_COMPLETED` before\n# taking other actions. We also adjust the exit status value if needed.\n#\n",
                      "markdown": "`# command failure, but the `EXIT` trap will. Also, some command failures may not\n# set `$?` properly. See #72 and #81 for details.\n#\n# For this reason, we call `bats_check_status_from_trap` at the very beginning\n# of `bats_teardown_trap` and check the value of `$BATS_TEST_COMPLETED` before\n# taking other actions. We also adjust the exit status value if needed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 9,
                  "endLine": 287,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    fi\n  done\n\n  # don't update the trace within library functions or we get backtraces from inside traps\n  # also don't record new stack traces while handling interruptions, to avoid overriding the interrupted command\n  if [[ \"${BATS_INTERRUPTED-NOTSET}\" == NOTSET &&\n        \"${BATS_TIMED_OUT-NOTSET}\" == NOTSET ]]; then\n",
                    "rendered": {
                      "text": "    fi\n  done\n\n  # don't update the trace within library functions or we get backtraces from inside traps\n  # also don't record new stack traces while handling interruptions, to avoid overriding the interrupted command\n  if [[ \"${BATS_INTERRUPTED-NOTSET}\" == NOTSET &&\n        \"${BATS_TIMED_OUT-NOTSET}\" == NOTSET ]]; then\n",
                      "markdown": "`    fi\n  done\n\n  # don't update the trace within library functions or we get backtraces from inside traps\n  # also don't record new stack traces while handling interruptions, to avoid overriding the interrupted command\n  if [[ \"${BATS_INTERRUPTED-NOTSET}\" == NOTSET &&\n        \"${BATS_TIMED_OUT-NOTSET}\" == NOTSET ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 1,
                  "endLine": 257,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#  $var_dne    | OK          | ---          | ---     | BAD[1]      | BAD[1]\n#  source /dne | OK          | ---          | ---     | BAD[1]      | BAD[1]\n#\n# bash version 4.0.44(2)-release\n#  command     | first DEBUG | second DEBUG | ERR     | third DEBUG | EXIT\n# -------------+-------------+--------------+---------+-------------+--------\n#  false       | OK          | BAD[3]       | BAD[3]  | BAD[1]      | BAD[1]\n",
                    "rendered": {
                      "text": "#  $var_dne    | OK          | ---          | ---     | BAD[1]      | BAD[1]\n#  source /dne | OK          | ---          | ---     | BAD[1]      | BAD[1]\n#\n# bash version 4.0.44(2)-release\n#  command     | first DEBUG | second DEBUG | ERR     | third DEBUG | EXIT\n# -------------+-------------+--------------+---------+-------------+--------\n#  false       | OK          | BAD[3]       | BAD[3]  | BAD[1]      | BAD[1]\n",
                      "markdown": "`#  $var_dne    | OK          | ---          | ---     | BAD[1]      | BAD[1]\n#  source /dne | OK          | ---          | ---     | BAD[1]      | BAD[1]\n#\n# bash version 4.0.44(2)-release\n#  command     | first DEBUG | second DEBUG | ERR     | third DEBUG | EXIT\n# -------------+-------------+--------------+---------+-------------+--------\n#  false       | OK          | BAD[3]       | BAD[3]  | BAD[1]      | BAD[1]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 1,
                  "endLine": 247,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# 4. Call the DEBUG trap handler again, but with $BASH_LINENO set to 1, then\n# 5. Call the EXIT trap handler, with $BASH_LINENO set to 1.\n#\n# bash version 4.4.20(1)-release\n#  command     | first DEBUG | second DEBUG | ERR     | third DEBUG | EXIT\n# -------------+-------------+--------------+---------+-------------+--------\n#  false       | OK          | OK           | OK      | BAD[1]      | BAD[1]\n",
                    "rendered": {
                      "text": "# 4. Call the DEBUG trap handler again, but with $BASH_LINENO set to 1, then\n# 5. Call the EXIT trap handler, with $BASH_LINENO set to 1.\n#\n# bash version 4.4.20(1)-release\n#  command     | first DEBUG | second DEBUG | ERR     | third DEBUG | EXIT\n# -------------+-------------+--------------+---------+-------------+--------\n#  false       | OK          | OK           | OK      | BAD[1]      | BAD[1]\n",
                      "markdown": "`# 4. Call the DEBUG trap handler again, but with $BASH_LINENO set to 1, then\n# 5. Call the EXIT trap handler, with $BASH_LINENO set to 1.\n#\n# bash version 4.4.20(1)-release\n#  command     | first DEBUG | second DEBUG | ERR     | third DEBUG | EXIT\n# -------------+-------------+--------------+---------+-------------+--------\n#  false       | OK          | OK           | OK      | BAD[1]      | BAD[1]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 11,
                  "endLine": 238,
                  "endColumn": 17,
                  "snippet": {
                    "text": "#\n# Table rows should be read left to right. For example, on bash version\n# 4.0.44(2)-release, if a test executes `false` (or any other failing external\n# command), bash will do the following in order:\n# 1. Call the DEBUG trap handler (bats_debug_trap) with $BASH_LINENO referring\n#    to the source line containing the `false` command, then\n# 2. Call the DEBUG trap handler again, but with an incorrect $BASH_LINENO, then\n",
                    "rendered": {
                      "text": "#\n# Table rows should be read left to right. For example, on bash version\n# 4.0.44(2)-release, if a test executes `false` (or any other failing external\n# command), bash will do the following in order:\n# 1. Call the DEBUG trap handler (bats_debug_trap) with $BASH_LINENO referring\n#    to the source line containing the `false` command, then\n# 2. Call the DEBUG trap handler again, but with an incorrect $BASH_LINENO, then\n",
                      "markdown": "`#\n# Table rows should be read left to right. For example, on bash version\n# 4.0.44(2)-release, if a test executes `false` (or any other failing external\n# command), bash will do the following in order:\n# 1. Call the DEBUG trap handler (bats_debug_trap) with $BASH_LINENO referring\n#    to the source line containing the `false` command, then\n# 2. Call the DEBUG trap handler again, but with an incorrect $BASH_LINENO, then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 58,
                  "endLine": 236,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# reliability of $BASH_LINENO within different the executed DEBUG, ERR, and EXIT\n# trap handlers. Naturally, the behaviors change between versions of Bash.\n#\n# Table rows should be read left to right. For example, on bash version\n# 4.0.44(2)-release, if a test executes `false` (or any other failing external\n# command), bash will do the following in order:\n# 1. Call the DEBUG trap handler (bats_debug_trap) with $BASH_LINENO referring\n",
                    "rendered": {
                      "text": "# reliability of $BASH_LINENO within different the executed DEBUG, ERR, and EXIT\n# trap handlers. Naturally, the behaviors change between versions of Bash.\n#\n# Table rows should be read left to right. For example, on bash version\n# 4.0.44(2)-release, if a test executes `false` (or any other failing external\n# command), bash will do the following in order:\n# 1. Call the DEBUG trap handler (bats_debug_trap) with $BASH_LINENO referring\n",
                      "markdown": "`# reliability of $BASH_LINENO within different the executed DEBUG, ERR, and EXIT\n# trap handlers. Naturally, the behaviors change between versions of Bash.\n#\n# Table rows should be read left to right. For example, on bash version\n# 4.0.44(2)-release, if a test executes `false` (or any other failing external\n# command), bash will do the following in order:\n# 1. Call the DEBUG trap handler (bats_debug_trap) with $BASH_LINENO referring\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 12,
                  "endLine": 223,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n      BATS_EMIT_TRACE_LAST_STACK_DIFF=$stack_diff\n    fi\n    # always update to detect stack depth changes regardless of printing\n    BATS_LAST_STACK_DEPTH=\"${#BASH_LINENO[@]}\"\n  fi\n}\n",
                    "rendered": {
                      "text": "\n      BATS_EMIT_TRACE_LAST_STACK_DIFF=$stack_diff\n    fi\n    # always update to detect stack depth changes regardless of printing\n    BATS_LAST_STACK_DEPTH=\"${#BASH_LINENO[@]}\"\n  fi\n}\n",
                      "markdown": "`\n      BATS_EMIT_TRACE_LAST_STACK_DIFF=$stack_diff\n    fi\n    # always update to detect stack depth changes regardless of printing\n    BATS_LAST_STACK_DEPTH=\"${#BASH_LINENO[@]}\"\n  fi\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 54,
                  "endLine": 20,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  local limit=$(( ${#FUNCNAME[@]} - ${BATS_STACK_TRACE_LIMIT-0} ))\n  # TODO: why is the line number off by one in  @test \"--trace recurses into functions but not into run\"\n  for ((i = 2; i < limit ; ++i)); do\n    # Use BATS_TEST_SOURCE if necessary to work around Bash < 4.4 bug whereby\n    # calling an exported function erases the test file's BASH_SOURCE entry.\n    test_file=\"${BASH_SOURCE[$i]:-$BATS_TEST_SOURCE}\"\n    funcname=\"${FUNCNAME[$i]}\"\n",
                    "rendered": {
                      "text": "  local limit=$(( ${#FUNCNAME[@]} - ${BATS_STACK_TRACE_LIMIT-0} ))\n  # TODO: why is the line number off by one in  @test \"--trace recurses into functions but not into run\"\n  for ((i = 2; i < limit ; ++i)); do\n    # Use BATS_TEST_SOURCE if necessary to work around Bash < 4.4 bug whereby\n    # calling an exported function erases the test file's BASH_SOURCE entry.\n    test_file=\"${BASH_SOURCE[$i]:-$BATS_TEST_SOURCE}\"\n    funcname=\"${FUNCNAME[$i]}\"\n",
                      "markdown": "`  local limit=$(( ${#FUNCNAME[@]} - ${BATS_STACK_TRACE_LIMIT-0} ))\n  # TODO: why is the line number off by one in  @test \"--trace recurses into functions but not into run\"\n  for ((i = 2; i < limit ; ++i)); do\n    # Use BATS_TEST_SOURCE if necessary to work around Bash < 4.4 bug whereby\n    # calling an exported function erases the test file's BASH_SOURCE entry.\n    test_file=\"${BASH_SOURCE[$i]:-$BATS_TEST_SOURCE}\"\n    funcname=\"${FUNCNAME[$i]}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 56,
                  "endLine": 6,
                  "endColumn": 60,
                  "snippet": {
                    "text": "# shellcheck source=lib/bats-core/common.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/common.bash\"\n\n# set limit such that traces are only captured for calls at the same depth as this function in the calltree\nbats_set_stacktrace_limit() {\n  BATS_STACK_TRACE_LIMIT=$(( ${#FUNCNAME[@]} - 1 )) # adjust by -1 to account for call to this functions\n}\n",
                    "rendered": {
                      "text": "# shellcheck source=lib/bats-core/common.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/common.bash\"\n\n# set limit such that traces are only captured for calls at the same depth as this function in the calltree\nbats_set_stacktrace_limit() {\n  BATS_STACK_TRACE_LIMIT=$(( ${#FUNCNAME[@]} - 1 )) # adjust by -1 to account for call to this functions\n}\n",
                      "markdown": "`# shellcheck source=lib/bats-core/common.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/common.bash\"\n\n# set limit such that traces are only captured for calls at the same depth as this function in the calltree\nbats_set_stacktrace_limit() {\n  BATS_STACK_TRACE_LIMIT=$(( ${#FUNCNAME[@]} - 1 )) # adjust by -1 to account for call to this functions\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# shellcheck source=lib/bats-core/common.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/common.bash\"\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# shellcheck source=lib/bats-core/common.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/common.bash\"\n\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# shellcheck source=lib/bats-core/common.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/common.bash\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 1,
                  "endLine": 257,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#  $var_dne    | OK          | ---          | ---     | BAD[1]      | BAD[1]\n#  source /dne | OK          | ---          | ---     | BAD[1]      | BAD[1]\n#\n# bash version 4.0.44(2)-release\n#  command     | first DEBUG | second DEBUG | ERR     | third DEBUG | EXIT\n# -------------+-------------+--------------+---------+-------------+--------\n#  false       | OK          | BAD[3]       | BAD[3]  | BAD[1]      | BAD[1]\n",
                    "rendered": {
                      "text": "#  $var_dne    | OK          | ---          | ---     | BAD[1]      | BAD[1]\n#  source /dne | OK          | ---          | ---     | BAD[1]      | BAD[1]\n#\n# bash version 4.0.44(2)-release\n#  command     | first DEBUG | second DEBUG | ERR     | third DEBUG | EXIT\n# -------------+-------------+--------------+---------+-------------+--------\n#  false       | OK          | BAD[3]       | BAD[3]  | BAD[1]      | BAD[1]\n",
                      "markdown": "`#  $var_dne    | OK          | ---          | ---     | BAD[1]      | BAD[1]\n#  source /dne | OK          | ---          | ---     | BAD[1]      | BAD[1]\n#\n# bash version 4.0.44(2)-release\n#  command     | first DEBUG | second DEBUG | ERR     | third DEBUG | EXIT\n# -------------+-------------+--------------+---------+-------------+--------\n#  false       | OK          | BAD[3]       | BAD[3]  | BAD[1]      | BAD[1]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 1,
                  "endLine": 247,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# 4. Call the DEBUG trap handler again, but with $BASH_LINENO set to 1, then\n# 5. Call the EXIT trap handler, with $BASH_LINENO set to 1.\n#\n# bash version 4.4.20(1)-release\n#  command     | first DEBUG | second DEBUG | ERR     | third DEBUG | EXIT\n# -------------+-------------+--------------+---------+-------------+--------\n#  false       | OK          | OK           | OK      | BAD[1]      | BAD[1]\n",
                    "rendered": {
                      "text": "# 4. Call the DEBUG trap handler again, but with $BASH_LINENO set to 1, then\n# 5. Call the EXIT trap handler, with $BASH_LINENO set to 1.\n#\n# bash version 4.4.20(1)-release\n#  command     | first DEBUG | second DEBUG | ERR     | third DEBUG | EXIT\n# -------------+-------------+--------------+---------+-------------+--------\n#  false       | OK          | OK           | OK      | BAD[1]      | BAD[1]\n",
                      "markdown": "`# 4. Call the DEBUG trap handler again, but with $BASH_LINENO set to 1, then\n# 5. Call the EXIT trap handler, with $BASH_LINENO set to 1.\n#\n# bash version 4.4.20(1)-release\n#  command     | first DEBUG | second DEBUG | ERR     | third DEBUG | EXIT\n# -------------+-------------+--------------+---------+-------------+--------\n#  false       | OK          | OK           | OK      | BAD[1]      | BAD[1]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 11,
                  "endLine": 238,
                  "endColumn": 17,
                  "snippet": {
                    "text": "#\n# Table rows should be read left to right. For example, on bash version\n# 4.0.44(2)-release, if a test executes `false` (or any other failing external\n# command), bash will do the following in order:\n# 1. Call the DEBUG trap handler (bats_debug_trap) with $BASH_LINENO referring\n#    to the source line containing the `false` command, then\n# 2. Call the DEBUG trap handler again, but with an incorrect $BASH_LINENO, then\n",
                    "rendered": {
                      "text": "#\n# Table rows should be read left to right. For example, on bash version\n# 4.0.44(2)-release, if a test executes `false` (or any other failing external\n# command), bash will do the following in order:\n# 1. Call the DEBUG trap handler (bats_debug_trap) with $BASH_LINENO referring\n#    to the source line containing the `false` command, then\n# 2. Call the DEBUG trap handler again, but with an incorrect $BASH_LINENO, then\n",
                      "markdown": "`#\n# Table rows should be read left to right. For example, on bash version\n# 4.0.44(2)-release, if a test executes `false` (or any other failing external\n# command), bash will do the following in order:\n# 1. Call the DEBUG trap handler (bats_debug_trap) with $BASH_LINENO referring\n#    to the source line containing the `false` command, then\n# 2. Call the DEBUG trap handler again, but with an incorrect $BASH_LINENO, then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 58,
                  "endLine": 236,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# reliability of $BASH_LINENO within different the executed DEBUG, ERR, and EXIT\n# trap handlers. Naturally, the behaviors change between versions of Bash.\n#\n# Table rows should be read left to right. For example, on bash version\n# 4.0.44(2)-release, if a test executes `false` (or any other failing external\n# command), bash will do the following in order:\n# 1. Call the DEBUG trap handler (bats_debug_trap) with $BASH_LINENO referring\n",
                    "rendered": {
                      "text": "# reliability of $BASH_LINENO within different the executed DEBUG, ERR, and EXIT\n# trap handlers. Naturally, the behaviors change between versions of Bash.\n#\n# Table rows should be read left to right. For example, on bash version\n# 4.0.44(2)-release, if a test executes `false` (or any other failing external\n# command), bash will do the following in order:\n# 1. Call the DEBUG trap handler (bats_debug_trap) with $BASH_LINENO referring\n",
                      "markdown": "`# reliability of $BASH_LINENO within different the executed DEBUG, ERR, and EXIT\n# trap handlers. Naturally, the behaviors change between versions of Bash.\n#\n# Table rows should be read left to right. For example, on bash version\n# 4.0.44(2)-release, if a test executes `false` (or any other failing external\n# command), bash will do the following in order:\n# 1. Call the DEBUG trap handler (bats_debug_trap) with $BASH_LINENO referring\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 12,
                  "endLine": 107,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n  if [[ \"${BATS_TIMED_OUT-NOTSET}\" != NOTSET ]]; then\n    # the other values can be safely overwritten here,\n    # as the timeout is the primary reason for failure\n    BATS_ERROR_SUFFIX=\" due to timeout\"\n  fi\n\n",
                    "rendered": {
                      "text": "\n  if [[ \"${BATS_TIMED_OUT-NOTSET}\" != NOTSET ]]; then\n    # the other values can be safely overwritten here,\n    # as the timeout is the primary reason for failure\n    BATS_ERROR_SUFFIX=\" due to timeout\"\n  fi\n\n",
                      "markdown": "`\n  if [[ \"${BATS_TIMED_OUT-NOTSET}\" != NOTSET ]]; then\n    # the other values can be safely overwritten here,\n    # as the timeout is the primary reason for failure\n    BATS_ERROR_SUFFIX=\" due to timeout\"\n  fi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 54,
                  "endLine": 20,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  local limit=$(( ${#FUNCNAME[@]} - ${BATS_STACK_TRACE_LIMIT-0} ))\n  # TODO: why is the line number off by one in  @test \"--trace recurses into functions but not into run\"\n  for ((i = 2; i < limit ; ++i)); do\n    # Use BATS_TEST_SOURCE if necessary to work around Bash < 4.4 bug whereby\n    # calling an exported function erases the test file's BASH_SOURCE entry.\n    test_file=\"${BASH_SOURCE[$i]:-$BATS_TEST_SOURCE}\"\n    funcname=\"${FUNCNAME[$i]}\"\n",
                    "rendered": {
                      "text": "  local limit=$(( ${#FUNCNAME[@]} - ${BATS_STACK_TRACE_LIMIT-0} ))\n  # TODO: why is the line number off by one in  @test \"--trace recurses into functions but not into run\"\n  for ((i = 2; i < limit ; ++i)); do\n    # Use BATS_TEST_SOURCE if necessary to work around Bash < 4.4 bug whereby\n    # calling an exported function erases the test file's BASH_SOURCE entry.\n    test_file=\"${BASH_SOURCE[$i]:-$BATS_TEST_SOURCE}\"\n    funcname=\"${FUNCNAME[$i]}\"\n",
                      "markdown": "`  local limit=$(( ${#FUNCNAME[@]} - ${BATS_STACK_TRACE_LIMIT-0} ))\n  # TODO: why is the line number off by one in  @test \"--trace recurses into functions but not into run\"\n  for ((i = 2; i < limit ; ++i)); do\n    # Use BATS_TEST_SOURCE if necessary to work around Bash < 4.4 bug whereby\n    # calling an exported function erases the test file's BASH_SOURCE entry.\n    test_file=\"${BASH_SOURCE[$i]:-$BATS_TEST_SOURCE}\"\n    funcname=\"${FUNCNAME[$i]}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/tracing.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# shellcheck source=lib/bats-core/common.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/common.bash\"\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# shellcheck source=lib/bats-core/common.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/common.bash\"\n\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# shellcheck source=lib/bats-core/common.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/common.bash\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 26,
                  "endLine": 512,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n# decides whether a failed test should be run again\nbats_should_retry_test() {\n  # test try number starts at 1\n  # 0 retries means run only first try\n  ((BATS_TEST_TRY_NUMBER <= BATS_TEST_RETRIES))\n}\n",
                    "rendered": {
                      "text": "\n# decides whether a failed test should be run again\nbats_should_retry_test() {\n  # test try number starts at 1\n  # 0 retries means run only first try\n  ((BATS_TEST_TRY_NUMBER <= BATS_TEST_RETRIES))\n}\n",
                      "markdown": "`\n# decides whether a failed test should be run again\nbats_should_retry_test() {\n  # test try number starts at 1\n  # 0 retries means run only first try\n  ((BATS_TEST_TRY_NUMBER <= BATS_TEST_RETRIES))\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 11,
                  "endLine": 292,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    # iterate backwards through pipe_status to find the last error.\n    result_status=0\n    for index in \"${!__bats_pipe_eval_pipe_status[@]}\"; do\n      # OSX bash doesn't support negative indexing.\n      local backward_iter_index=\"$((${#__bats_pipe_eval_pipe_status[@]} - index - 1))\"\n      local status_at_backward_iter_index=\"${__bats_pipe_eval_pipe_status[$backward_iter_index]}\"\n      if (( status_at_backward_iter_index != 0 )); then\n",
                    "rendered": {
                      "text": "    # iterate backwards through pipe_status to find the last error.\n    result_status=0\n    for index in \"${!__bats_pipe_eval_pipe_status[@]}\"; do\n      # OSX bash doesn't support negative indexing.\n      local backward_iter_index=\"$((${#__bats_pipe_eval_pipe_status[@]} - index - 1))\"\n      local status_at_backward_iter_index=\"${__bats_pipe_eval_pipe_status[$backward_iter_index]}\"\n      if (( status_at_backward_iter_index != 0 )); then\n",
                      "markdown": "`    # iterate backwards through pipe_status to find the last error.\n    result_status=0\n    for index in \"${!__bats_pipe_eval_pipe_status[@]}\"; do\n      # OSX bash doesn't support negative indexing.\n      local backward_iter_index=\"$((${#__bats_pipe_eval_pipe_status[@]} - index - 1))\"\n      local status_at_backward_iter_index=\"${__bats_pipe_eval_pipe_status[$backward_iter_index]}\"\n      if (( status_at_backward_iter_index != 0 )); then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 67,
                  "endLine": 251,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        return 1\n      fi\n      if (( (previous_pipe_index + 1) >= index )); then\n        printf \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '%s'.\\n\" \"$index\" >&2\n        return 1\n      fi\n      (( ++pipe_count ))\n",
                    "rendered": {
                      "text": "        return 1\n      fi\n      if (( (previous_pipe_index + 1) >= index )); then\n        printf \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '%s'.\\n\" \"$index\" >&2\n        return 1\n      fi\n      (( ++pipe_count ))\n",
                      "markdown": "`        return 1\n      fi\n      if (( (previous_pipe_index + 1) >= index )); then\n        printf \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '%s'.\\n\" \"$index\" >&2\n        return 1\n      fi\n      (( ++pipe_count ))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 3,
                  "endLine": 198,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  # By default, the exit code of this command will be the last failure in the\n  # chain of piped commands (similar to `set -o pipefail`).\n  # Supplying -N (e.g. -0) will instead always use the exit code of the command\n  # at that position in the chain.\n  # --returned-status=N could be used as an alternative to -N. This also allows\n  # for negative values (which count from the end in reverse order).\n\n",
                    "rendered": {
                      "text": "  # By default, the exit code of this command will be the last failure in the\n  # chain of piped commands (similar to `set -o pipefail`).\n  # Supplying -N (e.g. -0) will instead always use the exit code of the command\n  # at that position in the chain.\n  # --returned-status=N could be used as an alternative to -N. This also allows\n  # for negative values (which count from the end in reverse order).\n\n",
                      "markdown": "`  # By default, the exit code of this command will be the last failure in the\n  # chain of piped commands (similar to `set -o pipefail`).\n  # Supplying -N (e.g. -0) will instead always use the exit code of the command\n  # at that position in the chain.\n  # --returned-status=N could be used as an alternative to -N. This also allows\n  # for negative values (which count from the end in reverse order).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 49,
                  "endLine": 70,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  if [[ -f \"$library_load_path\" ]]; then\n    # shellcheck disable=SC1090\n    if ! source \"$library_load_path\"; then\n      printf \"Error while sourcing library loader at '%s'\\n\" \"$library_load_path\" >&2\n      return 1\n    fi\n    return 0\n",
                    "rendered": {
                      "text": "  if [[ -f \"$library_load_path\" ]]; then\n    # shellcheck disable=SC1090\n    if ! source \"$library_load_path\"; then\n      printf \"Error while sourcing library loader at '%s'\\n\" \"$library_load_path\" >&2\n      return 1\n    fi\n    return 0\n",
                      "markdown": "`  if [[ -f \"$library_load_path\" ]]; then\n    # shellcheck disable=SC1090\n    if ! source \"$library_load_path\"; then\n      printf \"Error while sourcing library loader at '%s'\\n\" \"$library_load_path\" >&2\n      return 1\n    fi\n    return 0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# this must be called for each test file!\n_bats_test_functions_setup() { # <BATS_TEST_NUMBER>\n  BATS_TEST_DIRNAME=\"${BATS_TEST_FILENAME%/*}\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# this must be called for each test file!\n_bats_test_functions_setup() { # <BATS_TEST_NUMBER>\n  BATS_TEST_DIRNAME=\"${BATS_TEST_FILENAME%/*}\"\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# this must be called for each test file!\n_bats_test_functions_setup() { # <BATS_TEST_NUMBER>\n  BATS_TEST_DIRNAME=\"${BATS_TEST_FILENAME%/*}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 44,
                  "endLine": 497,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  BATS_TEST_NAMES+=(\"$*\")\n  local quoted_parameters\n  printf -v quoted_parameters \" %q\" \"$@\"\n  quoted_parameters=${quoted_parameters:1} # cut off leading space\n\n  # if this is the currently selected test, set tags and name\n  # this should only be entered from bats-exec-test\n",
                    "rendered": {
                      "text": "  BATS_TEST_NAMES+=(\"$*\")\n  local quoted_parameters\n  printf -v quoted_parameters \" %q\" \"$@\"\n  quoted_parameters=${quoted_parameters:1} # cut off leading space\n\n  # if this is the currently selected test, set tags and name\n  # this should only be entered from bats-exec-test\n",
                      "markdown": "`  BATS_TEST_NAMES+=(\"$*\")\n  local quoted_parameters\n  printf -v quoted_parameters \" %q\" \"$@\"\n  quoted_parameters=${quoted_parameters:1} # cut off leading space\n\n  # if this is the currently selected test, set tags and name\n  # this should only be entered from bats-exec-test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 11,
                  "endLine": 292,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    # iterate backwards through pipe_status to find the last error.\n    result_status=0\n    for index in \"${!__bats_pipe_eval_pipe_status[@]}\"; do\n      # OSX bash doesn't support negative indexing.\n      local backward_iter_index=\"$((${#__bats_pipe_eval_pipe_status[@]} - index - 1))\"\n      local status_at_backward_iter_index=\"${__bats_pipe_eval_pipe_status[$backward_iter_index]}\"\n      if (( status_at_backward_iter_index != 0 )); then\n",
                    "rendered": {
                      "text": "    # iterate backwards through pipe_status to find the last error.\n    result_status=0\n    for index in \"${!__bats_pipe_eval_pipe_status[@]}\"; do\n      # OSX bash doesn't support negative indexing.\n      local backward_iter_index=\"$((${#__bats_pipe_eval_pipe_status[@]} - index - 1))\"\n      local status_at_backward_iter_index=\"${__bats_pipe_eval_pipe_status[$backward_iter_index]}\"\n      if (( status_at_backward_iter_index != 0 )); then\n",
                      "markdown": "`    # iterate backwards through pipe_status to find the last error.\n    result_status=0\n    for index in \"${!__bats_pipe_eval_pipe_status[@]}\"; do\n      # OSX bash doesn't support negative indexing.\n      local backward_iter_index=\"$((${#__bats_pipe_eval_pipe_status[@]} - index - 1))\"\n      local status_at_backward_iter_index=\"${__bats_pipe_eval_pipe_status[$backward_iter_index]}\"\n      if (( status_at_backward_iter_index != 0 )); then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 46,
                  "endLine": 289,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  local result_status=\n  if [ -z \"$pipestatus_position\" ]; then\n    # if we are performing default \"last failure\" behavior,\n    # iterate backwards through pipe_status to find the last error.\n    result_status=0\n    for index in \"${!__bats_pipe_eval_pipe_status[@]}\"; do\n      # OSX bash doesn't support negative indexing.\n",
                    "rendered": {
                      "text": "  local result_status=\n  if [ -z \"$pipestatus_position\" ]; then\n    # if we are performing default \"last failure\" behavior,\n    # iterate backwards through pipe_status to find the last error.\n    result_status=0\n    for index in \"${!__bats_pipe_eval_pipe_status[@]}\"; do\n      # OSX bash doesn't support negative indexing.\n",
                      "markdown": "`  local result_status=\n  if [ -z \"$pipestatus_position\" ]; then\n    # if we are performing default \"last failure\" behavior,\n    # iterate backwards through pipe_status to find the last error.\n    result_status=0\n    for index in \"${!__bats_pipe_eval_pipe_status[@]}\"; do\n      # OSX bash doesn't support negative indexing.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 23,
                  "endLine": 138,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    # absolute paths are taken as is\n    library_path=\"$slug\"\n    if [[ ! -f \"$library_path\" ]]; then\n      printf \"Could not find library on absolute path '%s'\\n\" \"$library_path\" >&2\n      return 1\n    fi\n  fi\n",
                    "rendered": {
                      "text": "    # absolute paths are taken as is\n    library_path=\"$slug\"\n    if [[ ! -f \"$library_path\" ]]; then\n      printf \"Could not find library on absolute path '%s'\\n\" \"$library_path\" >&2\n      return 1\n    fi\n  fi\n",
                      "markdown": "`    # absolute paths are taken as is\n    library_path=\"$slug\"\n    if [[ ! -f \"$library_path\" ]]; then\n      printf \"Could not find library on absolute path '%s'\\n\" \"$library_path\" >&2\n      return 1\n    fi\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 23,
                  "endLine": 131,
                  "endColumn": 29,
                  "snippet": {
                    "text": "  # Check for library load paths in BATS_TEST_DIRNAME and BATS_LIB_PATH\n  if [[ ${slug:0:1} != / ]]; then\n    if ! find_in_bats_lib_path library_path \"$slug\"; then\n      printf \"Could not find library '%s' relative to test file or in BATS_LIB_PATH\\n\" \"$slug\" >&2\n      return 1\n    fi\n  else\n",
                    "rendered": {
                      "text": "  # Check for library load paths in BATS_TEST_DIRNAME and BATS_LIB_PATH\n  if [[ ${slug:0:1} != / ]]; then\n    if ! find_in_bats_lib_path library_path \"$slug\"; then\n      printf \"Could not find library '%s' relative to test file or in BATS_LIB_PATH\\n\" \"$slug\" >&2\n      return 1\n    fi\n  else\n",
                      "markdown": "`  # Check for library load paths in BATS_TEST_DIRNAME and BATS_LIB_PATH\n  if [[ ${slug:0:1} != / ]]; then\n    if ! find_in_bats_lib_path library_path \"$slug\"; then\n      printf \"Could not find library '%s' relative to test file or in BATS_LIB_PATH\\n\" \"$slug\" >&2\n      return 1\n    fi\n  else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 35,
                  "endLine": 121,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  fi\n\n  # No library load path can be found\n  printf \"bats_load_safe: Could not find '%s'[.bash]\\n\" \"$slug\" >&2\n  return 1\n}\n\n",
                    "rendered": {
                      "text": "  fi\n\n  # No library load path can be found\n  printf \"bats_load_safe: Could not find '%s'[.bash]\\n\" \"$slug\" >&2\n  return 1\n}\n\n",
                      "markdown": "`  fi\n\n  # No library load path can be found\n  printf \"bats_load_safe: Could not find '%s'[.bash]\\n\" \"$slug\" >&2\n  return 1\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 29,
                  "snippet": {
                    "text": "# relative path. bats_load_safe attempts to find the library load path using\n# find_in_bats_lib_path.\n#\n# If bats_load_safe can find a library load path it is passed to bats_internal_load.\n# If bats_internal_load fails bats_load_safe returns 1.\n#\n# If no library load path can be found bats_load_safe prints an error message\n",
                    "rendered": {
                      "text": "# relative path. bats_load_safe attempts to find the library load path using\n# find_in_bats_lib_path.\n#\n# If bats_load_safe can find a library load path it is passed to bats_internal_load.\n# If bats_internal_load fails bats_load_safe returns 1.\n#\n# If no library load path can be found bats_load_safe prints an error message\n",
                      "markdown": "`# relative path. bats_load_safe attempts to find the library load path using\n# find_in_bats_lib_path.\n#\n# If bats_load_safe can find a library load path it is passed to bats_internal_load.\n# If bats_internal_load fails bats_load_safe returns 1.\n#\n# If no library load path can be found bats_load_safe prints an error message\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 43,
                  "endLine": 91,
                  "endColumn": 49,
                  "snippet": {
                    "text": "# documentation for find_library_load_path.\n#\n# If the slug is not an absolute path it is considered a library name or\n# relative path. bats_load_safe attempts to find the library load path using\n# find_in_bats_lib_path.\n#\n# If bats_load_safe can find a library load path it is passed to bats_internal_load.\n",
                    "rendered": {
                      "text": "# documentation for find_library_load_path.\n#\n# If the slug is not an absolute path it is considered a library name or\n# relative path. bats_load_safe attempts to find the library load path using\n# find_in_bats_lib_path.\n#\n# If bats_load_safe can find a library load path it is passed to bats_internal_load.\n",
                      "markdown": "`# documentation for find_library_load_path.\n#\n# If the slug is not an absolute path it is considered a library name or\n# relative path. bats_load_safe attempts to find the library load path using\n# find_in_bats_lib_path.\n#\n# If bats_load_safe can find a library load path it is passed to bats_internal_load.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 60,
                  "endLine": 85,
                  "endColumn": 66,
                  "snippet": {
                    "text": "#\n# A slug can be an absolute path, a library name or a relative path.\n#\n# If the slug is an absolute path bats_load_safe attempts to find the library\n# load path using find_library_load_path.\n# What is considered a library load path is documented in the\n# documentation for find_library_load_path.\n",
                    "rendered": {
                      "text": "#\n# A slug can be an absolute path, a library name or a relative path.\n#\n# If the slug is an absolute path bats_load_safe attempts to find the library\n# load path using find_library_load_path.\n# What is considered a library load path is documented in the\n# documentation for find_library_load_path.\n",
                      "markdown": "`#\n# A slug can be an absolute path, a library name or a relative path.\n#\n# If the slug is an absolute path bats_load_safe attempts to find the library\n# load path using find_library_load_path.\n# What is considered a library load path is documented in the\n# documentation for find_library_load_path.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 66,
                  "endLine": 80,
                  "endColumn": 72,
                  "snippet": {
                    "text": "  return 1\n}\n\n# bats_load_safe accepts an argument called 'slug' and attempts to find and\n# source a library based on the slug.\n#\n# A slug can be an absolute path, a library name or a relative path.\n",
                    "rendered": {
                      "text": "  return 1\n}\n\n# bats_load_safe accepts an argument called 'slug' and attempts to find and\n# source a library based on the slug.\n#\n# A slug can be an absolute path, a library name or a relative path.\n",
                      "markdown": "`  return 1\n}\n\n# bats_load_safe accepts an argument called 'slug' and attempts to find and\n# source a library based on the slug.\n#\n# A slug can be an absolute path, a library name or a relative path.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/test_functions.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# this must be called for each test file!\n_bats_test_functions_setup() { # <BATS_TEST_NUMBER>\n  BATS_TEST_DIRNAME=\"${BATS_TEST_FILENAME%/*}\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# this must be called for each test file!\n_bats_test_functions_setup() { # <BATS_TEST_NUMBER>\n  BATS_TEST_DIRNAME=\"${BATS_TEST_FILENAME%/*}\"\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# this must be called for each test file!\n_bats_test_functions_setup() { # <BATS_TEST_NUMBER>\n  BATS_TEST_DIRNAME=\"${BATS_TEST_FILENAME%/*}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/semver"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 62,
                  "endLine": 193,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  done\n}\n\n# shellcheck disable=SC2206     # checked by \"validate\"; ok to expand prerel id's into array\nfunction compare-version {\n  local order\n  validate-version \"$1\" V\n",
                    "rendered": {
                      "text": "  done\n}\n\n# shellcheck disable=SC2206     # checked by \"validate\"; ok to expand prerel id's into array\nfunction compare-version {\n  local order\n  validate-version \"$1\" V\n",
                      "markdown": "`  done\n}\n\n# shellcheck disable=SC2206     # checked by \"validate\"; ok to expand prerel id's into array\nfunction compare-version {\n  local order\n  validate-version \"$1\" V\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/semver"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 15,
                  "endLine": 38,
                  "endColumn": 19,
                  "snippet": {
                    "text": "                where X, Y and Z are non-negative integers.\n             -- PRERELEASE is a dot separated sequence of non-negative integers and/or\n                identifiers composed of alphanumeric characters and hyphens (with\n                at least one non-digit). Numeric identifiers must not have leading\n                zeros. A hyphen (\\\"-\\\") introduces this optional part.\n             -- BUILD is a dot separated sequence of identifiers composed of alphanumeric\n                characters and hyphens. A plus (\\\"+\\\") introduces this optional part.\n",
                    "rendered": {
                      "text": "                where X, Y and Z are non-negative integers.\n             -- PRERELEASE is a dot separated sequence of non-negative integers and/or\n                identifiers composed of alphanumeric characters and hyphens (with\n                at least one non-digit). Numeric identifiers must not have leading\n                zeros. A hyphen (\\\"-\\\") introduces this optional part.\n             -- BUILD is a dot separated sequence of identifiers composed of alphanumeric\n                characters and hyphens. A plus (\\\"+\\\") introduces this optional part.\n",
                      "markdown": "`                where X, Y and Z are non-negative integers.\n             -- PRERELEASE is a dot separated sequence of non-negative integers and/or\n                identifiers composed of alphanumeric characters and hyphens (with\n                at least one non-digit). Numeric identifiers must not have leading\n                zeros. A hyphen (\\\"-\\\") introduces this optional part.\n             -- BUILD is a dot separated sequence of identifiers composed of alphanumeric\n                characters and hyphens. A plus (\\\"+\\\") introduces this optional part.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/semver"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# v3.0.0\n# https://github.com/fsaintjacques/semver-tool\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# v3.0.0\n# https://github.com/fsaintjacques/semver-tool\n\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# v3.0.0\n# https://github.com/fsaintjacques/semver-tool\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/semver"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 62,
                  "endLine": 193,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  done\n}\n\n# shellcheck disable=SC2206     # checked by \"validate\"; ok to expand prerel id's into array\nfunction compare-version {\n  local order\n  validate-version \"$1\" V\n",
                    "rendered": {
                      "text": "  done\n}\n\n# shellcheck disable=SC2206     # checked by \"validate\"; ok to expand prerel id's into array\nfunction compare-version {\n  local order\n  validate-version \"$1\" V\n",
                      "markdown": "`  done\n}\n\n# shellcheck disable=SC2206     # checked by \"validate\"; ok to expand prerel id's into array\nfunction compare-version {\n  local order\n  validate-version \"$1\" V\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/semver"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# v3.0.0\n# https://github.com/fsaintjacques/semver-tool\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# v3.0.0\n# https://github.com/fsaintjacques/semver-tool\n\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# v3.0.0\n# https://github.com/fsaintjacques/semver-tool\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n#\n# bats-core git releaser\n#\n## Usage: %SCRIPT_NAME% [options]\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n#\n# bats-core git releaser\n#\n## Usage: %SCRIPT_NAME% [options]\n",
                      "markdown": "`#!/usr/bin/env bash\n#\n# bats-core git releaser\n#\n## Usage: %SCRIPT_NAME% [options]\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 56,
                  "endLine": 170,
                  "endColumn": 61,
                  "snippet": {
                    "text": "}\n\nusage() {\n  sed -n '/^##/,/^$/s/^## \\{0,1\\}//p' \"${THIS_SCRIPT}\" | sed \"s/%SCRIPT_NAME%/$(basename \"${THIS_SCRIPT}\")/g\"\n  exit 2\n} 2>/dev/null\n\n",
                    "rendered": {
                      "text": "}\n\nusage() {\n  sed -n '/^##/,/^$/s/^## \\{0,1\\}//p' \"${THIS_SCRIPT}\" | sed \"s/%SCRIPT_NAME%/$(basename \"${THIS_SCRIPT}\")/g\"\n  exit 2\n} 2>/dev/null\n\n",
                      "markdown": "`}\n\nusage() {\n  sed -n '/^##/,/^$/s/^## \\{0,1\\}//p' \"${THIS_SCRIPT}\" | sed \"s/%SCRIPT_NAME%/$(basename \"${THIS_SCRIPT}\")/g\"\n  exit 2\n} 2>/dev/null\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 1,
                  "endLine": 170,
                  "endColumn": 6,
                  "snippet": {
                    "text": "}\n\nusage() {\n  sed -n '/^##/,/^$/s/^## \\{0,1\\}//p' \"${THIS_SCRIPT}\" | sed \"s/%SCRIPT_NAME%/$(basename \"${THIS_SCRIPT}\")/g\"\n  exit 2\n} 2>/dev/null\n\n",
                    "rendered": {
                      "text": "}\n\nusage() {\n  sed -n '/^##/,/^$/s/^## \\{0,1\\}//p' \"${THIS_SCRIPT}\" | sed \"s/%SCRIPT_NAME%/$(basename \"${THIS_SCRIPT}\")/g\"\n  exit 2\n} 2>/dev/null\n\n",
                      "markdown": "`}\n\nusage() {\n  sed -n '/^##/,/^$/s/^## \\{0,1\\}//p' \"${THIS_SCRIPT}\" | sed \"s/%SCRIPT_NAME%/$(basename \"${THIS_SCRIPT}\")/g\"\n  exit 2\n} 2>/dev/null\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 1,
                  "endLine": 123,
                  "endColumn": 5,
                  "snippet": {
                    "text": "  cp \"${FILE}\" \"${FILE}.new\"\n  sed -E -i.bak '/## \\[Unreleased\\]/,+1d' \"${FILE}\"\n  git add -f \"${FILE}\"\n  mv \"${FILE}.new\" \"${FILE}\"\n}\n\nhandle_arguments() {\n",
                    "rendered": {
                      "text": "  cp \"${FILE}\" \"${FILE}.new\"\n  sed -E -i.bak '/## \\[Unreleased\\]/,+1d' \"${FILE}\"\n  git add -f \"${FILE}\"\n  mv \"${FILE}.new\" \"${FILE}\"\n}\n\nhandle_arguments() {\n",
                      "markdown": "`  cp \"${FILE}\" \"${FILE}.new\"\n  sed -E -i.bak '/## \\[Unreleased\\]/,+1d' \"${FILE}\"\n  git add -f \"${FILE}\"\n  mv \"${FILE}.new\" \"${FILE}\"\n}\n\nhandle_arguments() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 1,
                  "endLine": 122,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\n  cp \"${FILE}\" \"${FILE}.new\"\n  sed -E -i.bak '/## \\[Unreleased\\]/,+1d' \"${FILE}\"\n  git add -f \"${FILE}\"\n  mv \"${FILE}.new\" \"${FILE}\"\n}\n\n",
                    "rendered": {
                      "text": "\n  cp \"${FILE}\" \"${FILE}.new\"\n  sed -E -i.bak '/## \\[Unreleased\\]/,+1d' \"${FILE}\"\n  git add -f \"${FILE}\"\n  mv \"${FILE}.new\" \"${FILE}\"\n}\n\n",
                      "markdown": "`\n  cp \"${FILE}\" \"${FILE}.new\"\n  sed -E -i.bak '/## \\[Unreleased\\]/,+1d' \"${FILE}\"\n  git add -f \"${FILE}\"\n  mv \"${FILE}.new\" \"${FILE}\"\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 1,
                  "endLine": 121,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  rm \"${FILE}.bak\" || true\n\n  cp \"${FILE}\" \"${FILE}.new\"\n  sed -E -i.bak '/## \\[Unreleased\\]/,+1d' \"${FILE}\"\n  git add -f \"${FILE}\"\n  mv \"${FILE}.new\" \"${FILE}\"\n}\n",
                    "rendered": {
                      "text": "  rm \"${FILE}.bak\" || true\n\n  cp \"${FILE}\" \"${FILE}.new\"\n  sed -E -i.bak '/## \\[Unreleased\\]/,+1d' \"${FILE}\"\n  git add -f \"${FILE}\"\n  mv \"${FILE}.new\" \"${FILE}\"\n}\n",
                      "markdown": "`  rm \"${FILE}.bak\" || true\n\n  cp \"${FILE}\" \"${FILE}.new\"\n  sed -E -i.bak '/## \\[Unreleased\\]/,+1d' \"${FILE}\"\n  git add -f \"${FILE}\"\n  mv \"${FILE}.new\" \"${FILE}\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 1,
                  "endLine": 120,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n  rm \"${FILE}.bak\" || true\n\n  cp \"${FILE}\" \"${FILE}.new\"\n  sed -E -i.bak '/## \\[Unreleased\\]/,+1d' \"${FILE}\"\n  git add -f \"${FILE}\"\n  mv \"${FILE}.new\" \"${FILE}\"\n",
                    "rendered": {
                      "text": "\n  rm \"${FILE}.bak\" || true\n\n  cp \"${FILE}\" \"${FILE}.new\"\n  sed -E -i.bak '/## \\[Unreleased\\]/,+1d' \"${FILE}\"\n  git add -f \"${FILE}\"\n  mv \"${FILE}.new\" \"${FILE}\"\n",
                      "markdown": "`\n  rm \"${FILE}.bak\" || true\n\n  cp \"${FILE}\" \"${FILE}.new\"\n  sed -E -i.bak '/## \\[Unreleased\\]/,+1d' \"${FILE}\"\n  git add -f \"${FILE}\"\n  mv \"${FILE}.new\" \"${FILE}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 1,
                  "endLine": 116,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nwrite_changelog() {\n  local FILE=\"docs/CHANGELOG.md\"\n  sed -E -i.bak \"/## \\[Unreleased\\]/ a \\\\\\n## [${NEW_BATS_VERSION}] - $(date +%Y-%m-%d)\" \"${FILE}\"\n\n  rm \"${FILE}.bak\" || true\n\n",
                    "rendered": {
                      "text": "\nwrite_changelog() {\n  local FILE=\"docs/CHANGELOG.md\"\n  sed -E -i.bak \"/## \\[Unreleased\\]/ a \\\\\\n## [${NEW_BATS_VERSION}] - $(date +%Y-%m-%d)\" \"${FILE}\"\n\n  rm \"${FILE}.bak\" || true\n\n",
                      "markdown": "`\nwrite_changelog() {\n  local FILE=\"docs/CHANGELOG.md\"\n  sed -E -i.bak \"/## \\[Unreleased\\]/ a \\\\\\n## [${NEW_BATS_VERSION}] - $(date +%Y-%m-%d)\" \"${FILE}\"\n\n  rm \"${FILE}.bak\" || true\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 3,
                  "endLine": 110,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    MATCH=\"${FILE_REPLACEMENT/*,/}\"\n    sed -E -i.bak \"/${MATCH}/ { s,${BATS_VERSION},${NEW_BATS_VERSION},g; }\" \"${FILE}\"\n    rm \"${FILE}.bak\" || true\n    git add -f \"${FILE}\"\n  done\n}\n\n",
                    "rendered": {
                      "text": "    MATCH=\"${FILE_REPLACEMENT/*,/}\"\n    sed -E -i.bak \"/${MATCH}/ { s,${BATS_VERSION},${NEW_BATS_VERSION},g; }\" \"${FILE}\"\n    rm \"${FILE}.bak\" || true\n    git add -f \"${FILE}\"\n  done\n}\n\n",
                      "markdown": "`    MATCH=\"${FILE_REPLACEMENT/*,/}\"\n    sed -E -i.bak \"/${MATCH}/ { s,${BATS_VERSION},${NEW_BATS_VERSION},g; }\" \"${FILE}\"\n    rm \"${FILE}.bak\" || true\n    git add -f \"${FILE}\"\n  done\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 3,
                  "endLine": 108,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  for FILE_REPLACEMENT in \"${FILE_REPLACEMENTS[@]}\"; do\n    FILE=\"${FILE_REPLACEMENT/,*/}\"\n    MATCH=\"${FILE_REPLACEMENT/*,/}\"\n    sed -E -i.bak \"/${MATCH}/ { s,${BATS_VERSION},${NEW_BATS_VERSION},g; }\" \"${FILE}\"\n    rm \"${FILE}.bak\" || true\n    git add -f \"${FILE}\"\n  done\n",
                    "rendered": {
                      "text": "  for FILE_REPLACEMENT in \"${FILE_REPLACEMENTS[@]}\"; do\n    FILE=\"${FILE_REPLACEMENT/,*/}\"\n    MATCH=\"${FILE_REPLACEMENT/*,/}\"\n    sed -E -i.bak \"/${MATCH}/ { s,${BATS_VERSION},${NEW_BATS_VERSION},g; }\" \"${FILE}\"\n    rm \"${FILE}.bak\" || true\n    git add -f \"${FILE}\"\n  done\n",
                      "markdown": "`  for FILE_REPLACEMENT in \"${FILE_REPLACEMENTS[@]}\"; do\n    FILE=\"${FILE_REPLACEMENT/,*/}\"\n    MATCH=\"${FILE_REPLACEMENT/*,/}\"\n    sed -E -i.bak \"/${MATCH}/ { s,${BATS_VERSION},${NEW_BATS_VERSION},g; }\" \"${FILE}\"\n    rm \"${FILE}.bak\" || true\n    git add -f \"${FILE}\"\n  done\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 86,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git tag -a -s \"v${NEW_BATS_VERSION}\" --message \"${BATS_RELEASE_NOTES}\"\n\n4. Push the changes:\n\ngit push --follow-tags\n\n5. Use GitHub hub to make a draft release:\n\n",
                    "rendered": {
                      "text": "git tag -a -s \"v${NEW_BATS_VERSION}\" --message \"${BATS_RELEASE_NOTES}\"\n\n4. Push the changes:\n\ngit push --follow-tags\n\n5. Use GitHub hub to make a draft release:\n\n",
                      "markdown": "`git tag -a -s \"v${NEW_BATS_VERSION}\" --message \"${BATS_RELEASE_NOTES}\"\n\n4. Push the changes:\n\ngit push --follow-tags\n\n5. Use GitHub hub to make a draft release:\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 82,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# changelog end\n\n3. Tag the release using the autogenerated changelog:\n\ngit tag -a -s \"v${NEW_BATS_VERSION}\" --message \"${BATS_RELEASE_NOTES}\"\n\n4. Push the changes:\n\n",
                    "rendered": {
                      "text": "# changelog end\n\n3. Tag the release using the autogenerated changelog:\n\ngit tag -a -s \"v${NEW_BATS_VERSION}\" --message \"${BATS_RELEASE_NOTES}\"\n\n4. Push the changes:\n\n",
                      "markdown": "`# changelog end\n\n3. Tag the release using the autogenerated changelog:\n\ngit tag -a -s \"v${NEW_BATS_VERSION}\" --message \"${BATS_RELEASE_NOTES}\"\n\n4. Push the changes:\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 1,
                  "endLine": 77,
                  "endColumn": 6,
                  "snippet": {
                    "text": "      -e 's,^### (.*),\\1:,g' |\n    tee \"${BATS_RELEASE_NOTES}\"\n\n  cat <<EOF\n# changelog end\n\n3. Tag the release using the autogenerated changelog:\n",
                    "rendered": {
                      "text": "      -e 's,^### (.*),\\1:,g' |\n    tee \"${BATS_RELEASE_NOTES}\"\n\n  cat <<EOF\n# changelog end\n\n3. Tag the release using the autogenerated changelog:\n",
                      "markdown": "`      -e 's,^### (.*),\\1:,g' |\n    tee \"${BATS_RELEASE_NOTES}\"\n\n  cat <<EOF\n# changelog end\n\n3. Tag the release using the autogenerated changelog:\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 3,
                  "endLine": 75,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    sed -E \\\n      -e 's,^## \\[([0-9\\.]+)] - (.*),Bats \\1\\n\\nReleased: \\2,' \\\n      -e 's,^### (.*),\\1:,g' |\n    tee \"${BATS_RELEASE_NOTES}\"\n\n  cat <<EOF\n# changelog end\n",
                    "rendered": {
                      "text": "    sed -E \\\n      -e 's,^## \\[([0-9\\.]+)] - (.*),Bats \\1\\n\\nReleased: \\2,' \\\n      -e 's,^### (.*),\\1:,g' |\n    tee \"${BATS_RELEASE_NOTES}\"\n\n  cat <<EOF\n# changelog end\n",
                      "markdown": "`    sed -E \\\n      -e 's,^## \\[([0-9\\.]+)] - (.*),Bats \\1\\n\\nReleased: \\2,' \\\n      -e 's,^### (.*),\\1:,g' |\n    tee \"${BATS_RELEASE_NOTES}\"\n\n  cat <<EOF\n# changelog end\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 3,
                  "endLine": 72,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  DELIM=$(echo -en \"\\001\")\n  sed -E -n \"\\\\${DELIM}^## \\[${NEW_BATS_VERSION}\\]${DELIM},\\\\${DELIM}^## ${DELIM}p\" docs/CHANGELOG.md |\n    head -n -1 |\n    sed -E \\\n      -e 's,^## \\[([0-9\\.]+)] - (.*),Bats \\1\\n\\nReleased: \\2,' \\\n      -e 's,^### (.*),\\1:,g' |\n    tee \"${BATS_RELEASE_NOTES}\"\n",
                    "rendered": {
                      "text": "  DELIM=$(echo -en \"\\001\")\n  sed -E -n \"\\\\${DELIM}^## \\[${NEW_BATS_VERSION}\\]${DELIM},\\\\${DELIM}^## ${DELIM}p\" docs/CHANGELOG.md |\n    head -n -1 |\n    sed -E \\\n      -e 's,^## \\[([0-9\\.]+)] - (.*),Bats \\1\\n\\nReleased: \\2,' \\\n      -e 's,^### (.*),\\1:,g' |\n    tee \"${BATS_RELEASE_NOTES}\"\n",
                      "markdown": "`  DELIM=$(echo -en \"\\001\")\n  sed -E -n \"\\\\${DELIM}^## \\[${NEW_BATS_VERSION}\\]${DELIM},\\\\${DELIM}^## ${DELIM}p\" docs/CHANGELOG.md |\n    head -n -1 |\n    sed -E \\\n      -e 's,^## \\[([0-9\\.]+)] - (.*),Bats \\1\\n\\nReleased: \\2,' \\\n      -e 's,^### (.*),\\1:,g' |\n    tee \"${BATS_RELEASE_NOTES}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 3,
                  "endLine": 71,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  local DELIM\n  DELIM=$(echo -en \"\\001\")\n  sed -E -n \"\\\\${DELIM}^## \\[${NEW_BATS_VERSION}\\]${DELIM},\\\\${DELIM}^## ${DELIM}p\" docs/CHANGELOG.md |\n    head -n -1 |\n    sed -E \\\n      -e 's,^## \\[([0-9\\.]+)] - (.*),Bats \\1\\n\\nReleased: \\2,' \\\n      -e 's,^### (.*),\\1:,g' |\n",
                    "rendered": {
                      "text": "  local DELIM\n  DELIM=$(echo -en \"\\001\")\n  sed -E -n \"\\\\${DELIM}^## \\[${NEW_BATS_VERSION}\\]${DELIM},\\\\${DELIM}^## ${DELIM}p\" docs/CHANGELOG.md |\n    head -n -1 |\n    sed -E \\\n      -e 's,^## \\[([0-9\\.]+)] - (.*),Bats \\1\\n\\nReleased: \\2,' \\\n      -e 's,^### (.*),\\1:,g' |\n",
                      "markdown": "`  local DELIM\n  DELIM=$(echo -en \"\\001\")\n  sed -E -n \"\\\\${DELIM}^## \\[${NEW_BATS_VERSION}\\]${DELIM},\\\\${DELIM}^## ${DELIM}p\" docs/CHANGELOG.md |\n    head -n -1 |\n    sed -E \\\n      -e 's,^## \\[([0-9\\.]+)] - (.*),Bats \\1\\n\\nReleased: \\2,' \\\n      -e 's,^### (.*),\\1:,g' |\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 1,
                  "endLine": 70,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\n  local DELIM\n  DELIM=$(echo -en \"\\001\")\n  sed -E -n \"\\\\${DELIM}^## \\[${NEW_BATS_VERSION}\\]${DELIM},\\\\${DELIM}^## ${DELIM}p\" docs/CHANGELOG.md |\n    head -n -1 |\n    sed -E \\\n      -e 's,^## \\[([0-9\\.]+)] - (.*),Bats \\1\\n\\nReleased: \\2,' \\\n",
                    "rendered": {
                      "text": "\n  local DELIM\n  DELIM=$(echo -en \"\\001\")\n  sed -E -n \"\\\\${DELIM}^## \\[${NEW_BATS_VERSION}\\]${DELIM},\\\\${DELIM}^## ${DELIM}p\" docs/CHANGELOG.md |\n    head -n -1 |\n    sed -E \\\n      -e 's,^## \\[([0-9\\.]+)] - (.*),Bats \\1\\n\\nReleased: \\2,' \\\n",
                      "markdown": "`\n  local DELIM\n  DELIM=$(echo -en \"\\001\")\n  sed -E -n \"\\\\${DELIM}^## \\[${NEW_BATS_VERSION}\\]${DELIM},\\\\${DELIM}^## ${DELIM}p\" docs/CHANGELOG.md |\n    head -n -1 |\n    sed -E \\\n      -e 's,^## \\[([0-9\\.]+)] - (.*),Bats \\1\\n\\nReleased: \\2,' \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 61,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n  cat <<EOF\n1. Version numbers have been updated. Commit the changes:\n\ngit commit -m \"feat: release Bats v${NEW_BATS_VERSION}\"\n\n2. Verify this autogenerated changelog (from docs/CHANGELOG.md):\n\n",
                    "rendered": {
                      "text": "\n  cat <<EOF\n1. Version numbers have been updated. Commit the changes:\n\ngit commit -m \"feat: release Bats v${NEW_BATS_VERSION}\"\n\n2. Verify this autogenerated changelog (from docs/CHANGELOG.md):\n\n",
                      "markdown": "`\n  cat <<EOF\n1. Version numbers have been updated. Commit the changes:\n\ngit commit -m \"feat: release Bats v${NEW_BATS_VERSION}\"\n\n2. Verify this autogenerated changelog (from docs/CHANGELOG.md):\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\n  git diff --staged\n\n  cat <<EOF\n1. Version numbers have been updated. Commit the changes:\n\ngit commit -m \"feat: release Bats v${NEW_BATS_VERSION}\"\n",
                    "rendered": {
                      "text": "\n  git diff --staged\n\n  cat <<EOF\n1. Version numbers have been updated. Commit the changes:\n\ngit commit -m \"feat: release Bats v${NEW_BATS_VERSION}\"\n",
                      "markdown": "`\n  git diff --staged\n\n  cat <<EOF\n1. Version numbers have been updated. Commit the changes:\n\ngit commit -m \"feat: release Bats v${NEW_BATS_VERSION}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\n  write_changelog\n\n  git diff --staged\n\n  cat <<EOF\n1. Version numbers have been updated. Commit the changes:\n",
                    "rendered": {
                      "text": "\n  write_changelog\n\n  git diff --staged\n\n  cat <<EOF\n1. Version numbers have been updated. Commit the changes:\n",
                      "markdown": "`\n  write_changelog\n\n  git diff --staged\n\n  cat <<EOF\n1. Version numbers have been updated. Commit the changes:\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 11,
                  "endLine": 3,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n#\n# bats-core git releaser\n#\n## Usage: %SCRIPT_NAME% [options]\n##\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n#\n# bats-core git releaser\n#\n## Usage: %SCRIPT_NAME% [options]\n##\n",
                      "markdown": "`#!/usr/bin/env bash\n#\n# bats-core git releaser\n#\n## Usage: %SCRIPT_NAME% [options]\n##\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/release.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n#\n# bats-core git releaser\n#\n## Usage: %SCRIPT_NAME% [options]\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n#\n# bats-core git releaser\n#\n## Usage: %SCRIPT_NAME% [options]\n",
                      "markdown": "`#!/usr/bin/env bash\n#\n# bats-core git releaser\n#\n## Usage: %SCRIPT_NAME% [options]\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/dependabot.yml"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 7,
                  "endLine": 37,
                  "snippet": {
                    "text": "    schedule:\n      interval: daily\n    labels:\n      - pip\n      - dependencies\n      - no changelog\n\n  - package-ecosystem: npm\n",
                    "rendered": {
                      "text": "    schedule:\n      interval: daily\n    labels:\n      - pip\n      - dependencies\n      - no changelog\n\n  - package-ecosystem: npm\n",
                      "markdown": "`    schedule:\n      interval: daily\n    labels:\n      - pip\n      - dependencies\n      - no changelog\n\n  - package-ecosystem: npm\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/dependabot.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 22,
                  "endLine": 32,
                  "snippet": {
                    "text": "      - dependencies\n      - no changelog\n\n  - package-ecosystem: pip\n    directory: /docs/source\n    schedule:\n      interval: daily\n    labels:\n",
                    "rendered": {
                      "text": "      - dependencies\n      - no changelog\n\n  - package-ecosystem: pip\n    directory: /docs/source\n    schedule:\n      interval: daily\n    labels:\n",
                      "markdown": "`      - dependencies\n      - no changelog\n\n  - package-ecosystem: pip\n    directory: /docs/source\n    schedule:\n      interval: daily\n    labels:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/dependabot.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 7,
                  "endLine": 28,
                  "snippet": {
                    "text": "    schedule:\n      interval: daily\n    labels:\n      - docker\n      - dependencies\n      - no changelog\n\n  - package-ecosystem: pip\n",
                    "rendered": {
                      "text": "    schedule:\n      interval: daily\n    labels:\n      - docker\n      - dependencies\n      - no changelog\n\n  - package-ecosystem: pip\n",
                      "markdown": "`    schedule:\n      interval: daily\n    labels:\n      - docker\n      - dependencies\n      - no changelog\n\n  - package-ecosystem: pip\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/dependabot.yml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 22,
                  "endLine": 23,
                  "snippet": {
                    "text": "      - dependencies\n      - no changelog\n\n  - package-ecosystem: docker\n    directory: /\n    schedule:\n      interval: daily\n    labels:\n",
                    "rendered": {
                      "text": "      - dependencies\n      - no changelog\n\n  - package-ecosystem: docker\n    directory: /\n    schedule:\n      interval: daily\n    labels:\n",
                      "markdown": "`      - dependencies\n      - no changelog\n\n  - package-ecosystem: docker\n    directory: /\n    schedule:\n      interval: daily\n    labels:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/dependabot.yml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 7,
                  "endLine": 9,
                  "snippet": {
                    "text": "    schedule:\n      interval: daily\n    labels:\n      - docker\n      - devcontainer\n      - dependencies\n      - no changelog\n\n",
                    "rendered": {
                      "text": "    schedule:\n      interval: daily\n    labels:\n      - docker\n      - devcontainer\n      - dependencies\n      - no changelog\n\n",
                      "markdown": "`    schedule:\n      interval: daily\n    labels:\n      - docker\n      - devcontainer\n      - dependencies\n      - no changelog\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/dependabot.yml"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 22,
                  "endLine": 4,
                  "snippet": {
                    "text": "version: 2\nupdates:\n  - package-ecosystem: docker\n    directory: /.devcontainer\n    schedule:\n      interval: daily\n    labels:\n",
                    "rendered": {
                      "text": "version: 2\nupdates:\n  - package-ecosystem: docker\n    directory: /.devcontainer\n    schedule:\n      interval: daily\n    labels:\n",
                      "markdown": "`version: 2\nupdates:\n  - package-ecosystem: docker\n    directory: /.devcontainer\n    schedule:\n      interval: daily\n    labels:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 244,
                  "endLine": 218,
                  "endColumn": 252,
                  "snippet": {
                    "text": "the test must pass on the first attempt\\.\n.IP \"\\[ci]\" 4\n\\fBBATS_TEST_TIMEOUT\\fR is the number of seconds after which a test (including setup) will be aborted and marked as failed\\. Updates to this value in \\fBsetup()\\fR or \\fB@test\\fR cannot change the running timeout countdown, so the latest useful update location is \\fBsetup_file()\\fR\\.\n.IP \"\\[ci]\" 4\n\\fB$BATS_TEST_NUMBER\\fR is the (1\\-based) index of the current test case in the test file\\.\n.IP \"\\[ci]\" 4\n\\fB$BATS_SUITE_TEST_NUMBER\\fR is the (1\\-based) index of the current test case in the test suite (over all files)\\.\n.IP \"\\[ci]\" 4\n\\fB$BATS_TMPDIR\\f",
                    "rendered": {
                      "text": "the test must pass on the first attempt\\.\n.IP \"\\[ci]\" 4\n\\fBBATS_TEST_TIMEOUT\\fR is the number of seconds after which a test (including setup) will be aborted and marked as failed\\. Updates to this value in \\fBsetup()\\fR or \\fB@test\\fR cannot change the running timeout countdown, so the latest useful update location is \\fBsetup_file()\\fR\\.\n.IP \"\\[ci]\" 4\n\\fB$BATS_TEST_NUMBER\\fR is the (1\\-based) index of the current test case in the test file\\.\n.IP \"\\[ci]\" 4\n\\fB$BATS_SUITE_TEST_NUMBER\\fR is the (1\\-based) index of the current test case in the test suite (over all files)\\.\n.IP \"\\[ci]\" 4\n\\fB$BATS_TMPDIR\\f",
                      "markdown": "`the test must pass on the first attempt\\.\n.IP \"\\[ci]\" 4\n\\fBBATS_TEST_TIMEOUT\\fR is the number of seconds after which a test (including setup) will be aborted and marked as failed\\. Updates to this value in \\fBsetup()\\fR or \\fB@test\\fR cannot change the running timeout countdown, so the latest useful update location is \\fBsetup_file()\\fR\\.\n.IP \"\\[ci]\" 4\n\\fB$BATS_TEST_NUMBER\\fR is the (1\\-based) index of the current test case in the test file\\.\n.IP \"\\[ci]\" 4\n\\fB$BATS_SUITE_TEST_NUMBER\\fR is the (1\\-based) index of the current test case in the test suite (over all files)\\.\n.IP \"\\[ci]\" 4\n\\fB$BATS_TMPDIR\\f`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 52,
                  "endLine": 157,
                  "endColumn": 56,
                  "snippet": {
                    "text": ".P\n\\fBNote\\fR: Obviously, the actual \\fBBATS_LIB_PATH\\fR is highly dependent on the environment\\. To maintain a uniform location across systems, (distribution) package maintainers are encouraged to use \\fB/usr/lib/bats/\\fR as the install path for libraries where possible\\. However, if the package manager has another preferred location, like \\fBnpm\\fR or \\fBbrew\\fR, you should use this instead\\.\n.SH \"THE SKIP COMMAND\"\nTests can be skipped by using the \\fBskip\\fR command at the point in a test you wish to skip\\.\n.IP \"\" 4\n.nf\n@test \"A test I don\\'t want to execute for now\" {\n",
                    "rendered": {
                      "text": ".P\n\\fBNote\\fR: Obviously, the actual \\fBBATS_LIB_PATH\\fR is highly dependent on the environment\\. To maintain a uniform location across systems, (distribution) package maintainers are encouraged to use \\fB/usr/lib/bats/\\fR as the install path for libraries where possible\\. However, if the package manager has another preferred location, like \\fBnpm\\fR or \\fBbrew\\fR, you should use this instead\\.\n.SH \"THE SKIP COMMAND\"\nTests can be skipped by using the \\fBskip\\fR command at the point in a test you wish to skip\\.\n.IP \"\" 4\n.nf\n@test \"A test I don\\'t want to execute for now\" {\n",
                      "markdown": "`.P\n\\fBNote\\fR: Obviously, the actual \\fBBATS_LIB_PATH\\fR is highly dependent on the environment\\. To maintain a uniform location across systems, (distribution) package maintainers are encouraged to use \\fB/usr/lib/bats/\\fR as the install path for libraries where possible\\. However, if the package manager has another preferred location, like \\fBnpm\\fR or \\fBbrew\\fR, you should use this instead\\.\n.SH \"THE SKIP COMMAND\"\nTests can be skipped by using the \\fBskip\\fR command at the point in a test you wish to skip\\.\n.IP \"\" 4\n.nf\n@test \"A test I don\\'t want to execute for now\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 123,
                  "endLine": 109,
                  "endColumn": 129,
                  "snippet": {
                    "text": ".P\nAll additional parameters to run should come before the command\\. If you want to run a command that starts with \\fB\\-\\fR, prefix it with \\fB\\-\\-\\fR to prevent \\fBrun\\fR from parsing it as an option\\.\n.SH \"THE LOAD COMMAND\"\nYou may want to share common code across multiple test files\\. Bats includes a convenient \\fBload\\fR command for sourcing a Bash source file relative to the location of the current test file\\. For example, if you have a Bats test in \\fBtest/foo\\.bats\\fR, the command\n.IP \"\" 4\n.nf\nload test_helper\n",
                    "rendered": {
                      "text": ".P\nAll additional parameters to run should come before the command\\. If you want to run a command that starts with \\fB\\-\\fR, prefix it with \\fB\\-\\-\\fR to prevent \\fBrun\\fR from parsing it as an option\\.\n.SH \"THE LOAD COMMAND\"\nYou may want to share common code across multiple test files\\. Bats includes a convenient \\fBload\\fR command for sourcing a Bash source file relative to the location of the current test file\\. For example, if you have a Bats test in \\fBtest/foo\\.bats\\fR, the command\n.IP \"\" 4\n.nf\nload test_helper\n",
                      "markdown": "`.P\nAll additional parameters to run should come before the command\\. If you want to run a command that starts with \\fB\\-\\fR, prefix it with \\fB\\-\\-\\fR to prevent \\fBrun\\fR from parsing it as an option\\.\n.SH \"THE LOAD COMMAND\"\nYou may want to share common code across multiple test files\\. Bats includes a convenient \\fBload\\fR command for sourcing a Bash source file relative to the location of the current test file\\. For example, if you have a Bats test in \\fBtest/foo\\.bats\\fR, the command\n.IP \"\" 4\n.nf\nload test_helper\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 21,
                  "endLine": 7,
                  "endColumn": 27,
                  "snippet": {
                    "text": ".SH \"NAME\"\n\\fBbats\\fR \\- Bats test file format\n.SH \"DESCRIPTION\"\nA Bats test file is a Bash script with special syntax for defining test cases\\. Under the hood, each test case is just a function with a description\\.\n.IP \"\" 4\n.nf\n#!/usr/bin/env bats\n",
                    "rendered": {
                      "text": ".SH \"NAME\"\n\\fBbats\\fR \\- Bats test file format\n.SH \"DESCRIPTION\"\nA Bats test file is a Bash script with special syntax for defining test cases\\. Under the hood, each test case is just a function with a description\\.\n.IP \"\" 4\n.nf\n#!/usr/bin/env bats\n",
                      "markdown": "`.SH \"NAME\"\n\\fBbats\\fR \\- Bats test file format\n.SH \"DESCRIPTION\"\nA Bats test file is a Bash script with special syntax for defining test cases\\. Under the hood, each test case is just a function with a description\\.\n.IP \"\" 4\n.nf\n#!/usr/bin/env bats\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 204,
                  "endLine": 218,
                  "endColumn": 213,
                  "snippet": {
                    "text": "sidered failed\\. The default of 0 means the test must pass on the first attempt\\.\n.IP \"\\[ci]\" 4\n\\fBBATS_TEST_TIMEOUT\\fR is the number of seconds after which a test (including setup) will be aborted and marked as failed\\. Updates to this value in \\fBsetup()\\fR or \\fB@test\\fR cannot change the running timeout countdown, so the latest useful update location is \\fBsetup_file()\\fR\\.\n.IP \"\\[ci]\" 4\n\\fB$BATS_TEST_NUMBER\\fR is the (1\\-based) index of the current test case in the test file\\.\n.IP \"\\[ci]\" 4\n\\fB$BATS_SUITE_TEST_NUMBER\\fR is the (1\\-based) index of the current test case in the test suite (over all f",
                    "rendered": {
                      "text": "sidered failed\\. The default of 0 means the test must pass on the first attempt\\.\n.IP \"\\[ci]\" 4\n\\fBBATS_TEST_TIMEOUT\\fR is the number of seconds after which a test (including setup) will be aborted and marked as failed\\. Updates to this value in \\fBsetup()\\fR or \\fB@test\\fR cannot change the running timeout countdown, so the latest useful update location is \\fBsetup_file()\\fR\\.\n.IP \"\\[ci]\" 4\n\\fB$BATS_TEST_NUMBER\\fR is the (1\\-based) index of the current test case in the test file\\.\n.IP \"\\[ci]\" 4\n\\fB$BATS_SUITE_TEST_NUMBER\\fR is the (1\\-based) index of the current test case in the test suite (over all f",
                      "markdown": "`sidered failed\\. The default of 0 means the test must pass on the first attempt\\.\n.IP \"\\[ci]\" 4\n\\fBBATS_TEST_TIMEOUT\\fR is the number of seconds after which a test (including setup) will be aborted and marked as failed\\. Updates to this value in \\fBsetup()\\fR or \\fB@test\\fR cannot change the running timeout countdown, so the latest useful update location is \\fBsetup_file()\\fR\\.\n.IP \"\\[ci]\" 4\n\\fB$BATS_TEST_NUMBER\\fR is the (1\\-based) index of the current test case in the test file\\.\n.IP \"\\[ci]\" 4\n\\fB$BATS_SUITE_TEST_NUMBER\\fR is the (1\\-based) index of the current test case in the test suite (over all f`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 79,
                  "endLine": 157,
                  "endColumn": 85,
                  "snippet": {
                    "text": ".P\n\\fBNote\\fR: Obviously, the actual \\fBBATS_LIB_PATH\\fR is highly dependent on the environment\\. To maintain a uniform location across systems, (distribution) package maintainers are encouraged to use \\fB/usr/lib/bats/\\fR as the install path for libraries where possible\\. However, if the package manager has another preferred location, like \\fBnpm\\fR or \\fBbrew\\fR, you should use this instead\\.\n.SH \"THE SKIP COMMAND\"\nTests can be skipped by using the \\fBskip\\fR command at the point in a test you wish to skip\\.\n.IP \"\" 4\n.nf\n@test \"A test I don\\'t want to execute for now\" {\n",
                    "rendered": {
                      "text": ".P\n\\fBNote\\fR: Obviously, the actual \\fBBATS_LIB_PATH\\fR is highly dependent on the environment\\. To maintain a uniform location across systems, (distribution) package maintainers are encouraged to use \\fB/usr/lib/bats/\\fR as the install path for libraries where possible\\. However, if the package manager has another preferred location, like \\fBnpm\\fR or \\fBbrew\\fR, you should use this instead\\.\n.SH \"THE SKIP COMMAND\"\nTests can be skipped by using the \\fBskip\\fR command at the point in a test you wish to skip\\.\n.IP \"\" 4\n.nf\n@test \"A test I don\\'t want to execute for now\" {\n",
                      "markdown": "`.P\n\\fBNote\\fR: Obviously, the actual \\fBBATS_LIB_PATH\\fR is highly dependent on the environment\\. To maintain a uniform location across systems, (distribution) package maintainers are encouraged to use \\fB/usr/lib/bats/\\fR as the install path for libraries where possible\\. However, if the package manager has another preferred location, like \\fBnpm\\fR or \\fBbrew\\fR, you should use this instead\\.\n.SH \"THE SKIP COMMAND\"\nTests can be skipped by using the \\fBskip\\fR command at the point in a test you wish to skip\\.\n.IP \"\" 4\n.nf\n@test \"A test I don\\'t want to execute for now\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 15,
                  "endLine": 116,
                  "endColumn": 23,
                  "snippet": {
                    "text": ".fi\n.IP \"\" 0\n.P\nwill source the script \\fBtest/test_helper\\.bash\\fR in your test file\\. This can be useful for sharing functions to set up your environment or load fixtures\\.\n.SH \"THE BATS_LOAD_LIBRARY COMMAND\"\nSome libraries are installed on the system, e\\.g\\. by \\fBnpm\\fR or \\fBbrew\\fR\\. These should not be \\fBload\\fRed, as their path depends on the installation method\\. Instead, one should use \\fBbats_load_library\\fR together with setting \\fBBATS_LIB_PATH\\fR, a \\fBPATH\\fR\\-like colon\\-delimited variable\\.\n.P\n",
                    "rendered": {
                      "text": ".fi\n.IP \"\" 0\n.P\nwill source the script \\fBtest/test_helper\\.bash\\fR in your test file\\. This can be useful for sharing functions to set up your environment or load fixtures\\.\n.SH \"THE BATS_LOAD_LIBRARY COMMAND\"\nSome libraries are installed on the system, e\\.g\\. by \\fBnpm\\fR or \\fBbrew\\fR\\. These should not be \\fBload\\fRed, as their path depends on the installation method\\. Instead, one should use \\fBbats_load_library\\fR together with setting \\fBBATS_LIB_PATH\\fR, a \\fBPATH\\fR\\-like colon\\-delimited variable\\.\n.P\n",
                      "markdown": "`.fi\n.IP \"\" 0\n.P\nwill source the script \\fBtest/test_helper\\.bash\\fR in your test file\\. This can be useful for sharing functions to set up your environment or load fixtures\\.\n.SH \"THE BATS_LOAD_LIBRARY COMMAND\"\nSome libraries are installed on the system, e\\.g\\. by \\fBnpm\\fR or \\fBbrew\\fR\\. These should not be \\fBload\\fRed, as their path depends on the installation method\\. Instead, one should use \\fBbats_load_library\\fR together with setting \\fBBATS_LIB_PATH\\fR, a \\fBPATH\\fR\\-like colon\\-delimited variable\\.\n.P\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 123,
                  "endLine": 109,
                  "endColumn": 129,
                  "snippet": {
                    "text": ".P\nAll additional parameters to run should come before the command\\. If you want to run a command that starts with \\fB\\-\\fR, prefix it with \\fB\\-\\-\\fR to prevent \\fBrun\\fR from parsing it as an option\\.\n.SH \"THE LOAD COMMAND\"\nYou may want to share common code across multiple test files\\. Bats includes a convenient \\fBload\\fR command for sourcing a Bash source file relative to the location of the current test file\\. For example, if you have a Bats test in \\fBtest/foo\\.bats\\fR, the command\n.IP \"\" 4\n.nf\nload test_helper\n",
                    "rendered": {
                      "text": ".P\nAll additional parameters to run should come before the command\\. If you want to run a command that starts with \\fB\\-\\fR, prefix it with \\fB\\-\\-\\fR to prevent \\fBrun\\fR from parsing it as an option\\.\n.SH \"THE LOAD COMMAND\"\nYou may want to share common code across multiple test files\\. Bats includes a convenient \\fBload\\fR command for sourcing a Bash source file relative to the location of the current test file\\. For example, if you have a Bats test in \\fBtest/foo\\.bats\\fR, the command\n.IP \"\" 4\n.nf\nload test_helper\n",
                      "markdown": "`.P\nAll additional parameters to run should come before the command\\. If you want to run a command that starts with \\fB\\-\\fR, prefix it with \\fB\\-\\-\\fR to prevent \\fBrun\\fR from parsing it as an option\\.\n.SH \"THE LOAD COMMAND\"\nYou may want to share common code across multiple test files\\. Bats includes a convenient \\fBload\\fR command for sourcing a Bash source file relative to the location of the current test file\\. For example, if you have a Bats test in \\fBtest/foo\\.bats\\fR, the command\n.IP \"\" 4\n.nf\nload test_helper\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 50,
                  "endLine": 81,
                  "endColumn": 58,
                  "snippet": {
                    "text": ".fi\n.IP \"\" 0\n.P\nThe \\fB\\-1\\fR as first argument tells \\fBrun\\fR to expect 1 as an exit status, and to fail if the command exits with any other value\\. On failure, both actual and expected values will be displayed, along with the invoked command and its output:\n.IP \"\" 4\n.nf\n(in test file test\\.bats, line 2)\n",
                    "rendered": {
                      "text": ".fi\n.IP \"\" 0\n.P\nThe \\fB\\-1\\fR as first argument tells \\fBrun\\fR to expect 1 as an exit status, and to fail if the command exits with any other value\\. On failure, both actual and expected values will be displayed, along with the invoked command and its output:\n.IP \"\" 4\n.nf\n(in test file test\\.bats, line 2)\n",
                      "markdown": "`.fi\n.IP \"\" 0\n.P\nThe \\fB\\-1\\fR as first argument tells \\fBrun\\fR to expect 1 as an exit status, and to fail if the command exits with any other value\\. On failure, both actual and expected values will be displayed, along with the invoked command and its output:\n.IP \"\" 4\n.nf\n(in test file test\\.bats, line 2)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 21,
                  "endLine": 7,
                  "endColumn": 27,
                  "snippet": {
                    "text": ".SH \"NAME\"\n\\fBbats\\fR \\- Bats test file format\n.SH \"DESCRIPTION\"\nA Bats test file is a Bash script with special syntax for defining test cases\\. Under the hood, each test case is just a function with a description\\.\n.IP \"\" 4\n.nf\n#!/usr/bin/env bats\n",
                    "rendered": {
                      "text": ".SH \"NAME\"\n\\fBbats\\fR \\- Bats test file format\n.SH \"DESCRIPTION\"\nA Bats test file is a Bash script with special syntax for defining test cases\\. Under the hood, each test case is just a function with a description\\.\n.IP \"\" 4\n.nf\n#!/usr/bin/env bats\n",
                      "markdown": "`.SH \"NAME\"\n\\fBbats\\fR \\- Bats test file format\n.SH \"DESCRIPTION\"\nA Bats test file is a Bash script with special syntax for defining test cases\\. Under the hood, each test case is just a function with a description\\.\n.IP \"\" 4\n.nf\n#!/usr/bin/env bats\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/bin/bats"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 47,
                  "endLine": 14,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    [[ -z \"${BASH_VERSINFO-}\" ]] ||\n    ((BASH_VERSINFO[0] < 3 || (BASH_VERSINFO[0] == 3 && BASH_VERSINFO[1] < 2)))\nthen\n  printf 'bats: this program needs to be run by Bash >= 3.2\\n' >&2\n  exit 1\nfi\n\n",
                    "rendered": {
                      "text": "    [[ -z \"${BASH_VERSINFO-}\" ]] ||\n    ((BASH_VERSINFO[0] < 3 || (BASH_VERSINFO[0] == 3 && BASH_VERSINFO[1] < 2)))\nthen\n  printf 'bats: this program needs to be run by Bash >= 3.2\\n' >&2\n  exit 1\nfi\n\n",
                      "markdown": "`    [[ -z \"${BASH_VERSINFO-}\" ]] ||\n    ((BASH_VERSINFO[0] < 3 || (BASH_VERSINFO[0] == 3 && BASH_VERSINFO[1] < 2)))\nthen\n  printf 'bats: this program needs to be run by Bash >= 3.2\\n' >&2\n  exit 1\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/bin/bats"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -euo pipefail\n\n# Note: We first need to use POSIX's `[ ... ]' instead of Bash's `[[ ... ]]'\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -euo pipefail\n\n# Note: We first need to use POSIX's `[ ... ]' instead of Bash's `[[ ... ]]'\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -euo pipefail\n\n# Note: We first need to use POSIX's `[ ... ]' instead of Bash's `[[ ... ]]'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/bin/bats"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nexport BATS_ROOT=${BATS_PATH%/*/*}\nexport -f bats_readlinkf\nexec env BATS_ROOT=\"$BATS_ROOT\" BATS_LIBDIR=\"${BATS_BASE_LIBDIR:-lib}\" \"$BATS_ROOT/libexec/bats-core/bats\" \"$@\"\n",
                    "rendered": {
                      "text": "\nexport BATS_ROOT=${BATS_PATH%/*/*}\nexport -f bats_readlinkf\nexec env BATS_ROOT=\"$BATS_ROOT\" BATS_LIBDIR=\"${BATS_BASE_LIBDIR:-lib}\" \"$BATS_ROOT/libexec/bats-core/bats\" \"$@\"\n",
                      "markdown": "`\nexport BATS_ROOT=${BATS_PATH%/*/*}\nexport -f bats_readlinkf\nexec env BATS_ROOT=\"$BATS_ROOT\" BATS_LIBDIR=\"${BATS_BASE_LIBDIR:-lib}\" \"$BATS_ROOT/libexec/bats-core/bats\" \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/bin/bats"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 47,
                  "endLine": 14,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    [[ -z \"${BASH_VERSINFO-}\" ]] ||\n    ((BASH_VERSINFO[0] < 3 || (BASH_VERSINFO[0] == 3 && BASH_VERSINFO[1] < 2)))\nthen\n  printf 'bats: this program needs to be run by Bash >= 3.2\\n' >&2\n  exit 1\nfi\n\n",
                    "rendered": {
                      "text": "    [[ -z \"${BASH_VERSINFO-}\" ]] ||\n    ((BASH_VERSINFO[0] < 3 || (BASH_VERSINFO[0] == 3 && BASH_VERSINFO[1] < 2)))\nthen\n  printf 'bats: this program needs to be run by Bash >= 3.2\\n' >&2\n  exit 1\nfi\n\n",
                      "markdown": "`    [[ -z \"${BASH_VERSINFO-}\" ]] ||\n    ((BASH_VERSINFO[0] < 3 || (BASH_VERSINFO[0] == 3 && BASH_VERSINFO[1] < 2)))\nthen\n  printf 'bats: this program needs to be run by Bash >= 3.2\\n' >&2\n  exit 1\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/bin/bats"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -euo pipefail\n\n# Note: We first need to use POSIX's `[ ... ]' instead of Bash's `[[ ... ]]'\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -euo pipefail\n\n# Note: We first need to use POSIX's `[ ... ]' instead of Bash's `[[ ... ]]'\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -euo pipefail\n\n# Note: We first need to use POSIX's `[ ... ]' instead of Bash's `[[ ... ]]'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-preprocess"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 64,
                  "endLine": 52,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    local -ri length=${#tags[@]}\n    for ((i = 0; i < length; ++i)); do\n      local element=\"tags[$i]\"\n      bats_trim \"$element\" \"${!element}\" 2>/dev/null # printf on bash 3 will complain but work anyways\n      if [[ -z \"${!element}\" && -n \"${CHECK_BATS_COMMENT_COMMANDS:-}\" ]]; then\n        printf \"%s:%d: Error: Invalid %s: '%s'. \" \"$test_file\" \"$line_number\" \"$tag_type\" \"$tags_string\"\n        printf \"Tags must not be empty. Please remove redundant commas!\\n\"\n",
                    "rendered": {
                      "text": "    local -ri length=${#tags[@]}\n    for ((i = 0; i < length; ++i)); do\n      local element=\"tags[$i]\"\n      bats_trim \"$element\" \"${!element}\" 2>/dev/null # printf on bash 3 will complain but work anyways\n      if [[ -z \"${!element}\" && -n \"${CHECK_BATS_COMMENT_COMMANDS:-}\" ]]; then\n        printf \"%s:%d: Error: Invalid %s: '%s'. \" \"$test_file\" \"$line_number\" \"$tag_type\" \"$tags_string\"\n        printf \"Tags must not be empty. Please remove redundant commas!\\n\"\n",
                      "markdown": "`    local -ri length=${#tags[@]}\n    for ((i = 0; i < length; ++i)); do\n      local element=\"tags[$i]\"\n      bats_trim \"$element\" \"${!element}\" 2>/dev/null # printf on bash 3 will complain but work anyways\n      if [[ -z \"${!element}\" && -n \"${CHECK_BATS_COMMENT_COMMANDS:-}\" ]]; then\n        printf \"%s:%d: Error: Invalid %s: '%s'. \" \"$test_file\" \"$line_number\" \"$tag_type\" \"$tags_string\"\n        printf \"Tags must not be empty. Please remove redundant commas!\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-preprocess"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -e\n\nbats_encode_test_name() {\n  local name=\"$1\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -e\n\nbats_encode_test_name() {\n  local name=\"$1\"\n",
                      "markdown": "`#!/usr/bin/env bash\nset -e\n\nbats_encode_test_name() {\n  local name=\"$1\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-preprocess"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 64,
                  "endLine": 52,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    local -ri length=${#tags[@]}\n    for ((i = 0; i < length; ++i)); do\n      local element=\"tags[$i]\"\n      bats_trim \"$element\" \"${!element}\" 2>/dev/null # printf on bash 3 will complain but work anyways\n      if [[ -z \"${!element}\" && -n \"${CHECK_BATS_COMMENT_COMMANDS:-}\" ]]; then\n        printf \"%s:%d: Error: Invalid %s: '%s'. \" \"$test_file\" \"$line_number\" \"$tag_type\" \"$tags_string\"\n        printf \"Tags must not be empty. Please remove redundant commas!\\n\"\n",
                    "rendered": {
                      "text": "    local -ri length=${#tags[@]}\n    for ((i = 0; i < length; ++i)); do\n      local element=\"tags[$i]\"\n      bats_trim \"$element\" \"${!element}\" 2>/dev/null # printf on bash 3 will complain but work anyways\n      if [[ -z \"${!element}\" && -n \"${CHECK_BATS_COMMENT_COMMANDS:-}\" ]]; then\n        printf \"%s:%d: Error: Invalid %s: '%s'. \" \"$test_file\" \"$line_number\" \"$tag_type\" \"$tags_string\"\n        printf \"Tags must not be empty. Please remove redundant commas!\\n\"\n",
                      "markdown": "`    local -ri length=${#tags[@]}\n    for ((i = 0; i < length; ++i)); do\n      local element=\"tags[$i]\"\n      bats_trim \"$element\" \"${!element}\" 2>/dev/null # printf on bash 3 will complain but work anyways\n      if [[ -z \"${!element}\" && -n \"${CHECK_BATS_COMMENT_COMMANDS:-}\" ]]; then\n        printf \"%s:%d: Error: Invalid %s: '%s'. \" \"$test_file\" \"$line_number\" \"$tag_type\" \"$tags_string\"\n        printf \"Tags must not be empty. Please remove redundant commas!\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-preprocess"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -e\n\nbats_encode_test_name() {\n  local name=\"$1\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -e\n\nbats_encode_test_name() {\n  local name=\"$1\"\n",
                      "markdown": "`#!/usr/bin/env bash\nset -e\n\nbats_encode_test_name() {\n  local name=\"$1\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/date"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\necho \"dummy date\"",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\necho \"dummy date\"",
                      "markdown": "`#!/usr/bin/env bash\n\necho \"dummy date\"`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/date"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\necho \"dummy date\"",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\necho \"dummy date\"",
                      "markdown": "`#!/usr/bin/env bash\n\necho \"dummy date\"`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/read_from_stdin.bats"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "endLine": 18,
                  "endColumn": 11,
                  "snippet": {
                    "text": "}\n\n@test \"test 3\" {\n  run bash -c \"echo EXIT | $BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Found\" ]\n}\n",
                    "rendered": {
                      "text": "}\n\n@test \"test 3\" {\n  run bash -c \"echo EXIT | $BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Found\" ]\n}\n",
                      "markdown": "`}\n\n@test \"test 3\" {\n  run bash -c \"echo EXIT | $BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Found\" ]\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/read_from_stdin.bats"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 5,
                  "endLine": 11,
                  "endColumn": 11,
                  "snippet": {
                    "text": "}\n\n@test \"test 2 with\tTAB in name\" {\n  run bash -c \"echo EXIT | $BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 0 ]\n  echo \"$output\"\n  [ \"$output\" = \"Found\" ]\n",
                    "rendered": {
                      "text": "}\n\n@test \"test 2 with\tTAB in name\" {\n  run bash -c \"echo EXIT | $BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 0 ]\n  echo \"$output\"\n  [ \"$output\" = \"Found\" ]\n",
                      "markdown": "`}\n\n@test \"test 2 with\tTAB in name\" {\n  run bash -c \"echo EXIT | $BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 0 ]\n  echo \"$output\"\n  [ \"$output\" = \"Found\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/read_from_stdin.bats"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "endLine": 5,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n@test \"test 1\" {\n  # Don't print anything\n  run bash -c \"$BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 1 ]\n  [ \"$output\" = \"Not found\" ]\n}\n",
                    "rendered": {
                      "text": "\n@test \"test 1\" {\n  # Don't print anything\n  run bash -c \"$BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 1 ]\n  [ \"$output\" = \"Not found\" ]\n}\n",
                      "markdown": "`\n@test \"test 1\" {\n  # Don't print anything\n  run bash -c \"$BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 1 ]\n  [ \"$output\" = \"Not found\" ]\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/read_from_stdin.bats"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "endLine": 18,
                  "endColumn": 11,
                  "snippet": {
                    "text": "}\n\n@test \"test 3\" {\n  run bash -c \"echo EXIT | $BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Found\" ]\n}\n",
                    "rendered": {
                      "text": "}\n\n@test \"test 3\" {\n  run bash -c \"echo EXIT | $BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Found\" ]\n}\n",
                      "markdown": "`}\n\n@test \"test 3\" {\n  run bash -c \"echo EXIT | $BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Found\" ]\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/read_from_stdin.bats"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 5,
                  "endLine": 11,
                  "endColumn": 11,
                  "snippet": {
                    "text": "}\n\n@test \"test 2 with\tTAB in name\" {\n  run bash -c \"echo EXIT | $BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 0 ]\n  echo \"$output\"\n  [ \"$output\" = \"Found\" ]\n",
                    "rendered": {
                      "text": "}\n\n@test \"test 2 with\tTAB in name\" {\n  run bash -c \"echo EXIT | $BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 0 ]\n  echo \"$output\"\n  [ \"$output\" = \"Found\" ]\n",
                      "markdown": "`}\n\n@test \"test 2 with\tTAB in name\" {\n  run bash -c \"echo EXIT | $BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 0 ]\n  echo \"$output\"\n  [ \"$output\" = \"Found\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/read_from_stdin.bats"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "endLine": 5,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n@test \"test 1\" {\n  # Don't print anything\n  run bash -c \"$BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 1 ]\n  [ \"$output\" = \"Not found\" ]\n}\n",
                    "rendered": {
                      "text": "\n@test \"test 1\" {\n  # Don't print anything\n  run bash -c \"$BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 1 ]\n  [ \"$output\" = \"Not found\" ]\n}\n",
                      "markdown": "`\n@test \"test 1\" {\n  # Don't print anything\n  run bash -c \"$BATS_TEST_DIRNAME/cmd_using_stdin.bash\"\n  [ \"$status\" -eq 1 ]\n  [ \"$output\" = \"Not found\" ]\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/unofficial_bash_strict_mode.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n",
                      "markdown": "`#!/usr/bin/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/unofficial_bash_strict_mode.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n",
                      "markdown": "`#!/usr/bin/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/gobble_up_stdin_sleep_and_print_finish.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\ncat >/dev/null # eat up all input\nsleep 1\necho \"Finished\" # mark finish",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\ncat >/dev/null # eat up all input\nsleep 1\necho \"Finished\" # mark finish",
                      "markdown": "`#!/usr/bin/env bash\ncat >/dev/null # eat up all input\nsleep 1\necho \"Finished\" # mark finish`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/gobble_up_stdin_sleep_and_print_finish.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\ncat >/dev/null # eat up all input\nsleep 1\necho \"Finished\" # mark finish",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\ncat >/dev/null # eat up all input\nsleep 1\necho \"Finished\" # mark finish",
                      "markdown": "`#!/usr/bin/env bash\ncat >/dev/null # eat up all input\nsleep 1\necho \"Finished\" # mark finish`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/cat-formatter.bats"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 15,
                  "endLine": 55,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  \n  local formatter=\"bats-format-cat\"\n\n  reentrant_run bash -u \"$formatter\" <<EOF\n1..1\nsuite \"$FIXTURE_ROOT/failing.bats\"\n# output from setup_file\n",
                    "rendered": {
                      "text": "  \n  local formatter=\"bats-format-cat\"\n\n  reentrant_run bash -u \"$formatter\" <<EOF\n1..1\nsuite \"$FIXTURE_ROOT/failing.bats\"\n# output from setup_file\n",
                      "markdown": "`  \n  local formatter=\"bats-format-cat\"\n\n  reentrant_run bash -u \"$formatter\" <<EOF\n1..1\nsuite \"$FIXTURE_ROOT/failing.bats\"\n# output from setup_file\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/cat-formatter.bats"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 15,
                  "endLine": 55,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  \n  local formatter=\"bats-format-cat\"\n\n  reentrant_run bash -u \"$formatter\" <<EOF\n1..1\nsuite \"$FIXTURE_ROOT/failing.bats\"\n# output from setup_file\n",
                    "rendered": {
                      "text": "  \n  local formatter=\"bats-format-cat\"\n\n  reentrant_run bash -u \"$formatter\" <<EOF\n1..1\nsuite \"$FIXTURE_ROOT/failing.bats\"\n# output from setup_file\n",
                      "markdown": "`  \n  local formatter=\"bats-format-cat\"\n\n  reentrant_run bash -u \"$formatter\" <<EOF\n1..1\nsuite \"$FIXTURE_ROOT/failing.bats\"\n# output from setup_file\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/cat-formatter.bats"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 32,
                  "endLine": 38,
                  "endColumn": 37,
                  "snippet": {
                    "text": "}\n\n@test \"failing test with timing\" {\n  reentrant_run bats --formatter cat --timing \"${FIXTURE_ROOT}/failing.bats\"\n\n  [ \"${lines[0]}\" == '1..1' ]\n  [ \"${lines[1]}\" == \"suite ${FIXTURE_ROOT}/failing.bats\" ]\n",
                    "rendered": {
                      "text": "}\n\n@test \"failing test with timing\" {\n  reentrant_run bats --formatter cat --timing \"${FIXTURE_ROOT}/failing.bats\"\n\n  [ \"${lines[0]}\" == '1..1' ]\n  [ \"${lines[1]}\" == \"suite ${FIXTURE_ROOT}/failing.bats\" ]\n",
                      "markdown": "`}\n\n@test \"failing test with timing\" {\n  reentrant_run bats --formatter cat --timing \"${FIXTURE_ROOT}/failing.bats\"\n\n  [ \"${lines[0]}\" == '1..1' ]\n  [ \"${lines[1]}\" == \"suite ${FIXTURE_ROOT}/failing.bats\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/cat-formatter.bats"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 32,
                  "endLine": 27,
                  "endColumn": 37,
                  "snippet": {
                    "text": "}\n\n@test \"passing test with timing\" {\n  reentrant_run bats --formatter cat --timing \"${FIXTURE_ROOT}/passing.bats\"\n\n  [ \"${lines[0]}\" == '1..1' ]\n  [ \"${lines[1]}\" == \"suite ${FIXTURE_ROOT}/passing.bats\" ]\n",
                    "rendered": {
                      "text": "}\n\n@test \"passing test with timing\" {\n  reentrant_run bats --formatter cat --timing \"${FIXTURE_ROOT}/passing.bats\"\n\n  [ \"${lines[0]}\" == '1..1' ]\n  [ \"${lines[1]}\" == \"suite ${FIXTURE_ROOT}/passing.bats\" ]\n",
                      "markdown": "`}\n\n@test \"passing test with timing\" {\n  reentrant_run bats --formatter cat --timing \"${FIXTURE_ROOT}/passing.bats\"\n\n  [ \"${lines[0]}\" == '1..1' ]\n  [ \"${lines[1]}\" == \"suite ${FIXTURE_ROOT}/passing.bats\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/cat-formatter.bats"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 32,
                  "endLine": 15,
                  "endColumn": 37,
                  "snippet": {
                    "text": "}\n\n@test \"failing test\" {\n  reentrant_run bats --formatter cat \"${FIXTURE_ROOT}/failing.bats\"\n\n  [ \"${lines[0]}\" == '1..1' ]\n  [ \"${lines[1]}\" == \"suite ${FIXTURE_ROOT}/failing.bats\" ]\n",
                    "rendered": {
                      "text": "}\n\n@test \"failing test\" {\n  reentrant_run bats --formatter cat \"${FIXTURE_ROOT}/failing.bats\"\n\n  [ \"${lines[0]}\" == '1..1' ]\n  [ \"${lines[1]}\" == \"suite ${FIXTURE_ROOT}/failing.bats\" ]\n",
                      "markdown": "`}\n\n@test \"failing test\" {\n  reentrant_run bats --formatter cat \"${FIXTURE_ROOT}/failing.bats\"\n\n  [ \"${lines[0]}\" == '1..1' ]\n  [ \"${lines[1]}\" == \"suite ${FIXTURE_ROOT}/failing.bats\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/cat-formatter.bats"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 32,
                  "endLine": 5,
                  "endColumn": 37,
                  "snippet": {
                    "text": "fixtures bats # reuse bats fixtures\n\n@test \"passing test\" {\n  reentrant_run bats --formatter cat \"${FIXTURE_ROOT}/passing.bats\"\n\n  [ \"${lines[0]}\" == '1..1' ]\n  [ \"${lines[1]}\" == \"suite ${FIXTURE_ROOT}/passing.bats\" ]\n",
                    "rendered": {
                      "text": "fixtures bats # reuse bats fixtures\n\n@test \"passing test\" {\n  reentrant_run bats --formatter cat \"${FIXTURE_ROOT}/passing.bats\"\n\n  [ \"${lines[0]}\" == '1..1' ]\n  [ \"${lines[1]}\" == \"suite ${FIXTURE_ROOT}/passing.bats\" ]\n",
                      "markdown": "`fixtures bats # reuse bats fixtures\n\n@test \"passing test\" {\n  reentrant_run bats --formatter cat \"${FIXTURE_ROOT}/passing.bats\"\n\n  [ \"${lines[0]}\" == '1..1' ]\n  [ \"${lines[1]}\" == \"suite ${FIXTURE_ROOT}/passing.bats\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/formatter.bats"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 3,
                  "endLine": 65,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    tested_at_least_one_formatter=1\n    echo \"Formatter: ${formatter}\"\n    # the replay should be possible without errors\n    bash -u \"$formatter\" >/dev/null <<EOF\n1..1\nsuite \"$FIXTURE_ROOT/failing.bats\"\n# output from setup_file\n",
                    "rendered": {
                      "text": "    tested_at_least_one_formatter=1\n    echo \"Formatter: ${formatter}\"\n    # the replay should be possible without errors\n    bash -u \"$formatter\" >/dev/null <<EOF\n1..1\nsuite \"$FIXTURE_ROOT/failing.bats\"\n# output from setup_file\n",
                      "markdown": "`    tested_at_least_one_formatter=1\n    echo \"Formatter: ${formatter}\"\n    # the replay should be possible without errors\n    bash -u \"$formatter\" >/dev/null <<EOF\n1..1\nsuite \"$FIXTURE_ROOT/failing.bats\"\n# output from setup_file\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/formatter.bats"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 3,
                  "endLine": 65,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    tested_at_least_one_formatter=1\n    echo \"Formatter: ${formatter}\"\n    # the replay should be possible without errors\n    bash -u \"$formatter\" >/dev/null <<EOF\n1..1\nsuite \"$FIXTURE_ROOT/failing.bats\"\n# output from setup_file\n",
                    "rendered": {
                      "text": "    tested_at_least_one_formatter=1\n    echo \"Formatter: ${formatter}\"\n    # the replay should be possible without errors\n    bash -u \"$formatter\" >/dev/null <<EOF\n1..1\nsuite \"$FIXTURE_ROOT/failing.bats\"\n# output from setup_file\n",
                      "markdown": "`    tested_at_least_one_formatter=1\n    echo \"Formatter: ${formatter}\"\n    # the replay should be possible without errors\n    bash -u \"$formatter\" >/dev/null <<EOF\n1..1\nsuite \"$FIXTURE_ROOT/failing.bats\"\n# output from setup_file\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/formatter.bats"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 9,
                  "endLine": 58,
                  "endColumn": 14,
                  "snippet": {
                    "text": "@test \"All formatters (except cat) implement the callback interface\" {\n  cd \"$BATS_ROOT/libexec/bats-core/\"\n  for formatter in bats-format-*; do\n    # the cat formatter is not expected to implement this interface\n    if [[ \"$formatter\" == *\"bats-format-cat\" ]]; then\n      continue\n    fi\n",
                    "rendered": {
                      "text": "@test \"All formatters (except cat) implement the callback interface\" {\n  cd \"$BATS_ROOT/libexec/bats-core/\"\n  for formatter in bats-format-*; do\n    # the cat formatter is not expected to implement this interface\n    if [[ \"$formatter\" == *\"bats-format-cat\" ]]; then\n      continue\n    fi\n",
                      "markdown": "`@test \"All formatters (except cat) implement the callback interface\" {\n  cd \"$BATS_ROOT/libexec/bats-core/\"\n  for formatter in bats-format-*; do\n    # the cat formatter is not expected to implement this interface\n    if [[ \"$formatter\" == *\"bats-format-cat\" ]]; then\n      continue\n    fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/filter.bats"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 38,
                  "endLine": 108,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  \"$@\"\n}\n\n@test \"--filter-status failed does not update list when run is aborted\" {\n  if [[ \"${BATS_NUMBER_OF_PARALLEL_JOBS:-1}\" -gt 1 ]]; then\n    skip \"Aborts don't work in parallel mode\"\n  fi\n",
                    "rendered": {
                      "text": "  \"$@\"\n}\n\n@test \"--filter-status failed does not update list when run is aborted\" {\n  if [[ \"${BATS_NUMBER_OF_PARALLEL_JOBS:-1}\" -gt 1 ]]; then\n    skip \"Aborts don't work in parallel mode\"\n  fi\n",
                      "markdown": "`  \"$@\"\n}\n\n@test \"--filter-status failed does not update list when run is aborted\" {\n  if [[ \"${BATS_NUMBER_OF_PARALLEL_JOBS:-1}\" -gt 1 ]]; then\n    skip \"Aborts don't work in parallel mode\"\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/filter.bats"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 15,
                  "endLine": 134,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  reentrant_run -1 enforce_own_process_group bats --rerun-failed \"sigint_in_failing_test.bats\"\n\n  # should not have produced a new log\n  reentrant_run find .bats/run-logs -name '*.log'\n  [ \"$first_run_logs\" == \"$output\" ]\n}",
                    "rendered": {
                      "text": "  reentrant_run -1 enforce_own_process_group bats --rerun-failed \"sigint_in_failing_test.bats\"\n\n  # should not have produced a new log\n  reentrant_run find .bats/run-logs -name '*.log'\n  [ \"$first_run_logs\" == \"$output\" ]\n}",
                      "markdown": "`  reentrant_run -1 enforce_own_process_group bats --rerun-failed \"sigint_in_failing_test.bats\"\n\n  # should not have produced a new log\n  reentrant_run find .bats/run-logs -name '*.log'\n  [ \"$first_run_logs\" == \"$output\" ]\n}`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/filter.bats"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 15,
                  "endLine": 122,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  reentrant_run -1 env DONT_ABORT=1 bats \"sigint_in_failing_test.bats\"\n\n  # check that we have exactly one log\n  reentrant_run find .bats/run-logs -name '*.log'\n  [[ \"${lines[0]}\" == *.log ]] || false\n  [ ${#lines[@]} -eq 1 ]\n\n",
                    "rendered": {
                      "text": "  reentrant_run -1 env DONT_ABORT=1 bats \"sigint_in_failing_test.bats\"\n\n  # check that we have exactly one log\n  reentrant_run find .bats/run-logs -name '*.log'\n  [[ \"${lines[0]}\" == *.log ]] || false\n  [ ${#lines[@]} -eq 1 ]\n\n",
                      "markdown": "`  reentrant_run -1 env DONT_ABORT=1 bats \"sigint_in_failing_test.bats\"\n\n  # check that we have exactly one log\n  reentrant_run find .bats/run-logs -name '*.log'\n  [[ \"${lines[0]}\" == *.log ]] || false\n  [ ${#lines[@]} -eq 1 ]\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/filter.bats"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 18,
                  "endLine": 119,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n  bats_require_minimum_version 1.5.0\n  # don't hang yet, so we get a useful rerun file\n  reentrant_run -1 env DONT_ABORT=1 bats \"sigint_in_failing_test.bats\"\n\n  # check that we have exactly one log\n  reentrant_run find .bats/run-logs -name '*.log'\n",
                    "rendered": {
                      "text": "\n  bats_require_minimum_version 1.5.0\n  # don't hang yet, so we get a useful rerun file\n  reentrant_run -1 env DONT_ABORT=1 bats \"sigint_in_failing_test.bats\"\n\n  # check that we have exactly one log\n  reentrant_run find .bats/run-logs -name '*.log'\n",
                      "markdown": "`\n  bats_require_minimum_version 1.5.0\n  # don't hang yet, so we get a useful rerun file\n  reentrant_run -1 env DONT_ABORT=1 bats \"sigint_in_failing_test.bats\"\n\n  # check that we have exactly one log\n  reentrant_run find .bats/run-logs -name '*.log'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/filter.bats"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 1,
                  "endLine": 114,
                  "endColumn": 5,
                  "snippet": {
                    "text": "  fi\n\n  cd \"$BATS_TEST_TMPDIR\" # don't pollute the source folder\n  cp \"$FIXTURE_ROOT/sigint_in_failing_test.bats\" .\n  mkdir -p .bats/run-logs\n\n  bats_require_minimum_version 1.5.0\n",
                    "rendered": {
                      "text": "  fi\n\n  cd \"$BATS_TEST_TMPDIR\" # don't pollute the source folder\n  cp \"$FIXTURE_ROOT/sigint_in_failing_test.bats\" .\n  mkdir -p .bats/run-logs\n\n  bats_require_minimum_version 1.5.0\n",
                      "markdown": "`  fi\n\n  cd \"$BATS_TEST_TMPDIR\" # don't pollute the source folder\n  cp \"$FIXTURE_ROOT/sigint_in_failing_test.bats\" .\n  mkdir -p .bats/run-logs\n\n  bats_require_minimum_version 1.5.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/filter.bats"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 1,
                  "endLine": 91,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n@test \"--filter-status failed gives warning on empty failed test list\" {\n  cd \"$BATS_TEST_TMPDIR\" # don't pollute the source folder\n  cp \"$FIXTURE_ROOT/passing.bats\" .\n  mkdir -p .bats/run-logs\n  bats_require_minimum_version 1.5.0\n  # have no failing tests\n",
                    "rendered": {
                      "text": "\n@test \"--filter-status failed gives warning on empty failed test list\" {\n  cd \"$BATS_TEST_TMPDIR\" # don't pollute the source folder\n  cp \"$FIXTURE_ROOT/passing.bats\" .\n  mkdir -p .bats/run-logs\n  bats_require_minimum_version 1.5.0\n  # have no failing tests\n",
                      "markdown": "`\n@test \"--filter-status failed gives warning on empty failed test list\" {\n  cd \"$BATS_TEST_TMPDIR\" # don't pollute the source folder\n  cp \"$FIXTURE_ROOT/passing.bats\" .\n  mkdir -p .bats/run-logs\n  bats_require_minimum_version 1.5.0\n  # have no failing tests\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/filter.bats"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 1,
                  "endLine": 71,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n@test \"Without previous recording --filter-status missed runs all tests and then runs only missed tests\" {\n  cd \"$BATS_TEST_TMPDIR\" # don't pollute the source folder\n  cp \"$FIXTURE_ROOT/many_passing_and_one_failing.bats\" .\n  mkdir -p .bats/run-logs\n  bats_require_minimum_version 1.5.0\n  reentrant_run -1 bats --filter-status missed \"many_passing_and_one_failing.bats\"\n",
                    "rendered": {
                      "text": "\n@test \"Without previous recording --filter-status missed runs all tests and then runs only missed tests\" {\n  cd \"$BATS_TEST_TMPDIR\" # don't pollute the source folder\n  cp \"$FIXTURE_ROOT/many_passing_and_one_failing.bats\" .\n  mkdir -p .bats/run-logs\n  bats_require_minimum_version 1.5.0\n  reentrant_run -1 bats --filter-status missed \"many_passing_and_one_failing.bats\"\n",
                      "markdown": "`\n@test \"Without previous recording --filter-status missed runs all tests and then runs only missed tests\" {\n  cd \"$BATS_TEST_TMPDIR\" # don't pollute the source folder\n  cp \"$FIXTURE_ROOT/many_passing_and_one_failing.bats\" .\n  mkdir -p .bats/run-logs\n  bats_require_minimum_version 1.5.0\n  reentrant_run -1 bats --filter-status missed \"many_passing_and_one_failing.bats\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/filter.bats"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n@test \"Without previous recording --filter-status passed runs all tests and then runs only passed and missed tests\" {\n  cd \"$BATS_TEST_TMPDIR\" # don't pollute the source folder\n  cp \"$FIXTURE_ROOT/many_passing_and_one_failing.bats\" .\n  mkdir -p .bats/run-logs\n  bats_require_minimum_version 1.5.0\n  reentrant_run -1 bats --filter-status passed \"many_passing_and_one_failing.bats\"\n",
                    "rendered": {
                      "text": "\n@test \"Without previous recording --filter-status passed runs all tests and then runs only passed and missed tests\" {\n  cd \"$BATS_TEST_TMPDIR\" # don't pollute the source folder\n  cp \"$FIXTURE_ROOT/many_passing_and_one_failing.bats\" .\n  mkdir -p .bats/run-logs\n  bats_require_minimum_version 1.5.0\n  reentrant_run -1 bats --filter-status passed \"many_passing_and_one_failing.bats\"\n",
                      "markdown": "`\n@test \"Without previous recording --filter-status passed runs all tests and then runs only passed and missed tests\" {\n  cd \"$BATS_TEST_TMPDIR\" # don't pollute the source folder\n  cp \"$FIXTURE_ROOT/many_passing_and_one_failing.bats\" .\n  mkdir -p .bats/run-logs\n  bats_require_minimum_version 1.5.0\n  reentrant_run -1 bats --filter-status passed \"many_passing_and_one_failing.bats\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/filter.bats"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 43,
                  "endLine": 34,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  # add a new test that was missed before\n  echo $'@test missed { :; }' >>\"many_passing_and_one_failing.bats\"\n\n  find .bats/run-logs/ -type f -print -exec cat {} \\;\n\n  reentrant_run -1 bats --tap --filter-status failed \"many_passing_and_one_failing.bats\"\n  # now we should only run the failing test\n",
                    "rendered": {
                      "text": "  # add a new test that was missed before\n  echo $'@test missed { :; }' >>\"many_passing_and_one_failing.bats\"\n\n  find .bats/run-logs/ -type f -print -exec cat {} \\;\n\n  reentrant_run -1 bats --tap --filter-status failed \"many_passing_and_one_failing.bats\"\n  # now we should only run the failing test\n",
                      "markdown": "`  # add a new test that was missed before\n  echo $'@test missed { :; }' >>\"many_passing_and_one_failing.bats\"\n\n  find .bats/run-logs/ -type f -print -exec cat {} \\;\n\n  reentrant_run -1 bats --tap --filter-status failed \"many_passing_and_one_failing.bats\"\n  # now we should only run the failing test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/filter.bats"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  # add a new test that was missed before\n  echo $'@test missed { :; }' >>\"many_passing_and_one_failing.bats\"\n\n  find .bats/run-logs/ -type f -print -exec cat {} \\;\n\n  reentrant_run -1 bats --tap --filter-status failed \"many_passing_and_one_failing.bats\"\n  # now we should only run the failing test\n",
                    "rendered": {
                      "text": "  # add a new test that was missed before\n  echo $'@test missed { :; }' >>\"many_passing_and_one_failing.bats\"\n\n  find .bats/run-logs/ -type f -print -exec cat {} \\;\n\n  reentrant_run -1 bats --tap --filter-status failed \"many_passing_and_one_failing.bats\"\n  # now we should only run the failing test\n",
                      "markdown": "`  # add a new test that was missed before\n  echo $'@test missed { :; }' >>\"many_passing_and_one_failing.bats\"\n\n  find .bats/run-logs/ -type f -print -exec cat {} \\;\n\n  reentrant_run -1 bats --tap --filter-status failed \"many_passing_and_one_failing.bats\"\n  # now we should only run the failing test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/filter.bats"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n@test \"Without previous recording --filter-status failed runs all tests and then runs only failed and missed tests\" {\n  cd \"$BATS_TEST_TMPDIR\" # don't pollute the source folder\n  cp \"$FIXTURE_ROOT/many_passing_and_one_failing.bats\" .\n  mkdir -p .bats/run-logs\n  bats_require_minimum_version 1.5.0\n  reentrant_run -1 --separate-stderr bats --filter-status failed \"many_passing_and_one_failing.bats\"\n",
                    "rendered": {
                      "text": "\n@test \"Without previous recording --filter-status failed runs all tests and then runs only failed and missed tests\" {\n  cd \"$BATS_TEST_TMPDIR\" # don't pollute the source folder\n  cp \"$FIXTURE_ROOT/many_passing_and_one_failing.bats\" .\n  mkdir -p .bats/run-logs\n  bats_require_minimum_version 1.5.0\n  reentrant_run -1 --separate-stderr bats --filter-status failed \"many_passing_and_one_failing.bats\"\n",
                      "markdown": "`\n@test \"Without previous recording --filter-status failed runs all tests and then runs only failed and missed tests\" {\n  cd \"$BATS_TEST_TMPDIR\" # don't pollute the source folder\n  cp \"$FIXTURE_ROOT/many_passing_and_one_failing.bats\" .\n  mkdir -p .bats/run-logs\n  bats_require_minimum_version 1.5.0\n  reentrant_run -1 --separate-stderr bats --filter-status failed \"many_passing_and_one_failing.bats\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/root.bats"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 15,
                  "endLine": 100,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  cd /tmp\n  # shellcheck disable=SC2031,SC2030\n  PATH=\"$PATH:$BATS_TEST_TMPDIR/bin\"\n  reentrant_run bash bats -v\n  [ \"$status\" -eq 0 ]\n  [ \"${output%% *}\" == 'Bats' ]\n}\n",
                    "rendered": {
                      "text": "  cd /tmp\n  # shellcheck disable=SC2031,SC2030\n  PATH=\"$PATH:$BATS_TEST_TMPDIR/bin\"\n  reentrant_run bash bats -v\n  [ \"$status\" -eq 0 ]\n  [ \"${output%% *}\" == 'Bats' ]\n}\n",
                      "markdown": "`  cd /tmp\n  # shellcheck disable=SC2031,SC2030\n  PATH=\"$PATH:$BATS_TEST_TMPDIR/bin\"\n  reentrant_run bash bats -v\n  [ \"$status\" -eq 0 ]\n  [ \"${output%% *}\" == 'Bats' ]\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/root.bats"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 15,
                  "endLine": 100,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  cd /tmp\n  # shellcheck disable=SC2031,SC2030\n  PATH=\"$PATH:$BATS_TEST_TMPDIR/bin\"\n  reentrant_run bash bats -v\n  [ \"$status\" -eq 0 ]\n  [ \"${output%% *}\" == 'Bats' ]\n}\n",
                    "rendered": {
                      "text": "  cd /tmp\n  # shellcheck disable=SC2031,SC2030\n  PATH=\"$PATH:$BATS_TEST_TMPDIR/bin\"\n  reentrant_run bash bats -v\n  [ \"$status\" -eq 0 ]\n  [ \"${output%% *}\" == 'Bats' ]\n}\n",
                      "markdown": "`  cd /tmp\n  # shellcheck disable=SC2031,SC2030\n  PATH=\"$PATH:$BATS_TEST_TMPDIR/bin\"\n  reentrant_run bash bats -v\n  [ \"$status\" -eq 0 ]\n  [ \"${output%% *}\" == 'Bats' ]\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/parallel.bats"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 15,
                  "endLine": 81,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  # file parallelization is needed for maximum parallelity!\n  # If we got over the skip (if no GNU parallel) in setup() we can re-enable it safely!\n  unset BATS_NO_PARALLELIZE_ACROSS_FILES\n  reentrant_run bash -c \"bats --jobs $PARALLELITY \\\"${FIXTURE_ROOT}/suite/\\\" 2> >(grep -v '^parallel: Warning: ')\"\n\n  echo \"$output\"\n  [ \"$status\" -eq 0 ]\n",
                    "rendered": {
                      "text": "  # file parallelization is needed for maximum parallelity!\n  # If we got over the skip (if no GNU parallel) in setup() we can re-enable it safely!\n  unset BATS_NO_PARALLELIZE_ACROSS_FILES\n  reentrant_run bash -c \"bats --jobs $PARALLELITY \\\"${FIXTURE_ROOT}/suite/\\\" 2> >(grep -v '^parallel: Warning: ')\"\n\n  echo \"$output\"\n  [ \"$status\" -eq 0 ]\n",
                      "markdown": "`  # file parallelization is needed for maximum parallelity!\n  # If we got over the skip (if no GNU parallel) in setup() we can re-enable it safely!\n  unset BATS_NO_PARALLELIZE_ACROSS_FILES\n  reentrant_run bash -c \"bats --jobs $PARALLELITY \\\"${FIXTURE_ROOT}/suite/\\\" 2> >(grep -v '^parallel: Warning: ')\"\n\n  echo \"$output\"\n  [ \"$status\" -eq 0 ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/parallel.bats"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 1,
                  "endLine": 155,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    fi\n  done <\"$MARKER_FILE\"\n\n  cat \"$MARKER_FILE\" # for debugging purposes\n  [[ \"$maximum_parallel_count\" -eq $PARALLELITY ]]\n  [[ \"$current_parallel_count\" -eq 0 ]]\n  [[ \"$total_count\" -eq 10 ]]\n",
                    "rendered": {
                      "text": "    fi\n  done <\"$MARKER_FILE\"\n\n  cat \"$MARKER_FILE\" # for debugging purposes\n  [[ \"$maximum_parallel_count\" -eq $PARALLELITY ]]\n  [[ \"$current_parallel_count\" -eq 0 ]]\n  [[ \"$total_count\" -eq 10 ]]\n",
                      "markdown": "`    fi\n  done <\"$MARKER_FILE\"\n\n  cat \"$MARKER_FILE\" # for debugging purposes\n  [[ \"$maximum_parallel_count\" -eq $PARALLELITY ]]\n  [[ \"$current_parallel_count\" -eq 0 ]]\n  [[ \"$total_count\" -eq 10 ]]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/parallel.bats"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 1,
                  "endLine": 117,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    false\n  )\n\n  cat \"$FILE_MARKER\"\n\n  [[ $(grep -c \"start \" \"$FILE_MARKER\") -eq 4 ]] # beware of grepping the filename as well!\n  [[ $(grep -c \"stop \" \"$FILE_MARKER\") -eq 4 ]]\n",
                    "rendered": {
                      "text": "    false\n  )\n\n  cat \"$FILE_MARKER\"\n\n  [[ $(grep -c \"start \" \"$FILE_MARKER\") -eq 4 ]] # beware of grepping the filename as well!\n  [[ $(grep -c \"stop \" \"$FILE_MARKER\") -eq 4 ]]\n",
                      "markdown": "`    false\n  )\n\n  cat \"$FILE_MARKER\"\n\n  [[ $(grep -c \"start \" \"$FILE_MARKER\") -eq 4 ]] # beware of grepping the filename as well!\n  [[ $(grep -c \"stop \" \"$FILE_MARKER\") -eq 4 ]]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/parallel.bats"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 15,
                  "endLine": 81,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  # file parallelization is needed for maximum parallelity!\n  # If we got over the skip (if no GNU parallel) in setup() we can re-enable it safely!\n  unset BATS_NO_PARALLELIZE_ACROSS_FILES\n  reentrant_run bash -c \"bats --jobs $PARALLELITY \\\"${FIXTURE_ROOT}/suite/\\\" 2> >(grep -v '^parallel: Warning: ')\"\n\n  echo \"$output\"\n  [ \"$status\" -eq 0 ]\n",
                    "rendered": {
                      "text": "  # file parallelization is needed for maximum parallelity!\n  # If we got over the skip (if no GNU parallel) in setup() we can re-enable it safely!\n  unset BATS_NO_PARALLELIZE_ACROSS_FILES\n  reentrant_run bash -c \"bats --jobs $PARALLELITY \\\"${FIXTURE_ROOT}/suite/\\\" 2> >(grep -v '^parallel: Warning: ')\"\n\n  echo \"$output\"\n  [ \"$status\" -eq 0 ]\n",
                      "markdown": "`  # file parallelization is needed for maximum parallelity!\n  # If we got over the skip (if no GNU parallel) in setup() we can re-enable it safely!\n  unset BATS_NO_PARALLELIZE_ACROSS_FILES\n  reentrant_run bash -c \"bats --jobs $PARALLELITY \\\"${FIXTURE_ROOT}/suite/\\\" 2> >(grep -v '^parallel: Warning: ')\"\n\n  echo \"$output\"\n  [ \"$status\" -eq 0 ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/parallel.bats"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 10,
                  "endLine": 13,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nsetup() {\n  (type -p \"${BATS_PARALLEL_BINARY_NAME:-\"parallel\"}\" &>/dev/null && \"${BATS_PARALLEL_BINARY_NAME:-\"parallel\"}\" --version &>/dev/null) || skip \"--jobs requires GNU parallel\"\n  (type -p flock &>/dev/null || type -p shlock &>/dev/null) || skip \"--jobs requires flock/shlock\"\n}\n\ncheck_parallel_tests() { # <expected maximum parallelity>\n",
                    "rendered": {
                      "text": "\nsetup() {\n  (type -p \"${BATS_PARALLEL_BINARY_NAME:-\"parallel\"}\" &>/dev/null && \"${BATS_PARALLEL_BINARY_NAME:-\"parallel\"}\" --version &>/dev/null) || skip \"--jobs requires GNU parallel\"\n  (type -p flock &>/dev/null || type -p shlock &>/dev/null) || skip \"--jobs requires flock/shlock\"\n}\n\ncheck_parallel_tests() { # <expected maximum parallelity>\n",
                      "markdown": "`\nsetup() {\n  (type -p \"${BATS_PARALLEL_BINARY_NAME:-\"parallel\"}\" &>/dev/null && \"${BATS_PARALLEL_BINARY_NAME:-\"parallel\"}\" --version &>/dev/null) || skip \"--jobs requires GNU parallel\"\n  (type -p flock &>/dev/null || type -p shlock &>/dev/null) || skip \"--jobs requires flock/shlock\"\n}\n\ncheck_parallel_tests() { # <expected maximum parallelity>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/junit-formatter.bats"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 152,
                  "endLine": 56,
                  "endColumn": 160,
                  "snippet": {
                    "text": "E_NAME\"\n    TEST_FILE_PATH=\"$FIXTURE_ROOT/$TEST_FILE_NAME\"\n    ;;\n  esac\n  reentrant_run bats --formatter junit \"$TEST_FILE_PATH\"\n\n  echo \"$output\"\n  [[ \"${lines[2]}\" == \"<testsuite name=\\\"$ESCAPED_TEST_FILE_NAME\\\" tests=\\\"3\\\" failures=\\\"1\\\" errors=\\\"0\\\" skipped=\\\"1\\\" time=\\\"\"*\"\\\" timestamp=\\\"\"*\"\\\" hostname=\\\"\"*\"\\\">\" ]]\n  [[ \"${lines[3]}\" == \"    <testcase classname=\\\"$ESCAPED_TEST_FILE_NAME\\\" name=\\\"Successful test with escape characters: &quot;&#39;&lt;&gt;&amp; (0x1b)\\\" time=\\\"\"*\"\\\" />\" ]]\n  [[ \"${lines[4]}\" == \"    <testcase classname=\\\"$ESCAPED_TEST_FILE_NAME\\\" name=\\\"Failed test with escape char",
                    "rendered": {
                      "text": "E_NAME\"\n    TEST_FILE_PATH=\"$FIXTURE_ROOT/$TEST_FILE_NAME\"\n    ;;\n  esac\n  reentrant_run bats --formatter junit \"$TEST_FILE_PATH\"\n\n  echo \"$output\"\n  [[ \"${lines[2]}\" == \"<testsuite name=\\\"$ESCAPED_TEST_FILE_NAME\\\" tests=\\\"3\\\" failures=\\\"1\\\" errors=\\\"0\\\" skipped=\\\"1\\\" time=\\\"\"*\"\\\" timestamp=\\\"\"*\"\\\" hostname=\\\"\"*\"\\\">\" ]]\n  [[ \"${lines[3]}\" == \"    <testcase classname=\\\"$ESCAPED_TEST_FILE_NAME\\\" name=\\\"Successful test with escape characters: &quot;&#39;&lt;&gt;&amp; (0x1b)\\\" time=\\\"\"*\"\\\" />\" ]]\n  [[ \"${lines[4]}\" == \"    <testcase classname=\\\"$ESCAPED_TEST_FILE_NAME\\\" name=\\\"Failed test with escape char",
                      "markdown": "`E_NAME\"\n    TEST_FILE_PATH=\"$FIXTURE_ROOT/$TEST_FILE_NAME\"\n    ;;\n  esac\n  reentrant_run bats --formatter junit \"$TEST_FILE_PATH\"\n\n  echo \"$output\"\n  [[ \"${lines[2]}\" == \"<testsuite name=\\\"$ESCAPED_TEST_FILE_NAME\\\" tests=\\\"3\\\" failures=\\\"1\\\" errors=\\\"0\\\" skipped=\\\"1\\\" time=\\\"\"*\"\\\" timestamp=\\\"\"*\"\\\" hostname=\\\"\"*\"\\\">\" ]]\n  [[ \"${lines[3]}\" == \"    <testcase classname=\\\"$ESCAPED_TEST_FILE_NAME\\\" name=\\\"Successful test with escape characters: &quot;&#39;&lt;&gt;&amp; (0x1b)\\\" time=\\\"\"*\"\\\" />\" ]]\n  [[ \"${lines[4]}\" == \"    <testcase classname=\\\"$ESCAPED_TEST_FILE_NAME\\\" name=\\\"Failed test with escape char`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/junit-formatter.bats"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 159,
                  "endLine": 18,
                  "endColumn": 167,
                  "snippet": {
                    "text": "\n  [[ \"${lines[1]}\" =~ $TESTSUITES_REGEX ]]\n\n  TESTSUITE_REGEX=\"<testsuite name=\\\"skipped.bats\\\" tests=\\\"2\\\" failures=\\\"0\\\" errors=\\\"0\\\" skipped=\\\"2\\\" time=\\\"$FLOAT_REGEX\\\" timestamp=\\\"$TIMESTAMP_REGEX\\\" hostname=\\\".*\\\">\"\n  echo \"TESTSUITE_REGEX='$TESTSUITE_REGEX'\"\n  [[ \"${lines[2]}\" =~ $TESTSUITE_REGEX ]]\n\n",
                    "rendered": {
                      "text": "\n  [[ \"${lines[1]}\" =~ $TESTSUITES_REGEX ]]\n\n  TESTSUITE_REGEX=\"<testsuite name=\\\"skipped.bats\\\" tests=\\\"2\\\" failures=\\\"0\\\" errors=\\\"0\\\" skipped=\\\"2\\\" time=\\\"$FLOAT_REGEX\\\" timestamp=\\\"$TIMESTAMP_REGEX\\\" hostname=\\\".*\\\">\"\n  echo \"TESTSUITE_REGEX='$TESTSUITE_REGEX'\"\n  [[ \"${lines[2]}\" =~ $TESTSUITE_REGEX ]]\n\n",
                      "markdown": "`\n  [[ \"${lines[1]}\" =~ $TESTSUITES_REGEX ]]\n\n  TESTSUITE_REGEX=\"<testsuite name=\\\"skipped.bats\\\" tests=\\\"2\\\" failures=\\\"0\\\" errors=\\\"0\\\" skipped=\\\"2\\\" time=\\\"$FLOAT_REGEX\\\" timestamp=\\\"$TIMESTAMP_REGEX\\\" hostname=\\\".*\\\">\"\n  echo \"TESTSUITE_REGEX='$TESTSUITE_REGEX'\"\n  [[ \"${lines[2]}\" =~ $TESTSUITE_REGEX ]]\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/junit-formatter.bats"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 5,
                  "endLine": 109,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  reentrant_run bats --report-formatter junit \"$FIXTURE_ROOT/suite/\"\n  echo \"$output\"\n  [[ -e \"report.xml\" ]]\n  run cat \"report.xml\"\n  echo \"$output\"\n  [[ \"${lines[2]}\" == *\"<testsuite name=\\\"file1.bats\\\" tests=\\\"1\\\" failures=\\\"0\\\" errors=\\\"0\\\" skipped=\\\"0\\\"\"* ]]\n  [[ \"${lines[5]}\" == *\"<testsuite name=\\\"file2.bats\\\" tests=\\\"1\\\" failures=\\\"0\\\" errors=\\\"0\\\" skipped=\\\"0\\\"\"* ]]\n",
                    "rendered": {
                      "text": "  reentrant_run bats --report-formatter junit \"$FIXTURE_ROOT/suite/\"\n  echo \"$output\"\n  [[ -e \"report.xml\" ]]\n  run cat \"report.xml\"\n  echo \"$output\"\n  [[ \"${lines[2]}\" == *\"<testsuite name=\\\"file1.bats\\\" tests=\\\"1\\\" failures=\\\"0\\\" errors=\\\"0\\\" skipped=\\\"0\\\"\"* ]]\n  [[ \"${lines[5]}\" == *\"<testsuite name=\\\"file2.bats\\\" tests=\\\"1\\\" failures=\\\"0\\\" errors=\\\"0\\\" skipped=\\\"0\\\"\"* ]]\n",
                      "markdown": "`  reentrant_run bats --report-formatter junit \"$FIXTURE_ROOT/suite/\"\n  echo \"$output\"\n  [[ -e \"report.xml\" ]]\n  run cat \"report.xml\"\n  echo \"$output\"\n  [[ \"${lines[2]}\" == *\"<testsuite name=\\\"file1.bats\\\" tests=\\\"1\\\" failures=\\\"0\\\" errors=\\\"0\\\" skipped=\\\"0\\\"\"* ]]\n  [[ \"${lines[5]}\" == *\"<testsuite name=\\\"file2.bats\\\" tests=\\\"1\\\" failures=\\\"0\\\" errors=\\\"0\\\" skipped=\\\"0\\\"\"* ]]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/junit-formatter.bats"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 3,
                  "endLine": 44,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    TEST_FILE_NAME=\"xml-escape-\\\"<>'&.bats\"\n    ESCAPED_TEST_FILE_NAME=\"xml-escape-&quot;&lt;&gt;&#39;&amp;.bats\"\n    TEST_FILE_PATH=\"$BATS_TEST_TMPDIR/$TEST_FILE_NAME\"\n    cp \"$FIXTURE_ROOT/xml-escape.bats\" \"$TEST_FILE_PATH\"\n    ;;\n  *)\n    # use the filename without special chars\n",
                    "rendered": {
                      "text": "    TEST_FILE_NAME=\"xml-escape-\\\"<>'&.bats\"\n    ESCAPED_TEST_FILE_NAME=\"xml-escape-&quot;&lt;&gt;&#39;&amp;.bats\"\n    TEST_FILE_PATH=\"$BATS_TEST_TMPDIR/$TEST_FILE_NAME\"\n    cp \"$FIXTURE_ROOT/xml-escape.bats\" \"$TEST_FILE_PATH\"\n    ;;\n  *)\n    # use the filename without special chars\n",
                      "markdown": "`    TEST_FILE_NAME=\"xml-escape-\\\"<>'&.bats\"\n    ESCAPED_TEST_FILE_NAME=\"xml-escape-&quot;&lt;&gt;&#39;&amp;.bats\"\n    TEST_FILE_PATH=\"$BATS_TEST_TMPDIR/$TEST_FILE_NAME\"\n    cp \"$FIXTURE_ROOT/xml-escape.bats\" \"$TEST_FILE_PATH\"\n    ;;\n  *)\n    # use the filename without special chars\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/warnings/BW02.rst"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 15,
                  "endLine": 28,
                  "snippet": {
                    "text": "The call to `bats_require_minimum_version` can be put anywhere before the warning generating command, even in `setup`, `setup_file`, or even outside any function.\nThis can be used to give fine control over the version dependencies:\n\n.. code-block:: bash\n\n    @test test {\n        bats_require_minimum_version 1.5.0\n        # pre 1.5.0 the flag --separate-stderr would be interpreted as command to run\n",
                    "rendered": {
                      "text": "The call to `bats_require_minimum_version` can be put anywhere before the warning generating command, even in `setup`, `setup_file`, or even outside any function.\nThis can be used to give fine control over the version dependencies:\n\n.. code-block:: bash\n\n    @test test {\n        bats_require_minimum_version 1.5.0\n        # pre 1.5.0 the flag --separate-stderr would be interpreted as command to run\n",
                      "markdown": "`The call to `bats_require_minimum_version` can be put anywhere before the warning generating command, even in `setup`, `setup_file`, or even outside any function.\nThis can be used to give fine control over the version dependencies:\n\n.. code-block:: bash\n\n    @test test {\n        bats_require_minimum_version 1.5.0\n        # pre 1.5.0 the flag --separate-stderr would be interpreted as command to run\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/warnings/BW02.rst"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 29,
                  "endLine": 25,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n\nThe call to `bats_require_minimum_version` can be put anywhere before the warning generating command, even in `setup`, `setup_file`, or even outside any function.\nThis can be used to give fine control over the version dependencies:\n\n.. code-block:: bash\n\n",
                    "rendered": {
                      "text": "\n\nThe call to `bats_require_minimum_version` can be put anywhere before the warning generating command, even in `setup`, `setup_file`, or even outside any function.\nThis can be used to give fine control over the version dependencies:\n\n.. code-block:: bash\n\n",
                      "markdown": "`\n\nThe call to `bats_require_minimum_version` can be put anywhere before the warning generating command, even in `setup`, `setup_file`, or even outside any function.\nThis can be used to give fine control over the version dependencies:\n\n.. code-block:: bash\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/warnings/BW02.rst"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 15,
                  "endLine": 15,
                  "snippet": {
                    "text": "When you encounter this warning, you can simply guard your code with `bats_require_minimum_version <version>` as the message says.\nFor example, consider the following code:\n\n.. code-block:: bash\n\n    @test test {\n        bats_require_minimum_version 1.5.0\n        # pre 1.5.0 the flag --separate-stderr would be interpreted as command to run\n",
                    "rendered": {
                      "text": "When you encounter this warning, you can simply guard your code with `bats_require_minimum_version <version>` as the message says.\nFor example, consider the following code:\n\n.. code-block:: bash\n\n    @test test {\n        bats_require_minimum_version 1.5.0\n        # pre 1.5.0 the flag --separate-stderr would be interpreted as command to run\n",
                      "markdown": "`When you encounter this warning, you can simply guard your code with `bats_require_minimum_version <version>` as the message says.\nFor example, consider the following code:\n\n.. code-block:: bash\n\n    @test test {\n        bats_require_minimum_version 1.5.0\n        # pre 1.5.0 the flag --separate-stderr would be interpreted as command to run\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/warnings/BW02.rst"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 24,
                  "endLine": 1,
                  "endColumn": 28,
                  "snippet": {
                    "text": "BW02: <feature> requires at least BATS_VERSION=<version>. Use `bats_require_minimum_version <version>` to fix this message.\n===========================================================================================================================\n\nUsing a feature that is only available starting with a certain version can be a problem when your tests also run on older versions of Bats.\n",
                    "rendered": {
                      "text": "BW02: <feature> requires at least BATS_VERSION=<version>. Use `bats_require_minimum_version <version>` to fix this message.\n===========================================================================================================================\n\nUsing a feature that is only available starting with a certain version can be a problem when your tests also run on older versions of Bats.\n",
                      "markdown": "`BW02: <feature> requires at least BATS_VERSION=<version>. Use `bats_require_minimum_version <version>` to fix this message.\n===========================================================================================================================\n\nUsing a feature that is only available starting with a certain version can be a problem when your tests also run on older versions of Bats.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/warnings/BW02.rst"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 15,
                  "endLine": 28,
                  "snippet": {
                    "text": "The call to `bats_require_minimum_version` can be put anywhere before the warning generating command, even in `setup`, `setup_file`, or even outside any function.\nThis can be used to give fine control over the version dependencies:\n\n.. code-block:: bash\n\n    @test test {\n        bats_require_minimum_version 1.5.0\n        # pre 1.5.0 the flag --separate-stderr would be interpreted as command to run\n",
                    "rendered": {
                      "text": "The call to `bats_require_minimum_version` can be put anywhere before the warning generating command, even in `setup`, `setup_file`, or even outside any function.\nThis can be used to give fine control over the version dependencies:\n\n.. code-block:: bash\n\n    @test test {\n        bats_require_minimum_version 1.5.0\n        # pre 1.5.0 the flag --separate-stderr would be interpreted as command to run\n",
                      "markdown": "`The call to `bats_require_minimum_version` can be put anywhere before the warning generating command, even in `setup`, `setup_file`, or even outside any function.\nThis can be used to give fine control over the version dependencies:\n\n.. code-block:: bash\n\n    @test test {\n        bats_require_minimum_version 1.5.0\n        # pre 1.5.0 the flag --separate-stderr would be interpreted as command to run\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/warnings/BW02.rst"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 15,
                  "endLine": 15,
                  "snippet": {
                    "text": "When you encounter this warning, you can simply guard your code with `bats_require_minimum_version <version>` as the message says.\nFor example, consider the following code:\n\n.. code-block:: bash\n\n    @test test {\n        bats_require_minimum_version 1.5.0\n        # pre 1.5.0 the flag --separate-stderr would be interpreted as command to run\n",
                    "rendered": {
                      "text": "When you encounter this warning, you can simply guard your code with `bats_require_minimum_version <version>` as the message says.\nFor example, consider the following code:\n\n.. code-block:: bash\n\n    @test test {\n        bats_require_minimum_version 1.5.0\n        # pre 1.5.0 the flag --separate-stderr would be interpreted as command to run\n",
                      "markdown": "`When you encounter this warning, you can simply guard your code with `bats_require_minimum_version <version>` as the message says.\nFor example, consider the following code:\n\n.. code-block:: bash\n\n    @test test {\n        bats_require_minimum_version 1.5.0\n        # pre 1.5.0 the flag --separate-stderr would be interpreted as command to run\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/warnings/BW01.rst"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 19,
                  "endLine": 13,
                  "endColumn": 23,
                  "snippet": {
                    "text": "If your command should actually return code 127, then you can simply use `run -127 <your command>` to state your intent and the message will go away.\n\nIf your command should not return 127, you should fix the problem with the command.\nTake a careful look at the command string in the warning message, to see if it contains code that you did not intend to run.\n\nIf your command should sometimes return 127, but never 0, you can use `run ! <your command>`.\n\n",
                    "rendered": {
                      "text": "If your command should actually return code 127, then you can simply use `run -127 <your command>` to state your intent and the message will go away.\n\nIf your command should not return 127, you should fix the problem with the command.\nTake a careful look at the command string in the warning message, to see if it contains code that you did not intend to run.\n\nIf your command should sometimes return 127, but never 0, you can use `run ! <your command>`.\n\n",
                      "markdown": "`If your command should actually return code 127, then you can simply use `run -127 <your command>` to state your intent and the message will go away.\n\nIf your command should not return 127, you should fix the problem with the command.\nTake a careful look at the command string in the warning message, to see if it contains code that you did not intend to run.\n\nIf your command should sometimes return 127, but never 0, you can use `run ! <your command>`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/support-matrix.rst"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 20,
                  "endLine": 23,
                  "endColumn": 26,
                  "snippet": {
                    "text": " * macOS: 11 (CI), 12 (CI)\n * Windows: Server 2019 (CI), 10 (manual)\n \n   * Git for Windows Bash (MSYS2 based)\n   * Windows Subsystem for Linux\n   * MSYS2\n   * Cygwin\n",
                    "rendered": {
                      "text": " * macOS: 11 (CI), 12 (CI)\n * Windows: Server 2019 (CI), 10 (manual)\n \n   * Git for Windows Bash (MSYS2 based)\n   * Windows Subsystem for Linux\n   * MSYS2\n   * Cygwin\n",
                      "markdown": "` * macOS: 11 (CI), 12 (CI)\n * Windows: Server 2019 (CI), 10 (manual)\n \n   * Git for Windows Bash (MSYS2 based)\n   * Windows Subsystem for Linux\n   * MSYS2\n   * Cygwin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/support-matrix.rst"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 26,
                  "endLine": 7,
                  "endColumn": 32,
                  "snippet": {
                    "text": "Supported Bash versions\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following is a list of Bash versions that are currently supported by Bats and verified through automated tests:\n\n  * 3.2.57(1) (macOS's highest bundled version)\n  * 4.0, 4.1, 4.2, 4.3, 4.4\n",
                    "rendered": {
                      "text": "Supported Bash versions\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following is a list of Bash versions that are currently supported by Bats and verified through automated tests:\n\n  * 3.2.57(1) (macOS's highest bundled version)\n  * 4.0, 4.1, 4.2, 4.3, 4.4\n",
                      "markdown": "`Supported Bash versions\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following is a list of Bash versions that are currently supported by Bats and verified through automated tests:\n\n  * 3.2.57(1) (macOS's highest bundled version)\n  * 4.0, 4.1, 4.2, 4.3, 4.4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/support-matrix.rst"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 9,
                  "endLine": 4,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Support Matrix\n==============\n\nSupported Bash versions\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following is a list of Bash versions that are currently supported by Bats and verified through automated tests:\n",
                    "rendered": {
                      "text": "Support Matrix\n==============\n\nSupported Bash versions\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following is a list of Bash versions that are currently supported by Bats and verified through automated tests:\n",
                      "markdown": "`Support Matrix\n==============\n\nSupported Bash versions\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following is a list of Bash versions that are currently supported by Bats and verified through automated tests:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/support-matrix.rst"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 20,
                  "endLine": 23,
                  "endColumn": 26,
                  "snippet": {
                    "text": " * macOS: 11 (CI), 12 (CI)\n * Windows: Server 2019 (CI), 10 (manual)\n \n   * Git for Windows Bash (MSYS2 based)\n   * Windows Subsystem for Linux\n   * MSYS2\n   * Cygwin\n",
                    "rendered": {
                      "text": " * macOS: 11 (CI), 12 (CI)\n * Windows: Server 2019 (CI), 10 (manual)\n \n   * Git for Windows Bash (MSYS2 based)\n   * Windows Subsystem for Linux\n   * MSYS2\n   * Cygwin\n",
                      "markdown": "` * macOS: 11 (CI), 12 (CI)\n * Windows: Server 2019 (CI), 10 (manual)\n \n   * Git for Windows Bash (MSYS2 based)\n   * Windows Subsystem for Linux\n   * MSYS2\n   * Cygwin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/support-matrix.rst"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 4,
                  "endLine": 23,
                  "endColumn": 9,
                  "snippet": {
                    "text": " * macOS: 11 (CI), 12 (CI)\n * Windows: Server 2019 (CI), 10 (manual)\n \n   * Git for Windows Bash (MSYS2 based)\n   * Windows Subsystem for Linux\n   * MSYS2\n   * Cygwin\n",
                    "rendered": {
                      "text": " * macOS: 11 (CI), 12 (CI)\n * Windows: Server 2019 (CI), 10 (manual)\n \n   * Git for Windows Bash (MSYS2 based)\n   * Windows Subsystem for Linux\n   * MSYS2\n   * Cygwin\n",
                      "markdown": "` * macOS: 11 (CI), 12 (CI)\n * Windows: Server 2019 (CI), 10 (manual)\n \n   * Git for Windows Bash (MSYS2 based)\n   * Windows Subsystem for Linux\n   * MSYS2\n   * Cygwin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/support-matrix.rst"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 26,
                  "endLine": 7,
                  "endColumn": 32,
                  "snippet": {
                    "text": "Supported Bash versions\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following is a list of Bash versions that are currently supported by Bats and verified through automated tests:\n\n  * 3.2.57(1) (macOS's highest bundled version)\n  * 4.0, 4.1, 4.2, 4.3, 4.4\n",
                    "rendered": {
                      "text": "Supported Bash versions\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following is a list of Bash versions that are currently supported by Bats and verified through automated tests:\n\n  * 3.2.57(1) (macOS's highest bundled version)\n  * 4.0, 4.1, 4.2, 4.3, 4.4\n",
                      "markdown": "`Supported Bash versions\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following is a list of Bash versions that are currently supported by Bats and verified through automated tests:\n\n  * 3.2.57(1) (macOS's highest bundled version)\n  * 4.0, 4.1, 4.2, 4.3, 4.4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/support-matrix.rst"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 9,
                  "endLine": 4,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Support Matrix\n==============\n\nSupported Bash versions\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following is a list of Bash versions that are currently supported by Bats and verified through automated tests:\n",
                    "rendered": {
                      "text": "Support Matrix\n==============\n\nSupported Bash versions\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following is a list of Bash versions that are currently supported by Bats and verified through automated tests:\n",
                      "markdown": "`Support Matrix\n==============\n\nSupported Bash versions\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThe following is a list of Bash versions that are currently supported by Bats and verified through automated tests:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/index.rst"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 108,
                  "endLine": 4,
                  "endColumn": 114,
                  "snippet": {
                    "text": "Welcome to bats-core's documentation!\n=====================================\n\nBats (Bash Automated Testing System) is a `TAP <https://testanything.org/>`_-compliant testing framework for Bash 3.2 or above. It provides a simple way to verify that the UNIX programs you write behave as expected.\n\nBats is most useful when testing software written in Bash, but you can use it to test any UNIX program.\n\n",
                    "rendered": {
                      "text": "Welcome to bats-core's documentation!\n=====================================\n\nBats (Bash Automated Testing System) is a `TAP <https://testanything.org/>`_-compliant testing framework for Bash 3.2 or above. It provides a simple way to verify that the UNIX programs you write behave as expected.\n\nBats is most useful when testing software written in Bash, but you can use it to test any UNIX program.\n\n",
                      "markdown": "`Welcome to bats-core's documentation!\n=====================================\n\nBats (Bash Automated Testing System) is a `TAP <https://testanything.org/>`_-compliant testing framework for Bash 3.2 or above. It provides a simple way to verify that the UNIX programs you write behave as expected.\n\nBats is most useful when testing software written in Bash, but you can use it to test any UNIX program.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/index.rst"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 108,
                  "endLine": 4,
                  "endColumn": 114,
                  "snippet": {
                    "text": "Welcome to bats-core's documentation!\n=====================================\n\nBats (Bash Automated Testing System) is a `TAP <https://testanything.org/>`_-compliant testing framework for Bash 3.2 or above. It provides a simple way to verify that the UNIX programs you write behave as expected.\n\nBats is most useful when testing software written in Bash, but you can use it to test any UNIX program.\n\n",
                    "rendered": {
                      "text": "Welcome to bats-core's documentation!\n=====================================\n\nBats (Bash Automated Testing System) is a `TAP <https://testanything.org/>`_-compliant testing framework for Bash 3.2 or above. It provides a simple way to verify that the UNIX programs you write behave as expected.\n\nBats is most useful when testing software written in Bash, but you can use it to test any UNIX program.\n\n",
                      "markdown": "`Welcome to bats-core's documentation!\n=====================================\n\nBats (Bash Automated Testing System) is a `TAP <https://testanything.org/>`_-compliant testing framework for Bash 3.2 or above. It provides a simple way to verify that the UNIX programs you write behave as expected.\n\nBats is most useful when testing software written in Bash, but you can use it to test any UNIX program.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 87,
                  "endLine": 155,
                  "endColumn": 93,
                  "snippet": {
                    "text": "------------------------------------------\n\nDue to their custom syntax (`@test`), `.bats` files are not standard bash. This prevents most tools from working with bats.\nHowever, there is an alternative syntax `function_name { # @test` to declare tests in a bash compliant manner.\n\n- shellcheck support since version 0.7\n- shfmt support since version 3.2.0 (using `-ln bats`)\n",
                    "rendered": {
                      "text": "------------------------------------------\n\nDue to their custom syntax (`@test`), `.bats` files are not standard bash. This prevents most tools from working with bats.\nHowever, there is an alternative syntax `function_name { # @test` to declare tests in a bash compliant manner.\n\n- shellcheck support since version 0.7\n- shfmt support since version 3.2.0 (using `-ln bats`)\n",
                      "markdown": "`------------------------------------------\n\nDue to their custom syntax (`@test`), `.bats` files are not standard bash. This prevents most tools from working with bats.\nHowever, there is an alternative syntax `function_name { # @test` to declare tests in a bash compliant manner.\n\n- shellcheck support since version 0.7\n- shfmt support since version 3.2.0 (using `-ln bats`)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 15,
                  "endLine": 136,
                  "snippet": {
                    "text": "\nNow, you should be able to use the functions from these helpers inside your tests, e.g.:\n\n.. code-block:: bash\n\n    @test \"test\" {\n        run echo test\n        assert_output \"test\"\n",
                    "rendered": {
                      "text": "\nNow, you should be able to use the functions from these helpers inside your tests, e.g.:\n\n.. code-block:: bash\n\n    @test \"test\" {\n        run echo test\n        assert_output \"test\"\n",
                      "markdown": "`\nNow, you should be able to use the functions from these helpers inside your tests, e.g.:\n\n.. code-block:: bash\n\n    @test \"test\" {\n        run echo test\n        assert_output \"test\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 15,
                  "endLine": 127,
                  "snippet": {
                    "text": "\nNext, you should load those helper libraries:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/bats-support/load' # this is required by bats-assert!\n        load 'test_helper/bats-assert/load'\n",
                    "rendered": {
                      "text": "\nNext, you should load those helper libraries:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/bats-support/load' # this is required by bats-assert!\n        load 'test_helper/bats-assert/load'\n",
                      "markdown": "`\nNext, you should load those helper libraries:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/bats-support/load' # this is required by bats-assert!\n        load 'test_helper/bats-assert/load'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 114,
                  "endColumn": 3,
                  "snippet": {
                    "text": "------------------------------------------------\n\nThis is a short reproduction of https://github.com/ztombol/bats-docs.\n\nAt first, you should make sure the library is installed. This is usually done in the `test_helper/` folders alongside the `.bats` files, giving you a filesystem layout like this:\n\n.. code-block::\n\n",
                    "rendered": {
                      "text": "------------------------------------------------\n\nThis is a short reproduction of https://github.com/ztombol/bats-docs.\n\nAt first, you should make sure the library is installed. This is usually done in the `test_helper/` folders alongside the `.bats` files, giving you a filesystem layout like this:\n\n.. code-block::\n\n",
                      "markdown": "`------------------------------------------------\n\nThis is a short reproduction of https://github.com/ztombol/bats-docs.\n\nAt first, you should make sure the library is installed. This is usually done in the `test_helper/` folders alongside the `.bats` files, giving you a filesystem layout like this:\n\n.. code-block::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 15,
                  "endLine": 91,
                  "snippet": {
                    "text": "\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n    @test test {\n        run echo test failed\n        assert_output \"test\"\n",
                    "rendered": {
                      "text": "\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n    @test test {\n        run echo test failed\n        assert_output \"test\"\n",
                      "markdown": "`\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n    @test test {\n        run echo test failed\n        assert_output \"test\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 107,
                  "endLine": 88,
                  "endColumn": 113,
                  "snippet": {
                    "text": "How can I debug a failing test?\n-------------------------------\n\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n",
                    "rendered": {
                      "text": "How can I debug a failing test?\n-------------------------------\n\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n",
                      "markdown": "`How can I debug a failing test?\n-------------------------------\n\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 16,
                  "endLine": 88,
                  "endColumn": 22,
                  "snippet": {
                    "text": "How can I debug a failing test?\n-------------------------------\n\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n",
                    "rendered": {
                      "text": "How can I debug a failing test?\n-------------------------------\n\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n",
                      "markdown": "`How can I debug a failing test?\n-------------------------------\n\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 15,
                  "endLine": 71,
                  "snippet": {
                    "text": "you can simply omit your file. When running a folder like\n\n\n.. code-block:: bash\n\n    $ bats test/\n\nyou can prevent test files from being picked up by changing their extension to something other than `.bats`.\n",
                    "rendered": {
                      "text": "you can simply omit your file. When running a folder like\n\n\n.. code-block:: bash\n\n    $ bats test/\n\nyou can prevent test files from being picked up by changing their extension to something other than `.bats`.\n",
                      "markdown": "`you can simply omit your file. When running a folder like\n\n\n.. code-block:: bash\n\n    $ bats test/\n\nyou can prevent test files from being picked up by changing their extension to something other than `.bats`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 15,
                  "endLine": 64,
                  "snippet": {
                    "text": "\nIf you run your test suite by naming individual files like:\n\n.. code-block:: bash\n\n    $ bats test/a.bats test/b.bats ...\n\nyou can simply omit your file. When running a folder like\n",
                    "rendered": {
                      "text": "\nIf you run your test suite by naming individual files like:\n\n.. code-block:: bash\n\n    $ bats test/a.bats test/b.bats ...\n\nyou can simply omit your file. When running a folder like\n",
                      "markdown": "`\nIf you run your test suite by naming individual files like:\n\n.. code-block:: bash\n\n    $ bats test/a.bats test/b.bats ...\n\nyou can simply omit your file. When running a folder like\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 15,
                  "endLine": 53,
                  "snippet": {
                    "text": "\nbecomes \n\n.. code-block:: bash\n\n    disabled() { # @test \"Testname\" {\n\nFor multiple tests or all tests of a file, this becomes tedious, so read on.\n",
                    "rendered": {
                      "text": "\nbecomes \n\n.. code-block:: bash\n\n    disabled() { # @test \"Testname\" {\n\nFor multiple tests or all tests of a file, this becomes tedious, so read on.\n",
                      "markdown": "`\nbecomes \n\n.. code-block:: bash\n\n    disabled() { # @test \"Testname\" {\n\nFor multiple tests or all tests of a file, this becomes tedious, so read on.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 15,
                  "endLine": 47,
                  "snippet": {
                    "text": "\nor comment them out, e.g.:\n\n.. code-block:: bash\n\n    @test \"Testname\" {\n\nbecomes \n",
                    "rendered": {
                      "text": "\nor comment them out, e.g.:\n\n.. code-block:: bash\n\n    @test \"Testname\" {\n\nbecomes \n",
                      "markdown": "`\nor comment them out, e.g.:\n\n.. code-block:: bash\n\n    @test \"Testname\" {\n\nbecomes \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 15,
                  "endLine": 38,
                  "snippet": {
                    "text": "\nbecomes \n\n.. code-block:: bash\n\n    @test \"Testname\" {\n        skip 'Optional skip message'\n        # yadayada\n",
                    "rendered": {
                      "text": "\nbecomes \n\n.. code-block:: bash\n\n    @test \"Testname\" {\n        skip 'Optional skip message'\n        # yadayada\n",
                      "markdown": "`\nbecomes \n\n.. code-block:: bash\n\n    @test \"Testname\" {\n        skip 'Optional skip message'\n        # yadayada\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 15,
                  "endLine": 30,
                  "snippet": {
                    "text": "\nIf you want to exclude only few tests from a run, you can either `skip` them:\n\n.. code-block:: bash\n\n    @test \"Testname\" {\n        # yadayada\n    }\n",
                    "rendered": {
                      "text": "\nIf you want to exclude only few tests from a run, you can either `skip` them:\n\n.. code-block:: bash\n\n    @test \"Testname\" {\n        # yadayada\n    }\n",
                      "markdown": "`\nIf you want to exclude only few tests from a run, you can either `skip` them:\n\n.. code-block:: bash\n\n    @test \"Testname\" {\n        # yadayada\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 87,
                  "endLine": 155,
                  "endColumn": 93,
                  "snippet": {
                    "text": "------------------------------------------\n\nDue to their custom syntax (`@test`), `.bats` files are not standard bash. This prevents most tools from working with bats.\nHowever, there is an alternative syntax `function_name { # @test` to declare tests in a bash compliant manner.\n\n- shellcheck support since version 0.7\n- shfmt support since version 3.2.0 (using `-ln bats`)\n",
                    "rendered": {
                      "text": "------------------------------------------\n\nDue to their custom syntax (`@test`), `.bats` files are not standard bash. This prevents most tools from working with bats.\nHowever, there is an alternative syntax `function_name { # @test` to declare tests in a bash compliant manner.\n\n- shellcheck support since version 0.7\n- shfmt support since version 3.2.0 (using `-ln bats`)\n",
                      "markdown": "`------------------------------------------\n\nDue to their custom syntax (`@test`), `.bats` files are not standard bash. This prevents most tools from working with bats.\nHowever, there is an alternative syntax `function_name { # @test` to declare tests in a bash compliant manner.\n\n- shellcheck support since version 0.7\n- shfmt support since version 3.2.0 (using `-ln bats`)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 17,
                  "endLine": 145,
                  "endColumn": 26,
                  "snippet": {
                    "text": "Note that you obviously need to load the library before using it.\nIf you need the library inside `setup_file` or `teardown_file` you need to load it in `setup_file`.\n\nHow to set a test timeout in bats?\n----------------------------------\n\nSet the variable `$BATS_TEST_TIMEOUT` before `setup()` starts. This means you can set it either on the command line,\n",
                    "rendered": {
                      "text": "Note that you obviously need to load the library before using it.\nIf you need the library inside `setup_file` or `teardown_file` you need to load it in `setup_file`.\n\nHow to set a test timeout in bats?\n----------------------------------\n\nSet the variable `$BATS_TEST_TIMEOUT` before `setup()` starts. This means you can set it either on the command line,\n",
                      "markdown": "`Note that you obviously need to load the library before using it.\nIf you need the library inside `setup_file` or `teardown_file` you need to load it in `setup_file`.\n\nHow to set a test timeout in bats?\n----------------------------------\n\nSet the variable `$BATS_TEST_TIMEOUT` before `setup()` starts. This means you can set it either on the command line,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 15,
                  "endLine": 136,
                  "snippet": {
                    "text": "\nNow, you should be able to use the functions from these helpers inside your tests, e.g.:\n\n.. code-block:: bash\n\n    @test \"test\" {\n        run echo test\n        assert_output \"test\"\n",
                    "rendered": {
                      "text": "\nNow, you should be able to use the functions from these helpers inside your tests, e.g.:\n\n.. code-block:: bash\n\n    @test \"test\" {\n        run echo test\n        assert_output \"test\"\n",
                      "markdown": "`\nNow, you should be able to use the functions from these helpers inside your tests, e.g.:\n\n.. code-block:: bash\n\n    @test \"test\" {\n        run echo test\n        assert_output \"test\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 15,
                  "endLine": 127,
                  "snippet": {
                    "text": "\nNext, you should load those helper libraries:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/bats-support/load' # this is required by bats-assert!\n        load 'test_helper/bats-assert/load'\n",
                    "rendered": {
                      "text": "\nNext, you should load those helper libraries:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/bats-support/load' # this is required by bats-assert!\n        load 'test_helper/bats-assert/load'\n",
                      "markdown": "`\nNext, you should load those helper libraries:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/bats-support/load' # this is required by bats-assert!\n        load 'test_helper/bats-assert/load'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 15,
                  "endLine": 91,
                  "snippet": {
                    "text": "\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n    @test test {\n        run echo test failed\n        assert_output \"test\"\n",
                    "rendered": {
                      "text": "\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n    @test test {\n        run echo test failed\n        assert_output \"test\"\n",
                      "markdown": "`\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n    @test test {\n        run echo test failed\n        assert_output \"test\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 107,
                  "endLine": 88,
                  "endColumn": 113,
                  "snippet": {
                    "text": "How can I debug a failing test?\n-------------------------------\n\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n",
                    "rendered": {
                      "text": "How can I debug a failing test?\n-------------------------------\n\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n",
                      "markdown": "`How can I debug a failing test?\n-------------------------------\n\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 16,
                  "endLine": 88,
                  "endColumn": 22,
                  "snippet": {
                    "text": "How can I debug a failing test?\n-------------------------------\n\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n",
                    "rendered": {
                      "text": "How can I debug a failing test?\n-------------------------------\n\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n",
                      "markdown": "`How can I debug a failing test?\n-------------------------------\n\nShort of using a bash debugger you should make sure to use appropriate asserts for your task instead of raw bash comparisons, e.g.:\n\n.. code-block:: bash\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 15,
                  "endLine": 71,
                  "snippet": {
                    "text": "you can simply omit your file. When running a folder like\n\n\n.. code-block:: bash\n\n    $ bats test/\n\nyou can prevent test files from being picked up by changing their extension to something other than `.bats`.\n",
                    "rendered": {
                      "text": "you can simply omit your file. When running a folder like\n\n\n.. code-block:: bash\n\n    $ bats test/\n\nyou can prevent test files from being picked up by changing their extension to something other than `.bats`.\n",
                      "markdown": "`you can simply omit your file. When running a folder like\n\n\n.. code-block:: bash\n\n    $ bats test/\n\nyou can prevent test files from being picked up by changing their extension to something other than `.bats`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 15,
                  "endLine": 64,
                  "snippet": {
                    "text": "\nIf you run your test suite by naming individual files like:\n\n.. code-block:: bash\n\n    $ bats test/a.bats test/b.bats ...\n\nyou can simply omit your file. When running a folder like\n",
                    "rendered": {
                      "text": "\nIf you run your test suite by naming individual files like:\n\n.. code-block:: bash\n\n    $ bats test/a.bats test/b.bats ...\n\nyou can simply omit your file. When running a folder like\n",
                      "markdown": "`\nIf you run your test suite by naming individual files like:\n\n.. code-block:: bash\n\n    $ bats test/a.bats test/b.bats ...\n\nyou can simply omit your file. When running a folder like\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 15,
                  "endLine": 53,
                  "snippet": {
                    "text": "\nbecomes \n\n.. code-block:: bash\n\n    disabled() { # @test \"Testname\" {\n\nFor multiple tests or all tests of a file, this becomes tedious, so read on.\n",
                    "rendered": {
                      "text": "\nbecomes \n\n.. code-block:: bash\n\n    disabled() { # @test \"Testname\" {\n\nFor multiple tests or all tests of a file, this becomes tedious, so read on.\n",
                      "markdown": "`\nbecomes \n\n.. code-block:: bash\n\n    disabled() { # @test \"Testname\" {\n\nFor multiple tests or all tests of a file, this becomes tedious, so read on.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 15,
                  "endLine": 47,
                  "snippet": {
                    "text": "\nor comment them out, e.g.:\n\n.. code-block:: bash\n\n    @test \"Testname\" {\n\nbecomes \n",
                    "rendered": {
                      "text": "\nor comment them out, e.g.:\n\n.. code-block:: bash\n\n    @test \"Testname\" {\n\nbecomes \n",
                      "markdown": "`\nor comment them out, e.g.:\n\n.. code-block:: bash\n\n    @test \"Testname\" {\n\nbecomes \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 15,
                  "endLine": 38,
                  "snippet": {
                    "text": "\nbecomes \n\n.. code-block:: bash\n\n    @test \"Testname\" {\n        skip 'Optional skip message'\n        # yadayada\n",
                    "rendered": {
                      "text": "\nbecomes \n\n.. code-block:: bash\n\n    @test \"Testname\" {\n        skip 'Optional skip message'\n        # yadayada\n",
                      "markdown": "`\nbecomes \n\n.. code-block:: bash\n\n    @test \"Testname\" {\n        skip 'Optional skip message'\n        # yadayada\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/faq.rst"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 15,
                  "endLine": 30,
                  "snippet": {
                    "text": "\nIf you want to exclude only few tests from a run, you can either `skip` them:\n\n.. code-block:: bash\n\n    @test \"Testname\" {\n        # yadayada\n    }\n",
                    "rendered": {
                      "text": "\nIf you want to exclude only few tests from a run, you can either `skip` them:\n\n.. code-block:: bash\n\n    @test \"Testname\" {\n        # yadayada\n    }\n",
                      "markdown": "`\nIf you want to exclude only few tests from a run, you can either `skip` them:\n\n.. code-block:: bash\n\n    @test \"Testname\" {\n        # yadayada\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 15,
                  "endLine": 650,
                  "snippet": {
                    "text": "\nOur `project.sh` should also get the new command:\n\n.. code-block:: bash\n\n    stop-echo-server)\n        kill \"$(< \"/tmp/project-echo-server.pid\")\"\n        rm /tmp/project-echo-server.pid\n",
                    "rendered": {
                      "text": "\nOur `project.sh` should also get the new command:\n\n.. code-block:: bash\n\n    stop-echo-server)\n        kill \"$(< \"/tmp/project-echo-server.pid\")\"\n        rm /tmp/project-echo-server.pid\n",
                      "markdown": "`\nOur `project.sh` should also get the new command:\n\n.. code-block:: bash\n\n    stop-echo-server)\n        kill \"$(< \"/tmp/project-echo-server.pid\")\"\n        rm /tmp/project-echo-server.pid\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 641,
                  "startColumn": 15,
                  "endLine": 642,
                  "snippet": {
                    "text": "Obviously, we did not turn off our server after testing.\nThis is a task for `teardown_file` in `server.bats`:\n\n.. code-block:: bash\n\n    teardown_file() {\n        project.sh stop-echo-server\n    }\n",
                    "rendered": {
                      "text": "Obviously, we did not turn off our server after testing.\nThis is a task for `teardown_file` in `server.bats`:\n\n.. code-block:: bash\n\n    teardown_file() {\n        project.sh stop-echo-server\n    }\n",
                      "markdown": "`Obviously, we did not turn off our server after testing.\nThis is a task for `teardown_file` in `server.bats`:\n\n.. code-block:: bash\n\n    teardown_file() {\n        project.sh stop-echo-server\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 598,
                  "startColumn": 15,
                  "endLine": 599,
                  "snippet": {
                    "text": "Now that we got our red test, we need to get it green again.\nOur new `project.sh` now ends with:\n\n.. code-block:: bash\n\n    case $1 in\n        start-echo-server)\n            echo \"Starting echo server\"\n",
                    "rendered": {
                      "text": "Now that we got our red test, we need to get it green again.\nOur new `project.sh` now ends with:\n\n.. code-block:: bash\n\n    case $1 in\n        start-echo-server)\n            echo \"Starting echo server\"\n",
                      "markdown": "`Now that we got our red test, we need to get it green again.\nOur new `project.sh` now ends with:\n\n.. code-block:: bash\n\n    case $1 in\n        start-echo-server)\n            echo \"Starting echo server\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 584,
                  "startColumn": 9,
                  "endLine": 584,
                  "endColumn": 17,
                  "snippet": {
                    "text": "Running this gives us:\n\n..\n    TODO: Update this example with fixed test name reporting from setup_file? (instead of \"✗ \")\n\n.. code-block:: console\n\n",
                    "rendered": {
                      "text": "Running this gives us:\n\n..\n    TODO: Update this example with fixed test name reporting from setup_file? (instead of \"✗ \")\n\n.. code-block:: console\n\n",
                      "markdown": "`Running this gives us:\n\n..\n    TODO: Update this example with fixed test name reporting from setup_file? (instead of \"✗ \")\n\n.. code-block:: console\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 15,
                  "endLine": 566,
                  "snippet": {
                    "text": "\nAs an example, we want to add an echo server capability to our project. First, we add the following `server.bats` to our suite:\n\n.. code-block:: bash\n\n    setup_file() {\n        load 'test_helper/common-setup'\n        _common_setup\n",
                    "rendered": {
                      "text": "\nAs an example, we want to add an echo server capability to our project. First, we add the following `server.bats` to our suite:\n\n.. code-block:: bash\n\n    setup_file() {\n        load 'test_helper/common-setup'\n        _common_setup\n",
                      "markdown": "`\nAs an example, we want to add an echo server capability to our project. First, we add the following `server.bats` to our suite:\n\n.. code-block:: bash\n\n    setup_file() {\n        load 'test_helper/common-setup'\n        _common_setup\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 516,
                  "startColumn": 15,
                  "endLine": 517,
                  "snippet": {
                    "text": "\nwith the following `setup` in `test/test.bats`:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/common-setup'\n        _common_setup\n",
                    "rendered": {
                      "text": "\nwith the following `setup` in `test/test.bats`:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/common-setup'\n        _common_setup\n",
                      "markdown": "`\nwith the following `setup` in `test/test.bats`:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/common-setup'\n        _common_setup\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 501,
                  "startColumn": 18,
                  "endLine": 502,
                  "snippet": {
                    "text": "\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _common_setup() {\n        load 'test_helper/bats-support/load'\n        load 'test_helper/bats-assert/load'\n",
                    "rendered": {
                      "text": "\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _common_setup() {\n        load 'test_helper/bats-support/load'\n        load 'test_helper/bats-assert/load'\n",
                      "markdown": "`\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _common_setup() {\n        load 'test_helper/bats-support/load'\n        load 'test_helper/bats-assert/load'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 15,
                  "endLine": 500,
                  "snippet": {
                    "text": "\nSince the setup function would have duplicated much of the other files', we split that out into the file `test/test_helper/common-setup.bash`:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _common_setup() {\n",
                    "rendered": {
                      "text": "\nSince the setup function would have duplicated much of the other files', we split that out into the file `test/test_helper/common-setup.bash`:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _common_setup() {\n",
                      "markdown": "`\nSince the setup function would have duplicated much of the other files', we split that out into the file `test/test_helper/common-setup.bash`:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _common_setup() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 15,
                  "endLine": 472,
                  "snippet": {
                    "text": "\nThis allows for testing it separately in a new file `test/helper.bats`:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/common-setup'\n        _common_setup\n",
                    "rendered": {
                      "text": "\nThis allows for testing it separately in a new file `test/helper.bats`:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/common-setup'\n        _common_setup\n",
                      "markdown": "`\nThis allows for testing it separately in a new file `test/helper.bats`:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/common-setup'\n        _common_setup\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 18,
                  "endLine": 459,
                  "snippet": {
                    "text": "\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _is_first_run() {\n        local FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n        if [[ ! -e \"$FIRST_RUN_FILE\" ]]; then\n",
                    "rendered": {
                      "text": "\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _is_first_run() {\n        local FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n        if [[ ! -e \"$FIRST_RUN_FILE\" ]]; then\n",
                      "markdown": "`\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _is_first_run() {\n        local FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n        if [[ ! -e \"$FIRST_RUN_FILE\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 15,
                  "endLine": 457,
                  "snippet": {
                    "text": "With a growing project, putting all tests into one file becomes unwieldy.\nFor our example project, we will extract functionality into the additional file `src/helper.sh`:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _is_first_run() {\n",
                    "rendered": {
                      "text": "With a growing project, putting all tests into one file becomes unwieldy.\nFor our example project, we will extract functionality into the additional file `src/helper.sh`:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _is_first_run() {\n",
                      "markdown": "`With a growing project, putting all tests into one file becomes unwieldy.\nFor our example project, we will extract functionality into the additional file `src/helper.sh`:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _is_first_run() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 15,
                  "endLine": 418,
                  "snippet": {
                    "text": "\nIn our example project we rewrite the welcome message test to `skip` instead of doing cleanup:\n\n.. code-block:: bash\n\n    teardown() {\n        : # Look Ma! No cleanup!\n    } \n",
                    "rendered": {
                      "text": "\nIn our example project we rewrite the welcome message test to `skip` instead of doing cleanup:\n\n.. code-block:: bash\n\n    teardown() {\n        : # Look Ma! No cleanup!\n    } \n",
                      "markdown": "`\nIn our example project we rewrite the welcome message test to `skip` instead of doing cleanup:\n\n.. code-block:: bash\n\n    teardown() {\n        : # Look Ma! No cleanup!\n    } \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 15,
                  "endLine": 398,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n.. important::\n\n    A test ends at its first failure. None of the subsequent commands in this test will be executed.\n    The `teardown` function runs after each individual test in a file, regardless of test success or failure.\n    Similarly to `setup`, each `.bats` file can have its own `teardown` function which will be the same for all tests in the file.\n\n",
                    "rendered": {
                      "text": "\n.. important::\n\n    A test ends at its first failure. None of the subsequent commands in this test will be executed.\n    The `teardown` function runs after each individual test in a file, regardless of test success or failure.\n    Similarly to `setup`, each `.bats` file can have its own `teardown` function which will be the same for all tests in the file.\n\n",
                      "markdown": "`\n.. important::\n\n    A test ends at its first failure. None of the subsequent commands in this test will be executed.\n    The `teardown` function runs after each individual test in a file, regardless of test success or failure.\n    Similarly to `setup`, each `.bats` file can have its own `teardown` function which will be the same for all tests in the file.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 15,
                  "endLine": 386,
                  "snippet": {
                    "text": "\nLuckily, bats offers the `teardown` function, which can take care of that, we add the following code to `test/test.bats`:\n\n.. code-block:: bash\n\n    teardown() {\n        rm -f /tmp/bats-tutorial-project-ran\n    }\n",
                    "rendered": {
                      "text": "\nLuckily, bats offers the `teardown` function, which can take care of that, we add the following code to `test/test.bats`:\n\n.. code-block:: bash\n\n    teardown() {\n        rm -f /tmp/bats-tutorial-project-ran\n    }\n",
                      "markdown": "`\nLuckily, bats offers the `teardown` function, which can take care of that, we add the following code to `test/test.bats`:\n\n.. code-block:: bash\n\n    teardown() {\n        rm -f /tmp/bats-tutorial-project-ran\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 18,
                  "endLine": 343,
                  "snippet": {
                    "text": "\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n\n    if [[ ! -e \"$FIRST_RUN_FILE\" ]]; then\n",
                    "rendered": {
                      "text": "\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n\n    if [[ ! -e \"$FIRST_RUN_FILE\" ]]; then\n",
                      "markdown": "`\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n\n    if [[ ! -e \"$FIRST_RUN_FILE\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 15,
                  "endLine": 341,
                  "snippet": {
                    "text": "Now, to get the test green again, we want to store the information that we already ran in the file `/tmp/bats-tutorial-project-ran`,\nso our `src/project.sh` becomes:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n",
                    "rendered": {
                      "text": "Now, to get the test green again, we want to store the information that we already ran in the file `/tmp/bats-tutorial-project-ran`,\nso our `src/project.sh` becomes:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n",
                      "markdown": "`Now, to get the test green again, we want to store the information that we already ran in the file `/tmp/bats-tutorial-project-ran`,\nso our `src/project.sh` becomes:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 15,
                  "endLine": 307,
                  "snippet": {
                    "text": "For example, we now want our project.sh to only show the welcome message on the first invocation.\nSo we change our test to this:\n\n.. code-block:: bash\n\n    @test \"Show welcome message on first invocation\" {\n        run project.sh\n        assert_output --partial 'Welcome to our project!'\n",
                    "rendered": {
                      "text": "For example, we now want our project.sh to only show the welcome message on the first invocation.\nSo we change our test to this:\n\n.. code-block:: bash\n\n    @test \"Show welcome message on first invocation\" {\n        run project.sh\n        assert_output --partial 'Welcome to our project!'\n",
                      "markdown": "`For example, we now want our project.sh to only show the welcome message on the first invocation.\nSo we change our test to this:\n\n.. code-block:: bash\n\n    @test \"Show welcome message on first invocation\" {\n        run project.sh\n        assert_output --partial 'Welcome to our project!'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 27,
                  "endLine": 293,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\nThere are many other asserts and options but this is not the place for all of them.\nSkimming the documentation of `bats-assert <https://github.com/bats-core/bats-assert>`_ will give you a good idea what you can do.\nYou should also have a look at the other helper libraries `here <https://github.com/bats-core>`_ like `bats-file <https://github.com/bats-core/bats-file>`_, \nto avoid reinventing the wheel.\n\n\n",
                    "rendered": {
                      "text": "\nThere are many other asserts and options but this is not the place for all of them.\nSkimming the documentation of `bats-assert <https://github.com/bats-core/bats-assert>`_ will give you a good idea what you can do.\nYou should also have a look at the other helper libraries `here <https://github.com/bats-core>`_ like `bats-file <https://github.com/bats-core/bats-file>`_, \nto avoid reinventing the wheel.\n\n\n",
                      "markdown": "`\nThere are many other asserts and options but this is not the place for all of them.\nSkimming the documentation of `bats-assert <https://github.com/bats-core/bats-assert>`_ will give you a good idea what you can do.\nYou should also have a look at the other helper libraries `here <https://github.com/bats-core>`_ like `bats-file <https://github.com/bats-core/bats-file>`_, \nto avoid reinventing the wheel.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 15,
                  "endLine": 283,
                  "snippet": {
                    "text": "\nOkay, so maybe we should try that:\n\n.. code-block:: bash\n\n    @test \"Check welcome message\" {\n        run project.sh\n        assert_output --partial 'Welcome to our project!'\n",
                    "rendered": {
                      "text": "\nOkay, so maybe we should try that:\n\n.. code-block:: bash\n\n    @test \"Check welcome message\" {\n        run project.sh\n        assert_output --partial 'Welcome to our project!'\n",
                      "markdown": "`\nOkay, so maybe we should try that:\n\n.. code-block:: bash\n\n    @test \"Check welcome message\" {\n        run project.sh\n        assert_output --partial 'Welcome to our project!'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 49,
                  "endLine": 274,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    }\n\nNow our test passes again but having to write a function each time we want only a partial match does not accommodate our laziness.\nIsn't there an app for that? Maybe we should look at the documentation?\n\n    Partial matching can be enabled with the --partial option (-p for short). When used, the assertion fails if the expected substring is not found in $output.\n\n",
                    "rendered": {
                      "text": "    }\n\nNow our test passes again but having to write a function each time we want only a partial match does not accommodate our laziness.\nIsn't there an app for that? Maybe we should look at the documentation?\n\n    Partial matching can be enabled with the --partial option (-p for short). When used, the assertion fails if the expected substring is not found in $output.\n\n",
                      "markdown": "`    }\n\nNow our test passes again but having to write a function each time we want only a partial match does not accommodate our laziness.\nIsn't there an app for that? Maybe we should look at the documentation?\n\n    Partial matching can be enabled with the --partial option (-p for short). When used, the assertion fails if the expected substring is not found in $output.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 15,
                  "endLine": 263,
                  "snippet": {
                    "text": "\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n\n.. code-block:: bash\n\n    get_projectsh_welcome_message() {\n        project.sh  2>&1 | grep Welcome\n    }\n",
                    "rendered": {
                      "text": "\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n\n.. code-block:: bash\n\n    get_projectsh_welcome_message() {\n        project.sh  2>&1 | grep Welcome\n    }\n",
                      "markdown": "`\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n\n.. code-block:: bash\n\n    get_projectsh_welcome_message() {\n        project.sh  2>&1 | grep Welcome\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 38,
                  "endLine": 260,
                  "endColumn": 44,
                  "snippet": {
                    "text": "`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n\n.. code-block:: bash\n\n",
                    "rendered": {
                      "text": "`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n\n.. code-block:: bash\n\n",
                      "markdown": "``run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n\n.. code-block:: bash\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 84,
                  "endLine": 257,
                  "endColumn": 90,
                  "snippet": {
                    "text": "Huh, what is going on? Why does it fail the `run` line again?\n\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n",
                    "rendered": {
                      "text": "Huh, what is going on? Why does it fail the `run` line again?\n\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n",
                      "markdown": "`Huh, what is going on? Why does it fail the `run` line again?\n\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 91,
                  "endLine": 256,
                  "endColumn": 97,
                  "snippet": {
                    "text": "\nHuh, what is going on? Why does it fail the `run` line again?\n\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\n",
                    "rendered": {
                      "text": "\nHuh, what is going on? Why does it fail the `run` line again?\n\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\n",
                      "markdown": "`\nHuh, what is going on? Why does it fail the `run` line again?\n\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 15,
                  "endLine": 240,
                  "snippet": {
                    "text": "For our current test we don't care about any other output or the error message, so we want it gone.\n`grep` is always at our fingertips, so we tape together this ramshackle construct\n\n.. code-block:: bash\n\n    run project.sh 2>&1 | grep Welcome\n\nwhich gives us the following test result:\n",
                    "rendered": {
                      "text": "For our current test we don't care about any other output or the error message, so we want it gone.\n`grep` is always at our fingertips, so we tape together this ramshackle construct\n\n.. code-block:: bash\n\n    run project.sh 2>&1 | grep Welcome\n\nwhich gives us the following test result:\n",
                      "markdown": "`For our current test we don't care about any other output or the error message, so we want it gone.\n`grep` is always at our fingertips, so we tape together this ramshackle construct\n\n.. code-block:: bash\n\n    run project.sh 2>&1 | grep Welcome\n\nwhich gives us the following test result:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 16,
                  "endLine": 237,
                  "endColumn": 20,
                  "snippet": {
                    "text": "`assert_output` is such a consumer, it compares `$output` to the parameter it got and tells us quite succinctly that it did not match in this case.\n\nFor our current test we don't care about any other output or the error message, so we want it gone.\n`grep` is always at our fingertips, so we tape together this ramshackle construct\n\n.. code-block:: bash\n\n",
                    "rendered": {
                      "text": "`assert_output` is such a consumer, it compares `$output` to the parameter it got and tells us quite succinctly that it did not match in this case.\n\nFor our current test we don't care about any other output or the error message, so we want it gone.\n`grep` is always at our fingertips, so we tape together this ramshackle construct\n\n.. code-block:: bash\n\n",
                      "markdown": "``assert_output` is such a consumer, it compares `$output` to the parameter it got and tells us quite succinctly that it did not match in this case.\n\nFor our current test we don't care about any other output or the error message, so we want it gone.\n`grep` is always at our fingertips, so we tape together this ramshackle construct\n\n.. code-block:: bash\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 15,
                  "endLine": 188,
                  "snippet": {
                    "text": "bats-assert gives us some help with this, so we should now load it (and its dependency bats-support),\nso we change `test/test.bats` to\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/bats-support/load'\n        load 'test_helper/bats-assert/load'\n",
                    "rendered": {
                      "text": "bats-assert gives us some help with this, so we should now load it (and its dependency bats-support),\nso we change `test/test.bats` to\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/bats-support/load'\n        load 'test_helper/bats-assert/load'\n",
                      "markdown": "`bats-assert gives us some help with this, so we should now load it (and its dependency bats-support),\nso we change `test/test.bats` to\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/bats-support/load'\n        load 'test_helper/bats-assert/load'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 18,
                  "endLine": 161,
                  "snippet": {
                    "text": "\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    echo \"Welcome to our project!\"\n\n    echo \"NOT IMPLEMENTED!\" >&2\n",
                    "rendered": {
                      "text": "\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    echo \"Welcome to our project!\"\n\n    echo \"NOT IMPLEMENTED!\" >&2\n",
                      "markdown": "`\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    echo \"Welcome to our project!\"\n\n    echo \"NOT IMPLEMENTED!\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 15,
                  "endLine": 159,
                  "snippet": {
                    "text": "Okay, we have a green test but our executable does not do anything useful.\nTo keep things simple, let us start with an error message. Our new `src/project.sh` now reads:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    echo \"Welcome to our project!\"\n",
                    "rendered": {
                      "text": "Okay, we have a green test but our executable does not do anything useful.\nTo keep things simple, let us start with an error message. Our new `src/project.sh` now reads:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    echo \"Welcome to our project!\"\n",
                      "markdown": "`Okay, we have a green test but our executable does not do anything useful.\nTo keep things simple, let us start with an error message. Our new `src/project.sh` now reads:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    echo \"Welcome to our project!\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 15,
                  "endLine": 117,
                  "snippet": {
                    "text": "Since we are lazy people and want to treat our project's files as first class citizens in the executable world, we will also put them on the `$PATH`.\nOur new `test/test.bats` now looks like this:\n\n.. code-block:: bash\n\n    setup() {\n        # get the containing directory of this file\n        # use $BATS_TEST_FILENAME instead of ${BASH_SOURCE[0]} or $0,\n",
                    "rendered": {
                      "text": "Since we are lazy people and want to treat our project's files as first class citizens in the executable world, we will also put them on the `$PATH`.\nOur new `test/test.bats` now looks like this:\n\n.. code-block:: bash\n\n    setup() {\n        # get the containing directory of this file\n        # use $BATS_TEST_FILENAME instead of ${BASH_SOURCE[0]} or $0,\n",
                      "markdown": "`Since we are lazy people and want to treat our project's files as first class citizens in the executable world, we will also put them on the `$PATH`.\nOur new `test/test.bats` now looks like this:\n\n.. code-block:: bash\n\n    setup() {\n        # get the containing directory of this file\n        # use $BATS_TEST_FILENAME instead of ${BASH_SOURCE[0]} or $0,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 15,
                  "endLine": 92,
                  "snippet": {
                    "text": "Oh, we still used the wrong path. No problem, we just need to use the correct path to `project.sh`.\nSince we're still in the same directory as when we started `bats`, we can simply do:\n\n.. code-block:: bash\n\n    @test \"can run our script\" {\n        ./src/project.sh\n    }\n",
                    "rendered": {
                      "text": "Oh, we still used the wrong path. No problem, we just need to use the correct path to `project.sh`.\nSince we're still in the same directory as when we started `bats`, we can simply do:\n\n.. code-block:: bash\n\n    @test \"can run our script\" {\n        ./src/project.sh\n    }\n",
                      "markdown": "`Oh, we still used the wrong path. No problem, we just need to use the correct path to `project.sh`.\nSince we're still in the same directory as when we started `bats`, we can simply do:\n\n.. code-block:: bash\n\n    @test \"can run our script\" {\n        ./src/project.sh\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 15,
                  "endLine": 51,
                  "snippet": {
                    "text": "\nWe start by creating a new test file `test/test.bats`\n\n.. code-block:: bash\n\n    @test \"can run our script\" {\n        ./project.sh\n    }\n",
                    "rendered": {
                      "text": "\nWe start by creating a new test file `test/test.bats`\n\n.. code-block:: bash\n\n    @test \"can run our script\" {\n        ./project.sh\n    }\n",
                      "markdown": "`\nWe start by creating a new test file `test/test.bats`\n\n.. code-block:: bash\n\n    @test \"can run our script\" {\n        ./project.sh\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 15,
                  "endLine": 650,
                  "snippet": {
                    "text": "\nOur `project.sh` should also get the new command:\n\n.. code-block:: bash\n\n    stop-echo-server)\n        kill \"$(< \"/tmp/project-echo-server.pid\")\"\n        rm /tmp/project-echo-server.pid\n",
                    "rendered": {
                      "text": "\nOur `project.sh` should also get the new command:\n\n.. code-block:: bash\n\n    stop-echo-server)\n        kill \"$(< \"/tmp/project-echo-server.pid\")\"\n        rm /tmp/project-echo-server.pid\n",
                      "markdown": "`\nOur `project.sh` should also get the new command:\n\n.. code-block:: bash\n\n    stop-echo-server)\n        kill \"$(< \"/tmp/project-echo-server.pid\")\"\n        rm /tmp/project-echo-server.pid\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 641,
                  "startColumn": 15,
                  "endLine": 642,
                  "snippet": {
                    "text": "Obviously, we did not turn off our server after testing.\nThis is a task for `teardown_file` in `server.bats`:\n\n.. code-block:: bash\n\n    teardown_file() {\n        project.sh stop-echo-server\n    }\n",
                    "rendered": {
                      "text": "Obviously, we did not turn off our server after testing.\nThis is a task for `teardown_file` in `server.bats`:\n\n.. code-block:: bash\n\n    teardown_file() {\n        project.sh stop-echo-server\n    }\n",
                      "markdown": "`Obviously, we did not turn off our server after testing.\nThis is a task for `teardown_file` in `server.bats`:\n\n.. code-block:: bash\n\n    teardown_file() {\n        project.sh stop-echo-server\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 623,
                  "startColumn": 30,
                  "endLine": 623,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    1 test, 0 failures\n\nHowever, running this a second time gives:\n\n.. code-block:: console\n\n",
                    "rendered": {
                      "text": "\n    1 test, 0 failures\n\nHowever, running this a second time gives:\n\n.. code-block:: console\n\n",
                      "markdown": "`\n    1 test, 0 failures\n\nHowever, running this a second time gives:\n\n.. code-block:: console\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 598,
                  "startColumn": 15,
                  "endLine": 599,
                  "snippet": {
                    "text": "Now that we got our red test, we need to get it green again.\nOur new `project.sh` now ends with:\n\n.. code-block:: bash\n\n    case $1 in\n        start-echo-server)\n            echo \"Starting echo server\"\n",
                    "rendered": {
                      "text": "Now that we got our red test, we need to get it green again.\nOur new `project.sh` now ends with:\n\n.. code-block:: bash\n\n    case $1 in\n        start-echo-server)\n            echo \"Starting echo server\"\n",
                      "markdown": "`Now that we got our red test, we need to get it green again.\nOur new `project.sh` now ends with:\n\n.. code-block:: bash\n\n    case $1 in\n        start-echo-server)\n            echo \"Starting echo server\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 595,
                  "startColumn": 19,
                  "endLine": 595,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n    1 test, 1 failure \n\nNow that we got our red test, we need to get it green again.\nOur new `project.sh` now ends with:\n\n.. code-block:: bash\n",
                    "rendered": {
                      "text": "\n    1 test, 1 failure \n\nNow that we got our red test, we need to get it green again.\nOur new `project.sh` now ends with:\n\n.. code-block:: bash\n",
                      "markdown": "`\n    1 test, 1 failure \n\nNow that we got our red test, we need to get it green again.\nOur new `project.sh` now ends with:\n\n.. code-block:: bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 575,
                  "startColumn": 7,
                  "endLine": 575,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    }\n\n    @test \"server is reachable\" {\n        nc -z localhost \"$PORT\"\n    }\n\nWhich will obviously fail:\n",
                    "rendered": {
                      "text": "    }\n\n    @test \"server is reachable\" {\n        nc -z localhost \"$PORT\"\n    }\n\nWhich will obviously fail:\n",
                      "markdown": "`    }\n\n    @test \"server is reachable\" {\n        nc -z localhost \"$PORT\"\n    }\n\nWhich will obviously fail:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 15,
                  "endLine": 566,
                  "snippet": {
                    "text": "\nAs an example, we want to add an echo server capability to our project. First, we add the following `server.bats` to our suite:\n\n.. code-block:: bash\n\n    setup_file() {\n        load 'test_helper/common-setup'\n        _common_setup\n",
                    "rendered": {
                      "text": "\nAs an example, we want to add an echo server capability to our project. First, we add the following `server.bats` to our suite:\n\n.. code-block:: bash\n\n    setup_file() {\n        load 'test_helper/common-setup'\n        _common_setup\n",
                      "markdown": "`\nAs an example, we want to add an echo server capability to our project. First, we add the following `server.bats` to our suite:\n\n.. code-block:: bash\n\n    setup_file() {\n        load 'test_helper/common-setup'\n        _common_setup\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 556,
                  "startColumn": 56,
                  "endLine": 556,
                  "endColumn": 65,
                  "snippet": {
                    "text": "-------------------------------\n\nWe already have seen the `setup` function in use, which is called before each test.\nSometimes our setup is very costly, such as booting up a service just for testing. \nIf we can reuse the same setup across multiple tests, we might want to do only one setup before all these tests.\n\nThis usecase is exactly what the `setup_file` function was created for.\n",
                    "rendered": {
                      "text": "-------------------------------\n\nWe already have seen the `setup` function in use, which is called before each test.\nSometimes our setup is very costly, such as booting up a service just for testing. \nIf we can reuse the same setup across multiple tests, we might want to do only one setup before all these tests.\n\nThis usecase is exactly what the `setup_file` function was created for.\n",
                      "markdown": "`-------------------------------\n\nWe already have seen the `setup` function in use, which is called before each test.\nSometimes our setup is very costly, such as booting up a service just for testing. \nIf we can reuse the same setup across multiple tests, we might want to do only one setup before all these tests.\n\nThis usecase is exactly what the `setup_file` function was created for.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 516,
                  "startColumn": 15,
                  "endLine": 517,
                  "snippet": {
                    "text": "\nwith the following `setup` in `test/test.bats`:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/common-setup'\n        _common_setup\n",
                    "rendered": {
                      "text": "\nwith the following `setup` in `test/test.bats`:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/common-setup'\n        _common_setup\n",
                      "markdown": "`\nwith the following `setup` in `test/test.bats`:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/common-setup'\n        _common_setup\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 501,
                  "startColumn": 18,
                  "endLine": 502,
                  "snippet": {
                    "text": "\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _common_setup() {\n        load 'test_helper/bats-support/load'\n        load 'test_helper/bats-assert/load'\n",
                    "rendered": {
                      "text": "\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _common_setup() {\n        load 'test_helper/bats-support/load'\n        load 'test_helper/bats-assert/load'\n",
                      "markdown": "`\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _common_setup() {\n        load 'test_helper/bats-support/load'\n        load 'test_helper/bats-assert/load'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 15,
                  "endLine": 500,
                  "snippet": {
                    "text": "\nSince the setup function would have duplicated much of the other files', we split that out into the file `test/test_helper/common-setup.bash`:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _common_setup() {\n",
                    "rendered": {
                      "text": "\nSince the setup function would have duplicated much of the other files', we split that out into the file `test/test_helper/common-setup.bash`:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _common_setup() {\n",
                      "markdown": "`\nSince the setup function would have duplicated much of the other files', we split that out into the file `test/test_helper/common-setup.bash`:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _common_setup() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 15,
                  "endLine": 472,
                  "snippet": {
                    "text": "\nThis allows for testing it separately in a new file `test/helper.bats`:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/common-setup'\n        _common_setup\n",
                    "rendered": {
                      "text": "\nThis allows for testing it separately in a new file `test/helper.bats`:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/common-setup'\n        _common_setup\n",
                      "markdown": "`\nThis allows for testing it separately in a new file `test/helper.bats`:\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/common-setup'\n        _common_setup\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 18,
                  "endLine": 459,
                  "snippet": {
                    "text": "\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _is_first_run() {\n        local FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n        if [[ ! -e \"$FIRST_RUN_FILE\" ]]; then\n",
                    "rendered": {
                      "text": "\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _is_first_run() {\n        local FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n        if [[ ! -e \"$FIRST_RUN_FILE\" ]]; then\n",
                      "markdown": "`\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _is_first_run() {\n        local FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n        if [[ ! -e \"$FIRST_RUN_FILE\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 15,
                  "endLine": 457,
                  "snippet": {
                    "text": "With a growing project, putting all tests into one file becomes unwieldy.\nFor our example project, we will extract functionality into the additional file `src/helper.sh`:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _is_first_run() {\n",
                    "rendered": {
                      "text": "With a growing project, putting all tests into one file becomes unwieldy.\nFor our example project, we will extract functionality into the additional file `src/helper.sh`:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _is_first_run() {\n",
                      "markdown": "`With a growing project, putting all tests into one file becomes unwieldy.\nFor our example project, we will extract functionality into the additional file `src/helper.sh`:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    _is_first_run() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 15,
                  "endLine": 418,
                  "snippet": {
                    "text": "\nIn our example project we rewrite the welcome message test to `skip` instead of doing cleanup:\n\n.. code-block:: bash\n\n    teardown() {\n        : # Look Ma! No cleanup!\n    } \n",
                    "rendered": {
                      "text": "\nIn our example project we rewrite the welcome message test to `skip` instead of doing cleanup:\n\n.. code-block:: bash\n\n    teardown() {\n        : # Look Ma! No cleanup!\n    } \n",
                      "markdown": "`\nIn our example project we rewrite the welcome message test to `skip` instead of doing cleanup:\n\n.. code-block:: bash\n\n    teardown() {\n        : # Look Ma! No cleanup!\n    } \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 15,
                  "endLine": 386,
                  "snippet": {
                    "text": "\nLuckily, bats offers the `teardown` function, which can take care of that, we add the following code to `test/test.bats`:\n\n.. code-block:: bash\n\n    teardown() {\n        rm -f /tmp/bats-tutorial-project-ran\n    }\n",
                    "rendered": {
                      "text": "\nLuckily, bats offers the `teardown` function, which can take care of that, we add the following code to `test/test.bats`:\n\n.. code-block:: bash\n\n    teardown() {\n        rm -f /tmp/bats-tutorial-project-ran\n    }\n",
                      "markdown": "`\nLuckily, bats offers the `teardown` function, which can take care of that, we add the following code to `test/test.bats`:\n\n.. code-block:: bash\n\n    teardown() {\n        rm -f /tmp/bats-tutorial-project-ran\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 18,
                  "endLine": 343,
                  "snippet": {
                    "text": "\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n\n    if [[ ! -e \"$FIRST_RUN_FILE\" ]]; then\n",
                    "rendered": {
                      "text": "\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n\n    if [[ ! -e \"$FIRST_RUN_FILE\" ]]; then\n",
                      "markdown": "`\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n\n    if [[ ! -e \"$FIRST_RUN_FILE\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 15,
                  "endLine": 341,
                  "snippet": {
                    "text": "Now, to get the test green again, we want to store the information that we already ran in the file `/tmp/bats-tutorial-project-ran`,\nso our `src/project.sh` becomes:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n",
                    "rendered": {
                      "text": "Now, to get the test green again, we want to store the information that we already ran in the file `/tmp/bats-tutorial-project-ran`,\nso our `src/project.sh` becomes:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n",
                      "markdown": "`Now, to get the test green again, we want to store the information that we already ran in the file `/tmp/bats-tutorial-project-ran`,\nso our `src/project.sh` becomes:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    FIRST_RUN_FILE=/tmp/bats-tutorial-project-ran\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 15,
                  "endLine": 307,
                  "snippet": {
                    "text": "For example, we now want our project.sh to only show the welcome message on the first invocation.\nSo we change our test to this:\n\n.. code-block:: bash\n\n    @test \"Show welcome message on first invocation\" {\n        run project.sh\n        assert_output --partial 'Welcome to our project!'\n",
                    "rendered": {
                      "text": "For example, we now want our project.sh to only show the welcome message on the first invocation.\nSo we change our test to this:\n\n.. code-block:: bash\n\n    @test \"Show welcome message on first invocation\" {\n        run project.sh\n        assert_output --partial 'Welcome to our project!'\n",
                      "markdown": "`For example, we now want our project.sh to only show the welcome message on the first invocation.\nSo we change our test to this:\n\n.. code-block:: bash\n\n    @test \"Show welcome message on first invocation\" {\n        run project.sh\n        assert_output --partial 'Welcome to our project!'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 15,
                  "endLine": 283,
                  "snippet": {
                    "text": "\nOkay, so maybe we should try that:\n\n.. code-block:: bash\n\n    @test \"Check welcome message\" {\n        run project.sh\n        assert_output --partial 'Welcome to our project!'\n",
                    "rendered": {
                      "text": "\nOkay, so maybe we should try that:\n\n.. code-block:: bash\n\n    @test \"Check welcome message\" {\n        run project.sh\n        assert_output --partial 'Welcome to our project!'\n",
                      "markdown": "`\nOkay, so maybe we should try that:\n\n.. code-block:: bash\n\n    @test \"Check welcome message\" {\n        run project.sh\n        assert_output --partial 'Welcome to our project!'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 61,
                  "endLine": 273,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        assert_output 'Welcome to our project!'\n    }\n\nNow our test passes again but having to write a function each time we want only a partial match does not accommodate our laziness.\nIsn't there an app for that? Maybe we should look at the documentation?\n\n    Partial matching can be enabled with the --partial option (-p for short). When used, the assertion fails if the expected substring is not found in $output.\n",
                    "rendered": {
                      "text": "        assert_output 'Welcome to our project!'\n    }\n\nNow our test passes again but having to write a function each time we want only a partial match does not accommodate our laziness.\nIsn't there an app for that? Maybe we should look at the documentation?\n\n    Partial matching can be enabled with the --partial option (-p for short). When used, the assertion fails if the expected substring is not found in $output.\n",
                      "markdown": "`        assert_output 'Welcome to our project!'\n    }\n\nNow our test passes again but having to write a function each time we want only a partial match does not accommodate our laziness.\nIsn't there an app for that? Maybe we should look at the documentation?\n\n    Partial matching can be enabled with the --partial option (-p for short). When used, the assertion fails if the expected substring is not found in $output.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 26,
                  "endLine": 265,
                  "endColumn": 32,
                  "snippet": {
                    "text": ".. code-block:: bash\n\n    get_projectsh_welcome_message() {\n        project.sh  2>&1 | grep Welcome\n    }\n\n    @test \"Check welcome message\" {\n",
                    "rendered": {
                      "text": ".. code-block:: bash\n\n    get_projectsh_welcome_message() {\n        project.sh  2>&1 | grep Welcome\n    }\n\n    @test \"Check welcome message\" {\n",
                      "markdown": "`.. code-block:: bash\n\n    get_projectsh_welcome_message() {\n        project.sh  2>&1 | grep Welcome\n    }\n\n    @test \"Check welcome message\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 15,
                  "endLine": 263,
                  "snippet": {
                    "text": "\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n\n.. code-block:: bash\n\n    get_projectsh_welcome_message() {\n        project.sh  2>&1 | grep Welcome\n    }\n",
                    "rendered": {
                      "text": "\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n\n.. code-block:: bash\n\n    get_projectsh_welcome_message() {\n        project.sh  2>&1 | grep Welcome\n    }\n",
                      "markdown": "`\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n\n.. code-block:: bash\n\n    get_projectsh_welcome_message() {\n        project.sh  2>&1 | grep Welcome\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 38,
                  "endLine": 260,
                  "endColumn": 44,
                  "snippet": {
                    "text": "`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n\n.. code-block:: bash\n\n",
                    "rendered": {
                      "text": "`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n\n.. code-block:: bash\n\n",
                      "markdown": "``run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n\n.. code-block:: bash\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 42,
                  "endLine": 258,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n\n",
                    "rendered": {
                      "text": "\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n\n",
                      "markdown": "`\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 123,
                  "endLine": 257,
                  "endColumn": 129,
                  "snippet": {
                    "text": "Huh, what is going on? Why does it fail the `run` line again?\n\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n",
                    "rendered": {
                      "text": "Huh, what is going on? Why does it fail the `run` line again?\n\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n",
                      "markdown": "`Huh, what is going on? Why does it fail the `run` line again?\n\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 84,
                  "endLine": 257,
                  "endColumn": 90,
                  "snippet": {
                    "text": "Huh, what is going on? Why does it fail the `run` line again?\n\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n",
                    "rendered": {
                      "text": "Huh, what is going on? Why does it fail the `run` line again?\n\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n",
                      "markdown": "`Huh, what is going on? Why does it fail the `run` line again?\n\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\nUnfortunately, the latter is not valid bash syntax, so we have to work around it, e.g. by using a function:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 91,
                  "endLine": 256,
                  "endColumn": 97,
                  "snippet": {
                    "text": "\nHuh, what is going on? Why does it fail the `run` line again?\n\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\n",
                    "rendered": {
                      "text": "\nHuh, what is going on? Why does it fail the `run` line again?\n\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\n",
                      "markdown": "`\nHuh, what is going on? Why does it fail the `run` line again?\n\nThis is a common mistake that can happen when our mind parses the file differently than the bash parser.\n`run` is just a function, so the pipe won't actually be forwarded into the function. Bash reads this as `(run project.sh) | grep Welcome`, \ninstead of our intended `run (project.sh | grep Welcome)`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 26,
                  "endLine": 250,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    $ ./test/bats/bin/bats test/test.bats \n     ✗ can run our script\n       (in test file test/test.bats, line 13)\n         `run project.sh | grep Welcome' failed\n\n    1 test, 1 failure\n\n",
                    "rendered": {
                      "text": "    $ ./test/bats/bin/bats test/test.bats \n     ✗ can run our script\n       (in test file test/test.bats, line 13)\n         `run project.sh | grep Welcome' failed\n\n    1 test, 1 failure\n\n",
                      "markdown": "`    $ ./test/bats/bin/bats test/test.bats \n     ✗ can run our script\n       (in test file test/test.bats, line 13)\n         `run project.sh | grep Welcome' failed\n\n    1 test, 1 failure\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 18,
                  "endLine": 249,
                  "snippet": {
                    "text": ".. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats \n     ✗ can run our script\n       (in test file test/test.bats, line 13)\n         `run project.sh | grep Welcome' failed\n\n    1 test, 1 failure\n",
                    "rendered": {
                      "text": ".. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats \n     ✗ can run our script\n       (in test file test/test.bats, line 13)\n         `run project.sh | grep Welcome' failed\n\n    1 test, 1 failure\n",
                      "markdown": "`.. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats \n     ✗ can run our script\n       (in test file test/test.bats, line 13)\n         `run project.sh | grep Welcome' failed\n\n    1 test, 1 failure\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 25,
                  "endLine": 241,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n.. code-block:: bash\n\n    run project.sh 2>&1 | grep Welcome\n\nwhich gives us the following test result:\n\n",
                    "rendered": {
                      "text": "\n.. code-block:: bash\n\n    run project.sh 2>&1 | grep Welcome\n\nwhich gives us the following test result:\n\n",
                      "markdown": "`\n.. code-block:: bash\n\n    run project.sh 2>&1 | grep Welcome\n\nwhich gives us the following test result:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 15,
                  "endLine": 240,
                  "snippet": {
                    "text": "For our current test we don't care about any other output or the error message, so we want it gone.\n`grep` is always at our fingertips, so we tape together this ramshackle construct\n\n.. code-block:: bash\n\n    run project.sh 2>&1 | grep Welcome\n\nwhich gives us the following test result:\n",
                    "rendered": {
                      "text": "For our current test we don't care about any other output or the error message, so we want it gone.\n`grep` is always at our fingertips, so we tape together this ramshackle construct\n\n.. code-block:: bash\n\n    run project.sh 2>&1 | grep Welcome\n\nwhich gives us the following test result:\n",
                      "markdown": "`For our current test we don't care about any other output or the error message, so we want it gone.\n`grep` is always at our fingertips, so we tape together this ramshackle construct\n\n.. code-block:: bash\n\n    run project.sh 2>&1 | grep Welcome\n\nwhich gives us the following test result:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 18,
                  "endLine": 213,
                  "snippet": {
                    "text": ".. code-block:: console\n\n    $ LANG=C ./test/bats/bin/bats test/test.bats \n     ✗ can run our script\n       (from function `assert_output' in file test/test_helper/bats-assert/src/assert_output.bash, line 194,\n        in test file test/test.bats, line 14)\n         `assert_output 'Welcome to our project!'' failed\n    \n",
                    "rendered": {
                      "text": ".. code-block:: console\n\n    $ LANG=C ./test/bats/bin/bats test/test.bats \n     ✗ can run our script\n       (from function `assert_output' in file test/test_helper/bats-assert/src/assert_output.bash, line 194,\n        in test file test/test.bats, line 14)\n         `assert_output 'Welcome to our project!'' failed\n    \n",
                      "markdown": "`.. code-block:: console\n\n    $ LANG=C ./test/bats/bin/bats test/test.bats \n     ✗ can run our script\n       (from function `assert_output' in file test/test_helper/bats-assert/src/assert_output.bash, line 194,\n        in test file test/test.bats, line 14)\n         `assert_output 'Welcome to our project!'' failed\n    \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 15,
                  "endLine": 188,
                  "snippet": {
                    "text": "bats-assert gives us some help with this, so we should now load it (and its dependency bats-support),\nso we change `test/test.bats` to\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/bats-support/load'\n        load 'test_helper/bats-assert/load'\n",
                    "rendered": {
                      "text": "bats-assert gives us some help with this, so we should now load it (and its dependency bats-support),\nso we change `test/test.bats` to\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/bats-support/load'\n        load 'test_helper/bats-assert/load'\n",
                      "markdown": "`bats-assert gives us some help with this, so we should now load it (and its dependency bats-support),\nso we change `test/test.bats` to\n\n.. code-block:: bash\n\n    setup() {\n        load 'test_helper/bats-support/load'\n        load 'test_helper/bats-assert/load'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 18,
                  "endLine": 173,
                  "snippet": {
                    "text": ".. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats \n     ✗ can run our script\n       (in test file test/test.bats, line 11)\n         `project.sh' failed\n       Welcome to our project!\n       NOT IMPLEMENTED!\n",
                    "rendered": {
                      "text": ".. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats \n     ✗ can run our script\n       (in test file test/test.bats, line 11)\n         `project.sh' failed\n       Welcome to our project!\n       NOT IMPLEMENTED!\n",
                      "markdown": "`.. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats \n     ✗ can run our script\n       (in test file test/test.bats, line 11)\n         `project.sh' failed\n       Welcome to our project!\n       NOT IMPLEMENTED!\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 18,
                  "endLine": 161,
                  "snippet": {
                    "text": "\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    echo \"Welcome to our project!\"\n\n    echo \"NOT IMPLEMENTED!\" >&2\n",
                    "rendered": {
                      "text": "\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    echo \"Welcome to our project!\"\n\n    echo \"NOT IMPLEMENTED!\" >&2\n",
                      "markdown": "`\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    echo \"Welcome to our project!\"\n\n    echo \"NOT IMPLEMENTED!\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 15,
                  "endLine": 159,
                  "snippet": {
                    "text": "Okay, we have a green test but our executable does not do anything useful.\nTo keep things simple, let us start with an error message. Our new `src/project.sh` now reads:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    echo \"Welcome to our project!\"\n",
                    "rendered": {
                      "text": "Okay, we have a green test but our executable does not do anything useful.\nTo keep things simple, let us start with an error message. Our new `src/project.sh` now reads:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    echo \"Welcome to our project!\"\n",
                      "markdown": "`Okay, we have a green test but our executable does not do anything useful.\nTo keep things simple, let us start with an error message. Our new `src/project.sh` now reads:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bash\n\n    echo \"Welcome to our project!\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 18,
                  "endLine": 139,
                  "snippet": {
                    "text": ".. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats \n     ✓ can run our script\n\n    1 test, 0 failures\n\nIt still works as expected. This is because the newly added `setup` function put the absolute path to `src/` onto `$PATH`.\n",
                    "rendered": {
                      "text": ".. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats \n     ✓ can run our script\n\n    1 test, 0 failures\n\nIt still works as expected. This is because the newly added `setup` function put the absolute path to `src/` onto `$PATH`.\n",
                      "markdown": "`.. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats \n     ✓ can run our script\n\n    1 test, 0 failures\n\nIt still works as expected. This is because the newly added `setup` function put the absolute path to `src/` onto `$PATH`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 15,
                  "endLine": 117,
                  "snippet": {
                    "text": "Since we are lazy people and want to treat our project's files as first class citizens in the executable world, we will also put them on the `$PATH`.\nOur new `test/test.bats` now looks like this:\n\n.. code-block:: bash\n\n    setup() {\n        # get the containing directory of this file\n        # use $BATS_TEST_FILENAME instead of ${BASH_SOURCE[0]} or $0,\n",
                    "rendered": {
                      "text": "Since we are lazy people and want to treat our project's files as first class citizens in the executable world, we will also put them on the `$PATH`.\nOur new `test/test.bats` now looks like this:\n\n.. code-block:: bash\n\n    setup() {\n        # get the containing directory of this file\n        # use $BATS_TEST_FILENAME instead of ${BASH_SOURCE[0]} or $0,\n",
                      "markdown": "`Since we are lazy people and want to treat our project's files as first class citizens in the executable world, we will also put them on the `$PATH`.\nOur new `test/test.bats` now looks like this:\n\n.. code-block:: bash\n\n    setup() {\n        # get the containing directory of this file\n        # use $BATS_TEST_FILENAME instead of ${BASH_SOURCE[0]} or $0,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 18,
                  "endLine": 103,
                  "snippet": {
                    "text": ".. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats \n     ✓ can run our script\n\n    1 test, 0 failures\n\nYesss! But that victory feels shallow: What if somebody less competent than us starts bats from another directory?\n",
                    "rendered": {
                      "text": ".. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats \n     ✓ can run our script\n\n    1 test, 0 failures\n\nYesss! But that victory feels shallow: What if somebody less competent than us starts bats from another directory?\n",
                      "markdown": "`.. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats \n     ✓ can run our script\n\n    1 test, 0 failures\n\nYesss! But that victory feels shallow: What if somebody less competent than us starts bats from another directory?\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 15,
                  "endLine": 92,
                  "snippet": {
                    "text": "Oh, we still used the wrong path. No problem, we just need to use the correct path to `project.sh`.\nSince we're still in the same directory as when we started `bats`, we can simply do:\n\n.. code-block:: bash\n\n    @test \"can run our script\" {\n        ./src/project.sh\n    }\n",
                    "rendered": {
                      "text": "Oh, we still used the wrong path. No problem, we just need to use the correct path to `project.sh`.\nSince we're still in the same directory as when we started `bats`, we can simply do:\n\n.. code-block:: bash\n\n    @test \"can run our script\" {\n        ./src/project.sh\n    }\n",
                      "markdown": "`Oh, we still used the wrong path. No problem, we just need to use the correct path to `project.sh`.\nSince we're still in the same directory as when we started `bats`, we can simply do:\n\n.. code-block:: bash\n\n    @test \"can run our script\" {\n        ./src/project.sh\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 18,
                  "endLine": 82,
                  "snippet": {
                    "text": ".. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats\n     ✗ can run our script\n       (in test file test/test.bats, line 2)\n         `./project.sh' failed with status 127\n       /tmp/bats-run-19605/bats.19627.src: line 2: ./project.sh: No such file or directory\n\n",
                    "rendered": {
                      "text": ".. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats\n     ✗ can run our script\n       (in test file test/test.bats, line 2)\n         `./project.sh' failed with status 127\n       /tmp/bats-run-19605/bats.19627.src: line 2: ./project.sh: No such file or directory\n\n",
                      "markdown": "`.. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats\n     ✗ can run our script\n       (in test file test/test.bats, line 2)\n         `./project.sh' failed with status 127\n       /tmp/bats-run-19605/bats.19627.src: line 2: ./project.sh: No such file or directory\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 3,
                  "endLine": 74,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n    mkdir src/\n    echo '#!/usr/bin/env bash' > src/project.sh\n    chmod a+x src/project.sh\n\nA new test run gives us\n\n",
                    "rendered": {
                      "text": "\n    mkdir src/\n    echo '#!/usr/bin/env bash' > src/project.sh\n    chmod a+x src/project.sh\n\nA new test run gives us\n\n",
                      "markdown": "`\n    mkdir src/\n    echo '#!/usr/bin/env bash' > src/project.sh\n    chmod a+x src/project.sh\n\nA new test run gives us\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 18,
                  "endLine": 62,
                  "snippet": {
                    "text": ".. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats\n     ✗ can run our script\n       (in test file test/test.bats, line 2)\n         `./project.sh' failed with status 127\n       /tmp/bats-run-19605/bats.19627.src: line 2: ./project.sh: No such file or directory\n\n",
                    "rendered": {
                      "text": ".. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats\n     ✗ can run our script\n       (in test file test/test.bats, line 2)\n         `./project.sh' failed with status 127\n       /tmp/bats-run-19605/bats.19627.src: line 2: ./project.sh: No such file or directory\n\n",
                      "markdown": "`.. code-block:: console\n\n    $ ./test/bats/bin/bats test/test.bats\n     ✗ can run our script\n       (in test file test/test.bats, line 2)\n         `./project.sh' failed with status 127\n       /tmp/bats-run-19605/bats.19627.src: line 2: ./project.sh: No such file or directory\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 15,
                  "endLine": 51,
                  "snippet": {
                    "text": "\nWe start by creating a new test file `test/test.bats`\n\n.. code-block:: bash\n\n    @test \"can run our script\" {\n        ./project.sh\n    }\n",
                    "rendered": {
                      "text": "\nWe start by creating a new test file `test/test.bats`\n\n.. code-block:: bash\n\n    @test \"can run our script\" {\n        ./project.sh\n    }\n",
                      "markdown": "`\nWe start by creating a new test file `test/test.bats`\n\n.. code-block:: bash\n\n    @test \"can run our script\" {\n        ./project.sh\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 3,
                  "endLine": 38,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    \n    git submodule add https://github.com/bats-core/bats-core.git test/bats\n    git submodule add https://github.com/bats-core/bats-support.git test/test_helper/bats-support\n    git submodule add https://github.com/bats-core/bats-assert.git test/test_helper/bats-assert\n\nYour first test\n---------------\n",
                    "rendered": {
                      "text": "    \n    git submodule add https://github.com/bats-core/bats-core.git test/bats\n    git submodule add https://github.com/bats-core/bats-support.git test/test_helper/bats-support\n    git submodule add https://github.com/bats-core/bats-assert.git test/test_helper/bats-assert\n\nYour first test\n---------------\n",
                      "markdown": "`    \n    git submodule add https://github.com/bats-core/bats-core.git test/bats\n    git submodule add https://github.com/bats-core/bats-support.git test/test_helper/bats-support\n    git submodule add https://github.com/bats-core/bats-assert.git test/test_helper/bats-assert\n\nYour first test\n---------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 3,
                  "endLine": 37,
                  "endColumn": 8,
                  "snippet": {
                    "text": ".. code-block:: console\n    \n    git submodule add https://github.com/bats-core/bats-core.git test/bats\n    git submodule add https://github.com/bats-core/bats-support.git test/test_helper/bats-support\n    git submodule add https://github.com/bats-core/bats-assert.git test/test_helper/bats-assert\n\nYour first test\n",
                    "rendered": {
                      "text": ".. code-block:: console\n    \n    git submodule add https://github.com/bats-core/bats-core.git test/bats\n    git submodule add https://github.com/bats-core/bats-support.git test/test_helper/bats-support\n    git submodule add https://github.com/bats-core/bats-assert.git test/test_helper/bats-assert\n\nYour first test\n",
                      "markdown": "`.. code-block:: console\n    \n    git submodule add https://github.com/bats-core/bats-core.git test/bats\n    git submodule add https://github.com/bats-core/bats-support.git test/test_helper/bats-support\n    git submodule add https://github.com/bats-core/bats-assert.git test/test_helper/bats-assert\n\nYour first test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 3,
                  "endLine": 36,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n.. code-block:: console\n    \n    git submodule add https://github.com/bats-core/bats-core.git test/bats\n    git submodule add https://github.com/bats-core/bats-support.git test/test_helper/bats-support\n    git submodule add https://github.com/bats-core/bats-assert.git test/test_helper/bats-assert\n\n",
                    "rendered": {
                      "text": "\n.. code-block:: console\n    \n    git submodule add https://github.com/bats-core/bats-core.git test/bats\n    git submodule add https://github.com/bats-core/bats-support.git test/test_helper/bats-support\n    git submodule add https://github.com/bats-core/bats-assert.git test/test_helper/bats-assert\n\n",
                      "markdown": "`\n.. code-block:: console\n    \n    git submodule add https://github.com/bats-core/bats-core.git test/bats\n    git submodule add https://github.com/bats-core/bats-support.git test/test_helper/bats-support\n    git submodule add https://github.com/bats-core/bats-assert.git test/test_helper/bats-assert\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 33,
                  "endLine": 16,
                  "endColumn": 38,
                  "snippet": {
                    "text": "Quick installation\n------------------\n\nSince we already have an existing git repository, it is very easy to include bats and its libraries as submodules.\nWe are aiming for following filesystem structure:\n\n.. code-block:: \n",
                    "rendered": {
                      "text": "Quick installation\n------------------\n\nSince we already have an existing git repository, it is very easy to include bats and its libraries as submodules.\nWe are aiming for following filesystem structure:\n\n.. code-block:: \n",
                      "markdown": "`Quick installation\n------------------\n\nSince we already have an existing git repository, it is very easy to include bats and its libraries as submodules.\nWe are aiming for following filesystem structure:\n\n.. code-block:: \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/tutorial.rst"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 65,
                  "endLine": 7,
                  "endColumn": 70,
                  "snippet": {
                    "text": "This tutorial is intended for beginners with bats and possibly bash.\nMake sure to also read the list of gotchas and the faq.\n\nFor this tutorial we are assuming you already have a project in a git repository and want to add tests.\nUltimately they should run in the CI environment but will also be started locally during development.\n\n..\n",
                    "rendered": {
                      "text": "This tutorial is intended for beginners with bats and possibly bash.\nMake sure to also read the list of gotchas and the faq.\n\nFor this tutorial we are assuming you already have a project in a git repository and want to add tests.\nUltimately they should run in the CI environment but will also be started locally during development.\n\n..\n",
                      "markdown": "`This tutorial is intended for beginners with bats and possibly bash.\nMake sure to also read the list of gotchas and the faq.\n\nFor this tutorial we are assuming you already have a project in a git repository and want to add tests.\nUltimately they should run in the CI environment but will also be started locally during development.\n\n..\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/releasing.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 18,
                  "endLine": 9,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n## Update docs/CHANGELOG.md\n\nCreate a new entry at the top of `docs/CHANGELOG.md` that enumerates the\nsignificant updates to the new version.\n\n## Bumping the version number\n",
                    "rendered": {
                      "text": "\n## Update docs/CHANGELOG.md\n\nCreate a new entry at the top of `docs/CHANGELOG.md` that enumerates the\nsignificant updates to the new version.\n\n## Bumping the version number\n",
                      "markdown": "`\n## Update docs/CHANGELOG.md\n\nCreate a new entry at the top of `docs/CHANGELOG.md` that enumerates the\nsignificant updates to the new version.\n\n## Bumping the version number\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/releasing.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 2,
                  "endLine": 7,
                  "endColumn": 10,
                  "snippet": {
                    "text": "terms of automation and expanding the number of platforms to which we formally\nrelease (see #103).\n\n## Update docs/CHANGELOG.md\n\nCreate a new entry at the top of `docs/CHANGELOG.md` that enumerates the\nsignificant updates to the new version.\n",
                    "rendered": {
                      "text": "terms of automation and expanding the number of platforms to which we formally\nrelease (see #103).\n\n## Update docs/CHANGELOG.md\n\nCreate a new entry at the top of `docs/CHANGELOG.md` that enumerates the\nsignificant updates to the new version.\n",
                      "markdown": "`terms of automation and expanding the number of platforms to which we formally\nrelease (see #103).\n\n## Update docs/CHANGELOG.md\n\nCreate a new entry at the top of `docs/CHANGELOG.md` that enumerates the\nsignificant updates to the new version.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/releasing.md"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 1,
                  "endLine": 103,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n```bash\n$ curl -LOv https://github.com/bats-core/bats-core/archive/v1.1.0.zip\n$ openssl sha512 v1.1.0.zip\nSHA512(v1.1.0.zip)=accd83cfec0025a2be40982b3f9a314c2bbf72f5c85daffa9e9419611904a8d34e376919a5d53e378382e0f3794d2bd781046d810225e2a77812474e427bed9e\n```\n\n",
                    "rendered": {
                      "text": "\n```bash\n$ curl -LOv https://github.com/bats-core/bats-core/archive/v1.1.0.zip\n$ openssl sha512 v1.1.0.zip\nSHA512(v1.1.0.zip)=accd83cfec0025a2be40982b3f9a314c2bbf72f5c85daffa9e9419611904a8d34e376919a5d53e378382e0f3794d2bd781046d810225e2a77812474e427bed9e\n```\n\n",
                      "markdown": "`\n```bash\n$ curl -LOv https://github.com/bats-core/bats-core/archive/v1.1.0.zip\n$ openssl sha512 v1.1.0.zip\nSHA512(v1.1.0.zip)=accd83cfec0025a2be40982b3f9a314c2bbf72f5c85daffa9e9419611904a8d34e376919a5d53e378382e0f3794d2bd781046d810225e2a77812474e427bed9e\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/releasing.md"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 1,
                  "endLine": 102,
                  "endColumn": 7,
                  "snippet": {
                    "text": "An example using v1.1.0 (notice that this uses the sha512 sum of the Zip file):\n\n```bash\n$ curl -LOv https://github.com/bats-core/bats-core/archive/v1.1.0.zip\n$ openssl sha512 v1.1.0.zip\nSHA512(v1.1.0.zip)=accd83cfec0025a2be40982b3f9a314c2bbf72f5c85daffa9e9419611904a8d34e376919a5d53e378382e0f3794d2bd781046d810225e2a77812474e427bed9e\n```\n",
                    "rendered": {
                      "text": "An example using v1.1.0 (notice that this uses the sha512 sum of the Zip file):\n\n```bash\n$ curl -LOv https://github.com/bats-core/bats-core/archive/v1.1.0.zip\n$ openssl sha512 v1.1.0.zip\nSHA512(v1.1.0.zip)=accd83cfec0025a2be40982b3f9a314c2bbf72f5c85daffa9e9419611904a8d34e376919a5d53e378382e0f3794d2bd781046d810225e2a77812474e427bed9e\n```\n",
                      "markdown": "`An example using v1.1.0 (notice that this uses the sha512 sum of the Zip file):\n\n```bash\n$ curl -LOv https://github.com/bats-core/bats-core/archive/v1.1.0.zip\n$ openssl sha512 v1.1.0.zip\nSHA512(v1.1.0.zip)=accd83cfec0025a2be40982b3f9a314c2bbf72f5c85daffa9e9419611904a8d34e376919a5d53e378382e0f3794d2bd781046d810225e2a77812474e427bed9e\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/releasing.md"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 1,
                  "endLine": 86,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n```bash\n$ curl -LOv https://github.com/bats-core/bats-core/archive/v1.1.0.tar.gz\n$ openssl sha256 v1.1.0.tar.gz\nSHA256(v1.1.0.tar.gz)=855d8b8bed466bc505e61123d12885500ef6fcdb317ace1b668087364717ea82\n\n# Add the --dry-run flag to see the individual steps without executing.\n",
                    "rendered": {
                      "text": "\n```bash\n$ curl -LOv https://github.com/bats-core/bats-core/archive/v1.1.0.tar.gz\n$ openssl sha256 v1.1.0.tar.gz\nSHA256(v1.1.0.tar.gz)=855d8b8bed466bc505e61123d12885500ef6fcdb317ace1b668087364717ea82\n\n# Add the --dry-run flag to see the individual steps without executing.\n",
                      "markdown": "`\n```bash\n$ curl -LOv https://github.com/bats-core/bats-core/archive/v1.1.0.tar.gz\n$ openssl sha256 v1.1.0.tar.gz\nSHA256(v1.1.0.tar.gz)=855d8b8bed466bc505e61123d12885500ef6fcdb317ace1b668087364717ea82\n\n# Add the --dry-run flag to see the individual steps without executing.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/releasing.md"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 85,
                  "endColumn": 7,
                  "snippet": {
                    "text": "An example using v1.1.0 (notice that this uses the sha256 sum of the tarball):\n\n```bash\n$ curl -LOv https://github.com/bats-core/bats-core/archive/v1.1.0.tar.gz\n$ openssl sha256 v1.1.0.tar.gz\nSHA256(v1.1.0.tar.gz)=855d8b8bed466bc505e61123d12885500ef6fcdb317ace1b668087364717ea82\n\n",
                    "rendered": {
                      "text": "An example using v1.1.0 (notice that this uses the sha256 sum of the tarball):\n\n```bash\n$ curl -LOv https://github.com/bats-core/bats-core/archive/v1.1.0.tar.gz\n$ openssl sha256 v1.1.0.tar.gz\nSHA256(v1.1.0.tar.gz)=855d8b8bed466bc505e61123d12885500ef6fcdb317ace1b668087364717ea82\n\n",
                      "markdown": "`An example using v1.1.0 (notice that this uses the sha256 sum of the tarball):\n\n```bash\n$ curl -LOv https://github.com/bats-core/bats-core/archive/v1.1.0.tar.gz\n$ openssl sha256 v1.1.0.tar.gz\nSHA256(v1.1.0.tar.gz)=855d8b8bed466bc505e61123d12885500ef6fcdb317ace1b668087364717ea82\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/releasing.md"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 1,
                  "endLine": 48,
                  "endColumn": 6,
                  "snippet": {
                    "text": "Push the new version commit and tag to GitHub via the following:\n\n```bash\n$ git push --follow-tags\n```\n\nThen visit https://github.com/bats-core/bats-core/releases, and:\n",
                    "rendered": {
                      "text": "Push the new version commit and tag to GitHub via the following:\n\n```bash\n$ git push --follow-tags\n```\n\nThen visit https://github.com/bats-core/bats-core/releases, and:\n",
                      "markdown": "`Push the new version commit and tag to GitHub via the following:\n\n```bash\n$ git push --follow-tags\n```\n\nThen visit https://github.com/bats-core/bats-core/releases, and:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/releasing.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 6,
                  "snippet": {
                    "text": "Create a new signed, annotated tag with:\n\n```bash\n$ git tag -a -s <VERSION>\n```\n\nInclude the `docs/CHANGELOG.md` notes corresponding to the new version as the\n",
                    "rendered": {
                      "text": "Create a new signed, annotated tag with:\n\n```bash\n$ git tag -a -s <VERSION>\n```\n\nInclude the `docs/CHANGELOG.md` notes corresponding to the new version as the\n",
                      "markdown": "`Create a new signed, annotated tag with:\n\n```bash\n$ git tag -a -s <VERSION>\n```\n\nInclude the `docs/CHANGELOG.md` notes corresponding to the new version as the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/releasing.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 25,
                  "endLine": 9,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n## Update docs/CHANGELOG.md\n\nCreate a new entry at the top of `docs/CHANGELOG.md` that enumerates the\nsignificant updates to the new version.\n\n## Bumping the version number\n",
                    "rendered": {
                      "text": "\n## Update docs/CHANGELOG.md\n\nCreate a new entry at the top of `docs/CHANGELOG.md` that enumerates the\nsignificant updates to the new version.\n\n## Bumping the version number\n",
                      "markdown": "`\n## Update docs/CHANGELOG.md\n\nCreate a new entry at the top of `docs/CHANGELOG.md` that enumerates the\nsignificant updates to the new version.\n\n## Bumping the version number\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 68,
                  "endLine": 552,
                  "endColumn": 72,
                  "snippet": {
                    "text": "## [0.3.0] - 2013-10-21\n\n* Improved formatting for tests run from a terminal. Failing tests are now\n  colored in red, and the total number of failing tests is displayed at the end\n  of the test run. When Bats is not connected to a terminal (e.g. in CI runs),\n  or when invoked with the `--tap` flag, output is displayed in standard TAP\n  format.\n",
                    "rendered": {
                      "text": "## [0.3.0] - 2013-10-21\n\n* Improved formatting for tests run from a terminal. Failing tests are now\n  colored in red, and the total number of failing tests is displayed at the end\n  of the test run. When Bats is not connected to a terminal (e.g. in CI runs),\n  or when invoked with the `--tap` flag, output is displayed in standard TAP\n  format.\n",
                      "markdown": "`## [0.3.0] - 2013-10-21\n\n* Improved formatting for tests run from a terminal. Failing tests are now\n  colored in red, and the total number of failing tests is displayed at the end\n  of the test run. When Bats is not connected to a terminal (e.g. in CI runs),\n  or when invoked with the `--tap` flag, output is displayed in standard TAP\n  format.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 1,
                  "endLine": 522,
                  "endColumn": 7,
                  "snippet": {
                    "text": "* Massive performance improvements, especially on Windows (#8)\n* Workarounds for inconsistent behavior between Bash versions (#82)\n* Workaround for preserving stack info after calling an exported function under\n  Bash < 4.4 (#87)\n* Fixed TAP compliance for skipped tests\n* Added support for tabs in test names.\n* `bin/bats` and `install.sh` now work reliably on Windows (#91)\n",
                    "rendered": {
                      "text": "* Massive performance improvements, especially on Windows (#8)\n* Workarounds for inconsistent behavior between Bash versions (#82)\n* Workaround for preserving stack info after calling an exported function under\n  Bash < 4.4 (#87)\n* Fixed TAP compliance for skipped tests\n* Added support for tabs in test names.\n* `bin/bats` and `install.sh` now work reliably on Windows (#91)\n",
                      "markdown": "`* Massive performance improvements, especially on Windows (#8)\n* Workarounds for inconsistent behavior between Bash versions (#82)\n* Workaround for preserving stack info after calling an exported function under\n  Bash < 4.4 (#87)\n* Fixed TAP compliance for skipped tests\n* Added support for tabs in test names.\n* `bin/bats` and `install.sh` now work reliably on Windows (#91)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 47,
                  "endLine": 520,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/) enabled.\n* Improved stability on Windows and macOS platforms.\n* Massive performance improvements, especially on Windows (#8)\n* Workarounds for inconsistent behavior between Bash versions (#82)\n* Workaround for preserving stack info after calling an exported function under\n  Bash < 4.4 (#87)\n* Fixed TAP compliance for skipped tests\n",
                    "rendered": {
                      "text": "  mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/) enabled.\n* Improved stability on Windows and macOS platforms.\n* Massive performance improvements, especially on Windows (#8)\n* Workarounds for inconsistent behavior between Bash versions (#82)\n* Workaround for preserving stack info after calling an exported function under\n  Bash < 4.4 (#87)\n* Fixed TAP compliance for skipped tests\n",
                      "markdown": "`  mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/) enabled.\n* Improved stability on Windows and macOS platforms.\n* Massive performance improvements, especially on Windows (#8)\n* Workarounds for inconsistent behavior between Bash versions (#82)\n* Workaround for preserving stack info after calling an exported function under\n  Bash < 4.4 (#87)\n* Fixed TAP compliance for skipped tests\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 511,
                  "startColumn": 13,
                  "endLine": 511,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n* all existing tests should remain compatible\n* tests that might've failed or exhibited unexpected behavior on earlier\n  versions of Bash should now also pass or behave as expected\n\nChanges:\n\n",
                    "rendered": {
                      "text": "\n* all existing tests should remain compatible\n* tests that might've failed or exhibited unexpected behavior on earlier\n  versions of Bash should now also pass or behave as expected\n\nChanges:\n\n",
                      "markdown": "`\n* all existing tests should remain compatible\n* tests that might've failed or exhibited unexpected behavior on earlier\n  versions of Bash should now also pass or behave as expected\n\nChanges:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 69,
                  "endLine": 507,
                  "snippet": {
                    "text": "\n## [1.0.0] - 2018-06-08\n\n`1.0.0` generally preserves compatibility with `0.4.0`, but with some Bash\ncompatibility improvements and a massive performance boost. In other words:\n\n* all existing tests should remain compatible\n* tests that might've failed or exhibited unexpected behavior on earlier\n",
                    "rendered": {
                      "text": "\n## [1.0.0] - 2018-06-08\n\n`1.0.0` generally preserves compatibility with `0.4.0`, but with some Bash\ncompatibility improvements and a massive performance boost. In other words:\n\n* all existing tests should remain compatible\n* tests that might've failed or exhibited unexpected behavior on earlier\n",
                      "markdown": "`\n## [1.0.0] - 2018-06-08\n\n`1.0.0` generally preserves compatibility with `0.4.0`, but with some Bash\ncompatibility improvements and a massive performance boost. In other words:\n\n* all existing tests should remain compatible\n* tests that might've failed or exhibited unexpected behavior on earlier\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 16,
                  "endLine": 492,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  * Better README badges (#101)\n  * Better installation instructions (#102, #104)\n* Packaging/installation improvements:\n  * package.json update (#100)\n  * Moved `libexec/` files to `libexec/bats-core/`, improved `install.sh` (#105)\n\n## [1.0.1] - 2018-06-09\n",
                    "rendered": {
                      "text": "  * Better README badges (#101)\n  * Better installation instructions (#102, #104)\n* Packaging/installation improvements:\n  * package.json update (#100)\n  * Moved `libexec/` files to `libexec/bats-core/`, improved `install.sh` (#105)\n\n## [1.0.1] - 2018-06-09\n",
                      "markdown": "`  * Better README badges (#101)\n  * Better installation instructions (#102, #104)\n* Packaging/installation improvements:\n  * package.json update (#100)\n  * Moved `libexec/` files to `libexec/bats-core/`, improved `install.sh` (#105)\n\n## [1.0.1] - 2018-06-09\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 479,
                  "startColumn": 13,
                  "endLine": 479,
                  "endColumn": 19,
                  "snippet": {
                    "text": "### Fixed\n\n* Fixed `BATS_ERROR_STATUS` getting lost when `bats_error_trap` fired multiple\n  times under Bash 4.2.x (#110)\n* Updated `bin/bats` symlink resolution, handling the case on CentOS where\n  `/bin` is a symlink to `/usr/bin` (#113, #115)\n\n",
                    "rendered": {
                      "text": "### Fixed\n\n* Fixed `BATS_ERROR_STATUS` getting lost when `bats_error_trap` fired multiple\n  times under Bash 4.2.x (#110)\n* Updated `bin/bats` symlink resolution, handling the case on CentOS where\n  `/bin` is a symlink to `/usr/bin` (#113, #115)\n\n",
                      "markdown": "`### Fixed\n\n* Fixed `BATS_ERROR_STATUS` getting lost when `bats_error_trap` fired multiple\n  times under Bash 4.2.x (#110)\n* Updated `bin/bats` symlink resolution, handling the case on CentOS where\n  `/bin` is a symlink to `/usr/bin` (#113, #115)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 37,
                  "endLine": 472,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n### Changed\n\n* Travis exercises latest versions of Bash from 3.2 through 4.4 (#116, #117)\n* Error output highlights invalid command line options (#45, #46, #118)\n* Replaced `echo` with `printf` (#120)\n\n",
                    "rendered": {
                      "text": "\n### Changed\n\n* Travis exercises latest versions of Bash from 3.2 through 4.4 (#116, #117)\n* Error output highlights invalid command line options (#45, #46, #118)\n* Replaced `echo` with `printf` (#120)\n\n",
                      "markdown": "`\n### Changed\n\n* Travis exercises latest versions of Bash from 3.2 through 4.4 (#116, #117)\n* Error output highlights invalid command line options (#45, #46, #118)\n* Replaced `echo` with `printf` (#120)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 457,
                  "startColumn": 37,
                  "endLine": 457,
                  "endColumn": 43,
                  "snippet": {
                    "text": "* Add Bash 5 as test target (#181)\n* Always use upper case signal names to avoid locale dependent err… (#215)\n* Fix for tests reading from stdin (#227)\n* Fix wrong line numbers of errors in bash < 4.4 (#229)\n* Remove preprocessed source after test run (#232)\n\n## [1.1.0] - 2018-07-08\n",
                    "rendered": {
                      "text": "* Add Bash 5 as test target (#181)\n* Always use upper case signal names to avoid locale dependent err… (#215)\n* Fix for tests reading from stdin (#227)\n* Fix wrong line numbers of errors in bash < 4.4 (#229)\n* Remove preprocessed source after test run (#232)\n\n## [1.1.0] - 2018-07-08\n",
                      "markdown": "`* Add Bash 5 as test target (#181)\n* Always use upper case signal names to avoid locale dependent err… (#215)\n* Fix for tests reading from stdin (#227)\n* Fix wrong line numbers of errors in bash < 4.4 (#229)\n* Remove preprocessed source after test run (#232)\n\n## [1.1.0] - 2018-07-08\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 5,
                  "endLine": 454,
                  "endColumn": 11,
                  "snippet": {
                    "text": "### Changed\n\n* AppVeyor builds are now semver-compliant (#123)\n* Add Bash 5 as test target (#181)\n* Always use upper case signal names to avoid locale dependent err… (#215)\n* Fix for tests reading from stdin (#227)\n* Fix wrong line numbers of errors in bash < 4.4 (#229)\n",
                    "rendered": {
                      "text": "### Changed\n\n* AppVeyor builds are now semver-compliant (#123)\n* Add Bash 5 as test target (#181)\n* Always use upper case signal names to avoid locale dependent err… (#215)\n* Fix for tests reading from stdin (#227)\n* Fix wrong line numbers of errors in bash < 4.4 (#229)\n",
                      "markdown": "`### Changed\n\n* AppVeyor builds are now semver-compliant (#123)\n* Add Bash 5 as test target (#181)\n* Always use upper case signal names to avoid locale dependent err… (#215)\n* Fix for tests reading from stdin (#227)\n* Fix wrong line numbers of errors in bash < 4.4 (#229)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 39,
                  "endLine": 438,
                  "endColumn": 45,
                  "snippet": {
                    "text": "* Duplicate test names now error (previous behaviour was to issue a warning) (#286)\n* Changed default formatter in Docker to pretty by adding `ncurses` to\n  Dockerfile, override with `--tap` (#239)\n* Replace \"readlink -f\" dependency with Bash solution (#217)\n\n## [1.2.0] - 2020-04-25\n\n",
                    "rendered": {
                      "text": "* Duplicate test names now error (previous behaviour was to issue a warning) (#286)\n* Changed default formatter in Docker to pretty by adding `ncurses` to\n  Dockerfile, override with `--tap` (#239)\n* Replace \"readlink -f\" dependency with Bash solution (#217)\n\n## [1.2.0] - 2020-04-25\n\n",
                      "markdown": "`* Duplicate test names now error (previous behaviour was to issue a warning) (#286)\n* Changed default formatter in Docker to pretty by adding `ncurses` to\n  Dockerfile, override with `--tap` (#239)\n* Replace \"readlink -f\" dependency with Bash solution (#217)\n\n## [1.2.0] - 2020-04-25\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 37,
                  "endLine": 312,
                  "endColumn": 43,
                  "snippet": {
                    "text": "* remove empty line after test with pretty formatter on some terminals (#481)\n* don't run setup_file/teardown_file on files without tests, e.g. due to\n  filtering (#484)\n* print final line without newline on Bash 3.2 for midtest (ERREXIT) failures\n  too (#495, #145)\n* abort with error on missing flock/shlock when running in parallel mode  (#496)\n* improved `set -u` test and fixed some unset variable accesses (#498, #501)\n",
                    "rendered": {
                      "text": "* remove empty line after test with pretty formatter on some terminals (#481)\n* don't run setup_file/teardown_file on files without tests, e.g. due to\n  filtering (#484)\n* print final line without newline on Bash 3.2 for midtest (ERREXIT) failures\n  too (#495, #145)\n* abort with error on missing flock/shlock when running in parallel mode  (#496)\n* improved `set -u` test and fixed some unset variable accesses (#498, #501)\n",
                      "markdown": "`* remove empty line after test with pretty formatter on some terminals (#481)\n* don't run setup_file/teardown_file on files without tests, e.g. due to\n  filtering (#484)\n* print final line without newline on Bash 3.2 for midtest (ERREXIT) failures\n  too (#495, #145)\n* abort with error on missing flock/shlock when running in parallel mode  (#496)\n* improved `set -u` test and fixed some unset variable accesses (#498, #501)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 33,
                  "endLine": 277,
                  "endColumn": 39,
                  "snippet": {
                    "text": "* fix recurring errors on CTRL+C tests with NPM on Windows in selftest suite (#516)\n* fixed leaking of local variables from debug trap (#520)\n* don't mark FD3 output from `teardown_file` as `<failure>` in junit output (#532)\n* fix unbound variable error with Bash pre 4.4 (#550)\n\n#### Documentation\n\n",
                    "rendered": {
                      "text": "* fix recurring errors on CTRL+C tests with NPM on Windows in selftest suite (#516)\n* fixed leaking of local variables from debug trap (#520)\n* don't mark FD3 output from `teardown_file` as `<failure>` in junit output (#532)\n* fix unbound variable error with Bash pre 4.4 (#550)\n\n#### Documentation\n\n",
                      "markdown": "`* fix recurring errors on CTRL+C tests with NPM on Windows in selftest suite (#516)\n* fixed leaking of local variables from debug trap (#520)\n* don't mark FD3 output from `teardown_file` as `<failure>` in junit output (#532)\n* fix unbound variable error with Bash pre 4.4 (#550)\n\n#### Documentation\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 23,
                  "endLine": 235,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n#### Documentation\n\n* remove 2018 in title, update copyright dates in README.md (#567)\n* fix broken links (#568)\n* corrected invalid documentation of `run -N` (had `=N` instead) (#579)\n  * **CRITICAL**: using the incorrect form can lead to silent errors. See\n",
                    "rendered": {
                      "text": "\n#### Documentation\n\n* remove 2018 in title, update copyright dates in README.md (#567)\n* fix broken links (#568)\n* corrected invalid documentation of `run -N` (had `=N` instead) (#579)\n  * **CRITICAL**: using the incorrect form can lead to silent errors. See\n",
                      "markdown": "`\n#### Documentation\n\n* remove 2018 in title, update copyright dates in README.md (#567)\n* fix broken links (#568)\n* corrected invalid documentation of `run -N` (had `=N` instead) (#579)\n  * **CRITICAL**: using the incorrect form can lead to silent errors. See\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 1,
                  "endLine": 167,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n#### Documentation\n\n* update gotcha about negated statements: Recommend using `run !` on Bats\n  versions >=1.5.0 (#593)\n* add documentation for `bats_require_minimum_version` (#595)\n* improve documentation about `setup_suite` (#652)\n",
                    "rendered": {
                      "text": "\n#### Documentation\n\n* update gotcha about negated statements: Recommend using `run !` on Bats\n  versions >=1.5.0 (#593)\n* add documentation for `bats_require_minimum_version` (#595)\n* improve documentation about `setup_suite` (#652)\n",
                      "markdown": "`\n#### Documentation\n\n* update gotcha about negated statements: Recommend using `run !` on Bats\n  versions >=1.5.0 (#593)\n* add documentation for `bats_require_minimum_version` (#595)\n* improve documentation about `setup_suite` (#652)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 48,
                  "endLine": 143,
                  "endColumn": 54,
                  "snippet": {
                    "text": "### Fixed\n\n* `shfmt` all files and enforce via CI (#651)\n* avoid kernel warning flood/hang with CTRL+C on Bash 5.2 RC (#656)\n* Fix infinite wait with (invalid) `-j<n>` (without space) (#657)\n\n## [1.8.0] - 2022-09-15\n",
                    "rendered": {
                      "text": "### Fixed\n\n* `shfmt` all files and enforce via CI (#651)\n* avoid kernel warning flood/hang with CTRL+C on Bash 5.2 RC (#656)\n* Fix infinite wait with (invalid) `-j<n>` (without space) (#657)\n\n## [1.8.0] - 2022-09-15\n",
                      "markdown": "`### Fixed\n\n* `shfmt` all files and enforce via CI (#651)\n* avoid kernel warning flood/hang with CTRL+C on Bash 5.2 RC (#656)\n* Fix infinite wait with (invalid) `-j<n>` (without space) (#657)\n\n## [1.8.0] - 2022-09-15\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 1,
                  "endLine": 65,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#### Documentation\n\n* clarify docker usage (#741)\n* update Arch Linux package URL in installation.rst (#821)\n* rename bash-bats to bats for Arch Linux in installation.rst (#836)\n* fix FAQ entry about setup-/teardown_suite, as they are available now (#861)\n* added logo (#881)\n",
                    "rendered": {
                      "text": "#### Documentation\n\n* clarify docker usage (#741)\n* update Arch Linux package URL in installation.rst (#821)\n* rename bash-bats to bats for Arch Linux in installation.rst (#836)\n* fix FAQ entry about setup-/teardown_suite, as they are available now (#861)\n* added logo (#881)\n",
                      "markdown": "`#### Documentation\n\n* clarify docker usage (#741)\n* update Arch Linux package URL in installation.rst (#821)\n* rename bash-bats to bats for Arch Linux in installation.rst (#836)\n* fix FAQ entry about setup-/teardown_suite, as they are available now (#861)\n* added logo (#881)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 9,
                  "snippet": {
                    "text": "### Changed\n\n* update Docker image with the latest `bats-file` version 0.4.0 (#780)\n* update Docker image with the latest `bats-detik` version 1.3.0 (#876)\n\n#### Documentation\n\n",
                    "rendered": {
                      "text": "### Changed\n\n* update Docker image with the latest `bats-file` version 0.4.0 (#780)\n* update Docker image with the latest `bats-detik` version 1.3.0 (#876)\n\n#### Documentation\n\n",
                      "markdown": "`### Changed\n\n* update Docker image with the latest `bats-file` version 0.4.0 (#780)\n* update Docker image with the latest `bats-detik` version 1.3.0 (#876)\n\n#### Documentation\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n### Changed\n\n* update Docker image with the latest `bats-file` version 0.4.0 (#780)\n* update Docker image with the latest `bats-detik` version 1.3.0 (#876)\n\n#### Documentation\n",
                    "rendered": {
                      "text": "\n### Changed\n\n* update Docker image with the latest `bats-file` version 0.4.0 (#780)\n* update Docker image with the latest `bats-detik` version 1.3.0 (#876)\n\n#### Documentation\n",
                      "markdown": "`\n### Changed\n\n* update Docker image with the latest `bats-file` version 0.4.0 (#780)\n* update Docker image with the latest `bats-detik` version 1.3.0 (#876)\n\n#### Documentation\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 38,
                  "endLine": 45,
                  "endColumn": 44,
                  "snippet": {
                    "text": "* add security.md (#762)\n* add codespell CI checks (#720)\n* dynamic test registration via `bats_test_function` (#349)\n* add check that Bats is executed with Bash >= 3.2 (#873)\n\n### Fixed\n\n",
                    "rendered": {
                      "text": "* add security.md (#762)\n* add codespell CI checks (#720)\n* dynamic test registration via `bats_test_function` (#349)\n* add check that Bats is executed with Bash >= 3.2 (#873)\n\n### Fixed\n\n",
                      "markdown": "`* add security.md (#762)\n* add codespell CI checks (#720)\n* dynamic test registration via `bats_test_function` (#349)\n* add check that Bats is executed with Bash >= 3.2 (#873)\n\n### Fixed\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "endLine": 30,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n### Changed\n\n* update Docker image with the latest `bats-detik` version 1.3.1 (#932)\n* cleanup: remove unused `$BATS_FILTER` (#907)\n\n#### Documentation\n",
                    "rendered": {
                      "text": "\n### Changed\n\n* update Docker image with the latest `bats-detik` version 1.3.1 (#932)\n* cleanup: remove unused `$BATS_FILTER` (#907)\n\n#### Documentation\n",
                      "markdown": "`\n### Changed\n\n* update Docker image with the latest `bats-detik` version 1.3.1 (#932)\n* cleanup: remove unused `$BATS_FILTER` (#907)\n\n#### Documentation\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 1,
                  "endLine": 522,
                  "endColumn": 7,
                  "snippet": {
                    "text": "* Massive performance improvements, especially on Windows (#8)\n* Workarounds for inconsistent behavior between Bash versions (#82)\n* Workaround for preserving stack info after calling an exported function under\n  Bash < 4.4 (#87)\n* Fixed TAP compliance for skipped tests\n* Added support for tabs in test names.\n* `bin/bats` and `install.sh` now work reliably on Windows (#91)\n",
                    "rendered": {
                      "text": "* Massive performance improvements, especially on Windows (#8)\n* Workarounds for inconsistent behavior between Bash versions (#82)\n* Workaround for preserving stack info after calling an exported function under\n  Bash < 4.4 (#87)\n* Fixed TAP compliance for skipped tests\n* Added support for tabs in test names.\n* `bin/bats` and `install.sh` now work reliably on Windows (#91)\n",
                      "markdown": "`* Massive performance improvements, especially on Windows (#8)\n* Workarounds for inconsistent behavior between Bash versions (#82)\n* Workaround for preserving stack info after calling an exported function under\n  Bash < 4.4 (#87)\n* Fixed TAP compliance for skipped tests\n* Added support for tabs in test names.\n* `bin/bats` and `install.sh` now work reliably on Windows (#91)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 47,
                  "endLine": 520,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/) enabled.\n* Improved stability on Windows and macOS platforms.\n* Massive performance improvements, especially on Windows (#8)\n* Workarounds for inconsistent behavior between Bash versions (#82)\n* Workaround for preserving stack info after calling an exported function under\n  Bash < 4.4 (#87)\n* Fixed TAP compliance for skipped tests\n",
                    "rendered": {
                      "text": "  mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/) enabled.\n* Improved stability on Windows and macOS platforms.\n* Massive performance improvements, especially on Windows (#8)\n* Workarounds for inconsistent behavior between Bash versions (#82)\n* Workaround for preserving stack info after calling an exported function under\n  Bash < 4.4 (#87)\n* Fixed TAP compliance for skipped tests\n",
                      "markdown": "`  mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/) enabled.\n* Improved stability on Windows and macOS platforms.\n* Massive performance improvements, especially on Windows (#8)\n* Workarounds for inconsistent behavior between Bash versions (#82)\n* Workaround for preserving stack info after calling an exported function under\n  Bash < 4.4 (#87)\n* Fixed TAP compliance for skipped tests\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 511,
                  "startColumn": 13,
                  "endLine": 511,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n* all existing tests should remain compatible\n* tests that might've failed or exhibited unexpected behavior on earlier\n  versions of Bash should now also pass or behave as expected\n\nChanges:\n\n",
                    "rendered": {
                      "text": "\n* all existing tests should remain compatible\n* tests that might've failed or exhibited unexpected behavior on earlier\n  versions of Bash should now also pass or behave as expected\n\nChanges:\n\n",
                      "markdown": "`\n* all existing tests should remain compatible\n* tests that might've failed or exhibited unexpected behavior on earlier\n  versions of Bash should now also pass or behave as expected\n\nChanges:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 69,
                  "endLine": 507,
                  "snippet": {
                    "text": "\n## [1.0.0] - 2018-06-08\n\n`1.0.0` generally preserves compatibility with `0.4.0`, but with some Bash\ncompatibility improvements and a massive performance boost. In other words:\n\n* all existing tests should remain compatible\n* tests that might've failed or exhibited unexpected behavior on earlier\n",
                    "rendered": {
                      "text": "\n## [1.0.0] - 2018-06-08\n\n`1.0.0` generally preserves compatibility with `0.4.0`, but with some Bash\ncompatibility improvements and a massive performance boost. In other words:\n\n* all existing tests should remain compatible\n* tests that might've failed or exhibited unexpected behavior on earlier\n",
                      "markdown": "`\n## [1.0.0] - 2018-06-08\n\n`1.0.0` generally preserves compatibility with `0.4.0`, but with some Bash\ncompatibility improvements and a massive performance boost. In other words:\n\n* all existing tests should remain compatible\n* tests that might've failed or exhibited unexpected behavior on earlier\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 3,
                  "endLine": 488,
                  "endColumn": 11,
                  "snippet": {
                    "text": "* Fixed sstephenson/bats#240, whereby `skip` messages containing parentheses\n  were truncated (#48)\n* Doc improvements:\n  * Docker usage (#94)\n  * Better README badges (#101)\n  * Better installation instructions (#102, #104)\n* Packaging/installation improvements:\n",
                    "rendered": {
                      "text": "* Fixed sstephenson/bats#240, whereby `skip` messages containing parentheses\n  were truncated (#48)\n* Doc improvements:\n  * Docker usage (#94)\n  * Better README badges (#101)\n  * Better installation instructions (#102, #104)\n* Packaging/installation improvements:\n",
                      "markdown": "`* Fixed sstephenson/bats#240, whereby `skip` messages containing parentheses\n  were truncated (#48)\n* Doc improvements:\n  * Docker usage (#94)\n  * Better README badges (#101)\n  * Better installation instructions (#102, #104)\n* Packaging/installation improvements:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 479,
                  "startColumn": 13,
                  "endLine": 479,
                  "endColumn": 19,
                  "snippet": {
                    "text": "### Fixed\n\n* Fixed `BATS_ERROR_STATUS` getting lost when `bats_error_trap` fired multiple\n  times under Bash 4.2.x (#110)\n* Updated `bin/bats` symlink resolution, handling the case on CentOS where\n  `/bin` is a symlink to `/usr/bin` (#113, #115)\n\n",
                    "rendered": {
                      "text": "### Fixed\n\n* Fixed `BATS_ERROR_STATUS` getting lost when `bats_error_trap` fired multiple\n  times under Bash 4.2.x (#110)\n* Updated `bin/bats` symlink resolution, handling the case on CentOS where\n  `/bin` is a symlink to `/usr/bin` (#113, #115)\n\n",
                      "markdown": "`### Fixed\n\n* Fixed `BATS_ERROR_STATUS` getting lost when `bats_error_trap` fired multiple\n  times under Bash 4.2.x (#110)\n* Updated `bin/bats` symlink resolution, handling the case on CentOS where\n  `/bin` is a symlink to `/usr/bin` (#113, #115)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 37,
                  "endLine": 472,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n### Changed\n\n* Travis exercises latest versions of Bash from 3.2 through 4.4 (#116, #117)\n* Error output highlights invalid command line options (#45, #46, #118)\n* Replaced `echo` with `printf` (#120)\n\n",
                    "rendered": {
                      "text": "\n### Changed\n\n* Travis exercises latest versions of Bash from 3.2 through 4.4 (#116, #117)\n* Error output highlights invalid command line options (#45, #46, #118)\n* Replaced `echo` with `printf` (#120)\n\n",
                      "markdown": "`\n### Changed\n\n* Travis exercises latest versions of Bash from 3.2 through 4.4 (#116, #117)\n* Error output highlights invalid command line options (#45, #46, #118)\n* Replaced `echo` with `printf` (#120)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 457,
                  "startColumn": 37,
                  "endLine": 457,
                  "endColumn": 43,
                  "snippet": {
                    "text": "* Add Bash 5 as test target (#181)\n* Always use upper case signal names to avoid locale dependent err… (#215)\n* Fix for tests reading from stdin (#227)\n* Fix wrong line numbers of errors in bash < 4.4 (#229)\n* Remove preprocessed source after test run (#232)\n\n## [1.1.0] - 2018-07-08\n",
                    "rendered": {
                      "text": "* Add Bash 5 as test target (#181)\n* Always use upper case signal names to avoid locale dependent err… (#215)\n* Fix for tests reading from stdin (#227)\n* Fix wrong line numbers of errors in bash < 4.4 (#229)\n* Remove preprocessed source after test run (#232)\n\n## [1.1.0] - 2018-07-08\n",
                      "markdown": "`* Add Bash 5 as test target (#181)\n* Always use upper case signal names to avoid locale dependent err… (#215)\n* Fix for tests reading from stdin (#227)\n* Fix wrong line numbers of errors in bash < 4.4 (#229)\n* Remove preprocessed source after test run (#232)\n\n## [1.1.0] - 2018-07-08\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 5,
                  "endLine": 454,
                  "endColumn": 11,
                  "snippet": {
                    "text": "### Changed\n\n* AppVeyor builds are now semver-compliant (#123)\n* Add Bash 5 as test target (#181)\n* Always use upper case signal names to avoid locale dependent err… (#215)\n* Fix for tests reading from stdin (#227)\n* Fix wrong line numbers of errors in bash < 4.4 (#229)\n",
                    "rendered": {
                      "text": "### Changed\n\n* AppVeyor builds are now semver-compliant (#123)\n* Add Bash 5 as test target (#181)\n* Always use upper case signal names to avoid locale dependent err… (#215)\n* Fix for tests reading from stdin (#227)\n* Fix wrong line numbers of errors in bash < 4.4 (#229)\n",
                      "markdown": "`### Changed\n\n* AppVeyor builds are now semver-compliant (#123)\n* Add Bash 5 as test target (#181)\n* Always use upper case signal names to avoid locale dependent err… (#215)\n* Fix for tests reading from stdin (#227)\n* Fix wrong line numbers of errors in bash < 4.4 (#229)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 39,
                  "endLine": 438,
                  "endColumn": 45,
                  "snippet": {
                    "text": "* Duplicate test names now error (previous behaviour was to issue a warning) (#286)\n* Changed default formatter in Docker to pretty by adding `ncurses` to\n  Dockerfile, override with `--tap` (#239)\n* Replace \"readlink -f\" dependency with Bash solution (#217)\n\n## [1.2.0] - 2020-04-25\n\n",
                    "rendered": {
                      "text": "* Duplicate test names now error (previous behaviour was to issue a warning) (#286)\n* Changed default formatter in Docker to pretty by adding `ncurses` to\n  Dockerfile, override with `--tap` (#239)\n* Replace \"readlink -f\" dependency with Bash solution (#217)\n\n## [1.2.0] - 2020-04-25\n\n",
                      "markdown": "`* Duplicate test names now error (previous behaviour was to issue a warning) (#286)\n* Changed default formatter in Docker to pretty by adding `ncurses` to\n  Dockerfile, override with `--tap` (#239)\n* Replace \"readlink -f\" dependency with Bash solution (#217)\n\n## [1.2.0] - 2020-04-25\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 30,
                  "endLine": 436,
                  "endColumn": 38,
                  "snippet": {
                    "text": "### Changed\n\n* Duplicate test names now error (previous behaviour was to issue a warning) (#286)\n* Changed default formatter in Docker to pretty by adding `ncurses` to\n  Dockerfile, override with `--tap` (#239)\n* Replace \"readlink -f\" dependency with Bash solution (#217)\n\n",
                    "rendered": {
                      "text": "### Changed\n\n* Duplicate test names now error (previous behaviour was to issue a warning) (#286)\n* Changed default formatter in Docker to pretty by adding `ncurses` to\n  Dockerfile, override with `--tap` (#239)\n* Replace \"readlink -f\" dependency with Bash solution (#217)\n\n",
                      "markdown": "`### Changed\n\n* Duplicate test names now error (previous behaviour was to issue a warning) (#286)\n* Changed default formatter in Docker to pretty by adding `ncurses` to\n  Dockerfile, override with `--tap` (#239)\n* Replace \"readlink -f\" dependency with Bash solution (#217)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 37,
                  "endLine": 406,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n* fix internal failures due to unbound variables when test files use `set -u` (#392)\n* fix internal failures due to changes to `$PATH` in test files (#387)\n* fix test duration always being 0 on busybox installs (#363)\n* fix hangs on CTRL+C (#354)\n* make `BATS_TEST_NUMBER` count per file again (#326)\n* include `lib/` in npm package (#352)\n",
                    "rendered": {
                      "text": "\n* fix internal failures due to unbound variables when test files use `set -u` (#392)\n* fix internal failures due to changes to `$PATH` in test files (#387)\n* fix test duration always being 0 on busybox installs (#363)\n* fix hangs on CTRL+C (#354)\n* make `BATS_TEST_NUMBER` count per file again (#326)\n* include `lib/` in npm package (#352)\n",
                      "markdown": "`\n* fix internal failures due to unbound variables when test files use `set -u` (#392)\n* fix internal failures due to changes to `$PATH` in test files (#387)\n* fix test duration always being 0 on busybox installs (#363)\n* fix hangs on CTRL+C (#354)\n* make `BATS_TEST_NUMBER` count per file again (#326)\n* include `lib/` in npm package (#352)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 26,
                  "endLine": 365,
                  "endColumn": 34,
                  "snippet": {
                    "text": "* fix YAML blocks in TAP13 formatter using `...` instead of `---` to start\n  a block (#442)\n* fixed some typos in comments (#441, #447)\n* ensure `/code` exists in docker container, to make examples work again  (#440)\n* also display error messages from free code (#429)\n* npm installed version on Windows: fix broken internal LIBEXEC paths (#459)\n\n",
                    "rendered": {
                      "text": "* fix YAML blocks in TAP13 formatter using `...` instead of `---` to start\n  a block (#442)\n* fixed some typos in comments (#441, #447)\n* ensure `/code` exists in docker container, to make examples work again  (#440)\n* also display error messages from free code (#429)\n* npm installed version on Windows: fix broken internal LIBEXEC paths (#459)\n\n",
                      "markdown": "`* fix YAML blocks in TAP13 formatter using `...` instead of `---` to start\n  a block (#442)\n* fixed some typos in comments (#441, #447)\n* ensure `/code` exists in docker container, to make examples work again  (#440)\n* also display error messages from free code (#429)\n* npm installed version on Windows: fix broken internal LIBEXEC paths (#459)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 72,
                  "endLine": 358,
                  "snippet": {
                    "text": "\n* fix `bats_tap_stream_unknown: command not found` with pretty formatter, when\n  writing non compliant extended output (#412)\n* avoid collisions on `$BATS_RUN_TMPDIR` with `--no-tempdir-cleanup` and docker\n  by using `mktemp` additionally to PID (#409)\n* pretty printer now puts text that is printed to FD 3 below the test name (#426)\n* `rm semaphores/slot-: No such file or directory` in parallel mode on MacOS\n  (#434, #433)\n",
                    "rendered": {
                      "text": "\n* fix `bats_tap_stream_unknown: command not found` with pretty formatter, when\n  writing non compliant extended output (#412)\n* avoid collisions on `$BATS_RUN_TMPDIR` with `--no-tempdir-cleanup` and docker\n  by using `mktemp` additionally to PID (#409)\n* pretty printer now puts text that is printed to FD 3 below the test name (#426)\n* `rm semaphores/slot-: No such file or directory` in parallel mode on MacOS\n  (#434, #433)\n",
                      "markdown": "`\n* fix `bats_tap_stream_unknown: command not found` with pretty formatter, when\n  writing non compliant extended output (#412)\n* avoid collisions on `$BATS_RUN_TMPDIR` with `--no-tempdir-cleanup` and docker\n  by using `mktemp` additionally to PID (#409)\n* pretty printer now puts text that is printed to FD 3 below the test name (#426)\n* `rm semaphores/slot-: No such file or directory` in parallel mode on MacOS\n  (#434, #433)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 29,
                  "endLine": 350,
                  "endColumn": 37,
                  "snippet": {
                    "text": "#### Documentation\n\n* added tutorial for new users (#397)\n* fixed example invocation of docker container (#440)\n* minor edits (#431, #439, #445, #463, #464, #465)\n\n### Fixed\n",
                    "rendered": {
                      "text": "#### Documentation\n\n* added tutorial for new users (#397)\n* fixed example invocation of docker container (#440)\n* minor edits (#431, #439, #445, #463, #464, #465)\n\n### Fixed\n",
                      "markdown": "`#### Documentation\n\n* added tutorial for new users (#397)\n* fixed example invocation of docker container (#440)\n* minor edits (#431, #439, #445, #463, #464, #465)\n\n### Fixed\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 1,
                  "endLine": 341,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* added checks and improved documentation for `$BATS_TMPDIR` (#410)\n* the docker container now uses [tini](https://github.com/krallin/tini) as the\n  container entrypoint to improve signal forwarding (#407)\n* script to uninstall bats from a given prefix (#400)\n* replace preprocessed file path (e.g. `/tmp/bats-run-22908-NP0f9h/bats.23102.src`)\n  with original filename in stdout/err (but not FD3!) (#429)\n* print aborted command on SIGINT/CTRL+C (#368)\n",
                    "rendered": {
                      "text": "* added checks and improved documentation for `$BATS_TMPDIR` (#410)\n* the docker container now uses [tini](https://github.com/krallin/tini) as the\n  container entrypoint to improve signal forwarding (#407)\n* script to uninstall bats from a given prefix (#400)\n* replace preprocessed file path (e.g. `/tmp/bats-run-22908-NP0f9h/bats.23102.src`)\n  with original filename in stdout/err (but not FD3!) (#429)\n* print aborted command on SIGINT/CTRL+C (#368)\n",
                      "markdown": "`* added checks and improved documentation for `$BATS_TMPDIR` (#410)\n* the docker container now uses [tini](https://github.com/krallin/tini) as the\n  container entrypoint to improve signal forwarding (#407)\n* script to uninstall bats from a given prefix (#400)\n* replace preprocessed file path (e.g. `/tmp/bats-run-22908-NP0f9h/bats.23102.src`)\n  with original filename in stdout/err (but not FD3!) (#429)\n* print aborted command on SIGINT/CTRL+C (#368)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 5,
                  "endLine": 339,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n* added BATS_TEST_TMPDIR, BATS_FILE_TMPDIR, BATS_SUITE_TMPDIR (#413)\n* added checks and improved documentation for `$BATS_TMPDIR` (#410)\n* the docker container now uses [tini](https://github.com/krallin/tini) as the\n  container entrypoint to improve signal forwarding (#407)\n* script to uninstall bats from a given prefix (#400)\n* replace preprocessed file path (e.g. `/tmp/bats-run-22908-NP0f9h/bats.23102.src`)\n",
                    "rendered": {
                      "text": "\n* added BATS_TEST_TMPDIR, BATS_FILE_TMPDIR, BATS_SUITE_TMPDIR (#413)\n* added checks and improved documentation for `$BATS_TMPDIR` (#410)\n* the docker container now uses [tini](https://github.com/krallin/tini) as the\n  container entrypoint to improve signal forwarding (#407)\n* script to uninstall bats from a given prefix (#400)\n* replace preprocessed file path (e.g. `/tmp/bats-run-22908-NP0f9h/bats.23102.src`)\n",
                      "markdown": "`\n* added BATS_TEST_TMPDIR, BATS_FILE_TMPDIR, BATS_SUITE_TMPDIR (#413)\n* added checks and improved documentation for `$BATS_TMPDIR` (#410)\n* the docker container now uses [tini](https://github.com/krallin/tini) as the\n  container entrypoint to improve signal forwarding (#407)\n* script to uninstall bats from a given prefix (#400)\n* replace preprocessed file path (e.g. `/tmp/bats-run-22908-NP0f9h/bats.23102.src`)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 1,
                  "endLine": 327,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n### Added\n\n* Docker image architectures amd64, 386, arm64, arm/v7, arm/v6, ppc64le, s390x (#438)\n\n### Fixed\n\n",
                    "rendered": {
                      "text": "\n### Added\n\n* Docker image architectures amd64, 386, arm64, arm/v7, arm/v6, ppc64le, s390x (#438)\n\n### Fixed\n\n",
                      "markdown": "`\n### Added\n\n* Docker image architectures amd64, 386, arm64, arm/v7, arm/v6, ppc64le, s390x (#438)\n\n### Fixed\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 37,
                  "endLine": 312,
                  "endColumn": 43,
                  "snippet": {
                    "text": "* remove empty line after test with pretty formatter on some terminals (#481)\n* don't run setup_file/teardown_file on files without tests, e.g. due to\n  filtering (#484)\n* print final line without newline on Bash 3.2 for midtest (ERREXIT) failures\n  too (#495, #145)\n* abort with error on missing flock/shlock when running in parallel mode  (#496)\n* improved `set -u` test and fixed some unset variable accesses (#498, #501)\n",
                    "rendered": {
                      "text": "* remove empty line after test with pretty formatter on some terminals (#481)\n* don't run setup_file/teardown_file on files without tests, e.g. due to\n  filtering (#484)\n* print final line without newline on Bash 3.2 for midtest (ERREXIT) failures\n  too (#495, #145)\n* abort with error on missing flock/shlock when running in parallel mode  (#496)\n* improved `set -u` test and fixed some unset variable accesses (#498, #501)\n",
                      "markdown": "`* remove empty line after test with pretty formatter on some terminals (#481)\n* don't run setup_file/teardown_file on files without tests, e.g. due to\n  filtering (#484)\n* print final line without newline on Bash 3.2 for midtest (ERREXIT) failures\n  too (#495, #145)\n* abort with error on missing flock/shlock when running in parallel mode  (#496)\n* improved `set -u` test and fixed some unset variable accesses (#498, #501)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 33,
                  "endLine": 277,
                  "endColumn": 39,
                  "snippet": {
                    "text": "* fix recurring errors on CTRL+C tests with NPM on Windows in selftest suite (#516)\n* fixed leaking of local variables from debug trap (#520)\n* don't mark FD3 output from `teardown_file` as `<failure>` in junit output (#532)\n* fix unbound variable error with Bash pre 4.4 (#550)\n\n#### Documentation\n\n",
                    "rendered": {
                      "text": "* fix recurring errors on CTRL+C tests with NPM on Windows in selftest suite (#516)\n* fixed leaking of local variables from debug trap (#520)\n* don't mark FD3 output from `teardown_file` as `<failure>` in junit output (#532)\n* fix unbound variable error with Bash pre 4.4 (#550)\n\n#### Documentation\n\n",
                      "markdown": "`* fix recurring errors on CTRL+C tests with NPM on Windows in selftest suite (#516)\n* fixed leaking of local variables from debug trap (#520)\n* don't mark FD3 output from `teardown_file` as `<failure>` in junit output (#532)\n* fix unbound variable error with Bash pre 4.4 (#550)\n\n#### Documentation\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 22,
                  "endLine": 256,
                  "endColumn": 28,
                  "snippet": {
                    "text": "* corrected invalid documentation of `run -N` (had `=N` instead) (#579)\n  * **CRITICAL**: using the incorrect form can lead to silent errors. See\n    [issue #578](https://github.com/bats-core/bats-core/issues/578) for more\n    details and how to find out if your tests are affected.\n\n## [1.6.0] - 2022-02-24\n\n",
                    "rendered": {
                      "text": "* corrected invalid documentation of `run -N` (had `=N` instead) (#579)\n  * **CRITICAL**: using the incorrect form can lead to silent errors. See\n    [issue #578](https://github.com/bats-core/bats-core/issues/578) for more\n    details and how to find out if your tests are affected.\n\n## [1.6.0] - 2022-02-24\n\n",
                      "markdown": "`* corrected invalid documentation of `run -N` (had `=N` instead) (#579)\n  * **CRITICAL**: using the incorrect form can lead to silent errors. See\n    [issue #578](https://github.com/bats-core/bats-core/issues/578) for more\n    details and how to find out if your tests are affected.\n\n## [1.6.0] - 2022-02-24\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 22,
                  "endLine": 240,
                  "endColumn": 28,
                  "snippet": {
                    "text": "* corrected invalid documentation of `run -N` (had `=N` instead) (#579)\n  * **CRITICAL**: using the incorrect form can lead to silent errors. See\n    [issue #578](https://github.com/bats-core/bats-core/issues/578) for more\n    details and how to find out if your tests are affected.\n\n## [1.6.1] - 2022-05-14\n\n",
                    "rendered": {
                      "text": "* corrected invalid documentation of `run -N` (had `=N` instead) (#579)\n  * **CRITICAL**: using the incorrect form can lead to silent errors. See\n    [issue #578](https://github.com/bats-core/bats-core/issues/578) for more\n    details and how to find out if your tests are affected.\n\n## [1.6.1] - 2022-05-14\n\n",
                      "markdown": "`* corrected invalid documentation of `run -N` (had `=N` instead) (#579)\n  * **CRITICAL**: using the incorrect form can lead to silent errors. See\n    [issue #578](https://github.com/bats-core/bats-core/issues/578) for more\n    details and how to find out if your tests are affected.\n\n## [1.6.1] - 2022-05-14\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 5,
                  "endLine": 193,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  only fail via return code, not via ERREXIT (#633)\n* fix unbound variable errors with `set -u` on `setup_suite` failures (#643)\n* fix `load` not being available in `setup_suite` (#644)\n* fix RPM spec, add regression test (#648)\n* fix handling of `IFS` by `run` (#650)\n* only print `setup_suite`'s stderr on errors (#649)\n\n",
                    "rendered": {
                      "text": "  only fail via return code, not via ERREXIT (#633)\n* fix unbound variable errors with `set -u` on `setup_suite` failures (#643)\n* fix `load` not being available in `setup_suite` (#644)\n* fix RPM spec, add regression test (#648)\n* fix handling of `IFS` by `run` (#650)\n* only print `setup_suite`'s stderr on errors (#649)\n\n",
                      "markdown": "`  only fail via return code, not via ERREXIT (#633)\n* fix unbound variable errors with `set -u` on `setup_suite` failures (#643)\n* fix `load` not being available in `setup_suite` (#644)\n* fix RPM spec, add regression test (#648)\n* fix handling of `IFS` by `run` (#650)\n* only print `setup_suite`'s stderr on errors (#649)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 41,
                  "endLine": 158,
                  "endColumn": 50,
                  "snippet": {
                    "text": "* Docker tags `latest-no-faccessat2` and `<bats-version\\>-no-faccessat2` for\n  avoiding `bash: bats: No such file or directory` on `docker<20.10` (or\n  `runc<v1.0.0-rc93`) (#622)\n* `BATS_TEST_TIMEOUT` variable to force a timeout on test (including `setup()`) (#491)\n* also print (nonempty) `$stderr` (from `run --separate-stderr`) with\n  `--print-output-on-failure` (#631)\n* `# bats test_tags=<tag list>`/`# bats file_tags=<tag list>` and\n",
                    "rendered": {
                      "text": "* Docker tags `latest-no-faccessat2` and `<bats-version\\>-no-faccessat2` for\n  avoiding `bash: bats: No such file or directory` on `docker<20.10` (or\n  `runc<v1.0.0-rc93`) (#622)\n* `BATS_TEST_TIMEOUT` variable to force a timeout on test (including `setup()`) (#491)\n* also print (nonempty) `$stderr` (from `run --separate-stderr`) with\n  `--print-output-on-failure` (#631)\n* `# bats test_tags=<tag list>`/`# bats file_tags=<tag list>` and\n",
                      "markdown": "`* Docker tags `latest-no-faccessat2` and `<bats-version\\>-no-faccessat2` for\n  avoiding `bash: bats: No such file or directory` on `docker<20.10` (or\n  `runc<v1.0.0-rc93`) (#622)\n* `BATS_TEST_TIMEOUT` variable to force a timeout on test (including `setup()`) (#491)\n* also print (nonempty) `$stderr` (from `run --separate-stderr`) with\n  `--print-output-on-failure` (#631)\n* `# bats test_tags=<tag list>`/`# bats file_tags=<tag list>` and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 1,
                  "endLine": 155,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* running only tests that failed in the last run via `--filter-status failed` (#483)\n* variable `BATS_TEST_RETRIES` that specifies how often a test should be\n  reattempted before it is considered failed (#618)\n* Docker tags `latest-no-faccessat2` and `<bats-version\\>-no-faccessat2` for\n  avoiding `bash: bats: No such file or directory` on `docker<20.10` (or\n  `runc<v1.0.0-rc93`) (#622)\n* `BATS_TEST_TIMEOUT` variable to force a timeout on test (including `setup()`) (#491)\n",
                    "rendered": {
                      "text": "* running only tests that failed in the last run via `--filter-status failed` (#483)\n* variable `BATS_TEST_RETRIES` that specifies how often a test should be\n  reattempted before it is considered failed (#618)\n* Docker tags `latest-no-faccessat2` and `<bats-version\\>-no-faccessat2` for\n  avoiding `bash: bats: No such file or directory` on `docker<20.10` (or\n  `runc<v1.0.0-rc93`) (#622)\n* `BATS_TEST_TIMEOUT` variable to force a timeout on test (including `setup()`) (#491)\n",
                      "markdown": "`* running only tests that failed in the last run via `--filter-status failed` (#483)\n* variable `BATS_TEST_RETRIES` that specifies how often a test should be\n  reattempted before it is considered failed (#618)\n* Docker tags `latest-no-faccessat2` and `<bats-version\\>-no-faccessat2` for\n  avoiding `bash: bats: No such file or directory` on `docker<20.10` (or\n  `runc<v1.0.0-rc93`) (#622)\n* `BATS_TEST_TIMEOUT` variable to force a timeout on test (including `setup()`) (#491)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 48,
                  "endLine": 143,
                  "endColumn": 54,
                  "snippet": {
                    "text": "### Fixed\n\n* `shfmt` all files and enforce via CI (#651)\n* avoid kernel warning flood/hang with CTRL+C on Bash 5.2 RC (#656)\n* Fix infinite wait with (invalid) `-j<n>` (without space) (#657)\n\n## [1.8.0] - 2022-09-15\n",
                    "rendered": {
                      "text": "### Fixed\n\n* `shfmt` all files and enforce via CI (#651)\n* avoid kernel warning flood/hang with CTRL+C on Bash 5.2 RC (#656)\n* Fix infinite wait with (invalid) `-j<n>` (without space) (#657)\n\n## [1.8.0] - 2022-09-15\n",
                      "markdown": "`### Fixed\n\n* `shfmt` all files and enforce via CI (#651)\n* avoid kernel warning flood/hang with CTRL+C on Bash 5.2 RC (#656)\n* Fix infinite wait with (invalid) `-j<n>` (without space) (#657)\n\n## [1.8.0] - 2022-09-15\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 57,
                  "endLine": 123,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n* explicitly check for GNU parallel (#691)\n* wait for report-formatter to finish before ending `bats`' execution,\n  to fix empty files with `--report-fomatter junit` under Docker (#692)\n\n#### Documentation\n\n",
                    "rendered": {
                      "text": "\n* explicitly check for GNU parallel (#691)\n* wait for report-formatter to finish before ending `bats`' execution,\n  to fix empty files with `--report-fomatter junit` under Docker (#692)\n\n#### Documentation\n\n",
                      "markdown": "`\n* explicitly check for GNU parallel (#691)\n* wait for report-formatter to finish before ending `bats`' execution,\n  to fix empty files with `--report-fomatter junit` under Docker (#692)\n\n#### Documentation\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 9,
                  "endLine": 81,
                  "endColumn": 17,
                  "snippet": {
                    "text": "* test coverage in CI (#718)\n* Support for [rush](https://github.com/shenwei356/rush) as alternative to GNU parallel (#729)\n* add `bats_pipe` helper function for `run` that executes `\\|` as pipes (#663)\n* publish docker images to ghcr.io (additionally to Dockerhub) (#740)\n\n### Documentation\n\n",
                    "rendered": {
                      "text": "* test coverage in CI (#718)\n* Support for [rush](https://github.com/shenwei356/rush) as alternative to GNU parallel (#729)\n* add `bats_pipe` helper function for `run` that executes `\\|` as pipes (#663)\n* publish docker images to ghcr.io (additionally to Dockerhub) (#740)\n\n### Documentation\n\n",
                      "markdown": "`* test coverage in CI (#718)\n* Support for [rush](https://github.com/shenwei356/rush) as alternative to GNU parallel (#729)\n* add `bats_pipe` helper function for `run` that executes `\\|` as pipes (#663)\n* publish docker images to ghcr.io (additionally to Dockerhub) (#740)\n\n### Documentation\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 9,
                  "endLine": 64,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n#### Documentation\n\n* clarify docker usage (#741)\n* update Arch Linux package URL in installation.rst (#821)\n* rename bash-bats to bats for Arch Linux in installation.rst (#836)\n* fix FAQ entry about setup-/teardown_suite, as they are available now (#861)\n",
                    "rendered": {
                      "text": "\n#### Documentation\n\n* clarify docker usage (#741)\n* update Arch Linux package URL in installation.rst (#821)\n* rename bash-bats to bats for Arch Linux in installation.rst (#836)\n* fix FAQ entry about setup-/teardown_suite, as they are available now (#861)\n",
                      "markdown": "`\n#### Documentation\n\n* clarify docker usage (#741)\n* update Arch Linux package URL in installation.rst (#821)\n* rename bash-bats to bats for Arch Linux in installation.rst (#836)\n* fix FAQ entry about setup-/teardown_suite, as they are available now (#861)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 8,
                  "endLine": 60,
                  "endColumn": 16,
                  "snippet": {
                    "text": "### Changed\n\n* update Docker image with the latest `bats-file` version 0.4.0 (#780)\n* update Docker image with the latest `bats-detik` version 1.3.0 (#876)\n\n#### Documentation\n\n",
                    "rendered": {
                      "text": "### Changed\n\n* update Docker image with the latest `bats-file` version 0.4.0 (#780)\n* update Docker image with the latest `bats-detik` version 1.3.0 (#876)\n\n#### Documentation\n\n",
                      "markdown": "`### Changed\n\n* update Docker image with the latest `bats-file` version 0.4.0 (#780)\n* update Docker image with the latest `bats-detik` version 1.3.0 (#876)\n\n#### Documentation\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 8,
                  "endLine": 59,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n### Changed\n\n* update Docker image with the latest `bats-file` version 0.4.0 (#780)\n* update Docker image with the latest `bats-detik` version 1.3.0 (#876)\n\n#### Documentation\n",
                    "rendered": {
                      "text": "\n### Changed\n\n* update Docker image with the latest `bats-file` version 0.4.0 (#780)\n* update Docker image with the latest `bats-detik` version 1.3.0 (#876)\n\n#### Documentation\n",
                      "markdown": "`\n### Changed\n\n* update Docker image with the latest `bats-file` version 0.4.0 (#780)\n* update Docker image with the latest `bats-detik` version 1.3.0 (#876)\n\n#### Documentation\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 38,
                  "endLine": 45,
                  "endColumn": 44,
                  "snippet": {
                    "text": "* add security.md (#762)\n* add codespell CI checks (#720)\n* dynamic test registration via `bats_test_function` (#349)\n* add check that Bats is executed with Bash >= 3.2 (#873)\n\n### Fixed\n\n",
                    "rendered": {
                      "text": "* add security.md (#762)\n* add codespell CI checks (#720)\n* dynamic test registration via `bats_test_function` (#349)\n* add check that Bats is executed with Bash >= 3.2 (#873)\n\n### Fixed\n\n",
                      "markdown": "`* add security.md (#762)\n* add codespell CI checks (#720)\n* dynamic test registration via `bats_test_function` (#349)\n* add check that Bats is executed with Bash >= 3.2 (#873)\n\n### Fixed\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 8,
                  "endLine": 30,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n### Changed\n\n* update Docker image with the latest `bats-detik` version 1.3.1 (#932)\n* cleanup: remove unused `$BATS_FILTER` (#907)\n\n#### Documentation\n",
                    "rendered": {
                      "text": "\n### Changed\n\n* update Docker image with the latest `bats-detik` version 1.3.1 (#932)\n* cleanup: remove unused `$BATS_FILTER` (#907)\n\n#### Documentation\n",
                      "markdown": "`\n### Changed\n\n* update Docker image with the latest `bats-detik` version 1.3.1 (#932)\n* cleanup: remove unused `$BATS_FILTER` (#907)\n\n#### Documentation\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CHANGELOG.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 9,
                  "snippet": {
                    "text": "### Fixed\n\n* unbreak test suites with multiple files loading common constants (#904), introduced in v1.11.0\n* docker image won't crash if a file or directory named 'bats' exists (#920)\n* use $BATS_LIBDIR instead of hardcoded lib in 'bats-gather-tests' (#985, #990)\n\n### Changed\n",
                    "rendered": {
                      "text": "### Fixed\n\n* unbreak test suites with multiple files loading common constants (#904), introduced in v1.11.0\n* docker image won't crash if a file or directory named 'bats' exists (#920)\n* use $BATS_LIBDIR instead of hardcoded lib in 'bats-gather-tests' (#985, #990)\n\n### Changed\n",
                      "markdown": "`### Fixed\n\n* unbreak test suites with multiple files loading common constants (#904), introduced in v1.11.0\n* docker image won't crash if a file or directory named 'bats' exists (#920)\n* use $BATS_LIBDIR instead of hardcoded lib in 'bats-gather-tests' (#985, #990)\n\n### Changed\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/common.bash"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 76,
                  "endLine": 197,
                  "endColumn": 82,
                  "snippet": {
                    "text": "  eval \"$1=\\$bats_trim_trimmed\"\n}\n\n# a helper function to work around unbound variable errors with ${arr[@]} on Bash 3\nbats_append_arrays_as_args() { # <array...> -- <command ...>\n  local -a trailing_args=()\n  while (($# > 0)) && [[ $1 != -- ]]; do\n",
                    "rendered": {
                      "text": "  eval \"$1=\\$bats_trim_trimmed\"\n}\n\n# a helper function to work around unbound variable errors with ${arr[@]} on Bash 3\nbats_append_arrays_as_args() { # <array...> -- <command ...>\n  local -a trailing_args=()\n  while (($# > 0)) && [[ $1 != -- ]]; do\n",
                      "markdown": "`  eval \"$1=\\$bats_trim_trimmed\"\n}\n\n# a helper function to work around unbound variable errors with ${arr[@]} on Bash 3\nbats_append_arrays_as_args() { # <array...> -- <command ...>\n  local -a trailing_args=()\n  while (($# > 0)) && [[ $1 != -- ]]; do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/common.bash"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 59,
                  "endLine": 149,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    for (( ; haystack_index < haystack_length; ++haystack_index)); do\n      eval \"local haystack_value=\\${${haystack_array}[$haystack_index]}\"\n      if [[ $haystack_value > \"$search_value\" ]]; then\n        # we passed the location this value would have been at -> not found\n        return 1\n      elif [[ $haystack_value == \"$search_value\" ]]; then\n        continue 2 # search value found  -> try the next one\n",
                    "rendered": {
                      "text": "    for (( ; haystack_index < haystack_length; ++haystack_index)); do\n      eval \"local haystack_value=\\${${haystack_array}[$haystack_index]}\"\n      if [[ $haystack_value > \"$search_value\" ]]; then\n        # we passed the location this value would have been at -> not found\n        return 1\n      elif [[ $haystack_value == \"$search_value\" ]]; then\n        continue 2 # search value found  -> try the next one\n",
                      "markdown": "`    for (( ; haystack_index < haystack_length; ++haystack_index)); do\n      eval \"local haystack_value=\\${${haystack_array}[$haystack_index]}\"\n      if [[ $haystack_value > \"$search_value\" ]]; then\n        # we passed the location this value would have been at -> not found\n        return 1\n      elif [[ $haystack_value == \"$search_value\" ]]; then\n        continue 2 # search value found  -> try the next one\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/common.bash"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 28,
                  "endLine": 123,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        sorted_array[i]=$current_value\n        break\n      else\n        # insert new element at (freed) desired location\n        sorted_array[i]=${sorted_array[i - 1]}\n      fi\n    done\n",
                    "rendered": {
                      "text": "        sorted_array[i]=$current_value\n        break\n      else\n        # insert new element at (freed) desired location\n        sorted_array[i]=${sorted_array[i - 1]}\n      fi\n    done\n",
                      "markdown": "`        sorted_array[i]=$current_value\n        break\n      else\n        # insert new element at (freed) desired location\n        sorted_array[i]=${sorted_array[i - 1]}\n      fi\n    done\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/common.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nbats_prefix_lines_for_tap_output() {\n  while IFS= read -r line; do\n    printf '# %s\\n' \"$line\" || break # avoid feedback loop when errors are redirected into BATS_OUT (see #353)\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nbats_prefix_lines_for_tap_output() {\n  while IFS= read -r line; do\n    printf '# %s\\n' \"$line\" || break # avoid feedback loop when errors are redirected into BATS_OUT (see #353)\n",
                      "markdown": "`#!/usr/bin/env bash\n\nbats_prefix_lines_for_tap_output() {\n  while IFS= read -r line; do\n    printf '# %s\\n' \"$line\" || break # avoid feedback loop when errors are redirected into BATS_OUT (see #353)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/common.bash"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 76,
                  "endLine": 197,
                  "endColumn": 82,
                  "snippet": {
                    "text": "  eval \"$1=\\$bats_trim_trimmed\"\n}\n\n# a helper function to work around unbound variable errors with ${arr[@]} on Bash 3\nbats_append_arrays_as_args() { # <array...> -- <command ...>\n  local -a trailing_args=()\n  while (($# > 0)) && [[ $1 != -- ]]; do\n",
                    "rendered": {
                      "text": "  eval \"$1=\\$bats_trim_trimmed\"\n}\n\n# a helper function to work around unbound variable errors with ${arr[@]} on Bash 3\nbats_append_arrays_as_args() { # <array...> -- <command ...>\n  local -a trailing_args=()\n  while (($# > 0)) && [[ $1 != -- ]]; do\n",
                      "markdown": "`  eval \"$1=\\$bats_trim_trimmed\"\n}\n\n# a helper function to work around unbound variable errors with ${arr[@]} on Bash 3\nbats_append_arrays_as_args() { # <array...> -- <command ...>\n  local -a trailing_args=()\n  while (($# > 0)) && [[ $1 != -- ]]; do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/common.bash"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 91,
                  "endLine": 193,
                  "endColumn": 96,
                  "snippet": {
                    "text": "bats_trim() {                                            # <output-variable> <string>\n  local -r bats_trim_ltrimmed=${2#\"${2%%[![:space:]]*}\"} # cut off leading whitespace\n  # shellcheck disable=SC2034 # used in eval!\n  local -r bats_trim_trimmed=${bats_trim_ltrimmed%\"${bats_trim_ltrimmed##*[![:space:]]}\"} # cut off trailing whitespace\n  eval \"$1=\\$bats_trim_trimmed\"\n}\n\n",
                    "rendered": {
                      "text": "bats_trim() {                                            # <output-variable> <string>\n  local -r bats_trim_ltrimmed=${2#\"${2%%[![:space:]]*}\"} # cut off leading whitespace\n  # shellcheck disable=SC2034 # used in eval!\n  local -r bats_trim_trimmed=${bats_trim_ltrimmed%\"${bats_trim_ltrimmed##*[![:space:]]}\"} # cut off trailing whitespace\n  eval \"$1=\\$bats_trim_trimmed\"\n}\n\n",
                      "markdown": "`bats_trim() {                                            # <output-variable> <string>\n  local -r bats_trim_ltrimmed=${2#\"${2%%[![:space:]]*}\"} # cut off leading whitespace\n  # shellcheck disable=SC2034 # used in eval!\n  local -r bats_trim_trimmed=${bats_trim_ltrimmed%\"${bats_trim_ltrimmed##*[![:space:]]}\"} # cut off trailing whitespace\n  eval \"$1=\\$bats_trim_trimmed\"\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/common.bash"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 58,
                  "endLine": 191,
                  "endColumn": 63,
                  "snippet": {
                    "text": "}\n\nbats_trim() {                                            # <output-variable> <string>\n  local -r bats_trim_ltrimmed=${2#\"${2%%[![:space:]]*}\"} # cut off leading whitespace\n  # shellcheck disable=SC2034 # used in eval!\n  local -r bats_trim_trimmed=${bats_trim_ltrimmed%\"${bats_trim_ltrimmed##*[![:space:]]}\"} # cut off trailing whitespace\n  eval \"$1=\\$bats_trim_trimmed\"\n",
                    "rendered": {
                      "text": "}\n\nbats_trim() {                                            # <output-variable> <string>\n  local -r bats_trim_ltrimmed=${2#\"${2%%[![:space:]]*}\"} # cut off leading whitespace\n  # shellcheck disable=SC2034 # used in eval!\n  local -r bats_trim_trimmed=${bats_trim_ltrimmed%\"${bats_trim_ltrimmed##*[![:space:]]}\"} # cut off trailing whitespace\n  eval \"$1=\\$bats_trim_trimmed\"\n",
                      "markdown": "`}\n\nbats_trim() {                                            # <output-variable> <string>\n  local -r bats_trim_ltrimmed=${2#\"${2%%[![:space:]]*}\"} # cut off leading whitespace\n  # shellcheck disable=SC2034 # used in eval!\n  local -r bats_trim_trimmed=${bats_trim_ltrimmed%\"${bats_trim_ltrimmed##*[![:space:]]}\"} # cut off trailing whitespace\n  eval \"$1=\\$bats_trim_trimmed\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/common.bash"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 11,
                  "endLine": 97,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    fi\n  done\n\n  # did not find it -> its not there\n  return 1\n}\n\n",
                    "rendered": {
                      "text": "    fi\n  done\n\n  # did not find it -> its not there\n  return 1\n}\n\n",
                      "markdown": "`    fi\n  done\n\n  # did not find it -> its not there\n  return 1\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/common.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nbats_prefix_lines_for_tap_output() {\n  while IFS= read -r line; do\n    printf '# %s\\n' \"$line\" || break # avoid feedback loop when errors are redirected into BATS_OUT (see #353)\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nbats_prefix_lines_for_tap_output() {\n  while IFS= read -r line; do\n    printf '# %s\\n' \"$line\" || break # avoid feedback loop when errors are redirected into BATS_OUT (see #353)\n",
                      "markdown": "`#!/usr/bin/env bash\n\nbats_prefix_lines_for_tap_output() {\n  while IFS= read -r line; do\n    printf '# %s\\n' \"$line\" || break # avoid feedback loop when errors are redirected into BATS_OUT (see #353)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/validator.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nbats_test_count_validator() {\n  trap '' INT # continue forwarding\n  header_pattern='[0-9]+\\.\\.[0-9]+'\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nbats_test_count_validator() {\n  trap '' INT # continue forwarding\n  header_pattern='[0-9]+\\.\\.[0-9]+'\n",
                      "markdown": "`#!/usr/bin/env bash\n\nbats_test_count_validator() {\n  trap '' INT # continue forwarding\n  header_pattern='[0-9]+\\.\\.[0-9]+'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/validator.bash"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 3,
                  "endLine": 36,
                  "snippet": {
                    "text": "    fi\n  else\n    # forward output unchanged\n    cat\n  fi\n}\n",
                    "rendered": {
                      "text": "    fi\n  else\n    # forward output unchanged\n    cat\n  fi\n}\n",
                      "markdown": "`    fi\n  else\n    # forward output unchanged\n    cat\n  fi\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/validator.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nbats_test_count_validator() {\n  trap '' INT # continue forwarding\n  header_pattern='[0-9]+\\.\\.[0-9]+'\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nbats_test_count_validator() {\n  trap '' INT # continue forwarding\n  header_pattern='[0-9]+\\.\\.[0-9]+'\n",
                      "markdown": "`#!/usr/bin/env bash\n\nbats_test_count_validator() {\n  trap '' INT # continue forwarding\n  header_pattern='[0-9]+\\.\\.[0-9]+'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/formatter.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# reads (extended) bats tap streams from stdin and calls callback functions for each line\n#\n# Segmenting functions\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# reads (extended) bats tap streams from stdin and calls callback functions for each line\n#\n# Segmenting functions\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# reads (extended) bats tap streams from stdin and calls callback functions for each line\n#\n# Segmenting functions\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/formatter.bash"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 42,
                  "endLine": 72,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        test_name=\"${BASH_REMATCH[2]}\"\n        if [[ \"$line\" =~ $skip_line_regexpr ]]; then\n          scope=skipped\n          test_name=\"${BASH_REMATCH[2]}\" # cut off name before \"# skip\"\n          local skip_reason=\"${BASH_REMATCH[4]}\"\n          if [[ \"$test_name\" =~ $timing_expr ]]; then\n            local BATS_FORMATTER_TEST_DURATION=\"${BASH_REMATCH[1]}\"\n",
                    "rendered": {
                      "text": "        test_name=\"${BASH_REMATCH[2]}\"\n        if [[ \"$line\" =~ $skip_line_regexpr ]]; then\n          scope=skipped\n          test_name=\"${BASH_REMATCH[2]}\" # cut off name before \"# skip\"\n          local skip_reason=\"${BASH_REMATCH[4]}\"\n          if [[ \"$test_name\" =~ $timing_expr ]]; then\n            local BATS_FORMATTER_TEST_DURATION=\"${BASH_REMATCH[1]}\"\n",
                      "markdown": "`        test_name=\"${BASH_REMATCH[2]}\"\n        if [[ \"$line\" =~ $skip_line_regexpr ]]; then\n          scope=skipped\n          test_name=\"${BASH_REMATCH[2]}\" # cut off name before \"# skip\"\n          local skip_reason=\"${BASH_REMATCH[4]}\"\n          if [[ \"$test_name\" =~ $timing_expr ]]; then\n            local BATS_FORMATTER_TEST_DURATION=\"${BASH_REMATCH[1]}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/formatter.bash"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 46,
                  "endLine": 40,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n  ok_line_regexpr=\"ok ([0-9]+) (.*)\"\n  skip_line_regexpr=\"ok ([0-9]+) (.*) # skip( (.*))?$\"\n  timeout_line_regexpr=\"not ok ([0-9]+) (.*) # timeout after ([0-9]+)s$\"\n  not_ok_line_regexpr=\"not ok ([0-9]+) (.*)\"\n\n  timing_expr=\"in ([0-9]+)ms$\"\n",
                    "rendered": {
                      "text": "\n  ok_line_regexpr=\"ok ([0-9]+) (.*)\"\n  skip_line_regexpr=\"ok ([0-9]+) (.*) # skip( (.*))?$\"\n  timeout_line_regexpr=\"not ok ([0-9]+) (.*) # timeout after ([0-9]+)s$\"\n  not_ok_line_regexpr=\"not ok ([0-9]+) (.*)\"\n\n  timing_expr=\"in ([0-9]+)ms$\"\n",
                      "markdown": "`\n  ok_line_regexpr=\"ok ([0-9]+) (.*)\"\n  skip_line_regexpr=\"ok ([0-9]+) (.*) # skip( (.*))?$\"\n  timeout_line_regexpr=\"not ok ([0-9]+) (.*) # timeout after ([0-9]+)s$\"\n  not_ok_line_regexpr=\"not ok ([0-9]+) (.*)\"\n\n  timing_expr=\"in ([0-9]+)ms$\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/formatter.bash"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 8,
                  "endLine": 36,
                  "snippet": {
                    "text": "  else\n    # If the first line isn't a TAP plan, print it and pass the rest through\n    printf '%s\\n' \"$header\"\n    exec cat\n  fi\n\n  ok_line_regexpr=\"ok ([0-9]+) (.*)\"\n  skip_line_regexpr=\"ok ([0-9]+) (.*) # skip( (.*))?$\"\n",
                    "rendered": {
                      "text": "  else\n    # If the first line isn't a TAP plan, print it and pass the rest through\n    printf '%s\\n' \"$header\"\n    exec cat\n  fi\n\n  ok_line_regexpr=\"ok ([0-9]+) (.*)\"\n  skip_line_regexpr=\"ok ([0-9]+) (.*) # skip( (.*))?$\"\n",
                      "markdown": "`  else\n    # If the first line isn't a TAP plan, print it and pass the rest through\n    printf '%s\\n' \"$header\"\n    exec cat\n  fi\n\n  ok_line_regexpr=\"ok ([0-9]+) (.*)\"\n  skip_line_regexpr=\"ok ([0-9]+) (.*) # skip( (.*))?$\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/formatter.bash"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 122,
                  "endLine": 16,
                  "endColumn": 131,
                  "snippet": {
                    "text": "      -> when a test was successful\n# bats_tap_stream_not_ok <test index> <test name>                             -> when a test has failed. If the failure was due to a timeout,\n#                                                                                BATS_FORMATTER_TEST_TIMEOUT is set to the timeout duration in seconds\n# bats_tap_stream_skipped <test index> <test name> <skip reason>              -> when a test was skipped\n#\n# Context functions\n# =================\n# bats_tap_stream_comment <comment text without leading '# '> <scope>         -> when a comment line was encountered,\n#              ",
                    "rendered": {
                      "text": "      -> when a test was successful\n# bats_tap_stream_not_ok <test index> <test name>                             -> when a test has failed. If the failure was due to a timeout,\n#                                                                                BATS_FORMATTER_TEST_TIMEOUT is set to the timeout duration in seconds\n# bats_tap_stream_skipped <test index> <test name> <skip reason>              -> when a test was skipped\n#\n# Context functions\n# =================\n# bats_tap_stream_comment <comment text without leading '# '> <scope>         -> when a comment line was encountered,\n#              ",
                      "markdown": "`      -> when a test was successful\n# bats_tap_stream_not_ok <test index> <test name>                             -> when a test has failed. If the failure was due to a timeout,\n#                                                                                BATS_FORMATTER_TEST_TIMEOUT is set to the timeout duration in seconds\n# bats_tap_stream_skipped <test index> <test name> <skip reason>              -> when a test was skipped\n#\n# Context functions\n# =================\n# bats_tap_stream_comment <comment text without leading '# '> <scope>         -> when a comment line was encountered,\n#              `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/formatter.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# reads (extended) bats tap streams from stdin and calls callback functions for each line\n#\n# Segmenting functions\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# reads (extended) bats tap streams from stdin and calls callback functions for each line\n#\n# Segmenting functions\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# reads (extended) bats tap streams from stdin and calls callback functions for each line\n#\n# Segmenting functions\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/semaphore.bash"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 7,
                  "endLine": 95,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    # don't lock for reading, we are fine with spuriously getting no free slot\n    if [[ $(bats_semaphore_get_free_slot_count) -gt 0 ]]; then\n      bats_run_under_\"$BATS_LOCKING_IMPLEMENTATION\" \\\n        bash -c bats_semaphore_acquire_while_locked \\\n      && break\n    fi\n    sleep 1\n",
                    "rendered": {
                      "text": "    # don't lock for reading, we are fine with spuriously getting no free slot\n    if [[ $(bats_semaphore_get_free_slot_count) -gt 0 ]]; then\n      bats_run_under_\"$BATS_LOCKING_IMPLEMENTATION\" \\\n        bash -c bats_semaphore_acquire_while_locked \\\n      && break\n    fi\n    sleep 1\n",
                      "markdown": "`    # don't lock for reading, we are fine with spuriously getting no free slot\n    if [[ $(bats_semaphore_get_free_slot_count) -gt 0 ]]; then\n      bats_run_under_\"$BATS_LOCKING_IMPLEMENTATION\" \\\n        bash -c bats_semaphore_acquire_while_locked \\\n      && break\n    fi\n    sleep 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/semaphore.bash"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 3,
                  "endLine": 66,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  \"$@\" 2>\"$output_dir/stderr\" >\"$output_dir/stdout\"\n  local status=$?\n\n  # bash bug: the exit trap is not called for the background process\n  bats_semaphore_release_slot \"$semaphore_name\"\n  trap - EXIT # avoid calling release twice\n  return $status\n",
                    "rendered": {
                      "text": "  \"$@\" 2>\"$output_dir/stderr\" >\"$output_dir/stdout\"\n  local status=$?\n\n  # bash bug: the exit trap is not called for the background process\n  bats_semaphore_release_slot \"$semaphore_name\"\n  trap - EXIT # avoid calling release twice\n  return $status\n",
                      "markdown": "`  \"$@\" 2>\"$output_dir/stderr\" >\"$output_dir/stdout\"\n  local status=$?\n\n  # bash bug: the exit trap is not called for the background process\n  bats_semaphore_release_slot \"$semaphore_name\"\n  trap - EXIT # avoid calling release twice\n  return $status\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/semaphore.bash"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 42,
                  "endLine": 59,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  local semaphore_name=\"$2\"\n  shift 2 # all other parameters will be use for the command to execute\n\n  # shellcheck disable=SC2064 # we want to expand the semaphore_name right now!\n  trap \"status=$?; bats_semaphore_release_slot '$semaphore_name'; exit $status\" EXIT\n\n  mkdir -p \"$output_dir\"\n",
                    "rendered": {
                      "text": "  local semaphore_name=\"$2\"\n  shift 2 # all other parameters will be use for the command to execute\n\n  # shellcheck disable=SC2064 # we want to expand the semaphore_name right now!\n  trap \"status=$?; bats_semaphore_release_slot '$semaphore_name'; exit $status\" EXIT\n\n  mkdir -p \"$output_dir\"\n",
                      "markdown": "`  local semaphore_name=\"$2\"\n  shift 2 # all other parameters will be use for the command to execute\n\n  # shellcheck disable=SC2064 # we want to expand the semaphore_name right now!\n  trap \"status=$?; bats_semaphore_release_slot '$semaphore_name'; exit $status\" EXIT\n\n  mkdir -p \"$output_dir\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/semaphore.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nbats_run_under_flock() {\n  flock \"$BATS_SEMAPHORE_DIR\" \"$@\"\n}\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nbats_run_under_flock() {\n  flock \"$BATS_SEMAPHORE_DIR\" \"$@\"\n}\n",
                      "markdown": "`#!/usr/bin/env bash\n\nbats_run_under_flock() {\n  flock \"$BATS_SEMAPHORE_DIR\" \"$@\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/semaphore.bash"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 3,
                  "endLine": 109,
                  "endColumn": 9,
                  "snippet": {
                    "text": "}\n\nbats_semaphore_get_free_slot_count() {\n  # find might error out without returning something useful when a file is deleted,\n  # while the directory is traversed ->  only continue when there was no error\n  until used_slots=$(find \"$BATS_SEMAPHORE_DIR\" -name 'slot-*' 2>/dev/null | wc -l); do :; done\n  echo $((BATS_SEMAPHORE_NUMBER_OF_SLOTS - used_slots))\n",
                    "rendered": {
                      "text": "}\n\nbats_semaphore_get_free_slot_count() {\n  # find might error out without returning something useful when a file is deleted,\n  # while the directory is traversed ->  only continue when there was no error\n  until used_slots=$(find \"$BATS_SEMAPHORE_DIR\" -name 'slot-*' 2>/dev/null | wc -l); do :; done\n  echo $((BATS_SEMAPHORE_NUMBER_OF_SLOTS - used_slots))\n",
                      "markdown": "`}\n\nbats_semaphore_get_free_slot_count() {\n  # find might error out without returning something useful when a file is deleted,\n  # while the directory is traversed ->  only continue when there was no error\n  until used_slots=$(find \"$BATS_SEMAPHORE_DIR\" -name 'slot-*' 2>/dev/null | wc -l); do :; done\n  echo $((BATS_SEMAPHORE_NUMBER_OF_SLOTS - used_slots))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/semaphore.bash"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 7,
                  "endLine": 95,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    # don't lock for reading, we are fine with spuriously getting no free slot\n    if [[ $(bats_semaphore_get_free_slot_count) -gt 0 ]]; then\n      bats_run_under_\"$BATS_LOCKING_IMPLEMENTATION\" \\\n        bash -c bats_semaphore_acquire_while_locked \\\n      && break\n    fi\n    sleep 1\n",
                    "rendered": {
                      "text": "    # don't lock for reading, we are fine with spuriously getting no free slot\n    if [[ $(bats_semaphore_get_free_slot_count) -gt 0 ]]; then\n      bats_run_under_\"$BATS_LOCKING_IMPLEMENTATION\" \\\n        bash -c bats_semaphore_acquire_while_locked \\\n      && break\n    fi\n    sleep 1\n",
                      "markdown": "`    # don't lock for reading, we are fine with spuriously getting no free slot\n    if [[ $(bats_semaphore_get_free_slot_count) -gt 0 ]]; then\n      bats_run_under_\"$BATS_LOCKING_IMPLEMENTATION\" \\\n        bash -c bats_semaphore_acquire_while_locked \\\n      && break\n    fi\n    sleep 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/semaphore.bash"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 3,
                  "endLine": 66,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  \"$@\" 2>\"$output_dir/stderr\" >\"$output_dir/stdout\"\n  local status=$?\n\n  # bash bug: the exit trap is not called for the background process\n  bats_semaphore_release_slot \"$semaphore_name\"\n  trap - EXIT # avoid calling release twice\n  return $status\n",
                    "rendered": {
                      "text": "  \"$@\" 2>\"$output_dir/stderr\" >\"$output_dir/stdout\"\n  local status=$?\n\n  # bash bug: the exit trap is not called for the background process\n  bats_semaphore_release_slot \"$semaphore_name\"\n  trap - EXIT # avoid calling release twice\n  return $status\n",
                      "markdown": "`  \"$@\" 2>\"$output_dir/stderr\" >\"$output_dir/stdout\"\n  local status=$?\n\n  # bash bug: the exit trap is not called for the background process\n  bats_semaphore_release_slot \"$semaphore_name\"\n  trap - EXIT # avoid calling release twice\n  return $status\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/semaphore.bash"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 42,
                  "endLine": 59,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  local semaphore_name=\"$2\"\n  shift 2 # all other parameters will be use for the command to execute\n\n  # shellcheck disable=SC2064 # we want to expand the semaphore_name right now!\n  trap \"status=$?; bats_semaphore_release_slot '$semaphore_name'; exit $status\" EXIT\n\n  mkdir -p \"$output_dir\"\n",
                    "rendered": {
                      "text": "  local semaphore_name=\"$2\"\n  shift 2 # all other parameters will be use for the command to execute\n\n  # shellcheck disable=SC2064 # we want to expand the semaphore_name right now!\n  trap \"status=$?; bats_semaphore_release_slot '$semaphore_name'; exit $status\" EXIT\n\n  mkdir -p \"$output_dir\"\n",
                      "markdown": "`  local semaphore_name=\"$2\"\n  shift 2 # all other parameters will be use for the command to execute\n\n  # shellcheck disable=SC2064 # we want to expand the semaphore_name right now!\n  trap \"status=$?; bats_semaphore_release_slot '$semaphore_name'; exit $status\" EXIT\n\n  mkdir -p \"$output_dir\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/semaphore.bash"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 15,
                  "endLine": 26,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  export -f bats_semaphore_acquire_while_locked\n  export BATS_SEMAPHORE_DIR=\"$BATS_RUN_TMPDIR/semaphores\"\n\n  if command -v flock >/dev/null; then\n    BATS_LOCKING_IMPLEMENTATION=flock\n  elif command -v shlock >/dev/null; then\n    BATS_LOCKING_IMPLEMENTATION=shlock\n",
                    "rendered": {
                      "text": "  export -f bats_semaphore_acquire_while_locked\n  export BATS_SEMAPHORE_DIR=\"$BATS_RUN_TMPDIR/semaphores\"\n\n  if command -v flock >/dev/null; then\n    BATS_LOCKING_IMPLEMENTATION=flock\n  elif command -v shlock >/dev/null; then\n    BATS_LOCKING_IMPLEMENTATION=shlock\n",
                      "markdown": "`  export -f bats_semaphore_acquire_while_locked\n  export BATS_SEMAPHORE_DIR=\"$BATS_RUN_TMPDIR/semaphores\"\n\n  if command -v flock >/dev/null; then\n    BATS_LOCKING_IMPLEMENTATION=flock\n  elif command -v shlock >/dev/null; then\n    BATS_LOCKING_IMPLEMENTATION=shlock\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/semaphore.bash"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 8,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nbats_run_under_flock() {\n  flock \"$BATS_SEMAPHORE_DIR\" \"$@\"\n}\n\nbats_run_under_shlock() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nbats_run_under_flock() {\n  flock \"$BATS_SEMAPHORE_DIR\" \"$@\"\n}\n\nbats_run_under_shlock() {\n",
                      "markdown": "`#!/usr/bin/env bash\n\nbats_run_under_flock() {\n  flock \"$BATS_SEMAPHORE_DIR\" \"$@\"\n}\n\nbats_run_under_shlock() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/lib/bats-core/semaphore.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nbats_run_under_flock() {\n  flock \"$BATS_SEMAPHORE_DIR\" \"$@\"\n}\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nbats_run_under_flock() {\n  flock \"$BATS_SEMAPHORE_DIR\" \"$@\"\n}\n",
                      "markdown": "`#!/usr/bin/env bash\n\nbats_run_under_flock() {\n  flock \"$BATS_SEMAPHORE_DIR\" \"$@\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/ISSUE_TEMPLATE/bug_report.md"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 24,
                  "endLine": 27,
                  "endColumn": 29,
                  "snippet": {
                    "text": " - Bats version [e.g. 1.4.0 or commit hash if applicable]\n - operating system (including version): [e.g. Linux (please name your distribution!), FreeBSD, MacOS]\n - `bash --version`: [e.g. 5.1]\n - Install method: [e.g. git submodule, distribution package manager, npm, homebrew, ...]\n\n**Additional context**\nAdd any other context about the problem here.\n",
                    "rendered": {
                      "text": " - Bats version [e.g. 1.4.0 or commit hash if applicable]\n - operating system (including version): [e.g. Linux (please name your distribution!), FreeBSD, MacOS]\n - `bash --version`: [e.g. 5.1]\n - Install method: [e.g. git submodule, distribution package manager, npm, homebrew, ...]\n\n**Additional context**\nAdd any other context about the problem here.\n",
                      "markdown": "` - Bats version [e.g. 1.4.0 or commit hash if applicable]\n - operating system (including version): [e.g. Linux (please name your distribution!), FreeBSD, MacOS]\n - `bash --version`: [e.g. 5.1]\n - Install method: [e.g. git submodule, distribution package manager, npm, homebrew, ...]\n\n**Additional context**\nAdd any other context about the problem here.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 15,
                  "endLine": 35,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        run: npm init -y --scope ${{ github.repository_owner }}\n      - run: npm publish --ignore-scripts\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n",
                    "rendered": {
                      "text": "        run: npm init -y --scope ${{ github.repository_owner }}\n      - run: npm publish --ignore-scripts\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n",
                      "markdown": "`        run: npm init -y --scope ${{ github.repository_owner }}\n      - run: npm publish --ignore-scripts\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 15,
                  "endLine": 20,
                  "endColumn": 25,
                  "snippet": {
                    "text": "          registry-url: \"https://registry.npmjs.org\"\n      - run: npm publish --ignore-scripts\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n  github-npm:\n    runs-on: ubuntu-latest\n",
                    "rendered": {
                      "text": "          registry-url: \"https://registry.npmjs.org\"\n      - run: npm publish --ignore-scripts\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n  github-npm:\n    runs-on: ubuntu-latest\n",
                      "markdown": "`          registry-url: \"https://registry.npmjs.org\"\n      - run: npm publish --ignore-scripts\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n  github-npm:\n    runs-on: ubuntu-latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/release_dockerhub.yml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 12,
                  "endLine": 37,
                  "endColumn": 20,
                  "snippet": {
                    "text": "          with:\n            registry: ghcr.io\n            username: ${{ github.actor }}\n            password: ${{ secrets.GITHUB_TOKEN }}\n\n        - name: Set up Docker Buildx\n          id: buildx\n",
                    "rendered": {
                      "text": "          with:\n            registry: ghcr.io\n            username: ${{ github.actor }}\n            password: ${{ secrets.GITHUB_TOKEN }}\n\n        - name: Set up Docker Buildx\n          id: buildx\n",
                      "markdown": "`          with:\n            registry: ghcr.io\n            username: ${{ github.actor }}\n            password: ${{ secrets.GITHUB_TOKEN }}\n\n        - name: Set up Docker Buildx\n          id: buildx\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/release_dockerhub.yml"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 41,
                  "endLine": 30,
                  "endColumn": 49,
                  "snippet": {
                    "text": "          uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n          with:\n            username: ${{ secrets.DOCKER_USERNAME }}\n            password: ${{ secrets.DOCKER_PASSWORD }}\n\n        - name: Log in to the GitHub Container registry\n          uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567\n",
                    "rendered": {
                      "text": "          uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n          with:\n            username: ${{ secrets.DOCKER_USERNAME }}\n            password: ${{ secrets.DOCKER_PASSWORD }}\n\n        - name: Log in to the GitHub Container registry\n          uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567\n",
                      "markdown": "`          uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n          with:\n            username: ${{ secrets.DOCKER_USERNAME }}\n            password: ${{ secrets.DOCKER_PASSWORD }}\n\n        - name: Log in to the GitHub Container registry\n          uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/release_dockerhub.yml"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 12,
                  "endLine": 30,
                  "endColumn": 20,
                  "snippet": {
                    "text": "          uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n          with:\n            username: ${{ secrets.DOCKER_USERNAME }}\n            password: ${{ secrets.DOCKER_PASSWORD }}\n\n        - name: Log in to the GitHub Container registry\n          uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567\n",
                    "rendered": {
                      "text": "          uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n          with:\n            username: ${{ secrets.DOCKER_USERNAME }}\n            password: ${{ secrets.DOCKER_PASSWORD }}\n\n        - name: Log in to the GitHub Container registry\n          uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567\n",
                      "markdown": "`          uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0\n          with:\n            username: ${{ secrets.DOCKER_USERNAME }}\n            password: ${{ secrets.DOCKER_PASSWORD }}\n\n        - name: Log in to the GitHub Container registry\n          uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/release_dockerhub.yml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 22,
                  "endLine": 39,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            username: ${{ github.actor }}\n            password: ${{ secrets.GITHUB_TOKEN }}\n\n        - name: Set up Docker Buildx\n          id: buildx\n          uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0\n\n",
                    "rendered": {
                      "text": "            username: ${{ github.actor }}\n            password: ${{ secrets.GITHUB_TOKEN }}\n\n        - name: Set up Docker Buildx\n          id: buildx\n          uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0\n\n",
                      "markdown": "`            username: ${{ github.actor }}\n            password: ${{ secrets.GITHUB_TOKEN }}\n\n        - name: Set up Docker Buildx\n          id: buildx\n          uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/release_dockerhub.yml"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 16,
                  "endLine": 1,
                  "endColumn": 24,
                  "snippet": {
                    "text": "name: Release to docker hub\n\non:\n  release: { types: [published] }\n",
                    "rendered": {
                      "text": "name: Release to docker hub\n\non:\n  release: { types: [published] }\n",
                      "markdown": "`name: Release to docker hub\n\non:\n  release: { types: [published] }\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/check_pr_label.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 46,
                  "endLine": 10,
                  "endColumn": 52,
                  "snippet": {
                    "text": "PR_NUMBER=\"$1\"\nLABEL=\"$2\"\n\nget_pr_json \"$PR_NUMBER\" | jq .labels[].name | grep \"$LABEL\"\n",
                    "rendered": {
                      "text": "PR_NUMBER=\"$1\"\nLABEL=\"$2\"\n\nget_pr_json \"$PR_NUMBER\" | jq .labels[].name | grep \"$LABEL\"\n",
                      "markdown": "`PR_NUMBER=\"$1\"\nLABEL=\"$2\"\n\nget_pr_json \"$PR_NUMBER\" | jq .labels[].name | grep \"$LABEL\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/check_pr_label.sh"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#!/usr/bin/bash\n\nget_pr_json() {\n  curl -s -H \"Accept: application/vnd.github.v3+json\" \"https://api.github.com/repos/bats-core/bats-core/pulls/$1\"\n}\n\nPR_NUMBER=\"$1\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/bash\n\nget_pr_json() {\n  curl -s -H \"Accept: application/vnd.github.v3+json\" \"https://api.github.com/repos/bats-core/bats-core/pulls/$1\"\n}\n\nPR_NUMBER=\"$1\"\n",
                      "markdown": "`#!/usr/bin/bash\n\nget_pr_json() {\n  curl -s -H \"Accept: application/vnd.github.v3+json\" \"https://api.github.com/repos/bats-core/bats-core/pulls/$1\"\n}\n\nPR_NUMBER=\"$1\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 14,
                  "endLine": 348,
                  "snippet": {
                    "text": "\n      - name: Print the Total Coverage\n        id: coverage-percent\n        shell: bash\n        env:\n          minimum_coverage: 86.40\n        run: |\n          value=$(jq '.percent_covered' <coverage/bats/coverage.json)\n",
                    "rendered": {
                      "text": "\n      - name: Print the Total Coverage\n        id: coverage-percent\n        shell: bash\n        env:\n          minimum_coverage: 86.40\n        run: |\n          value=$(jq '.percent_covered' <coverage/bats/coverage.json)\n",
                      "markdown": "`\n      - name: Print the Total Coverage\n        id: coverage-percent\n        shell: bash\n        env:\n          minimum_coverage: 86.40\n        run: |\n          value=$(jq '.percent_covered' <coverage/bats/coverage.json)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 51,
                  "endLine": 321,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            ln -sf python3 /usr/bin/python # bats-file uses python without version\n            bats --tap --print-output-on-failure bats-*/test/\n          EOF\n          docker run -itv \"$PWD\":/code --entrypoint bash bats:test test.sh\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n",
                    "rendered": {
                      "text": "            ln -sf python3 /usr/bin/python # bats-file uses python without version\n            bats --tap --print-output-on-failure bats-*/test/\n          EOF\n          docker run -itv \"$PWD\":/code --entrypoint bash bats:test test.sh\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n",
                      "markdown": "`            ln -sf python3 /usr/bin/python # bats-file uses python without version\n            bats --tap --print-output-on-failure bats-*/test/\n          EOF\n          docker run -itv \"$PWD\":/code --entrypoint bash bats:test test.sh\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 33,
                  "endLine": 248,
                  "endColumn": 39,
                  "snippet": {
                    "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - uses: vmactions/freebsd-vm@a50912ab96b7568d0fa9c1156c6facd6f11488a9 # v1.1.0\n        with:\n          prepare: pkg install -y bash parallel ${{ matrix.packages }}\n          run: |\n            time ./bin/bats --print-output-on-failure test/\n\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - uses: vmactions/freebsd-vm@a50912ab96b7568d0fa9c1156c6facd6f11488a9 # v1.1.0\n        with:\n          prepare: pkg install -y bash parallel ${{ matrix.packages }}\n          run: |\n            time ./bin/bats --print-output-on-failure test/\n\n",
                      "markdown": "`      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - uses: vmactions/freebsd-vm@a50912ab96b7568d0fa9c1156c6facd6f11488a9 # v1.1.0\n        with:\n          prepare: pkg install -y bash parallel ${{ matrix.packages }}\n          run: |\n            time ./bin/bats --print-output-on-failure test/\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 25,
                  "endLine": 230,
                  "endColumn": 31,
                  "snippet": {
                    "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install dependencies\n        run: apk add bash ncurses util-linux\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install dependencies\n        run: apk add bash ncurses util-linux\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n",
                      "markdown": "`      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install dependencies\n        run: apk add bash ncurses util-linux\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 20,
                  "endLine": 229,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install dependencies\n        run: apk add bash ncurses util-linux\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n",
                    "rendered": {
                      "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install dependencies\n        run: apk add bash ncurses util-linux\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n",
                      "markdown": "`    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install dependencies\n        run: apk add bash ncurses util-linux\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 25,
                  "endLine": 192,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        run: |\n          set -e\n",
                    "rendered": {
                      "text": "    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        run: |\n          set -e\n",
                      "markdown": "`    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        run: |\n          set -e\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 24,
                  "endLine": 172,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n",
                    "rendered": {
                      "text": "      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n",
                      "markdown": "`      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 9,
                  "endLine": 157,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_macos:\n    strategy:\n",
                    "rendered": {
                      "text": "          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_macos:\n    strategy:\n",
                      "markdown": "`          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_macos:\n    strategy:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 9,
                  "endLine": 156,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_macos:\n",
                    "rendered": {
                      "text": "        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_macos:\n",
                      "markdown": "`        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_macos:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 24,
                  "endLine": 152,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n",
                    "rendered": {
                      "text": "        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n",
                      "markdown": "`        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 12,
                  "endLine": 149,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n",
                    "rendered": {
                      "text": "        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n",
                      "markdown": "`        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 24,
                  "endLine": 146,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        if: contains(matrix.env_vars, 'rush')\n\n      - name: Check failing tests fail suite,\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n",
                    "rendered": {
                      "text": "        if: contains(matrix.env_vars, 'rush')\n\n      - name: Check failing tests fail suite,\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n",
                      "markdown": "`        if: contains(matrix.env_vars, 'rush')\n\n      - name: Check failing tests fail suite,\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 9,
                  "endLine": 110,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_windows:\n    strategy:\n",
                    "rendered": {
                      "text": "        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_windows:\n    strategy:\n",
                      "markdown": "`        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_windows:\n    strategy:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 9,
                  "endLine": 109,
                  "endColumn": 15,
                  "snippet": {
                    "text": "      - name: Check failing tests fail suite,\n        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_windows:\n",
                    "rendered": {
                      "text": "      - name: Check failing tests fail suite,\n        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_windows:\n",
                      "markdown": "`      - name: Check failing tests fail suite,\n        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_windows:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 12,
                  "endLine": 107,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Check failing tests fail suite,\n        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n",
                    "rendered": {
                      "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Check failing tests fail suite,\n        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n",
                      "markdown": "`    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Check failing tests fail suite,\n        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 9,
                  "endLine": 71,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  unset_variables:\n    runs-on: ubuntu-latest\n",
                    "rendered": {
                      "text": "          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  unset_variables:\n    runs-on: ubuntu-latest\n",
                      "markdown": "`          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  unset_variables:\n    runs-on: ubuntu-latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 9,
                  "endLine": 70,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  unset_variables:\n",
                    "rendered": {
                      "text": "        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  unset_variables:\n",
                      "markdown": "`        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  unset_variables:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 22,
                  "endLine": 45,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Run shellcheck\n        run: |\n          sudo apt-get update -y\n          sudo apt-get install shellcheck\n          ./shellcheck.sh\n\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Run shellcheck\n        run: |\n          sudo apt-get update -y\n          sudo apt-get install shellcheck\n          ./shellcheck.sh\n\n",
                      "markdown": "`      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Run shellcheck\n        run: |\n          sudo apt-get update -y\n          sudo apt-get install shellcheck\n          ./shellcheck.sh\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 79,
                  "endLine": 359,
                  "endColumn": 84,
                  "snippet": {
                    "text": "          }\n          echo \"Coverage: $value%\" | tee \"$GITHUB_STEP_SUMMARY\"\n          if (( $(fixed_point $value) < $(fixed_point $expected) )); then\n            echo \"  is below required minimum coverage ($minimum_coverage%).\" | tee -a \"$GITHUB_STEP_SUMMARY\"\n            exit 1\n          fi\n",
                    "rendered": {
                      "text": "          }\n          echo \"Coverage: $value%\" | tee \"$GITHUB_STEP_SUMMARY\"\n          if (( $(fixed_point $value) < $(fixed_point $expected) )); then\n            echo \"  is below required minimum coverage ($minimum_coverage%).\" | tee -a \"$GITHUB_STEP_SUMMARY\"\n            exit 1\n          fi\n",
                      "markdown": "`          }\n          echo \"Coverage: $value%\" | tee \"$GITHUB_STEP_SUMMARY\"\n          if (( $(fixed_point $value) < $(fixed_point $expected) )); then\n            echo \"  is below required minimum coverage ($minimum_coverage%).\" | tee -a \"$GITHUB_STEP_SUMMARY\"\n            exit 1\n          fi\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 36,
                  "endLine": 357,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            decimals=${1#*.}\n            echo $int${decimals::2}\n          }\n          echo \"Coverage: $value%\" | tee \"$GITHUB_STEP_SUMMARY\"\n          if (( $(fixed_point $value) < $(fixed_point $expected) )); then\n            echo \"  is below required minimum coverage ($minimum_coverage%).\" | tee -a \"$GITHUB_STEP_SUMMARY\"\n            exit 1\n",
                    "rendered": {
                      "text": "            decimals=${1#*.}\n            echo $int${decimals::2}\n          }\n          echo \"Coverage: $value%\" | tee \"$GITHUB_STEP_SUMMARY\"\n          if (( $(fixed_point $value) < $(fixed_point $expected) )); then\n            echo \"  is below required minimum coverage ($minimum_coverage%).\" | tee -a \"$GITHUB_STEP_SUMMARY\"\n            exit 1\n",
                      "markdown": "`            decimals=${1#*.}\n            echo $int${decimals::2}\n          }\n          echo \"Coverage: $value%\" | tee \"$GITHUB_STEP_SUMMARY\"\n          if (( $(fixed_point $value) < $(fixed_point $expected) )); then\n            echo \"  is below required minimum coverage ($minimum_coverage%).\" | tee -a \"$GITHUB_STEP_SUMMARY\"\n            exit 1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 14,
                  "endLine": 348,
                  "snippet": {
                    "text": "\n      - name: Print the Total Coverage\n        id: coverage-percent\n        shell: bash\n        env:\n          minimum_coverage: 86.40\n        run: |\n          value=$(jq '.percent_covered' <coverage/bats/coverage.json)\n",
                    "rendered": {
                      "text": "\n      - name: Print the Total Coverage\n        id: coverage-percent\n        shell: bash\n        env:\n          minimum_coverage: 86.40\n        run: |\n          value=$(jq '.percent_covered' <coverage/bats/coverage.json)\n",
                      "markdown": "`\n      - name: Print the Total Coverage\n        id: coverage-percent\n        shell: bash\n        env:\n          minimum_coverage: 86.40\n        run: |\n          value=$(jq '.percent_covered' <coverage/bats/coverage.json)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 9,
                  "endLine": 332,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: |\n          wget https://github.com/SimonKagstrom/kcov/releases/download/v40/kcov-amd64.tar.gz\n          tar -xf kcov-amd64.tar.gz\n      - run: |\n          ./usr/local/bin/kcov --exclude-path=/tmp $PWD/coverage ./bin/bats --filter-tags '!no-kcov' test/\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: |\n          wget https://github.com/SimonKagstrom/kcov/releases/download/v40/kcov-amd64.tar.gz\n          tar -xf kcov-amd64.tar.gz\n      - run: |\n          ./usr/local/bin/kcov --exclude-path=/tmp $PWD/coverage ./bin/bats --filter-tags '!no-kcov' test/\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n",
                      "markdown": "`      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: |\n          wget https://github.com/SimonKagstrom/kcov/releases/download/v40/kcov-amd64.tar.gz\n          tar -xf kcov-amd64.tar.gz\n      - run: |\n          ./usr/local/bin/kcov --exclude-path=/tmp $PWD/coverage ./bin/bats --filter-tags '!no-kcov' test/\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 9,
                  "endLine": 331,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: |\n          wget https://github.com/SimonKagstrom/kcov/releases/download/v40/kcov-amd64.tar.gz\n          tar -xf kcov-amd64.tar.gz\n      - run: |\n          ./usr/local/bin/kcov --exclude-path=/tmp $PWD/coverage ./bin/bats --filter-tags '!no-kcov' test/\n",
                    "rendered": {
                      "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: |\n          wget https://github.com/SimonKagstrom/kcov/releases/download/v40/kcov-amd64.tar.gz\n          tar -xf kcov-amd64.tar.gz\n      - run: |\n          ./usr/local/bin/kcov --exclude-path=/tmp $PWD/coverage ./bin/bats --filter-tags '!no-kcov' test/\n",
                      "markdown": "`    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: |\n          wget https://github.com/SimonKagstrom/kcov/releases/download/v40/kcov-amd64.tar.gz\n          tar -xf kcov-amd64.tar.gz\n      - run: |\n          ./usr/local/bin/kcov --exclude-path=/tmp $PWD/coverage ./bin/bats --filter-tags '!no-kcov' test/\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 51,
                  "endLine": 321,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            ln -sf python3 /usr/bin/python # bats-file uses python without version\n            bats --tap --print-output-on-failure bats-*/test/\n          EOF\n          docker run -itv \"$PWD\":/code --entrypoint bash bats:test test.sh\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n",
                    "rendered": {
                      "text": "            ln -sf python3 /usr/bin/python # bats-file uses python without version\n            bats --tap --print-output-on-failure bats-*/test/\n          EOF\n          docker run -itv \"$PWD\":/code --entrypoint bash bats:test test.sh\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n",
                      "markdown": "`            ln -sf python3 /usr/bin/python # bats-file uses python without version\n            bats --tap --print-output-on-failure bats-*/test/\n          EOF\n          docker run -itv \"$PWD\":/code --entrypoint bash bats:test test.sh\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 9,
                  "endLine": 321,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            ln -sf python3 /usr/bin/python # bats-file uses python without version\n            bats --tap --print-output-on-failure bats-*/test/\n          EOF\n          docker run -itv \"$PWD\":/code --entrypoint bash bats:test test.sh\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n",
                    "rendered": {
                      "text": "            ln -sf python3 /usr/bin/python # bats-file uses python without version\n            bats --tap --print-output-on-failure bats-*/test/\n          EOF\n          docker run -itv \"$PWD\":/code --entrypoint bash bats:test test.sh\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n",
                      "markdown": "`            ln -sf python3 /usr/bin/python # bats-file uses python without version\n            bats --tap --print-output-on-failure bats-*/test/\n          EOF\n          docker run -itv \"$PWD\":/code --entrypoint bash bats:test test.sh\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 15,
                  "endLine": 316,
                  "endColumn": 20,
                  "snippet": {
                    "text": "          path: bats-file\n\n      - run: |\n          <<EOF cat >test.sh\n            apk add sudo python3 # install bats-file's dependencies\n            ln -sf python3 /usr/bin/python # bats-file uses python without version\n            bats --tap --print-output-on-failure bats-*/test/\n",
                    "rendered": {
                      "text": "          path: bats-file\n\n      - run: |\n          <<EOF cat >test.sh\n            apk add sudo python3 # install bats-file's dependencies\n            ln -sf python3 /usr/bin/python # bats-file uses python without version\n            bats --tap --print-output-on-failure bats-*/test/\n",
                      "markdown": "`          path: bats-file\n\n      - run: |\n          <<EOF cat >test.sh\n            apk add sudo python3 # install bats-file's dependencies\n            ln -sf python3 /usr/bin/python # bats-file uses python without version\n            bats --tap --print-output-on-failure bats-*/test/\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 12,
                  "endLine": 295,
                  "endColumn": 20,
                  "snippet": {
                    "text": "          tags: bats:test\n          load: true\n\n      - run: docker run -itv \"$PWD\":/code bats:test  --tap --print-output-on-failure test/\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n",
                    "rendered": {
                      "text": "          tags: bats:test\n          load: true\n\n      - run: docker run -itv \"$PWD\":/code bats:test  --tap --print-output-on-failure test/\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n",
                      "markdown": "`          tags: bats:test\n          load: true\n\n      - run: docker run -itv \"$PWD\":/code bats:test  --tap --print-output-on-failure test/\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 20,
                  "endLine": 285,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0\n\n",
                    "rendered": {
                      "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0\n\n",
                      "markdown": "`    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 42,
                  "endLine": 273,
                  "endColumn": 51,
                  "snippet": {
                    "text": "          rpmbuild -v -bb ./contrib/rpm/bats.spec\n          ls -al /github/home/rpmbuild/RPMS/noarch/\n          dnf install -y /github/home/rpmbuild/RPMS/noarch/bats-*.rpm\n          dnf -y install procps-ng # avoid timeout failure\n      - name: Run tests\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n",
                    "rendered": {
                      "text": "          rpmbuild -v -bb ./contrib/rpm/bats.spec\n          ls -al /github/home/rpmbuild/RPMS/noarch/\n          dnf install -y /github/home/rpmbuild/RPMS/noarch/bats-*.rpm\n          dnf -y install procps-ng # avoid timeout failure\n      - name: Run tests\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n",
                      "markdown": "`          rpmbuild -v -bb ./contrib/rpm/bats.spec\n          ls -al /github/home/rpmbuild/RPMS/noarch/\n          dnf install -y /github/home/rpmbuild/RPMS/noarch/bats-*.rpm\n          dnf -y install procps-ng # avoid timeout failure\n      - name: Run tests\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 9,
                  "endLine": 273,
                  "endColumn": 14,
                  "snippet": {
                    "text": "          rpmbuild -v -bb ./contrib/rpm/bats.spec\n          ls -al /github/home/rpmbuild/RPMS/noarch/\n          dnf install -y /github/home/rpmbuild/RPMS/noarch/bats-*.rpm\n          dnf -y install procps-ng # avoid timeout failure\n      - name: Run tests\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n",
                    "rendered": {
                      "text": "          rpmbuild -v -bb ./contrib/rpm/bats.spec\n          ls -al /github/home/rpmbuild/RPMS/noarch/\n          dnf install -y /github/home/rpmbuild/RPMS/noarch/bats-*.rpm\n          dnf -y install procps-ng # avoid timeout failure\n      - name: Run tests\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n",
                      "markdown": "`          rpmbuild -v -bb ./contrib/rpm/bats.spec\n          ls -al /github/home/rpmbuild/RPMS/noarch/\n          dnf install -y /github/home/rpmbuild/RPMS/noarch/bats-*.rpm\n          dnf -y install procps-ng # avoid timeout failure\n      - name: Run tests\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 9,
                  "endLine": 272,
                  "endColumn": 14,
                  "snippet": {
                    "text": "          tar --transform \"s,^,bats-core-${version}/,\" -cf /github/home/rpmbuild/SOURCES/v${version}.tar.gz ./\n          rpmbuild -v -bb ./contrib/rpm/bats.spec\n          ls -al /github/home/rpmbuild/RPMS/noarch/\n          dnf install -y /github/home/rpmbuild/RPMS/noarch/bats-*.rpm\n          dnf -y install procps-ng # avoid timeout failure\n      - name: Run tests\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n",
                    "rendered": {
                      "text": "          tar --transform \"s,^,bats-core-${version}/,\" -cf /github/home/rpmbuild/SOURCES/v${version}.tar.gz ./\n          rpmbuild -v -bb ./contrib/rpm/bats.spec\n          ls -al /github/home/rpmbuild/RPMS/noarch/\n          dnf install -y /github/home/rpmbuild/RPMS/noarch/bats-*.rpm\n          dnf -y install procps-ng # avoid timeout failure\n      - name: Run tests\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n",
                      "markdown": "`          tar --transform \"s,^,bats-core-${version}/,\" -cf /github/home/rpmbuild/SOURCES/v${version}.tar.gz ./\n          rpmbuild -v -bb ./contrib/rpm/bats.spec\n          ls -al /github/home/rpmbuild/RPMS/noarch/\n          dnf install -y /github/home/rpmbuild/RPMS/noarch/bats-*.rpm\n          dnf -y install procps-ng # avoid timeout failure\n      - name: Run tests\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 9,
                  "endLine": 269,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        run: |\n          rpmdev-setuptree\n          version=$(rpmspec -q --qf '%{version}' contrib/rpm/bats.spec)\n          tar --transform \"s,^,bats-core-${version}/,\" -cf /github/home/rpmbuild/SOURCES/v${version}.tar.gz ./\n          rpmbuild -v -bb ./contrib/rpm/bats.spec\n          ls -al /github/home/rpmbuild/RPMS/noarch/\n          dnf install -y /github/home/rpmbuild/RPMS/noarch/bats-*.rpm\n",
                    "rendered": {
                      "text": "        run: |\n          rpmdev-setuptree\n          version=$(rpmspec -q --qf '%{version}' contrib/rpm/bats.spec)\n          tar --transform \"s,^,bats-core-${version}/,\" -cf /github/home/rpmbuild/SOURCES/v${version}.tar.gz ./\n          rpmbuild -v -bb ./contrib/rpm/bats.spec\n          ls -al /github/home/rpmbuild/RPMS/noarch/\n          dnf install -y /github/home/rpmbuild/RPMS/noarch/bats-*.rpm\n",
                      "markdown": "`        run: |\n          rpmdev-setuptree\n          version=$(rpmspec -q --qf '%{version}' contrib/rpm/bats.spec)\n          tar --transform \"s,^,bats-core-${version}/,\" -cf /github/home/rpmbuild/SOURCES/v${version}.tar.gz ./\n          rpmbuild -v -bb ./contrib/rpm/bats.spec\n          ls -al /github/home/rpmbuild/RPMS/noarch/\n          dnf install -y /github/home/rpmbuild/RPMS/noarch/bats-*.rpm\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 31,
                  "endLine": 265,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: dnf install -y rpm-build rpmdevtools\n      - name: Build and install RPM and dependencies\n        run: |\n          rpmdev-setuptree\n          version=$(rpmspec -q --qf '%{version}' contrib/rpm/bats.spec)\n",
                    "rendered": {
                      "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: dnf install -y rpm-build rpmdevtools\n      - name: Build and install RPM and dependencies\n        run: |\n          rpmdev-setuptree\n          version=$(rpmspec -q --qf '%{version}' contrib/rpm/bats.spec)\n",
                      "markdown": "`    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: dnf install -y rpm-build rpmdevtools\n      - name: Build and install RPM and dependencies\n        run: |\n          rpmdev-setuptree\n          version=$(rpmspec -q --qf '%{version}' contrib/rpm/bats.spec)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 12,
                  "endLine": 264,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    container: almalinux:8\n    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: dnf install -y rpm-build rpmdevtools\n      - name: Build and install RPM and dependencies\n        run: |\n          rpmdev-setuptree\n",
                    "rendered": {
                      "text": "    container: almalinux:8\n    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: dnf install -y rpm-build rpmdevtools\n      - name: Build and install RPM and dependencies\n        run: |\n          rpmdev-setuptree\n",
                      "markdown": "`    container: almalinux:8\n    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: dnf install -y rpm-build rpmdevtools\n      - name: Build and install RPM and dependencies\n        run: |\n          rpmdev-setuptree\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 33,
                  "endLine": 257,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      # list symlinks that are broken and force non-zero exit if there are any\n      - run: \"! find . -xtype l | grep .\"\n\n  rpm:\n    runs-on: ubuntu-latest\n",
                    "rendered": {
                      "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      # list symlinks that are broken and force non-zero exit if there are any\n      - run: \"! find . -xtype l | grep .\"\n\n  rpm:\n    runs-on: ubuntu-latest\n",
                      "markdown": "`    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      # list symlinks that are broken and force non-zero exit if there are any\n      - run: \"! find . -xtype l | grep .\"\n\n  rpm:\n    runs-on: ubuntu-latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 15,
                  "endLine": 257,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      # list symlinks that are broken and force non-zero exit if there are any\n      - run: \"! find . -xtype l | grep .\"\n\n  rpm:\n    runs-on: ubuntu-latest\n",
                    "rendered": {
                      "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      # list symlinks that are broken and force non-zero exit if there are any\n      - run: \"! find . -xtype l | grep .\"\n\n  rpm:\n    runs-on: ubuntu-latest\n",
                      "markdown": "`    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      # list symlinks that are broken and force non-zero exit if there are any\n      - run: \"! find . -xtype l | grep .\"\n\n  rpm:\n    runs-on: ubuntu-latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 11,
                  "endLine": 250,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        with:\n          prepare: pkg install -y bash parallel ${{ matrix.packages }}\n          run: |\n            time ./bin/bats --print-output-on-failure test/\n\n  find_broken_symlinks:\n    runs-on: ubuntu-latest\n",
                    "rendered": {
                      "text": "        with:\n          prepare: pkg install -y bash parallel ${{ matrix.packages }}\n          run: |\n            time ./bin/bats --print-output-on-failure test/\n\n  find_broken_symlinks:\n    runs-on: ubuntu-latest\n",
                      "markdown": "`        with:\n          prepare: pkg install -y bash parallel ${{ matrix.packages }}\n          run: |\n            time ./bin/bats --print-output-on-failure test/\n\n  find_broken_symlinks:\n    runs-on: ubuntu-latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 33,
                  "endLine": 248,
                  "endColumn": 39,
                  "snippet": {
                    "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - uses: vmactions/freebsd-vm@a50912ab96b7568d0fa9c1156c6facd6f11488a9 # v1.1.0\n        with:\n          prepare: pkg install -y bash parallel ${{ matrix.packages }}\n          run: |\n            time ./bin/bats --print-output-on-failure test/\n\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - uses: vmactions/freebsd-vm@a50912ab96b7568d0fa9c1156c6facd6f11488a9 # v1.1.0\n        with:\n          prepare: pkg install -y bash parallel ${{ matrix.packages }}\n          run: |\n            time ./bin/bats --print-output-on-failure test/\n\n",
                      "markdown": "`      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - uses: vmactions/freebsd-vm@a50912ab96b7568d0fa9c1156c6facd6f11488a9 # v1.1.0\n        with:\n          prepare: pkg install -y bash parallel ${{ matrix.packages }}\n          run: |\n            time ./bin/bats --print-output-on-failure test/\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 11,
                  "endLine": 243,
                  "snippet": {
                    "text": "    strategy:\n      matrix:\n        packages:\n          - flock\n          - \"\"\n    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - uses: vmactions/freebsd-vm@a50912ab96b7568d0fa9c1156c6facd6f11488a9 # v1.1.0\n",
                    "rendered": {
                      "text": "    strategy:\n      matrix:\n        packages:\n          - flock\n          - \"\"\n    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - uses: vmactions/freebsd-vm@a50912ab96b7568d0fa9c1156c6facd6f11488a9 # v1.1.0\n",
                      "markdown": "`    strategy:\n      matrix:\n        packages:\n          - flock\n          - \"\"\n    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - uses: vmactions/freebsd-vm@a50912ab96b7568d0fa9c1156c6facd6f11488a9 # v1.1.0\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 9,
                  "endLine": 235,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        env:\n          TERM: linux # fix tput for tty issue work around\n        run:\n          time ./bin/bats  --print-output-on-failure test/\n\n  freebsd:\n    runs-on: ubuntu-latest\n",
                    "rendered": {
                      "text": "        env:\n          TERM: linux # fix tput for tty issue work around\n        run:\n          time ./bin/bats  --print-output-on-failure test/\n\n  freebsd:\n    runs-on: ubuntu-latest\n",
                      "markdown": "`        env:\n          TERM: linux # fix tput for tty issue work around\n        run:\n          time ./bin/bats  --print-output-on-failure test/\n\n  freebsd:\n    runs-on: ubuntu-latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 25,
                  "endLine": 230,
                  "endColumn": 31,
                  "snippet": {
                    "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install dependencies\n        run: apk add bash ncurses util-linux\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install dependencies\n        run: apk add bash ncurses util-linux\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n",
                      "markdown": "`      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install dependencies\n        run: apk add bash ncurses util-linux\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 20,
                  "endLine": 229,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install dependencies\n        run: apk add bash ncurses util-linux\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n",
                    "rendered": {
                      "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install dependencies\n        run: apk add bash ncurses util-linux\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n",
                      "markdown": "`    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install dependencies\n        run: apk add bash ncurses util-linux\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 9,
                  "endLine": 215,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          TERM: linux # fix tput for tty issue work around\n        run: |\n          mkdir test-results/\n          time bats test --print-output-on-failure --report-formatter junit --output test-results\n      - name: Publish Test Results\n        uses: EnricoMi/publish-unit-test-result-action@v2\n        if: always()\n",
                    "rendered": {
                      "text": "          TERM: linux # fix tput for tty issue work around\n        run: |\n          mkdir test-results/\n          time bats test --print-output-on-failure --report-formatter junit --output test-results\n      - name: Publish Test Results\n        uses: EnricoMi/publish-unit-test-result-action@v2\n        if: always()\n",
                      "markdown": "`          TERM: linux # fix tput for tty issue work around\n        run: |\n          mkdir test-results/\n          time bats test --print-output-on-failure --report-formatter junit --output test-results\n      - name: Publish Test Results\n        uses: EnricoMi/publish-unit-test-result-action@v2\n        if: always()\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 22,
                  "endLine": 210,
                  "snippet": {
                    "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install in lib64\n        run: sudo ./install.sh /usr/ lib64\n      - name: Run from env\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install in lib64\n        run: sudo ./install.sh /usr/ lib64\n      - name: Run from env\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n",
                      "markdown": "`      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install in lib64\n        run: sudo ./install.sh /usr/ lib64\n      - name: Run from env\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 9,
                  "endLine": 198,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          set -e\n          docker build --build-arg bashver=\"${{ matrix.version }}\" --tag \"bats/bats:bash-${{ matrix.version }}\" .\n          docker run -it \"bash:${{ matrix.version }}\" --version\n          time docker run -it ${{ matrix.env_vars }} \"bats/bats:bash-${{ matrix.version }}\"  --print-output-on-failure --tap /opt/bats/test\n\n  lib64-install:\n    runs-on: ubuntu-latest\n",
                    "rendered": {
                      "text": "          set -e\n          docker build --build-arg bashver=\"${{ matrix.version }}\" --tag \"bats/bats:bash-${{ matrix.version }}\" .\n          docker run -it \"bash:${{ matrix.version }}\" --version\n          time docker run -it ${{ matrix.env_vars }} \"bats/bats:bash-${{ matrix.version }}\"  --print-output-on-failure --tap /opt/bats/test\n\n  lib64-install:\n    runs-on: ubuntu-latest\n",
                      "markdown": "`          set -e\n          docker build --build-arg bashver=\"${{ matrix.version }}\" --tag \"bats/bats:bash-${{ matrix.version }}\" .\n          docker run -it \"bash:${{ matrix.version }}\" --version\n          time docker run -it ${{ matrix.env_vars }} \"bats/bats:bash-${{ matrix.version }}\"  --print-output-on-failure --tap /opt/bats/test\n\n  lib64-install:\n    runs-on: ubuntu-latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 9,
                  "endLine": 197,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        run: |\n          set -e\n          docker build --build-arg bashver=\"${{ matrix.version }}\" --tag \"bats/bats:bash-${{ matrix.version }}\" .\n          docker run -it \"bash:${{ matrix.version }}\" --version\n          time docker run -it ${{ matrix.env_vars }} \"bats/bats:bash-${{ matrix.version }}\"  --print-output-on-failure --tap /opt/bats/test\n\n  lib64-install:\n",
                    "rendered": {
                      "text": "        run: |\n          set -e\n          docker build --build-arg bashver=\"${{ matrix.version }}\" --tag \"bats/bats:bash-${{ matrix.version }}\" .\n          docker run -it \"bash:${{ matrix.version }}\" --version\n          time docker run -it ${{ matrix.env_vars }} \"bats/bats:bash-${{ matrix.version }}\"  --print-output-on-failure --tap /opt/bats/test\n\n  lib64-install:\n",
                      "markdown": "`        run: |\n          set -e\n          docker build --build-arg bashver=\"${{ matrix.version }}\" --tag \"bats/bats:bash-${{ matrix.version }}\" .\n          docker run -it \"bash:${{ matrix.version }}\" --version\n          time docker run -it ${{ matrix.env_vars }} \"bats/bats:bash-${{ matrix.version }}\"  --print-output-on-failure --tap /opt/bats/test\n\n  lib64-install:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 9,
                  "endLine": 196,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        run: |\n          set -e\n          docker build --build-arg bashver=\"${{ matrix.version }}\" --tag \"bats/bats:bash-${{ matrix.version }}\" .\n          docker run -it \"bash:${{ matrix.version }}\" --version\n          time docker run -it ${{ matrix.env_vars }} \"bats/bats:bash-${{ matrix.version }}\"  --print-output-on-failure --tap /opt/bats/test\n\n",
                    "rendered": {
                      "text": "        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        run: |\n          set -e\n          docker build --build-arg bashver=\"${{ matrix.version }}\" --tag \"bats/bats:bash-${{ matrix.version }}\" .\n          docker run -it \"bash:${{ matrix.version }}\" --version\n          time docker run -it ${{ matrix.env_vars }} \"bats/bats:bash-${{ matrix.version }}\"  --print-output-on-failure --tap /opt/bats/test\n\n",
                      "markdown": "`        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        run: |\n          set -e\n          docker build --build-arg bashver=\"${{ matrix.version }}\" --tag \"bats/bats:bash-${{ matrix.version }}\" .\n          docker run -it \"bash:${{ matrix.version }}\" --version\n          time docker run -it ${{ matrix.env_vars }} \"bats/bats:bash-${{ matrix.version }}\"  --print-output-on-failure --tap /opt/bats/test\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 25,
                  "endLine": 192,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        run: |\n          set -e\n",
                    "rendered": {
                      "text": "    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        run: |\n          set -e\n",
                      "markdown": "`    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Run test on bash version ${{ matrix.version }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n        run: |\n          set -e\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 24,
                  "endLine": 172,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n",
                    "rendered": {
                      "text": "      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n",
                      "markdown": "`      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 25,
                  "endLine": 171,
                  "snippet": {
                    "text": "        with:\n          node-version: v18.20.2 \n      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n",
                    "rendered": {
                      "text": "        with:\n          node-version: v18.20.2 \n      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n",
                      "markdown": "`        with:\n          node-version: v18.20.2 \n      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 34,
                  "endLine": 170,
                  "snippet": {
                    "text": "      - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2\n        with:\n          node-version: v18.20.2 \n      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n",
                    "rendered": {
                      "text": "      - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2\n        with:\n          node-version: v18.20.2 \n      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n",
                      "markdown": "`      - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2\n        with:\n          node-version: v18.20.2 \n      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 9,
                  "endLine": 157,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_macos:\n    strategy:\n",
                    "rendered": {
                      "text": "          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_macos:\n    strategy:\n",
                      "markdown": "`          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_macos:\n    strategy:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 9,
                  "endLine": 156,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_macos:\n",
                    "rendered": {
                      "text": "        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_macos:\n",
                      "markdown": "`        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_macos:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 24,
                  "endLine": 152,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n",
                    "rendered": {
                      "text": "        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n",
                      "markdown": "`        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 12,
                  "endLine": 149,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n",
                    "rendered": {
                      "text": "        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n",
                      "markdown": "`        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'unbuffer bash {0}' # work around tty issues\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 24,
                  "endLine": 146,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        if: contains(matrix.env_vars, 'rush')\n\n      - name: Check failing tests fail suite,\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n",
                    "rendered": {
                      "text": "        if: contains(matrix.env_vars, 'rush')\n\n      - name: Check failing tests fail suite,\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n",
                      "markdown": "`        if: contains(matrix.env_vars, 'rush')\n\n      - name: Check failing tests fail suite,\n        shell: 'unbuffer bash {0}' # work around tty issues\n        env:\n          TERM: linux # fix tput for tty issue work around\n        run: bash -c '! bin/bats test/fixtures/bats/failing.bats'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 112,
                  "endLine": 142,
                  "endColumn": 117,
                  "snippet": {
                    "text": "        run: brew install expect\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_darwin_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n        if: contains(matrix.env_vars, 'rush')\n\n      - name: Check failing tests fail suite,\n",
                    "rendered": {
                      "text": "        run: brew install expect\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_darwin_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n        if: contains(matrix.env_vars, 'rush')\n\n      - name: Check failing tests fail suite,\n",
                      "markdown": "`        run: brew install expect\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_darwin_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n        if: contains(matrix.env_vars, 'rush')\n\n      - name: Check failing tests fail suite,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 9,
                  "endLine": 142,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        run: brew install expect\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_darwin_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n        if: contains(matrix.env_vars, 'rush')\n\n      - name: Check failing tests fail suite,\n",
                    "rendered": {
                      "text": "        run: brew install expect\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_darwin_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n        if: contains(matrix.env_vars, 'rush')\n\n      - name: Check failing tests fail suite,\n",
                      "markdown": "`        run: brew install expect\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_darwin_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n        if: contains(matrix.env_vars, 'rush')\n\n      - name: Check failing tests fail suite,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 25,
                  "endLine": 140,
                  "snippet": {
                    "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_darwin_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n        if: contains(matrix.env_vars, 'rush')\n",
                    "rendered": {
                      "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_darwin_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n        if: contains(matrix.env_vars, 'rush')\n",
                      "markdown": "`    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_darwin_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n        if: contains(matrix.env_vars, 'rush')\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 34,
                  "endLine": 139,
                  "snippet": {
                    "text": "    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_darwin_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n",
                    "rendered": {
                      "text": "    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_darwin_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n",
                      "markdown": "`    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install unbuffer via expect\n        run: brew install expect\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_darwin_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 9,
                  "endLine": 110,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_windows:\n    strategy:\n",
                    "rendered": {
                      "text": "        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_windows:\n    strategy:\n",
                      "markdown": "`        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_windows:\n    strategy:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 9,
                  "endLine": 109,
                  "endColumn": 15,
                  "snippet": {
                    "text": "      - name: Check failing tests fail suite,\n        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_windows:\n",
                    "rendered": {
                      "text": "      - name: Check failing tests fail suite,\n        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_windows:\n",
                      "markdown": "`      - name: Check failing tests fail suite,\n        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n\n  npm_on_windows:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 12,
                  "endLine": 107,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Check failing tests fail suite,\n        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n",
                    "rendered": {
                      "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Check failing tests fail suite,\n        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n",
                      "markdown": "`    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Check failing tests fail suite,\n        run: bash -c \"! bin/bats test/fixtures/bats/failing.bats\"\n      - run: |\n          bash --version\n          bash -c \"time bin/bats  --print-output-on-failure --formatter tap test\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 9,
                  "endLine": 71,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  unset_variables:\n    runs-on: ubuntu-latest\n",
                    "rendered": {
                      "text": "          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  unset_variables:\n    runs-on: ubuntu-latest\n",
                      "markdown": "`          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  unset_variables:\n    runs-on: ubuntu-latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 9,
                  "endLine": 70,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  unset_variables:\n",
                    "rendered": {
                      "text": "        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  unset_variables:\n",
                      "markdown": "`        env:\n          TERM: linux # fix tput for tty issue work around\n        run: |\n          bash --version\n          bash -c \"time ${{ matrix.env_vars }} bin/bats  --print-output-on-failure --formatter tap test\"\n\n  unset_variables:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 111,
                  "endLine": 63,
                  "endColumn": 116,
                  "snippet": {
                    "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n        if: contains(matrix.env_vars, 'rush')\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n        if: contains(matrix.env_vars, 'rush')\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n",
                      "markdown": "`      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n        if: contains(matrix.env_vars, 'rush')\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 9,
                  "endLine": 63,
                  "endColumn": 15,
                  "snippet": {
                    "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n        if: contains(matrix.env_vars, 'rush')\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n        if: contains(matrix.env_vars, 'rush')\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n",
                      "markdown": "`      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Install rush\n        run: |\n          curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.5.0/rush_linux_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin\n        if: contains(matrix.env_vars, 'rush')\n      - name: Run test on OS ${{ matrix.os }}\n        shell: 'script -q -e -c \"bash {0}\"' # work around tty issues\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 14,
                  "endLine": 46,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      - name: Run shellcheck\n        run: |\n          sudo apt-get update -y\n          sudo apt-get install shellcheck\n          ./shellcheck.sh\n\n  linux:\n",
                    "rendered": {
                      "text": "      - name: Run shellcheck\n        run: |\n          sudo apt-get update -y\n          sudo apt-get install shellcheck\n          ./shellcheck.sh\n\n  linux:\n",
                      "markdown": "`      - name: Run shellcheck\n        run: |\n          sudo apt-get update -y\n          sudo apt-get install shellcheck\n          ./shellcheck.sh\n\n  linux:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 14,
                  "endLine": 45,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Run shellcheck\n        run: |\n          sudo apt-get update -y\n          sudo apt-get install shellcheck\n          ./shellcheck.sh\n\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Run shellcheck\n        run: |\n          sudo apt-get update -y\n          sudo apt-get install shellcheck\n          ./shellcheck.sh\n\n",
                      "markdown": "`      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - name: Run shellcheck\n        run: |\n          sudo apt-get update -y\n          sudo apt-get install shellcheck\n          ./shellcheck.sh\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 9,
                  "endLine": 27,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: |\n          curl https://github.com/mvdan/sh/releases/download/v3.5.1/shfmt_v3.5.1_linux_amd64 -o shfmt\n          chmod a+x shfmt\n      - run: ./shfmt --diff .\n\n  # Ensure we detect when a change disables Bats from reporting failure.\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: |\n          curl https://github.com/mvdan/sh/releases/download/v3.5.1/shfmt_v3.5.1_linux_amd64 -o shfmt\n          chmod a+x shfmt\n      - run: ./shfmt --diff .\n\n  # Ensure we detect when a change disables Bats from reporting failure.\n",
                      "markdown": "`      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: |\n          curl https://github.com/mvdan/sh/releases/download/v3.5.1/shfmt_v3.5.1_linux_amd64 -o shfmt\n          chmod a+x shfmt\n      - run: ./shfmt --diff .\n\n  # Ensure we detect when a change disables Bats from reporting failure.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 9,
                  "endLine": 26,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: |\n          curl https://github.com/mvdan/sh/releases/download/v3.5.1/shfmt_v3.5.1_linux_amd64 -o shfmt\n          chmod a+x shfmt\n      - run: ./shfmt --diff .\n\n",
                    "rendered": {
                      "text": "    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: |\n          curl https://github.com/mvdan/sh/releases/download/v3.5.1/shfmt_v3.5.1_linux_amd64 -o shfmt\n          chmod a+x shfmt\n      - run: ./shfmt --diff .\n\n",
                      "markdown": "`    steps:\n      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n      - run: |\n          curl https://github.com/mvdan/sh/releases/download/v3.5.1/shfmt_v3.5.1_linux_amd64 -o shfmt\n          chmod a+x shfmt\n      - run: ./shfmt --diff .\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.github/workflows/tests.yml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 11,
                  "endLine": 17,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      - name: Check that PR is mentioned in Changelog\n        run: |\n          if ! ./.github/workflows/check_pr_label.sh \"${{github.event.pull_request.number}}\" \"no changelog\"; then\n            grep \"#${{github.event.pull_request.number}}\" docs/CHANGELOG.md\n          fi\n    if: ${{github.event.pull_request}}\n\n",
                    "rendered": {
                      "text": "      - name: Check that PR is mentioned in Changelog\n        run: |\n          if ! ./.github/workflows/check_pr_label.sh \"${{github.event.pull_request.number}}\" \"no changelog\"; then\n            grep \"#${{github.event.pull_request.number}}\" docs/CHANGELOG.md\n          fi\n    if: ${{github.event.pull_request}}\n\n",
                      "markdown": "`      - name: Check that PR is mentioned in Changelog\n        run: |\n          if ! ./.github/workflows/check_pr_label.sh \"${{github.event.pull_request.number}}\" \"no changelog\"; then\n            grep \"#${{github.event.pull_request.number}}\" docs/CHANGELOG.md\n          fi\n    if: ${{github.event.pull_request}}\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.1.ronn"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 38,
                  "endLine": 68,
                  "endColumn": 42,
                  "snippet": {
                    "text": "To put it more formally, `--filter-tags` is a boolean conjunction.\n\nTo allow for more complex queries, you can specify multiple `--filter-tags`.\nA test will be executed, if it matches at least one of them.\nThis means multiple `--filter-tags` form a boolean disjunction.\n\nA query of `--filter-tags a,!b --filter-tags b,c` can be translated to:\n",
                    "rendered": {
                      "text": "To put it more formally, `--filter-tags` is a boolean conjunction.\n\nTo allow for more complex queries, you can specify multiple `--filter-tags`.\nA test will be executed, if it matches at least one of them.\nThis means multiple `--filter-tags` form a boolean disjunction.\n\nA query of `--filter-tags a,!b --filter-tags b,c` can be translated to:\n",
                      "markdown": "`To put it more formally, `--filter-tags` is a boolean conjunction.\n\nTo allow for more complex queries, you can specify multiple `--filter-tags`.\nA test will be executed, if it matches at least one of them.\nThis means multiple `--filter-tags` form a boolean disjunction.\n\nA query of `--filter-tags a,!b --filter-tags b,c` can be translated to:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.1.ronn"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 21,
                  "endLine": 21,
                  "endColumn": 27,
                  "snippet": {
                    "text": "Bats is a TAP-compliant testing framework for Bash. It provides a simple\nway to verify that the UNIX programs you write behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining\ntest cases. Under the hood, each test case is just a function with a\ndescription.\n\n",
                    "rendered": {
                      "text": "Bats is a TAP-compliant testing framework for Bash. It provides a simple\nway to verify that the UNIX programs you write behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining\ntest cases. Under the hood, each test case is just a function with a\ndescription.\n\n",
                      "markdown": "`Bats is a TAP-compliant testing framework for Bash. It provides a simple\nway to verify that the UNIX programs you write behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining\ntest cases. Under the hood, each test case is just a function with a\ndescription.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.1.ronn"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 10,
                  "endLine": 1,
                  "endColumn": 16,
                  "snippet": {
                    "text": "bats(1) -- Bash Automated Testing System\n========================================\n\n\n",
                    "rendered": {
                      "text": "bats(1) -- Bash Automated Testing System\n========================================\n\n\n",
                      "markdown": "`bats(1) -- Bash Automated Testing System\n========================================\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.1.ronn"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 21,
                  "endLine": 21,
                  "endColumn": 27,
                  "snippet": {
                    "text": "Bats is a TAP-compliant testing framework for Bash. It provides a simple\nway to verify that the UNIX programs you write behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining\ntest cases. Under the hood, each test case is just a function with a\ndescription.\n\n",
                    "rendered": {
                      "text": "Bats is a TAP-compliant testing framework for Bash. It provides a simple\nway to verify that the UNIX programs you write behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining\ntest cases. Under the hood, each test case is just a function with a\ndescription.\n\n",
                      "markdown": "`Bats is a TAP-compliant testing framework for Bash. It provides a simple\nway to verify that the UNIX programs you write behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining\ntest cases. Under the hood, each test case is just a function with a\ndescription.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.1.ronn"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 10,
                  "endLine": 1,
                  "endColumn": 16,
                  "snippet": {
                    "text": "bats(1) -- Bash Automated Testing System\n========================================\n\n\n",
                    "rendered": {
                      "text": "bats(1) -- Bash Automated Testing System\n========================================\n\n\n",
                      "markdown": "`bats(1) -- Bash Automated Testing System\n========================================\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/Dockerfile"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 46,
                  "endLine": 24,
                  "endColumn": 78,
                  "snippet": {
                    "text": "LABEL org.opencontainers.image.base.name=\"docker.io/bash\"\n\nCOPY ./docker /tmp/docker\n# default to amd64 when not running in buildx environment that provides target platform\nRUN /tmp/docker/install_tini.sh \"${TARGETPLATFORM-linux/amd64}\"\n# Install bats libs\nRUN /tmp/docker/install_libs.sh support ${LIBS_VER_SUPPORT}\n",
                    "rendered": {
                      "text": "LABEL org.opencontainers.image.base.name=\"docker.io/bash\"\n\nCOPY ./docker /tmp/docker\n# default to amd64 when not running in buildx environment that provides target platform\nRUN /tmp/docker/install_tini.sh \"${TARGETPLATFORM-linux/amd64}\"\n# Install bats libs\nRUN /tmp/docker/install_libs.sh support ${LIBS_VER_SUPPORT}\n",
                      "markdown": "`LABEL org.opencontainers.image.base.name=\"docker.io/bash\"\n\nCOPY ./docker /tmp/docker\n# default to amd64 when not running in buildx environment that provides target platform\nRUN /tmp/docker/install_tini.sh \"${TARGETPLATFORM-linux/amd64}\"\n# Install bats libs\nRUN /tmp/docker/install_libs.sh support ${LIBS_VER_SUPPORT}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/uninstall.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -e\n\nBATS_ROOT=\"${0%/*}\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -e\n\nBATS_ROOT=\"${0%/*}\"\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -e\n\nBATS_ROOT=\"${0%/*}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/uninstall.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -e\n\nBATS_ROOT=\"${0%/*}\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -e\n\nBATS_ROOT=\"${0%/*}\"\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -e\n\nBATS_ROOT=\"${0%/*}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/README.md"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 54,
                  "endLine": 132,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\nBats is released under an MIT-style license; see `LICENSE.md` for details.\n\nSee the [parent project](https://github.com/bats-core) at GitHub or the\n[AUTHORS](AUTHORS) file for the current project maintainer team.\n\n[gitter]: https://gitter.im/bats-core/bats-core\n",
                    "rendered": {
                      "text": "\nBats is released under an MIT-style license; see `LICENSE.md` for details.\n\nSee the [parent project](https://github.com/bats-core) at GitHub or the\n[AUTHORS](AUTHORS) file for the current project maintainer team.\n\n[gitter]: https://gitter.im/bats-core/bats-core\n",
                      "markdown": "`\nBats is released under an MIT-style license; see `LICENSE.md` for details.\n\nSee the [parent project](https://github.com/bats-core) at GitHub or the\n[AUTHORS](AUTHORS) file for the current project maintainer team.\n\n[gitter]: https://gitter.im/bats-core/bats-core\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/README.md"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 211,
                  "endLine": 124,
                  "endColumn": 215,
                  "snippet": {
                    "text": "\n## Copyright\n\nThe Bats Logo was created by [Vukory](https://www.artstation.com/vukory) ([Github](https://github.com/vukory)) and sponsored by [SethFalco](https://github.com/SethFalco). If you want to use our logo, have a look at our [guidelines](./docs/source/assets/README.md#Usage-Guide-for-Third-Parties).\n\n© 2017-2024 bats-core organization\n\n",
                    "rendered": {
                      "text": "\n## Copyright\n\nThe Bats Logo was created by [Vukory](https://www.artstation.com/vukory) ([Github](https://github.com/vukory)) and sponsored by [SethFalco](https://github.com/SethFalco). If you want to use our logo, have a look at our [guidelines](./docs/source/assets/README.md#Usage-Guide-for-Third-Parties).\n\n© 2017-2024 bats-core organization\n\n",
                      "markdown": "`\n## Copyright\n\nThe Bats Logo was created by [Vukory](https://www.artstation.com/vukory) ([Github](https://github.com/vukory)) and sponsored by [SethFalco](https://github.com/SethFalco). If you want to use our logo, have a look at our [guidelines](./docs/source/assets/README.md#Usage-Guide-for-Third-Parties).\n\n© 2017-2024 bats-core organization\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/README.md"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 71,
                  "endLine": 110,
                  "snippet": {
                    "text": "\nThere was an initial [call for maintainers][call-maintain] for the original Bats repository, but write access to it could not be obtained. With development activity stalled, this fork allowed ongoing maintenance and forward progress for Bats.\n\n**Tuesday, September 19, 2017:** This was forked from [Bats][bats-orig] at\ncommit [0360811][].  It was created via `git clone --bare` and `git push\n--mirror`.\n\nAs of **Thursday, April 29, 2021:** the original [Bats][bats-orig] has been\n",
                    "rendered": {
                      "text": "\nThere was an initial [call for maintainers][call-maintain] for the original Bats repository, but write access to it could not be obtained. With development activity stalled, this fork allowed ongoing maintenance and forward progress for Bats.\n\n**Tuesday, September 19, 2017:** This was forked from [Bats][bats-orig] at\ncommit [0360811][].  It was created via `git clone --bare` and `git push\n--mirror`.\n\nAs of **Thursday, April 29, 2021:** the original [Bats][bats-orig] has been\n",
                      "markdown": "`\nThere was an initial [call for maintainers][call-maintain] for the original Bats repository, but write access to it could not be obtained. With development activity stalled, this fork allowed ongoing maintenance and forward progress for Bats.\n\n**Tuesday, September 19, 2017:** This was forked from [Bats][bats-orig] at\ncommit [0360811][].  It was created via `git clone --bare` and `git push\n--mirror`.\n\nAs of **Thursday, April 29, 2021:** the original [Bats][bats-orig] has been\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/README.md"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 7,
                  "endLine": 91,
                  "endColumn": 11,
                  "snippet": {
                    "text": "## Contributing\n\nFor now see the [`docs`](docs) folder for project guides, work with us on the wiki\nor look at the other communication channels.\n\n## Contact\n\n",
                    "rendered": {
                      "text": "## Contributing\n\nFor now see the [`docs`](docs) folder for project guides, work with us on the wiki\nor look at the other communication channels.\n\n## Contact\n\n",
                      "markdown": "`## Contributing\n\nFor now see the [`docs`](docs) folder for project guides, work with us on the wiki\nor look at the other communication channels.\n\n## Contact\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/README.md"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 5,
                  "endLine": 78,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\nThe Bats source code repository is [hosted on\nGitHub](https://github.com/bats-core/bats-core). There you can file bugs on the\nissue tracker or submit tested pull requests for review.\n\nFor real-world examples from open-source projects using Bats, see [Projects\nUsing Bats](https://github.com/bats-core/bats-core/wiki/Projects-Using-Bats) on\n",
                    "rendered": {
                      "text": "\nThe Bats source code repository is [hosted on\nGitHub](https://github.com/bats-core/bats-core). There you can file bugs on the\nissue tracker or submit tested pull requests for review.\n\nFor real-world examples from open-source projects using Bats, see [Projects\nUsing Bats](https://github.com/bats-core/bats-core/wiki/Projects-Using-Bats) on\n",
                      "markdown": "`\nThe Bats source code repository is [hosted on\nGitHub](https://github.com/bats-core/bats-core). There you can file bugs on the\nissue tracker or submit tested pull requests for review.\n\nFor real-world examples from open-source projects using Bats, see [Projects\nUsing Bats](https://github.com/bats-core/bats-core/wiki/Projects-Using-Bats) on\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/README.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 21,
                  "endLine": 22,
                  "endColumn": 27,
                  "snippet": {
                    "text": "3.2 or above.  It provides a simple way to verify that the UNIX programs you\nwrite behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining test cases.\nUnder the hood, each test case is just a function with a description.\n\n```bash\n",
                    "rendered": {
                      "text": "3.2 or above.  It provides a simple way to verify that the UNIX programs you\nwrite behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining test cases.\nUnder the hood, each test case is just a function with a description.\n\n```bash\n",
                      "markdown": "`3.2 or above.  It provides a simple way to verify that the UNIX programs you\nwrite behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining test cases.\nUnder the hood, each test case is just a function with a description.\n\n```bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/README.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 74,
                  "endLine": 19,
                  "snippet": {
                    "text": "\n# Bats-core: Bash Automated Testing System\n\nBats is a [TAP](https://testanything.org/)-compliant testing framework for Bash\n3.2 or above.  It provides a simple way to verify that the UNIX programs you\nwrite behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining test cases.\n",
                    "rendered": {
                      "text": "\n# Bats-core: Bash Automated Testing System\n\nBats is a [TAP](https://testanything.org/)-compliant testing framework for Bash\n3.2 or above.  It provides a simple way to verify that the UNIX programs you\nwrite behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining test cases.\n",
                      "markdown": "`\n# Bats-core: Bash Automated Testing System\n\nBats is a [TAP](https://testanything.org/)-compliant testing framework for Bash\n3.2 or above.  It provides a simple way to verify that the UNIX programs you\nwrite behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining test cases.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/README.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 12,
                  "endLine": 16,
                  "endColumn": 18,
                  "snippet": {
                    "text": "</picture>\n</div>\n\n# Bats-core: Bash Automated Testing System\n\nBats is a [TAP](https://testanything.org/)-compliant testing framework for Bash\n3.2 or above.  It provides a simple way to verify that the UNIX programs you\n",
                    "rendered": {
                      "text": "</picture>\n</div>\n\n# Bats-core: Bash Automated Testing System\n\nBats is a [TAP](https://testanything.org/)-compliant testing framework for Bash\n3.2 or above.  It provides a simple way to verify that the UNIX programs you\n",
                      "markdown": "`</picture>\n</div>\n\n# Bats-core: Bash Automated Testing System\n\nBats is a [TAP](https://testanything.org/)-compliant testing framework for Bash\n3.2 or above.  It provides a simple way to verify that the UNIX programs you\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/README.md"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 9,
                  "endLine": 95,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n## Contact\n\n- You can find and chat with us on our [Gitter].\n\n## Version history\n\n",
                    "rendered": {
                      "text": "\n## Contact\n\n- You can find and chat with us on our [Gitter].\n\n## Version history\n\n",
                      "markdown": "`\n## Contact\n\n- You can find and chat with us on our [Gitter].\n\n## Version history\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/README.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 21,
                  "endLine": 22,
                  "endColumn": 27,
                  "snippet": {
                    "text": "3.2 or above.  It provides a simple way to verify that the UNIX programs you\nwrite behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining test cases.\nUnder the hood, each test case is just a function with a description.\n\n```bash\n",
                    "rendered": {
                      "text": "3.2 or above.  It provides a simple way to verify that the UNIX programs you\nwrite behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining test cases.\nUnder the hood, each test case is just a function with a description.\n\n```bash\n",
                      "markdown": "`3.2 or above.  It provides a simple way to verify that the UNIX programs you\nwrite behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining test cases.\nUnder the hood, each test case is just a function with a description.\n\n```bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/README.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 74,
                  "endLine": 19,
                  "snippet": {
                    "text": "\n# Bats-core: Bash Automated Testing System\n\nBats is a [TAP](https://testanything.org/)-compliant testing framework for Bash\n3.2 or above.  It provides a simple way to verify that the UNIX programs you\nwrite behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining test cases.\n",
                    "rendered": {
                      "text": "\n# Bats-core: Bash Automated Testing System\n\nBats is a [TAP](https://testanything.org/)-compliant testing framework for Bash\n3.2 or above.  It provides a simple way to verify that the UNIX programs you\nwrite behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining test cases.\n",
                      "markdown": "`\n# Bats-core: Bash Automated Testing System\n\nBats is a [TAP](https://testanything.org/)-compliant testing framework for Bash\n3.2 or above.  It provides a simple way to verify that the UNIX programs you\nwrite behave as expected.\n\nA Bats test file is a Bash script with special syntax for defining test cases.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/README.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 12,
                  "endLine": 16,
                  "endColumn": 18,
                  "snippet": {
                    "text": "</picture>\n</div>\n\n# Bats-core: Bash Automated Testing System\n\nBats is a [TAP](https://testanything.org/)-compliant testing framework for Bash\n3.2 or above.  It provides a simple way to verify that the UNIX programs you\n",
                    "rendered": {
                      "text": "</picture>\n</div>\n\n# Bats-core: Bash Automated Testing System\n\nBats is a [TAP](https://testanything.org/)-compliant testing framework for Bash\n3.2 or above.  It provides a simple way to verify that the UNIX programs you\n",
                      "markdown": "`</picture>\n</div>\n\n# Bats-core: Bash Automated Testing System\n\nBats is a [TAP](https://testanything.org/)-compliant testing framework for Bash\n3.2 or above.  It provides a simple way to verify that the UNIX programs you\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-gather-tests"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 5,
                  "endLine": 341,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n  # get new values for the variables above\n  if [[ $BASH_VERSION == 4.3.*  ]]; then\n    # Bash 4.3 has function scoping issues when this is run in $() -> work around via file\n    bats_gather_tests_var_transfer_file=$BATS_RUN_TMPDIR/gather-tests-var-transfer\n    (set -eET; bats_gather_tests_for_file >\"$bats_gather_tests_var_transfer_file\")\n    result=$(<\"$bats_gather_tests_var_transfer_file\")\n",
                    "rendered": {
                      "text": "\n  # get new values for the variables above\n  if [[ $BASH_VERSION == 4.3.*  ]]; then\n    # Bash 4.3 has function scoping issues when this is run in $() -> work around via file\n    bats_gather_tests_var_transfer_file=$BATS_RUN_TMPDIR/gather-tests-var-transfer\n    (set -eET; bats_gather_tests_for_file >\"$bats_gather_tests_var_transfer_file\")\n    result=$(<\"$bats_gather_tests_var_transfer_file\")\n",
                      "markdown": "`\n  # get new values for the variables above\n  if [[ $BASH_VERSION == 4.3.*  ]]; then\n    # Bash 4.3 has function scoping issues when this is run in $() -> work around via file\n    bats_gather_tests_var_transfer_file=$BATS_RUN_TMPDIR/gather-tests-var-transfer\n    (set -eET; bats_gather_tests_for_file >\"$bats_gather_tests_var_transfer_file\")\n    result=$(<\"$bats_gather_tests_var_transfer_file\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-gather-tests"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 49,
                  "endLine": 92,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    return 0\n  fi\n  \n  # dereferencing ${test_names[*]} fails on older bash versions when empty -> check before\n  if [[ ${#test_names[@]} -gt 0 && \" ${test_names[*]} \" == *\" $line \"* ]]; then\n      test_dupes+=(\"$line\")\n  fi\n",
                    "rendered": {
                      "text": "    return 0\n  fi\n  \n  # dereferencing ${test_names[*]} fails on older bash versions when empty -> check before\n  if [[ ${#test_names[@]} -gt 0 && \" ${test_names[*]} \" == *\" $line \"* ]]; then\n      test_dupes+=(\"$line\")\n  fi\n",
                      "markdown": "`    return 0\n  fi\n  \n  # dereferencing ${test_names[*]} fails on older bash versions when empty -> check before\n  if [[ ${#test_names[@]} -gt 0 && \" ${test_names[*]} \" == *\" $line \"* ]]; then\n      test_dupes+=(\"$line\")\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-gather-tests"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -eET\n\nargs=(\"$@\")\nfilter_tags_list=()\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -eET\n\nargs=(\"$@\")\nfilter_tags_list=()\n",
                      "markdown": "`#!/usr/bin/env bash\nset -eET\n\nargs=(\"$@\")\nfilter_tags_list=()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-gather-tests"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 5,
                  "endLine": 341,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n  # get new values for the variables above\n  if [[ $BASH_VERSION == 4.3.*  ]]; then\n    # Bash 4.3 has function scoping issues when this is run in $() -> work around via file\n    bats_gather_tests_var_transfer_file=$BATS_RUN_TMPDIR/gather-tests-var-transfer\n    (set -eET; bats_gather_tests_for_file >\"$bats_gather_tests_var_transfer_file\")\n    result=$(<\"$bats_gather_tests_var_transfer_file\")\n",
                    "rendered": {
                      "text": "\n  # get new values for the variables above\n  if [[ $BASH_VERSION == 4.3.*  ]]; then\n    # Bash 4.3 has function scoping issues when this is run in $() -> work around via file\n    bats_gather_tests_var_transfer_file=$BATS_RUN_TMPDIR/gather-tests-var-transfer\n    (set -eET; bats_gather_tests_for_file >\"$bats_gather_tests_var_transfer_file\")\n    result=$(<\"$bats_gather_tests_var_transfer_file\")\n",
                      "markdown": "`\n  # get new values for the variables above\n  if [[ $BASH_VERSION == 4.3.*  ]]; then\n    # Bash 4.3 has function scoping issues when this is run in $() -> work around via file\n    bats_gather_tests_var_transfer_file=$BATS_RUN_TMPDIR/gather-tests-var-transfer\n    (set -eET; bats_gather_tests_for_file >\"$bats_gather_tests_var_transfer_file\")\n    result=$(<\"$bats_gather_tests_var_transfer_file\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-gather-tests"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 61,
                  "endLine": 157,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\nif [[ -n \"${filter-}\" ]]; then\nfunction should_skip_because_of_filter() {\n  # shellcheck disable=SC2154 # filter should be inherited as env var\n  ! [[ \"$description\" =~ $filter ]]\n}\nelse\n",
                    "rendered": {
                      "text": "\nif [[ -n \"${filter-}\" ]]; then\nfunction should_skip_because_of_filter() {\n  # shellcheck disable=SC2154 # filter should be inherited as env var\n  ! [[ \"$description\" =~ $filter ]]\n}\nelse\n",
                      "markdown": "`\nif [[ -n \"${filter-}\" ]]; then\nfunction should_skip_because_of_filter() {\n  # shellcheck disable=SC2154 # filter should be inherited as env var\n  ! [[ \"$description\" =~ $filter ]]\n}\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-gather-tests"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 49,
                  "endLine": 92,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    return 0\n  fi\n  \n  # dereferencing ${test_names[*]} fails on older bash versions when empty -> check before\n  if [[ ${#test_names[@]} -gt 0 && \" ${test_names[*]} \" == *\" $line \"* ]]; then\n      test_dupes+=(\"$line\")\n  fi\n",
                    "rendered": {
                      "text": "    return 0\n  fi\n  \n  # dereferencing ${test_names[*]} fails on older bash versions when empty -> check before\n  if [[ ${#test_names[@]} -gt 0 && \" ${test_names[*]} \" == *\" $line \"* ]]; then\n      test_dupes+=(\"$line\")\n  fi\n",
                      "markdown": "`    return 0\n  fi\n  \n  # dereferencing ${test_names[*]} fails on older bash versions when empty -> check before\n  if [[ ${#test_names[@]} -gt 0 && \" ${test_names[*]} \" == *\" $line \"* ]]; then\n      test_dupes+=(\"$line\")\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-gather-tests"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -eET\n\nargs=(\"$@\")\nfilter_tags_list=()\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -eET\n\nargs=(\"$@\")\nfilter_tags_list=()\n",
                      "markdown": "`#!/usr/bin/env bash\nset -eET\n\nargs=(\"$@\")\nfilter_tags_list=()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-pretty"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 8,
                  "endLine": 35,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\nupdate_screen_width() {\n  screen_width=\"$(tput cols)\"\n  # also update dependent value\n  update_count_column_left\n}\n\n",
                    "rendered": {
                      "text": "\nupdate_screen_width() {\n  screen_width=\"$(tput cols)\"\n  # also update dependent value\n  update_count_column_left\n}\n\n",
                      "markdown": "`\nupdate_screen_width() {\n  screen_width=\"$(tput cols)\"\n  # also update dependent value\n  update_count_column_left\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-pretty"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 8,
                  "endLine": 29,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    # additional space for ' in %s sec'\n    count_column_width=$((count_column_width + ${#SECONDS} + 8))\n  fi\n  # also update dependent value\n  update_count_column_left\n}\n\n",
                    "rendered": {
                      "text": "    # additional space for ' in %s sec'\n    count_column_width=$((count_column_width + ${#SECONDS} + 8))\n  fi\n  # also update dependent value\n  update_count_column_left\n}\n\n",
                      "markdown": "`    # additional space for ' in %s sec'\n    count_column_width=$((count_column_width + ${#SECONDS} + 8))\n  fi\n  # also update dependent value\n  update_count_column_left\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-pretty"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -e\n\n# shellcheck source=lib/bats-core/formatter.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/formatter.bash\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -e\n\n# shellcheck source=lib/bats-core/formatter.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/formatter.bash\"\n",
                      "markdown": "`#!/usr/bin/env bash\nset -e\n\n# shellcheck source=lib/bats-core/formatter.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/formatter.bash\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-pretty"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 3,
                  "endLine": 295,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  name=\"$2\"\n\n  if [[ ${BATS_FORMATTER_TEST_TIMEOUT-x} != x ]]; then\n    timeout \"${BATS_FORMATTER_TEST_DURATION:-}\" \"${BATS_FORMATTER_TEST_TIMEOUT}s\"\n    ((++timed_out))\n  else\n    fail \"${BATS_FORMATTER_TEST_DURATION:-}\"\n",
                    "rendered": {
                      "text": "  name=\"$2\"\n\n  if [[ ${BATS_FORMATTER_TEST_TIMEOUT-x} != x ]]; then\n    timeout \"${BATS_FORMATTER_TEST_DURATION:-}\" \"${BATS_FORMATTER_TEST_TIMEOUT}s\"\n    ((++timed_out))\n  else\n    fail \"${BATS_FORMATTER_TEST_DURATION:-}\"\n",
                      "markdown": "`  name=\"$2\"\n\n  if [[ ${BATS_FORMATTER_TEST_TIMEOUT-x} != x ]]; then\n    timeout \"${BATS_FORMATTER_TEST_DURATION:-}\" \"${BATS_FORMATTER_TEST_TIMEOUT}s\"\n    ((++timed_out))\n  else\n    fail \"${BATS_FORMATTER_TEST_DURATION:-}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-pretty"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -e\n\n# shellcheck source=lib/bats-core/formatter.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/formatter.bash\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -e\n\n# shellcheck source=lib/bats-core/formatter.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/formatter.bash\"\n",
                      "markdown": "`#!/usr/bin/env bash\nset -e\n\n# shellcheck source=lib/bats-core/formatter.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/formatter.bash\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-junit"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 119,
                  "endLine": 69,
                  "endColumn": 127,
                  "snippet": {
                    "text": "\nfile_header() {\n  timestamp=$(date -u +\"%Y-%m-%dT%H:%M:%S\")\n  printf \"<testsuite name=\\\"%s\\\" tests=\\\"%s\\\" failures=\\\"%s\\\" errors=\\\"0\\\" skipped=\\\"%s\\\" time=\\\"%s\\\" timestamp=\\\"%s\\\" hostname=\\\"%s\\\">\\n\" \\\n    \"$(xml_escape \"${class}\")\" \"${file_count}\" \"${file_failures}\" \"${file_skipped}\" \"$(milliseconds_to_seconds \"${file_exec_time}\")\" \"${timestamp}\" \"$(host)\"\n}\n\n",
                    "rendered": {
                      "text": "\nfile_header() {\n  timestamp=$(date -u +\"%Y-%m-%dT%H:%M:%S\")\n  printf \"<testsuite name=\\\"%s\\\" tests=\\\"%s\\\" failures=\\\"%s\\\" errors=\\\"0\\\" skipped=\\\"%s\\\" time=\\\"%s\\\" timestamp=\\\"%s\\\" hostname=\\\"%s\\\">\\n\" \\\n    \"$(xml_escape \"${class}\")\" \"${file_count}\" \"${file_failures}\" \"${file_skipped}\" \"$(milliseconds_to_seconds \"${file_exec_time}\")\" \"${timestamp}\" \"$(host)\"\n}\n\n",
                      "markdown": "`\nfile_header() {\n  timestamp=$(date -u +\"%Y-%m-%dT%H:%M:%S\")\n  printf \"<testsuite name=\\\"%s\\\" tests=\\\"%s\\\" failures=\\\"%s\\\" errors=\\\"0\\\" skipped=\\\"%s\\\" time=\\\"%s\\\" timestamp=\\\"%s\\\" hostname=\\\"%s\\\">\\n\" \\\n    \"$(xml_escape \"${class}\")\" \"${file_count}\" \"${file_failures}\" \"${file_skipped}\" \"$(milliseconds_to_seconds \"${file_exec_time}\")\" \"${timestamp}\" \"$(host)\"\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-junit"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 9,
                  "endLine": 47,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n}\n\n# convert $1 (time in milliseconds) to seconds\n",
                    "rendered": {
                      "text": "  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n}\n\n# convert $1 (time in milliseconds) to seconds\n",
                      "markdown": "`  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n}\n\n# convert $1 (time in milliseconds) to seconds\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-junit"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 38,
                  "endLine": 45,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n}\n",
                    "rendered": {
                      "text": "  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n}\n",
                      "markdown": "`  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-junit"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 26,
                  "endLine": 45,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n}\n",
                    "rendered": {
                      "text": "  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n}\n",
                      "markdown": "`  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-junit"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n}\n",
                    "rendered": {
                      "text": "  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n}\n",
                      "markdown": "`  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-junit"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 26,
                  "endLine": 44,
                  "endColumn": 34,
                  "snippet": {
                    "text": "host() {\n  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n",
                    "rendered": {
                      "text": "host() {\n  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n",
                      "markdown": "`host() {\n  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-junit"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 18,
                  "snippet": {
                    "text": "host() {\n  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n",
                    "rendered": {
                      "text": "host() {\n  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n",
                      "markdown": "`host() {\n  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n  echo \"$hostname\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-junit"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 26,
                  "endLine": 43,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nhost() {\n  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n",
                    "rendered": {
                      "text": "\nhost() {\n  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n",
                      "markdown": "`\nhost() {\n  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-junit"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\nhost() {\n  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n",
                    "rendered": {
                      "text": "\nhost() {\n  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n",
                      "markdown": "`\nhost() {\n  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-junit"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 8,
                  "endLine": 42,
                  "endColumn": 16,
                  "snippet": {
                    "text": "}\n\nhost() {\n  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n",
                    "rendered": {
                      "text": "}\n\nhost() {\n  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n",
                      "markdown": "`}\n\nhost() {\n  local hostname=\"${HOST:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"${HOSTNAME:-}\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(uname -n)\"\n  [[ -z \"$hostname\" ]] && hostname=\"$(hostname -f)\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-junit"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -euo pipefail\n\n# shellcheck source=lib/bats-core/formatter.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/formatter.bash\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -euo pipefail\n\n# shellcheck source=lib/bats-core/formatter.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/formatter.bash\"\n",
                      "markdown": "`#!/usr/bin/env bash\nset -euo pipefail\n\n# shellcheck source=lib/bats-core/formatter.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/formatter.bash\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-junit"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -euo pipefail\n\n# shellcheck source=lib/bats-core/formatter.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/formatter.bash\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -euo pipefail\n\n# shellcheck source=lib/bats-core/formatter.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/formatter.bash\"\n",
                      "markdown": "`#!/usr/bin/env bash\nset -euo pipefail\n\n# shellcheck source=lib/bats-core/formatter.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/formatter.bash\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-suite"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 56,
                  "endLine": 151,
                  "endColumn": 60,
                  "snippet": {
                    "text": "fi\n\nif [[ -n \"$bats_no_parallelize_within_files\" ]] && [[ ! \"$num_jobs\" -gt 1 ]]; then\n  abort \"The flag --no-parallelize-across-files requires at least --jobs 2\"\nfi\n\n# only abort on the lowest levels\n",
                    "rendered": {
                      "text": "fi\n\nif [[ -n \"$bats_no_parallelize_within_files\" ]] && [[ ! \"$num_jobs\" -gt 1 ]]; then\n  abort \"The flag --no-parallelize-across-files requires at least --jobs 2\"\nfi\n\n# only abort on the lowest levels\n",
                      "markdown": "`fi\n\nif [[ -n \"$bats_no_parallelize_within_files\" ]] && [[ ! \"$num_jobs\" -gt 1 ]]; then\n  abort \"The flag --no-parallelize-across-files requires at least --jobs 2\"\nfi\n\n# only abort on the lowest levels\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-suite"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 56,
                  "endLine": 147,
                  "endColumn": 60,
                  "snippet": {
                    "text": "fi\n\nif [[ -n \"$bats_no_parallelize_across_files\" ]] && [[ ! \"$num_jobs\" -gt 1 ]]; then\n  abort \"The flag --no-parallelize-across-files requires at least --jobs 2\"\nfi\n\nif [[ -n \"$bats_no_parallelize_within_files\" ]] && [[ ! \"$num_jobs\" -gt 1 ]]; then\n",
                    "rendered": {
                      "text": "fi\n\nif [[ -n \"$bats_no_parallelize_across_files\" ]] && [[ ! \"$num_jobs\" -gt 1 ]]; then\n  abort \"The flag --no-parallelize-across-files requires at least --jobs 2\"\nfi\n\nif [[ -n \"$bats_no_parallelize_within_files\" ]] && [[ ! \"$num_jobs\" -gt 1 ]]; then\n",
                      "markdown": "`fi\n\nif [[ -n \"$bats_no_parallelize_across_files\" ]] && [[ ! \"$num_jobs\" -gt 1 ]]; then\n  abort \"The flag --no-parallelize-across-files requires at least --jobs 2\"\nfi\n\nif [[ -n \"$bats_no_parallelize_within_files\" ]] && [[ ! \"$num_jobs\" -gt 1 ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-suite"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 106,
                  "endLine": 12,
                  "endColumn": 112,
                  "snippet": {
                    "text": "bats_no_parallelize_within_files=\nfilter_status=''\ngather_tests_flags=('--dummy-flag')\nflags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nsetup_suite_file=''\nBATS_TRACE_LEVEL=\"${BATS_TRACE_LEVEL:-0}\"\nBATS_SHOW_OUTPUT_OF_SUCCEEDING_TESTS=\n",
                    "rendered": {
                      "text": "bats_no_parallelize_within_files=\nfilter_status=''\ngather_tests_flags=('--dummy-flag')\nflags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nsetup_suite_file=''\nBATS_TRACE_LEVEL=\"${BATS_TRACE_LEVEL:-0}\"\nBATS_SHOW_OUTPUT_OF_SUCCEEDING_TESTS=\n",
                      "markdown": "`bats_no_parallelize_within_files=\nfilter_status=''\ngather_tests_flags=('--dummy-flag')\nflags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nsetup_suite_file=''\nBATS_TRACE_LEVEL=\"${BATS_TRACE_LEVEL:-0}\"\nBATS_SHOW_OUTPUT_OF_SUCCEEDING_TESTS=\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-suite"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -e\n\ncount_only_flag=''\nfilter=''\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -e\n\ncount_only_flag=''\nfilter=''\n",
                      "markdown": "`#!/usr/bin/env bash\nset -e\n\ncount_only_flag=''\nfilter=''\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-suite"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 117,
                  "endLine": 179,
                  "endColumn": 122,
                  "snippet": {
                    "text": "# (see https://github.com/bats-core/bats-core/issues/329)\n# If a file was specified multiple times, we already got it repeatedly in our TESTS_LIST_FILE.\n# Thus, it suffices to bats-exec-file it once to run all repeated tests on it.\nIFS=$'\\n' read -d '' -r -a BATS_UNIQUE_TEST_FILENAMES < <(printf \"%s\\n\" \"$@\" | nl | sort -k 2 | uniq -f 1 | sort -n | cut -f 2-) || true\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n",
                    "rendered": {
                      "text": "# (see https://github.com/bats-core/bats-core/issues/329)\n# If a file was specified multiple times, we already got it repeatedly in our TESTS_LIST_FILE.\n# Thus, it suffices to bats-exec-file it once to run all repeated tests on it.\nIFS=$'\\n' read -d '' -r -a BATS_UNIQUE_TEST_FILENAMES < <(printf \"%s\\n\" \"$@\" | nl | sort -k 2 | uniq -f 1 | sort -n | cut -f 2-) || true\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n",
                      "markdown": "`# (see https://github.com/bats-core/bats-core/issues/329)\n# If a file was specified multiple times, we already got it repeatedly in our TESTS_LIST_FILE.\n# Thus, it suffices to bats-exec-file it once to run all repeated tests on it.\nIFS=$'\\n' read -d '' -r -a BATS_UNIQUE_TEST_FILENAMES < <(printf \"%s\\n\" \"$@\" | nl | sort -k 2 | uniq -f 1 | sort -n | cut -f 2-) || true\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-suite"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 107,
                  "endLine": 179,
                  "endColumn": 113,
                  "snippet": {
                    "text": "# (see https://github.com/bats-core/bats-core/issues/329)\n# If a file was specified multiple times, we already got it repeatedly in our TESTS_LIST_FILE.\n# Thus, it suffices to bats-exec-file it once to run all repeated tests on it.\nIFS=$'\\n' read -d '' -r -a BATS_UNIQUE_TEST_FILENAMES < <(printf \"%s\\n\" \"$@\" | nl | sort -k 2 | uniq -f 1 | sort -n | cut -f 2-) || true\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n",
                    "rendered": {
                      "text": "# (see https://github.com/bats-core/bats-core/issues/329)\n# If a file was specified multiple times, we already got it repeatedly in our TESTS_LIST_FILE.\n# Thus, it suffices to bats-exec-file it once to run all repeated tests on it.\nIFS=$'\\n' read -d '' -r -a BATS_UNIQUE_TEST_FILENAMES < <(printf \"%s\\n\" \"$@\" | nl | sort -k 2 | uniq -f 1 | sort -n | cut -f 2-) || true\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n",
                      "markdown": "`# (see https://github.com/bats-core/bats-core/issues/329)\n# If a file was specified multiple times, we already got it repeatedly in our TESTS_LIST_FILE.\n# Thus, it suffices to bats-exec-file it once to run all repeated tests on it.\nIFS=$'\\n' read -d '' -r -a BATS_UNIQUE_TEST_FILENAMES < <(printf \"%s\\n\" \"$@\" | nl | sort -k 2 | uniq -f 1 | sort -n | cut -f 2-) || true\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-suite"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 95,
                  "endLine": 179,
                  "endColumn": 101,
                  "snippet": {
                    "text": "# (see https://github.com/bats-core/bats-core/issues/329)\n# If a file was specified multiple times, we already got it repeatedly in our TESTS_LIST_FILE.\n# Thus, it suffices to bats-exec-file it once to run all repeated tests on it.\nIFS=$'\\n' read -d '' -r -a BATS_UNIQUE_TEST_FILENAMES < <(printf \"%s\\n\" \"$@\" | nl | sort -k 2 | uniq -f 1 | sort -n | cut -f 2-) || true\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n",
                    "rendered": {
                      "text": "# (see https://github.com/bats-core/bats-core/issues/329)\n# If a file was specified multiple times, we already got it repeatedly in our TESTS_LIST_FILE.\n# Thus, it suffices to bats-exec-file it once to run all repeated tests on it.\nIFS=$'\\n' read -d '' -r -a BATS_UNIQUE_TEST_FILENAMES < <(printf \"%s\\n\" \"$@\" | nl | sort -k 2 | uniq -f 1 | sort -n | cut -f 2-) || true\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n",
                      "markdown": "`# (see https://github.com/bats-core/bats-core/issues/329)\n# If a file was specified multiple times, we already got it repeatedly in our TESTS_LIST_FILE.\n# Thus, it suffices to bats-exec-file it once to run all repeated tests on it.\nIFS=$'\\n' read -d '' -r -a BATS_UNIQUE_TEST_FILENAMES < <(printf \"%s\\n\" \"$@\" | nl | sort -k 2 | uniq -f 1 | sort -n | cut -f 2-) || true\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-suite"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 83,
                  "endLine": 179,
                  "endColumn": 89,
                  "snippet": {
                    "text": "# (see https://github.com/bats-core/bats-core/issues/329)\n# If a file was specified multiple times, we already got it repeatedly in our TESTS_LIST_FILE.\n# Thus, it suffices to bats-exec-file it once to run all repeated tests on it.\nIFS=$'\\n' read -d '' -r -a BATS_UNIQUE_TEST_FILENAMES < <(printf \"%s\\n\" \"$@\" | nl | sort -k 2 | uniq -f 1 | sort -n | cut -f 2-) || true\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n",
                    "rendered": {
                      "text": "# (see https://github.com/bats-core/bats-core/issues/329)\n# If a file was specified multiple times, we already got it repeatedly in our TESTS_LIST_FILE.\n# Thus, it suffices to bats-exec-file it once to run all repeated tests on it.\nIFS=$'\\n' read -d '' -r -a BATS_UNIQUE_TEST_FILENAMES < <(printf \"%s\\n\" \"$@\" | nl | sort -k 2 | uniq -f 1 | sort -n | cut -f 2-) || true\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n",
                      "markdown": "`# (see https://github.com/bats-core/bats-core/issues/329)\n# If a file was specified multiple times, we already got it repeatedly in our TESTS_LIST_FILE.\n# Thus, it suffices to bats-exec-file it once to run all repeated tests on it.\nIFS=$'\\n' read -d '' -r -a BATS_UNIQUE_TEST_FILENAMES < <(printf \"%s\\n\" \"$@\" | nl | sort -k 2 | uniq -f 1 | sort -n | cut -f 2-) || true\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-suite"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 78,
                  "endLine": 179,
                  "endColumn": 82,
                  "snippet": {
                    "text": "# (see https://github.com/bats-core/bats-core/issues/329)\n# If a file was specified multiple times, we already got it repeatedly in our TESTS_LIST_FILE.\n# Thus, it suffices to bats-exec-file it once to run all repeated tests on it.\nIFS=$'\\n' read -d '' -r -a BATS_UNIQUE_TEST_FILENAMES < <(printf \"%s\\n\" \"$@\" | nl | sort -k 2 | uniq -f 1 | sort -n | cut -f 2-) || true\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n",
                    "rendered": {
                      "text": "# (see https://github.com/bats-core/bats-core/issues/329)\n# If a file was specified multiple times, we already got it repeatedly in our TESTS_LIST_FILE.\n# Thus, it suffices to bats-exec-file it once to run all repeated tests on it.\nIFS=$'\\n' read -d '' -r -a BATS_UNIQUE_TEST_FILENAMES < <(printf \"%s\\n\" \"$@\" | nl | sort -k 2 | uniq -f 1 | sort -n | cut -f 2-) || true\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n",
                      "markdown": "`# (see https://github.com/bats-core/bats-core/issues/329)\n# If a file was specified multiple times, we already got it repeatedly in our TESTS_LIST_FILE.\n# Thus, it suffices to bats-exec-file it once to run all repeated tests on it.\nIFS=$'\\n' read -d '' -r -a BATS_UNIQUE_TEST_FILENAMES < <(printf \"%s\\n\" \"$@\" | nl | sort -k 2 | uniq -f 1 | sort -n | cut -f 2-) || true\n\n# shellcheck source=lib/bats-core/tracing.bash\nsource \"$BATS_ROOT/$BATS_LIBDIR/bats-core/tracing.bash\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-suite"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 106,
                  "endLine": 12,
                  "endColumn": 112,
                  "snippet": {
                    "text": "bats_no_parallelize_within_files=\nfilter_status=''\ngather_tests_flags=('--dummy-flag')\nflags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nsetup_suite_file=''\nBATS_TRACE_LEVEL=\"${BATS_TRACE_LEVEL:-0}\"\nBATS_SHOW_OUTPUT_OF_SUCCEEDING_TESTS=\n",
                    "rendered": {
                      "text": "bats_no_parallelize_within_files=\nfilter_status=''\ngather_tests_flags=('--dummy-flag')\nflags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nsetup_suite_file=''\nBATS_TRACE_LEVEL=\"${BATS_TRACE_LEVEL:-0}\"\nBATS_SHOW_OUTPUT_OF_SUCCEEDING_TESTS=\n",
                      "markdown": "`bats_no_parallelize_within_files=\nfilter_status=''\ngather_tests_flags=('--dummy-flag')\nflags=('--dummy-flag') # add a dummy flag to prevent unset variable errors on empty array expansion in old bash versions\nsetup_suite_file=''\nBATS_TRACE_LEVEL=\"${BATS_TRACE_LEVEL:-0}\"\nBATS_SHOW_OUTPUT_OF_SUCCEEDING_TESTS=\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-exec-suite"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -e\n\ncount_only_flag=''\nfilter=''\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -e\n\ncount_only_flag=''\nfilter=''\n",
                      "markdown": "`#!/usr/bin/env bash\nset -e\n\ncount_only_flag=''\nfilter=''\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-cat"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -e\n\ntrap '' INT\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -e\n\ntrap '' INT\n\n",
                      "markdown": "`#!/usr/bin/env bash\nset -e\n\ntrap '' INT\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-cat"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 6,
                  "snippet": {
                    "text": "set -e\n\n",
                    "rendered": {
                      "text": "set -e\n\n",
                      "markdown": "`set -e\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/libexec/bats-core/bats-format-cat"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -e\n\ntrap '' INT\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -e\n\ntrap '' INT\n\n",
                      "markdown": "`#!/usr/bin/env bash\nset -e\n\ntrap '' INT\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/parallel/must_not_parallelize_across_files/file1.bats"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 15,
                  "endLine": 10,
                  "endColumn": 21,
                  "snippet": {
                    "text": "}\n\n@test \"test 1\" {\n  # stretch the time this test runs to prevent accidental serialization by the scheduler\n  # if both tests could run in parallel, this will increase the likelihood of detecting it\n  # by delaying this test's teardown past the other's\n  sleep 3\n",
                    "rendered": {
                      "text": "}\n\n@test \"test 1\" {\n  # stretch the time this test runs to prevent accidental serialization by the scheduler\n  # if both tests could run in parallel, this will increase the likelihood of detecting it\n  # by delaying this test's teardown past the other's\n  sleep 3\n",
                      "markdown": "`}\n\n@test \"test 1\" {\n  # stretch the time this test runs to prevent accidental serialization by the scheduler\n  # if both tests could run in parallel, this will increase the likelihood of detecting it\n  # by delaying this test's teardown past the other's\n  sleep 3\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/parallel/must_not_parallelize_across_files/file2.bats"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 5,
                  "endLine": 10,
                  "endColumn": 10,
                  "snippet": {
                    "text": "}\n\n@test \"test 2\" {\n  run cat \"$FILE_MARKER\"\n  echo \"$output\"\n\n  # assuming serialized, ordered execution we will always see the first test start and end before this runs\n",
                    "rendered": {
                      "text": "}\n\n@test \"test 2\" {\n  run cat \"$FILE_MARKER\"\n  echo \"$output\"\n\n  # assuming serialized, ordered execution we will always see the first test start and end before this runs\n",
                      "markdown": "`}\n\n@test \"test 2\" {\n  run cat \"$FILE_MARKER\"\n  echo \"$output\"\n\n  # assuming serialized, ordered execution we will always see the first test start and end before this runs\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/parallel/must_not_parallelize_within_file.bats"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 5,
                  "endLine": 43,
                  "endColumn": 10,
                  "snippet": {
                    "text": "}\n\n@test \"test 2\" {\n  run cat \"$FILE_MARKER\"\n  echo \"$output\"\n\n  # assuming serialized, ordered execution we will always see the first test start and end before this runs\n",
                    "rendered": {
                      "text": "}\n\n@test \"test 2\" {\n  run cat \"$FILE_MARKER\"\n  echo \"$output\"\n\n  # assuming serialized, ordered execution we will always see the first test start and end before this runs\n",
                      "markdown": "`}\n\n@test \"test 2\" {\n  run cat \"$FILE_MARKER\"\n  echo \"$output\"\n\n  # assuming serialized, ordered execution we will always see the first test start and end before this runs\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/parallel/must_not_parallelize_within_file.bats"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 15,
                  "endLine": 36,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    export BATS_NO_PARALLELIZE_WITHIN_FILE=true\n    echo \"Test function sets BATS_NO_PARALLELIZE_WITHIN_FILE=true\" >&3\n  fi\n  # stretch the time this test runs to prevent accidental serialization by the scheduler\n  # if both tests could run in parallel, this will increase the likelihood of detecting it\n  # by delaying this test's teardown past the other's\n  sleep 3\n",
                    "rendered": {
                      "text": "    export BATS_NO_PARALLELIZE_WITHIN_FILE=true\n    echo \"Test function sets BATS_NO_PARALLELIZE_WITHIN_FILE=true\" >&3\n  fi\n  # stretch the time this test runs to prevent accidental serialization by the scheduler\n  # if both tests could run in parallel, this will increase the likelihood of detecting it\n  # by delaying this test's teardown past the other's\n  sleep 3\n",
                      "markdown": "`    export BATS_NO_PARALLELIZE_WITHIN_FILE=true\n    echo \"Test function sets BATS_NO_PARALLELIZE_WITHIN_FILE=true\" >&3\n  fi\n  # stretch the time this test runs to prevent accidental serialization by the scheduler\n  # if both tests could run in parallel, this will increase the likelihood of detecting it\n  # by delaying this test's teardown past the other's\n  sleep 3\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/parallel/parallel-preserve-environment.bats"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 12,
                  "endLine": 5,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  export OTHER_ENV_VARIABLE='my-value'\n}\n\n@test \"check env variables are set\" {\n  [[ \"$TEST_ENV_VARIABLE\" == \"test-value\" ]]\n  [[ \"$OTHER_ENV_VARIABLE\" == \"my-value\" ]]\n}\n",
                    "rendered": {
                      "text": "  export OTHER_ENV_VARIABLE='my-value'\n}\n\n@test \"check env variables are set\" {\n  [[ \"$TEST_ENV_VARIABLE\" == \"test-value\" ]]\n  [[ \"$OTHER_ENV_VARIABLE\" == \"my-value\" ]]\n}\n",
                      "markdown": "`  export OTHER_ENV_VARIABLE='my-value'\n}\n\n@test \"check env variables are set\" {\n  [[ \"$TEST_ENV_VARIABLE\" == \"test-value\" ]]\n  [[ \"$OTHER_ENV_VARIABLE\" == \"my-value\" ]]\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/print_output_on_failure_with_stderr.bats"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 23,
                  "endLine": 7,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n@test \"failure prints output\" {\n  bats_require_minimum_version 1.5.0\n  run --separate-stderr bash -c 'echo \"fail hard\"; echo with stderr >&2'\n  false\n}\n\n",
                    "rendered": {
                      "text": "\n@test \"failure prints output\" {\n  bats_require_minimum_version 1.5.0\n  run --separate-stderr bash -c 'echo \"fail hard\"; echo with stderr >&2'\n  false\n}\n\n",
                      "markdown": "`\n@test \"failure prints output\" {\n  bats_require_minimum_version 1.5.0\n  run --separate-stderr bash -c 'echo \"fail hard\"; echo with stderr >&2'\n  false\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/fixtures/bats/print_output_on_failure_with_stderr.bats"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 23,
                  "endLine": 7,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n@test \"failure prints output\" {\n  bats_require_minimum_version 1.5.0\n  run --separate-stderr bash -c 'echo \"fail hard\"; echo with stderr >&2'\n  false\n}\n\n",
                    "rendered": {
                      "text": "\n@test \"failure prints output\" {\n  bats_require_minimum_version 1.5.0\n  run --separate-stderr bash -c 'echo \"fail hard\"; echo with stderr >&2'\n  false\n}\n\n",
                      "markdown": "`\n@test \"failure prints output\" {\n  bats_require_minimum_version 1.5.0\n  run --separate-stderr bash -c 'echo \"fail hard\"; echo with stderr >&2'\n  false\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 35,
                  "endLine": 188,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  reentrant_run bats -f test \"$FIXTURE_ROOT/setup_file.bats\" \"$FIXTURE_ROOT/no_setup_file.bats\"\n\n  [ ! -f \"$LOG\" ]             # setup_file must not have been executed!\n  [ \"${lines[0]}\" == '1..1' ] # but at least one test should have been run\n}\n\n@test \"Failure in setup_file and teardown_file still prints error message\" {\n",
                    "rendered": {
                      "text": "  reentrant_run bats -f test \"$FIXTURE_ROOT/setup_file.bats\" \"$FIXTURE_ROOT/no_setup_file.bats\"\n\n  [ ! -f \"$LOG\" ]             # setup_file must not have been executed!\n  [ \"${lines[0]}\" == '1..1' ] # but at least one test should have been run\n}\n\n@test \"Failure in setup_file and teardown_file still prints error message\" {\n",
                      "markdown": "`  reentrant_run bats -f test \"$FIXTURE_ROOT/setup_file.bats\" \"$FIXTURE_ROOT/no_setup_file.bats\"\n\n  [ ! -f \"$LOG\" ]             # setup_file must not have been executed!\n  [ \"${lines[0]}\" == '1..1' ] # but at least one test should have been run\n}\n\n@test \"Failure in setup_file and teardown_file still prints error message\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 103,
                  "endLine": 80,
                  "endColumn": 107,
                  "snippet": {
                    "text": "wn_file_failed.bats, line 2)\" ]]\n  [[ \"${lines[4]}\" == \"#   \\`false' failed\" ]]\n  [[ \"${lines[5]}\" == \"# bats warning: Executed 2 instead of expected 1 tests\" ]] # for now this warning is expected\n  # for a failed teardown_file not to change the number of tests being reported, we would have to alter at least one previous test result report\n  # this would require arbitrary amounts of buffering so we simply add our own line with a fake test number\n  # tripping the count validator won't change the overall result, as we already are in a failure mode\n}\n\n@test \"teardown_file runs even if any test in the",
                    "rendered": {
                      "text": "wn_file_failed.bats, line 2)\" ]]\n  [[ \"${lines[4]}\" == \"#   \\`false' failed\" ]]\n  [[ \"${lines[5]}\" == \"# bats warning: Executed 2 instead of expected 1 tests\" ]] # for now this warning is expected\n  # for a failed teardown_file not to change the number of tests being reported, we would have to alter at least one previous test result report\n  # this would require arbitrary amounts of buffering so we simply add our own line with a fake test number\n  # tripping the count validator won't change the overall result, as we already are in a failure mode\n}\n\n@test \"teardown_file runs even if any test in the",
                      "markdown": "`wn_file_failed.bats, line 2)\" ]]\n  [[ \"${lines[4]}\" == \"#   \\`false' failed\" ]]\n  [[ \"${lines[5]}\" == \"# bats warning: Executed 2 instead of expected 1 tests\" ]] # for now this warning is expected\n  # for a failed teardown_file not to change the number of tests being reported, we would have to alter at least one previous test result report\n  # this would require arbitrary amounts of buffering so we simply add our own line with a fake test number\n  # tripping the count validator won't change the overall result, as we already are in a failure mode\n}\n\n@test \"teardown_file runs even if any test in the`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 34,
                  "endLine": 70,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  # printing all the failed/skipped tests due to the setup failure.\n}\n\n@test \"teardown_file failure fails at least one test from the file\" {\n  reentrant_run bats \"$FIXTURE_ROOT/teardown_file_failed.bats\"\n  [[ $status -ne 0 ]]\n  echo \"$output\"\n",
                    "rendered": {
                      "text": "  # printing all the failed/skipped tests due to the setup failure.\n}\n\n@test \"teardown_file failure fails at least one test from the file\" {\n  reentrant_run bats \"$FIXTURE_ROOT/teardown_file_failed.bats\"\n  [[ $status -ne 0 ]]\n  echo \"$output\"\n",
                      "markdown": "`  # printing all the failed/skipped tests due to the setup failure.\n}\n\n@test \"teardown_file failure fails at least one test from the file\" {\n  reentrant_run bats \"$FIXTURE_ROOT/teardown_file_failed.bats\"\n  [[ $status -ne 0 ]]\n  echo \"$output\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 83,
                  "endLine": 56,
                  "endColumn": 87,
                  "snippet": {
                    "text": "}\n\n@test \"setup_file failure aborts tests for this file\" {\n  # this might need to mark them as skipped as the test count is already determined at this point\n  reentrant_run bats \"$FIXTURE_ROOT/setup_file_failed.bats\"\n  echo \"$output\"\n  [[ \"${lines[0]}\" == \"1..2\" ]]\n",
                    "rendered": {
                      "text": "}\n\n@test \"setup_file failure aborts tests for this file\" {\n  # this might need to mark them as skipped as the test count is already determined at this point\n  reentrant_run bats \"$FIXTURE_ROOT/setup_file_failed.bats\"\n  echo \"$output\"\n  [[ \"${lines[0]}\" == \"1..2\" ]]\n",
                      "markdown": "`}\n\n@test \"setup_file failure aborts tests for this file\" {\n  # this might need to mark them as skipped as the test count is already determined at this point\n  reentrant_run bats \"$FIXTURE_ROOT/setup_file_failed.bats\"\n  echo \"$output\"\n  [[ \"${lines[0]}\" == \"1..2\" ]]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 20,
                  "endLine": 143,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n@test \"setup_file must not leak context between tests in the same suite\" {\n  # example: BATS_ROOT was unset in one test but used in others, therefore, the suite failed\n  # Simulate leaking env var from first to second test by: export SETUP_FILE_VAR=\"LEAK!\"\n  reentrant_run bats \"$FIXTURE_ROOT/setup_file_does_not_leak_env.bats\" \"$FIXTURE_ROOT/setup_file_does_not_leak_env2.bats\"\n  echo \"$output\"\n  [[ $status -eq 0 ]]\n",
                    "rendered": {
                      "text": "\n@test \"setup_file must not leak context between tests in the same suite\" {\n  # example: BATS_ROOT was unset in one test but used in others, therefore, the suite failed\n  # Simulate leaking env var from first to second test by: export SETUP_FILE_VAR=\"LEAK!\"\n  reentrant_run bats \"$FIXTURE_ROOT/setup_file_does_not_leak_env.bats\" \"$FIXTURE_ROOT/setup_file_does_not_leak_env2.bats\"\n  echo \"$output\"\n  [[ $status -eq 0 ]]\n",
                      "markdown": "`\n@test \"setup_file must not leak context between tests in the same suite\" {\n  # example: BATS_ROOT was unset in one test but used in others, therefore, the suite failed\n  # Simulate leaking env var from first to second test by: export SETUP_FILE_VAR=\"LEAK!\"\n  reentrant_run bats \"$FIXTURE_ROOT/setup_file_does_not_leak_env.bats\" \"$FIXTURE_ROOT/setup_file_does_not_leak_env2.bats\"\n  echo \"$output\"\n  [[ $status -eq 0 ]]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 1,
                  "endLine": 138,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  reentrant_run bats \"$FIXTURE_ROOT/teardown_file_even_if_all_tests_are_skipped.bats\"\n  [[ $status -eq 0 ]]\n  [[ -f \"$LOG\" ]]\n  grep teardown_file_even_if_all_tests_are_skipped.bats \"$LOG\"\n}\n\n@test \"setup_file must not leak context between tests in the same suite\" {\n",
                    "rendered": {
                      "text": "  reentrant_run bats \"$FIXTURE_ROOT/teardown_file_even_if_all_tests_are_skipped.bats\"\n  [[ $status -eq 0 ]]\n  [[ -f \"$LOG\" ]]\n  grep teardown_file_even_if_all_tests_are_skipped.bats \"$LOG\"\n}\n\n@test \"setup_file must not leak context between tests in the same suite\" {\n",
                      "markdown": "`  reentrant_run bats \"$FIXTURE_ROOT/teardown_file_even_if_all_tests_are_skipped.bats\"\n  [[ $status -eq 0 ]]\n  [[ -f \"$LOG\" ]]\n  grep teardown_file_even_if_all_tests_are_skipped.bats \"$LOG\"\n}\n\n@test \"setup_file must not leak context between tests in the same suite\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 1,
                  "endLine": 129,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  export LOG=\"$BATS_TEST_TMPDIR/setup_file_skipped.log\"\n  reentrant_run bats \"$FIXTURE_ROOT/setup_file_even_if_all_tests_are_skipped.bats\"\n  [[ -f \"$LOG\" ]]\n  grep setup_file_even_if_all_tests_are_skipped.bats \"$LOG\"\n}\n\n@test \"teardown_file runs even if all tests in the file are skipped\" {\n",
                    "rendered": {
                      "text": "  export LOG=\"$BATS_TEST_TMPDIR/setup_file_skipped.log\"\n  reentrant_run bats \"$FIXTURE_ROOT/setup_file_even_if_all_tests_are_skipped.bats\"\n  [[ -f \"$LOG\" ]]\n  grep setup_file_even_if_all_tests_are_skipped.bats \"$LOG\"\n}\n\n@test \"teardown_file runs even if all tests in the file are skipped\" {\n",
                      "markdown": "`  export LOG=\"$BATS_TEST_TMPDIR/setup_file_skipped.log\"\n  reentrant_run bats \"$FIXTURE_ROOT/setup_file_even_if_all_tests_are_skipped.bats\"\n  [[ -f \"$LOG\" ]]\n  grep setup_file_even_if_all_tests_are_skipped.bats \"$LOG\"\n}\n\n@test \"teardown_file runs even if all tests in the file are skipped\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 7,
                  "endLine": 121,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  [[ -f \"$LOG\" ]]\n  grep teardown_file_after_long_test.bats \"$LOG\"\n  # but the test must not have run to the end!\n  run ! grep \"test finished successfully\" \"$LOG\"\n}\n\n@test \"setup_file runs even if all tests in the file are skipped\" {\n",
                    "rendered": {
                      "text": "  [[ -f \"$LOG\" ]]\n  grep teardown_file_after_long_test.bats \"$LOG\"\n  # but the test must not have run to the end!\n  run ! grep \"test finished successfully\" \"$LOG\"\n}\n\n@test \"setup_file runs even if all tests in the file are skipped\" {\n",
                      "markdown": "`  [[ -f \"$LOG\" ]]\n  grep teardown_file_after_long_test.bats \"$LOG\"\n  # but the test must not have run to the end!\n  run ! grep \"test finished successfully\" \"$LOG\"\n}\n\n@test \"setup_file runs even if all tests in the file are skipped\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 1,
                  "endLine": 119,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  [[ $SECONDS -lt 10 ]] # make sure we really cut it short with SIGINT\n  # check that teardown_file ran and created the log file\n  [[ -f \"$LOG\" ]]\n  grep teardown_file_after_long_test.bats \"$LOG\"\n  # but the test must not have run to the end!\n  run ! grep \"test finished successfully\" \"$LOG\"\n}\n",
                    "rendered": {
                      "text": "  [[ $SECONDS -lt 10 ]] # make sure we really cut it short with SIGINT\n  # check that teardown_file ran and created the log file\n  [[ -f \"$LOG\" ]]\n  grep teardown_file_after_long_test.bats \"$LOG\"\n  # but the test must not have run to the end!\n  run ! grep \"test finished successfully\" \"$LOG\"\n}\n",
                      "markdown": "`  [[ $SECONDS -lt 10 ]] # make sure we really cut it short with SIGINT\n  # check that teardown_file ran and created the log file\n  [[ -f \"$LOG\" ]]\n  grep teardown_file_after_long_test.bats \"$LOG\"\n  # but the test must not have run to the end!\n  run ! grep \"test finished successfully\" \"$LOG\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 45,
                  "endLine": 116,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  kill -SIGINT -- -$SUBPROCESS_PID\n  wait # for the test to finish either way (SIGINT or normal execution)\n  echo \"Waited: $SECONDS seconds\"\n  [[ $SECONDS -lt 10 ]] # make sure we really cut it short with SIGINT\n  # check that teardown_file ran and created the log file\n  [[ -f \"$LOG\" ]]\n  grep teardown_file_after_long_test.bats \"$LOG\"\n",
                    "rendered": {
                      "text": "  kill -SIGINT -- -$SUBPROCESS_PID\n  wait # for the test to finish either way (SIGINT or normal execution)\n  echo \"Waited: $SECONDS seconds\"\n  [[ $SECONDS -lt 10 ]] # make sure we really cut it short with SIGINT\n  # check that teardown_file ran and created the log file\n  [[ -f \"$LOG\" ]]\n  grep teardown_file_after_long_test.bats \"$LOG\"\n",
                      "markdown": "`  kill -SIGINT -- -$SUBPROCESS_PID\n  wait # for the test to finish either way (SIGINT or normal execution)\n  echo \"Waited: $SECONDS seconds\"\n  [[ $SECONDS -lt 10 ]] # make sure we really cut it short with SIGINT\n  # check that teardown_file ran and created the log file\n  [[ -f \"$LOG\" ]]\n  grep teardown_file_after_long_test.bats \"$LOG\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 1,
                  "endLine": 90,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  export LOG=\"$BATS_TEST_TMPDIR/teardown_file_failed.log\"\n  reentrant_run bats \"$FIXTURE_ROOT/teardown_file_after_failing_test.bats\"\n  [[ $status -ne 0 ]]\n  grep teardown_file_after_failing_test.bats \"$LOG\"\n  echo \"$output\"\n  [[ $output == \"1..1\nnot ok 1 failing test\n",
                    "rendered": {
                      "text": "  export LOG=\"$BATS_TEST_TMPDIR/teardown_file_failed.log\"\n  reentrant_run bats \"$FIXTURE_ROOT/teardown_file_after_failing_test.bats\"\n  [[ $status -ne 0 ]]\n  grep teardown_file_after_failing_test.bats \"$LOG\"\n  echo \"$output\"\n  [[ $output == \"1..1\nnot ok 1 failing test\n",
                      "markdown": "`  export LOG=\"$BATS_TEST_TMPDIR/teardown_file_failed.log\"\n  reentrant_run bats \"$FIXTURE_ROOT/teardown_file_after_failing_test.bats\"\n  [[ $status -ne 0 ]]\n  grep teardown_file_after_failing_test.bats \"$LOG\"\n  echo \"$output\"\n  [[ $output == \"1..1\nnot ok 1 failing test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  # each teardown_file[2].bats is in the log exactly once!\n  [[ $output -eq 2 ]]\n  grep teardown_file.bats \"$LOG\"\n  grep teardown_file2.bats \"$LOG\"\n\n}\n\n",
                    "rendered": {
                      "text": "  # each teardown_file[2].bats is in the log exactly once!\n  [[ $output -eq 2 ]]\n  grep teardown_file.bats \"$LOG\"\n  grep teardown_file2.bats \"$LOG\"\n\n}\n\n",
                      "markdown": "`  # each teardown_file[2].bats is in the log exactly once!\n  [[ $output -eq 2 ]]\n  grep teardown_file.bats \"$LOG\"\n  grep teardown_file2.bats \"$LOG\"\n\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  run wc -l <\"$LOG\"\n  # each teardown_file[2].bats is in the log exactly once!\n  [[ $output -eq 2 ]]\n  grep teardown_file.bats \"$LOG\"\n  grep teardown_file2.bats \"$LOG\"\n\n}\n",
                    "rendered": {
                      "text": "  run wc -l <\"$LOG\"\n  # each teardown_file[2].bats is in the log exactly once!\n  [[ $output -eq 2 ]]\n  grep teardown_file.bats \"$LOG\"\n  grep teardown_file2.bats \"$LOG\"\n\n}\n",
                      "markdown": "`  run wc -l <\"$LOG\"\n  # each teardown_file[2].bats is in the log exactly once!\n  [[ $output -eq 2 ]]\n  grep teardown_file.bats \"$LOG\"\n  grep teardown_file2.bats \"$LOG\"\n\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  # each setup_file[2].bats is in the log exactly once!\n  [[ $output -eq 2 ]]\n  grep setup_file.bats \"$LOG\"\n  grep setup_file2.bats \"$LOG\"\n}\n\n@test \"teardown_file is called correctly in multi file suite\" {\n",
                    "rendered": {
                      "text": "  # each setup_file[2].bats is in the log exactly once!\n  [[ $output -eq 2 ]]\n  grep setup_file.bats \"$LOG\"\n  grep setup_file2.bats \"$LOG\"\n}\n\n@test \"teardown_file is called correctly in multi file suite\" {\n",
                      "markdown": "`  # each setup_file[2].bats is in the log exactly once!\n  [[ $output -eq 2 ]]\n  grep setup_file.bats \"$LOG\"\n  grep setup_file2.bats \"$LOG\"\n}\n\n@test \"teardown_file is called correctly in multi file suite\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  run wc -l <\"$LOG\"\n  # each setup_file[2].bats is in the log exactly once!\n  [[ $output -eq 2 ]]\n  grep setup_file.bats \"$LOG\"\n  grep setup_file2.bats \"$LOG\"\n}\n\n",
                    "rendered": {
                      "text": "  run wc -l <\"$LOG\"\n  # each setup_file[2].bats is in the log exactly once!\n  [[ $output -eq 2 ]]\n  grep setup_file.bats \"$LOG\"\n  grep setup_file2.bats \"$LOG\"\n}\n\n",
                      "markdown": "`  run wc -l <\"$LOG\"\n  # each setup_file[2].bats is in the log exactly once!\n  [[ $output -eq 2 ]]\n  grep setup_file.bats \"$LOG\"\n  grep setup_file2.bats \"$LOG\"\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  # output the log for faster debugging\n  cat \"$LOG\"\n  # expect to find an entry for the tested file\n  grep 'teardown_file.bats' \"$LOG\"\n  # it should be the only entry\n  run wc -l <\"$LOG\"\n  [[ $output -eq 1 ]]\n",
                    "rendered": {
                      "text": "  # output the log for faster debugging\n  cat \"$LOG\"\n  # expect to find an entry for the tested file\n  grep 'teardown_file.bats' \"$LOG\"\n  # it should be the only entry\n  run wc -l <\"$LOG\"\n  [[ $output -eq 1 ]]\n",
                      "markdown": "`  # output the log for faster debugging\n  cat \"$LOG\"\n  # expect to find an entry for the tested file\n  grep 'teardown_file.bats' \"$LOG\"\n  # it should be the only entry\n  run wc -l <\"$LOG\"\n  [[ $output -eq 1 ]]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 13,
                  "endLine": 23,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  [[ $status -eq 0 ]]\n  # output the log for faster debugging\n  cat \"$LOG\"\n  # expect to find an entry for the tested file\n  grep 'teardown_file.bats' \"$LOG\"\n  # it should be the only entry\n  run wc -l <\"$LOG\"\n",
                    "rendered": {
                      "text": "  [[ $status -eq 0 ]]\n  # output the log for faster debugging\n  cat \"$LOG\"\n  # expect to find an entry for the tested file\n  grep 'teardown_file.bats' \"$LOG\"\n  # it should be the only entry\n  run wc -l <\"$LOG\"\n",
                      "markdown": "`  [[ $status -eq 0 ]]\n  # output the log for faster debugging\n  cat \"$LOG\"\n  # expect to find an entry for the tested file\n  grep 'teardown_file.bats' \"$LOG\"\n  # it should be the only entry\n  run wc -l <\"$LOG\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 3,
                  "endLine": 23,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  [[ $status -eq 0 ]]\n  # output the log for faster debugging\n  cat \"$LOG\"\n  # expect to find an entry for the tested file\n  grep 'teardown_file.bats' \"$LOG\"\n  # it should be the only entry\n  run wc -l <\"$LOG\"\n",
                    "rendered": {
                      "text": "  [[ $status -eq 0 ]]\n  # output the log for faster debugging\n  cat \"$LOG\"\n  # expect to find an entry for the tested file\n  grep 'teardown_file.bats' \"$LOG\"\n  # it should be the only entry\n  run wc -l <\"$LOG\"\n",
                      "markdown": "`  [[ $status -eq 0 ]]\n  # output the log for faster debugging\n  cat \"$LOG\"\n  # expect to find an entry for the tested file\n  grep 'teardown_file.bats' \"$LOG\"\n  # it should be the only entry\n  run wc -l <\"$LOG\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/file_setup_teardown.bats"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  reentrant_run bats \"$FIXTURE_ROOT/teardown_file.bats\"\n  [[ $status -eq 0 ]]\n  # output the log for faster debugging\n  cat \"$LOG\"\n  # expect to find an entry for the tested file\n  grep 'teardown_file.bats' \"$LOG\"\n  # it should be the only entry\n",
                    "rendered": {
                      "text": "  reentrant_run bats \"$FIXTURE_ROOT/teardown_file.bats\"\n  [[ $status -eq 0 ]]\n  # output the log for faster debugging\n  cat \"$LOG\"\n  # expect to find an entry for the tested file\n  grep 'teardown_file.bats' \"$LOG\"\n  # it should be the only entry\n",
                      "markdown": "`  reentrant_run bats \"$FIXTURE_ROOT/teardown_file.bats\"\n  [[ $status -eq 0 ]]\n  # output the log for faster debugging\n  cat \"$LOG\"\n  # expect to find an entry for the tested file\n  grep 'teardown_file.bats' \"$LOG\"\n  # it should be the only entry\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/test_helper.bash"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 27,
                  "endLine": 76,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    shift\n  done\n\n  # put that here to ensure Bash 3 won't have to deal with empty pre_command_args\n  pre_command_args+=(execute_with_unset_bats_vars)\n\n  run \"${pre_command_args[@]}\" \"$@\"\n",
                    "rendered": {
                      "text": "    shift\n  done\n\n  # put that here to ensure Bash 3 won't have to deal with empty pre_command_args\n  pre_command_args+=(execute_with_unset_bats_vars)\n\n  run \"${pre_command_args[@]}\" \"$@\"\n",
                      "markdown": "`    shift\n  done\n\n  # put that here to ensure Bash 3 won't have to deal with empty pre_command_args\n  pre_command_args+=(execute_with_unset_bats_vars)\n\n  run \"${pre_command_args[@]}\" \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/test_helper.bash"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 48,
                  "endLine": 63,
                  "endColumn": 54,
                  "snippet": {
                    "text": "# call run with all BATS_* variables purged from the environment\nreentrant_run() { # <same args as run>\n  # take up all args to run except the command,\n  # to avoid having to deal with empty arrays in Bash 3\n  local -a pre_command_args=()\n\n  # remove all flags to run to leave the command in $@\n",
                    "rendered": {
                      "text": "# call run with all BATS_* variables purged from the environment\nreentrant_run() { # <same args as run>\n  # take up all args to run except the command,\n  # to avoid having to deal with empty arrays in Bash 3\n  local -a pre_command_args=()\n\n  # remove all flags to run to leave the command in $@\n",
                      "markdown": "`# call run with all BATS_* variables purged from the environment\nreentrant_run() { # <same args as run>\n  # take up all args to run except the command,\n  # to avoid having to deal with empty arrays in Bash 3\n  local -a pre_command_args=()\n\n  # remove all flags to run to leave the command in $@\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/test_helper.bash"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 27,
                  "endLine": 76,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    shift\n  done\n\n  # put that here to ensure Bash 3 won't have to deal with empty pre_command_args\n  pre_command_args+=(execute_with_unset_bats_vars)\n\n  run \"${pre_command_args[@]}\" \"$@\"\n",
                    "rendered": {
                      "text": "    shift\n  done\n\n  # put that here to ensure Bash 3 won't have to deal with empty pre_command_args\n  pre_command_args+=(execute_with_unset_bats_vars)\n\n  run \"${pre_command_args[@]}\" \"$@\"\n",
                      "markdown": "`    shift\n  done\n\n  # put that here to ensure Bash 3 won't have to deal with empty pre_command_args\n  pre_command_args+=(execute_with_unset_bats_vars)\n\n  run \"${pre_command_args[@]}\" \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/test_helper.bash"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 48,
                  "endLine": 63,
                  "endColumn": 54,
                  "snippet": {
                    "text": "# call run with all BATS_* variables purged from the environment\nreentrant_run() { # <same args as run>\n  # take up all args to run except the command,\n  # to avoid having to deal with empty arrays in Bash 3\n  local -a pre_command_args=()\n\n  # remove all flags to run to leave the command in $@\n",
                    "rendered": {
                      "text": "# call run with all BATS_* variables purged from the environment\nreentrant_run() { # <same args as run>\n  # take up all args to run except the command,\n  # to avoid having to deal with empty arrays in Bash 3\n  local -a pre_command_args=()\n\n  # remove all flags to run to leave the command in $@\n",
                      "markdown": "`# call run with all BATS_* variables purged from the environment\nreentrant_run() { # <same args as run>\n  # take up all args to run except the command,\n  # to avoid having to deal with empty arrays in Bash 3\n  local -a pre_command_args=()\n\n  # remove all flags to run to leave the command in $@\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/test_helper.bash"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 8,
                  "endLine": 29,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\nfilter_control_sequences() {\n  local status=0\n  \"$@\" | sed $'s,\\x1b\\\\[[0-9;]*[a-zA-Z],,g' || status=$?\n  return \"$status\"\n}\n\n",
                    "rendered": {
                      "text": "\nfilter_control_sequences() {\n  local status=0\n  \"$@\" | sed $'s,\\x1b\\\\[[0-9;]*[a-zA-Z],,g' || status=$?\n  return \"$status\"\n}\n\n",
                      "markdown": "`\nfilter_control_sequences() {\n  local status=0\n  \"$@\" | sed $'s,\\x1b\\\\[[0-9;]*[a-zA-Z],,g' || status=$?\n  return \"$status\"\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/common.bats"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 9,
                  "endLine": 152,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  run -1 bats_any_in one 2\n  # don't find smaller values\n  run -1 bats_any_in onetwo 0\n  # don't find greater values\n  run -1 bats_any_in onetwo 3\n}\n\n",
                    "rendered": {
                      "text": "  run -1 bats_any_in one 2\n  # don't find smaller values\n  run -1 bats_any_in onetwo 0\n  # don't find greater values\n  run -1 bats_any_in onetwo 3\n}\n\n",
                      "markdown": "`  run -1 bats_any_in one 2\n  # don't find smaller values\n  run -1 bats_any_in onetwo 0\n  # don't find greater values\n  run -1 bats_any_in onetwo 3\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/common.bats"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 9,
                  "endLine": 150,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  run -1 bats_any_in empty 1\n  # don't find in non empty\n  run -1 bats_any_in one 2\n  # don't find smaller values\n  run -1 bats_any_in onetwo 0\n  # don't find greater values\n  run -1 bats_any_in onetwo 3\n",
                    "rendered": {
                      "text": "  run -1 bats_any_in empty 1\n  # don't find in non empty\n  run -1 bats_any_in one 2\n  # don't find smaller values\n  run -1 bats_any_in onetwo 0\n  # don't find greater values\n  run -1 bats_any_in onetwo 3\n",
                      "markdown": "`  run -1 bats_any_in empty 1\n  # don't find in non empty\n  run -1 bats_any_in one 2\n  # don't find smaller values\n  run -1 bats_any_in onetwo 0\n  # don't find greater values\n  run -1 bats_any_in onetwo 3\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/common.bats"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 9,
                  "endLine": 148,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n  # don't find in empty array\n  run -1 bats_any_in empty 1\n  # don't find in non empty\n  run -1 bats_any_in one 2\n  # don't find smaller values\n  run -1 bats_any_in onetwo 0\n",
                    "rendered": {
                      "text": "\n  # don't find in empty array\n  run -1 bats_any_in empty 1\n  # don't find in non empty\n  run -1 bats_any_in one 2\n  # don't find smaller values\n  run -1 bats_any_in onetwo 0\n",
                      "markdown": "`\n  # don't find in empty array\n  run -1 bats_any_in empty 1\n  # don't find in non empty\n  run -1 bats_any_in one 2\n  # don't find smaller values\n  run -1 bats_any_in onetwo 0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/common.bats"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 9,
                  "endLine": 146,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  # find multiple search values in multi element array\n  run -0 bats_any_in onetwo 1 2\n\n  # don't find in empty array\n  run -1 bats_any_in empty 1\n  # don't find in non empty\n  run -1 bats_any_in one 2\n",
                    "rendered": {
                      "text": "  # find multiple search values in multi element array\n  run -0 bats_any_in onetwo 1 2\n\n  # don't find in empty array\n  run -1 bats_any_in empty 1\n  # don't find in non empty\n  run -1 bats_any_in one 2\n",
                      "markdown": "`  # find multiple search values in multi element array\n  run -0 bats_any_in onetwo 1 2\n\n  # don't find in empty array\n  run -1 bats_any_in empty 1\n  # don't find in non empty\n  run -1 bats_any_in one 2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/common.bats"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 3,
                  "endLine": 143,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  run -0 bats_any_in one 1\n  # find single search values in multi element array\n  run -0 bats_any_in onetwo 2\n  # find multiple search values in multi element array\n  run -0 bats_any_in onetwo 1 2\n\n  # don't find in empty array\n",
                    "rendered": {
                      "text": "  run -0 bats_any_in one 1\n  # find single search values in multi element array\n  run -0 bats_any_in onetwo 2\n  # find multiple search values in multi element array\n  run -0 bats_any_in onetwo 1 2\n\n  # don't find in empty array\n",
                      "markdown": "`  run -0 bats_any_in one 1\n  # find single search values in multi element array\n  run -0 bats_any_in onetwo 2\n  # find multiple search values in multi element array\n  run -0 bats_any_in onetwo 1 2\n\n  # don't find in empty array\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/common.bats"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 3,
                  "endLine": 141,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n  # find single search value in single element array\n  run -0 bats_any_in one 1\n  # find single search values in multi element array\n  run -0 bats_any_in onetwo 2\n  # find multiple search values in multi element array\n  run -0 bats_any_in onetwo 1 2\n",
                    "rendered": {
                      "text": "\n  # find single search value in single element array\n  run -0 bats_any_in one 1\n  # find single search values in multi element array\n  run -0 bats_any_in onetwo 2\n  # find multiple search values in multi element array\n  run -0 bats_any_in onetwo 1 2\n",
                      "markdown": "`\n  # find single search value in single element array\n  run -0 bats_any_in one 1\n  # find single search values in multi element array\n  run -0 bats_any_in onetwo 2\n  # find multiple search values in multi element array\n  run -0 bats_any_in onetwo 1 2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/common.bats"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 3,
                  "endLine": 139,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  run -1 bats_any_in one\n  run -1 bats_any_in onetwo\n\n  # find single search value in single element array\n  run -0 bats_any_in one 1\n  # find single search values in multi element array\n  run -0 bats_any_in onetwo 2\n",
                    "rendered": {
                      "text": "  run -1 bats_any_in one\n  run -1 bats_any_in onetwo\n\n  # find single search value in single element array\n  run -0 bats_any_in one 1\n  # find single search values in multi element array\n  run -0 bats_any_in onetwo 2\n",
                      "markdown": "`  run -1 bats_any_in one\n  run -1 bats_any_in onetwo\n\n  # find single search value in single element array\n  run -0 bats_any_in one 1\n  # find single search values in multi element array\n  run -0 bats_any_in onetwo 2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/common.bats"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 9,
                  "endLine": 125,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  run -1 bats_all_in one 2\n  # don't find smaller values\n  run -1 bats_all_in onetwo 0 1 2\n  # don't find greater values\n  run -1 bats_all_in onetwo 1 2 3\n}\n\n",
                    "rendered": {
                      "text": "  run -1 bats_all_in one 2\n  # don't find smaller values\n  run -1 bats_all_in onetwo 0 1 2\n  # don't find greater values\n  run -1 bats_all_in onetwo 1 2 3\n}\n\n",
                      "markdown": "`  run -1 bats_all_in one 2\n  # don't find smaller values\n  run -1 bats_all_in onetwo 0 1 2\n  # don't find greater values\n  run -1 bats_all_in onetwo 1 2 3\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/common.bats"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 9,
                  "endLine": 123,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  run -1 bats_all_in empty 1\n  # don't find in non empty\n  run -1 bats_all_in one 2\n  # don't find smaller values\n  run -1 bats_all_in onetwo 0 1 2\n  # don't find greater values\n  run -1 bats_all_in onetwo 1 2 3\n",
                    "rendered": {
                      "text": "  run -1 bats_all_in empty 1\n  # don't find in non empty\n  run -1 bats_all_in one 2\n  # don't find smaller values\n  run -1 bats_all_in onetwo 0 1 2\n  # don't find greater values\n  run -1 bats_all_in onetwo 1 2 3\n",
                      "markdown": "`  run -1 bats_all_in empty 1\n  # don't find in non empty\n  run -1 bats_all_in one 2\n  # don't find smaller values\n  run -1 bats_all_in onetwo 0 1 2\n  # don't find greater values\n  run -1 bats_all_in onetwo 1 2 3\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/common.bats"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 9,
                  "endLine": 121,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n  # don't find in empty array\n  run -1 bats_all_in empty 1\n  # don't find in non empty\n  run -1 bats_all_in one 2\n  # don't find smaller values\n  run -1 bats_all_in onetwo 0 1 2\n",
                    "rendered": {
                      "text": "\n  # don't find in empty array\n  run -1 bats_all_in empty 1\n  # don't find in non empty\n  run -1 bats_all_in one 2\n  # don't find smaller values\n  run -1 bats_all_in onetwo 0 1 2\n",
                      "markdown": "`\n  # don't find in empty array\n  run -1 bats_all_in empty 1\n  # don't find in non empty\n  run -1 bats_all_in one 2\n  # don't find smaller values\n  run -1 bats_all_in onetwo 0 1 2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/common.bats"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 9,
                  "endLine": 119,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  # find multiple search values in multi element array\n  run -0 bats_all_in onetwo 1 2\n\n  # don't find in empty array\n  run -1 bats_all_in empty 1\n  # don't find in non empty\n  run -1 bats_all_in one 2\n",
                    "rendered": {
                      "text": "  # find multiple search values in multi element array\n  run -0 bats_all_in onetwo 1 2\n\n  # don't find in empty array\n  run -1 bats_all_in empty 1\n  # don't find in non empty\n  run -1 bats_all_in one 2\n",
                      "markdown": "`  # find multiple search values in multi element array\n  run -0 bats_all_in onetwo 1 2\n\n  # don't find in empty array\n  run -1 bats_all_in empty 1\n  # don't find in non empty\n  run -1 bats_all_in one 2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/common.bats"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 3,
                  "endLine": 116,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  run -0 bats_all_in one 1\n  # find single search values in multi element array\n  run -0 bats_all_in onetwo 1\n  # find multiple search values in multi element array\n  run -0 bats_all_in onetwo 1 2\n\n  # don't find in empty array\n",
                    "rendered": {
                      "text": "  run -0 bats_all_in one 1\n  # find single search values in multi element array\n  run -0 bats_all_in onetwo 1\n  # find multiple search values in multi element array\n  run -0 bats_all_in onetwo 1 2\n\n  # don't find in empty array\n",
                      "markdown": "`  run -0 bats_all_in one 1\n  # find single search values in multi element array\n  run -0 bats_all_in onetwo 1\n  # find multiple search values in multi element array\n  run -0 bats_all_in onetwo 1 2\n\n  # don't find in empty array\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/common.bats"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 3,
                  "endLine": 114,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  run -0 bats_all_in onetwo\n  # find single search value in single element array\n  run -0 bats_all_in one 1\n  # find single search values in multi element array\n  run -0 bats_all_in onetwo 1\n  # find multiple search values in multi element array\n  run -0 bats_all_in onetwo 1 2\n",
                    "rendered": {
                      "text": "  run -0 bats_all_in onetwo\n  # find single search value in single element array\n  run -0 bats_all_in one 1\n  # find single search values in multi element array\n  run -0 bats_all_in onetwo 1\n  # find multiple search values in multi element array\n  run -0 bats_all_in onetwo 1 2\n",
                      "markdown": "`  run -0 bats_all_in onetwo\n  # find single search value in single element array\n  run -0 bats_all_in one 1\n  # find single search values in multi element array\n  run -0 bats_all_in onetwo 1\n  # find multiple search values in multi element array\n  run -0 bats_all_in onetwo 1 2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/common.bats"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 3,
                  "endLine": 112,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  run -0 bats_all_in empty\n  run -0 bats_all_in one\n  run -0 bats_all_in onetwo\n  # find single search value in single element array\n  run -0 bats_all_in one 1\n  # find single search values in multi element array\n  run -0 bats_all_in onetwo 1\n",
                    "rendered": {
                      "text": "  run -0 bats_all_in empty\n  run -0 bats_all_in one\n  run -0 bats_all_in onetwo\n  # find single search value in single element array\n  run -0 bats_all_in one 1\n  # find single search values in multi element array\n  run -0 bats_all_in onetwo 1\n",
                      "markdown": "`  run -0 bats_all_in empty\n  run -0 bats_all_in one\n  run -0 bats_all_in onetwo\n  # find single search value in single element array\n  run -0 bats_all_in one 1\n  # find single search values in multi element array\n  run -0 bats_all_in onetwo 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/common.bats"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 3,
                  "endLine": 108,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  bats_require_minimum_version 1.5.0\n\n  local -ra empty=() one=(1) onetwo=(1 2)\n  # find nothing in any array\n  run -0 bats_all_in empty\n  run -0 bats_all_in one\n  run -0 bats_all_in onetwo\n",
                    "rendered": {
                      "text": "  bats_require_minimum_version 1.5.0\n\n  local -ra empty=() one=(1) onetwo=(1 2)\n  # find nothing in any array\n  run -0 bats_all_in empty\n  run -0 bats_all_in one\n  run -0 bats_all_in onetwo\n",
                      "markdown": "`  bats_require_minimum_version 1.5.0\n\n  local -ra empty=() one=(1) onetwo=(1 2)\n  # find nothing in any array\n  run -0 bats_all_in empty\n  run -0 bats_all_in one\n  run -0 bats_all_in onetwo\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats_pipe.bats"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 30,
                  "snippet": {
                    "text": "}\n\noutput_binary_data_and_returns_with_given_code() {\n  printf '\\x00\\xDE\\xAD\\xF0\\x0D'\n\n  return \"$1\"\n}\n",
                    "rendered": {
                      "text": "}\n\noutput_binary_data_and_returns_with_given_code() {\n  printf '\\x00\\xDE\\xAD\\xF0\\x0D'\n\n  return \"$1\"\n}\n",
                      "markdown": "`}\n\noutput_binary_data_and_returns_with_given_code() {\n  printf '\\x00\\xDE\\xAD\\xF0\\x0D'\n\n  return \"$1\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats_pipe.bats"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 72,
                  "endLine": 415,
                  "endColumn": 76,
                  "snippet": {
                    "text": "  run -1 bats_pipe describe_args \\| describe_input \\| describe_input \\| \\|\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '6'.\" ]\n}\n\n@test \"run bats_pipe with unknown arg\" {\n",
                    "rendered": {
                      "text": "  run -1 bats_pipe describe_args \\| describe_input \\| describe_input \\| \\|\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '6'.\" ]\n}\n\n@test \"run bats_pipe with unknown arg\" {\n",
                      "markdown": "`  run -1 bats_pipe describe_args \\| describe_input \\| describe_input \\| \\|\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '6'.\" ]\n}\n\n@test \"run bats_pipe with unknown arg\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats_pipe.bats"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 72,
                  "endLine": 408,
                  "endColumn": 76,
                  "snippet": {
                    "text": "  run -1 bats_pipe describe_args \\| describe_input \\| \\| describe_input\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '4'.\" ]\n}\n\n@test \"run bats_pipe with consecutive |s after three piped commands\" {\n",
                    "rendered": {
                      "text": "  run -1 bats_pipe describe_args \\| describe_input \\| \\| describe_input\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '4'.\" ]\n}\n\n@test \"run bats_pipe with consecutive |s after three piped commands\" {\n",
                      "markdown": "`  run -1 bats_pipe describe_args \\| describe_input \\| \\| describe_input\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '4'.\" ]\n}\n\n@test \"run bats_pipe with consecutive |s after three piped commands\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats_pipe.bats"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 72,
                  "endLine": 401,
                  "endColumn": 76,
                  "snippet": {
                    "text": "  run -1 bats_pipe describe_args \\| \\| describe_input \\| describe_input\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '2'.\" ]\n}\n\n@test \"run bats_pipe with consecutive |s between second pair of three piped commands\" {\n",
                    "rendered": {
                      "text": "  run -1 bats_pipe describe_args \\| \\| describe_input \\| describe_input\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '2'.\" ]\n}\n\n@test \"run bats_pipe with consecutive |s between second pair of three piped commands\" {\n",
                      "markdown": "`  run -1 bats_pipe describe_args \\| \\| describe_input \\| describe_input\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '2'.\" ]\n}\n\n@test \"run bats_pipe with consecutive |s between second pair of three piped commands\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats_pipe.bats"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 72,
                  "endLine": 394,
                  "endColumn": 76,
                  "snippet": {
                    "text": "  run -1 bats_pipe describe_args \\| describe_input \\| \\|\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '4'.\" ]\n}\n\n@test \"run bats_pipe with consecutive |s between first pair of three piped commands\" {\n",
                    "rendered": {
                      "text": "  run -1 bats_pipe describe_args \\| describe_input \\| \\|\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '4'.\" ]\n}\n\n@test \"run bats_pipe with consecutive |s between first pair of three piped commands\" {\n",
                      "markdown": "`  run -1 bats_pipe describe_args \\| describe_input \\| \\|\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '4'.\" ]\n}\n\n@test \"run bats_pipe with consecutive |s between first pair of three piped commands\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats_pipe.bats"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 72,
                  "endLine": 387,
                  "endColumn": 76,
                  "snippet": {
                    "text": "  run -1 bats_pipe describe_args \\| \\| describe_input\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '2'.\" ]\n}\n\n@test \"run bats_pipe with consecutive |s after two piped commands\" {\n",
                    "rendered": {
                      "text": "  run -1 bats_pipe describe_args \\| \\| describe_input\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '2'.\" ]\n}\n\n@test \"run bats_pipe with consecutive |s after two piped commands\" {\n",
                      "markdown": "`  run -1 bats_pipe describe_args \\| \\| describe_input\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '2'.\" ]\n}\n\n@test \"run bats_pipe with consecutive |s after two piped commands\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats_pipe.bats"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 72,
                  "endLine": 380,
                  "endColumn": 76,
                  "snippet": {
                    "text": "  run -1 bats_pipe describe_args \\| \\|\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '2'.\" ]\n}\n\n@test \"run bats_pipe with consecutive |s between two piped commands\" {\n",
                    "rendered": {
                      "text": "  run -1 bats_pipe describe_args \\| \\|\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '2'.\" ]\n}\n\n@test \"run bats_pipe with consecutive |s between two piped commands\" {\n",
                      "markdown": "`  run -1 bats_pipe describe_args \\| \\|\n\n  [ \"${#lines[@]}\" -eq 1 ]\n  [ \"${lines[0]}\" = \"Usage error: Cannot have consecutive \\`\\\\|\\`. Found at argument position '2'.\" ]\n}\n\n@test \"run bats_pipe with consecutive |s between two piped commands\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats_pipe.bats"
                },
                "region": {
                  "startLine": 1407,
                  "startColumn": 9,
                  "endLine": 1407,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  fi\n  run -42 bats_pipe output_binary_data_and_returns_with_given_code 42 \\| od -v -t x1 -An\n\n  # OSX's od prints slightly differently from linux's.\n  expected_regex='^[ \\t]*00  ?de  ?ad  ?f0  ?0d[ \\t]*$'\n  [[ \"$output\" =~ $expected_regex ]]\n}\n",
                    "rendered": {
                      "text": "  fi\n  run -42 bats_pipe output_binary_data_and_returns_with_given_code 42 \\| od -v -t x1 -An\n\n  # OSX's od prints slightly differently from linux's.\n  expected_regex='^[ \\t]*00  ?de  ?ad  ?f0  ?0d[ \\t]*$'\n  [[ \"$output\" =~ $expected_regex ]]\n}\n",
                      "markdown": "`  fi\n  run -42 bats_pipe output_binary_data_and_returns_with_given_code 42 \\| od -v -t x1 -An\n\n  # OSX's od prints slightly differently from linux's.\n  expected_regex='^[ \\t]*00  ?de  ?ad  ?f0  ?0d[ \\t]*$'\n  [[ \"$output\" =~ $expected_regex ]]\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats_pipe.bats"
                },
                "region": {
                  "startLine": 1405,
                  "startColumn": 72,
                  "endLine": 1405,
                  "endColumn": 76,
                  "snippet": {
                    "text": "  if ! command -v od; then\n    skip \"od command is not available\"\n  fi\n  run -42 bats_pipe output_binary_data_and_returns_with_given_code 42 \\| od -v -t x1 -An\n\n  # OSX's od prints slightly differently from linux's.\n  expected_regex='^[ \\t]*00  ?de  ?ad  ?f0  ?0d[ \\t]*$'\n",
                    "rendered": {
                      "text": "  if ! command -v od; then\n    skip \"od command is not available\"\n  fi\n  run -42 bats_pipe output_binary_data_and_returns_with_given_code 42 \\| od -v -t x1 -An\n\n  # OSX's od prints slightly differently from linux's.\n  expected_regex='^[ \\t]*00  ?de  ?ad  ?f0  ?0d[ \\t]*$'\n",
                      "markdown": "`  if ! command -v od; then\n    skip \"od command is not available\"\n  fi\n  run -42 bats_pipe output_binary_data_and_returns_with_given_code 42 \\| od -v -t x1 -An\n\n  # OSX's od prints slightly differently from linux's.\n  expected_regex='^[ \\t]*00  ?de  ?ad  ?f0  ?0d[ \\t]*$'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats_pipe.bats"
                },
                "region": {
                  "startLine": 1396,
                  "startColumn": 9,
                  "endLine": 1396,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  fi\n  run -0 bats_pipe output_binary_data_and_returns_with_given_code 0 \\| od -v -t x1 -An\n\n  # OSX's od prints slightly differently from linux's.\n  expected_regex='^[ \\t]*00  ?de  ?ad  ?f0  ?0d[ \\t]*$'\n  [[ \"$output\" =~ $expected_regex ]]\n}\n",
                    "rendered": {
                      "text": "  fi\n  run -0 bats_pipe output_binary_data_and_returns_with_given_code 0 \\| od -v -t x1 -An\n\n  # OSX's od prints slightly differently from linux's.\n  expected_regex='^[ \\t]*00  ?de  ?ad  ?f0  ?0d[ \\t]*$'\n  [[ \"$output\" =~ $expected_regex ]]\n}\n",
                      "markdown": "`  fi\n  run -0 bats_pipe output_binary_data_and_returns_with_given_code 0 \\| od -v -t x1 -An\n\n  # OSX's od prints slightly differently from linux's.\n  expected_regex='^[ \\t]*00  ?de  ?ad  ?f0  ?0d[ \\t]*$'\n  [[ \"$output\" =~ $expected_regex ]]\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats_pipe.bats"
                },
                "region": {
                  "startLine": 1394,
                  "startColumn": 70,
                  "endLine": 1394,
                  "endColumn": 74,
                  "snippet": {
                    "text": "  if ! command -v od; then\n    skip \"od command is not available\"\n  fi\n  run -0 bats_pipe output_binary_data_and_returns_with_given_code 0 \\| od -v -t x1 -An\n\n  # OSX's od prints slightly differently from linux's.\n  expected_regex='^[ \\t]*00  ?de  ?ad  ?f0  ?0d[ \\t]*$'\n",
                    "rendered": {
                      "text": "  if ! command -v od; then\n    skip \"od command is not available\"\n  fi\n  run -0 bats_pipe output_binary_data_and_returns_with_given_code 0 \\| od -v -t x1 -An\n\n  # OSX's od prints slightly differently from linux's.\n  expected_regex='^[ \\t]*00  ?de  ?ad  ?f0  ?0d[ \\t]*$'\n",
                      "markdown": "`  if ! command -v od; then\n    skip \"od command is not available\"\n  fi\n  run -0 bats_pipe output_binary_data_and_returns_with_given_code 0 \\| od -v -t x1 -An\n\n  # OSX's od prints slightly differently from linux's.\n  expected_regex='^[ \\t]*00  ?de  ?ad  ?f0  ?0d[ \\t]*$'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1277,
                  "startColumn": 22,
                  "endLine": 1277,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  reentrant_run -0 env -i PATH=\"$PATH\" BATS_DECLARED_VARIABLES_FILE=\"$BATS_DECLARED_VARIABLES_FILE\" bash \"${BATS_ROOT}/bin/bats\" \"${FIXTURE_ROOT}/issue-519.bats\"\n  # use function to allow failing via !, run is a bit unwieldy with the pipe and subshells\n  check_no_new_variables() {\n    # -23 -> only look at additions on the bats list\n    ! comm -23 <(normalize_variable_list <\"$BATS_DECLARED_VARIABLES_FILE\") \\\n      <(normalize_variable_list <<<\"$BASH_DECLARED_VARIABLES\") |\n      grep -v '^BATS_' # variables that are prefixed with BATS_ don't count\n",
                    "rendered": {
                      "text": "  reentrant_run -0 env -i PATH=\"$PATH\" BATS_DECLARED_VARIABLES_FILE=\"$BATS_DECLARED_VARIABLES_FILE\" bash \"${BATS_ROOT}/bin/bats\" \"${FIXTURE_ROOT}/issue-519.bats\"\n  # use function to allow failing via !, run is a bit unwieldy with the pipe and subshells\n  check_no_new_variables() {\n    # -23 -> only look at additions on the bats list\n    ! comm -23 <(normalize_variable_list <\"$BATS_DECLARED_VARIABLES_FILE\") \\\n      <(normalize_variable_list <<<\"$BASH_DECLARED_VARIABLES\") |\n      grep -v '^BATS_' # variables that are prefixed with BATS_ don't count\n",
                      "markdown": "`  reentrant_run -0 env -i PATH=\"$PATH\" BATS_DECLARED_VARIABLES_FILE=\"$BATS_DECLARED_VARIABLES_FILE\" bash \"${BATS_ROOT}/bin/bats\" \"${FIXTURE_ROOT}/issue-519.bats\"\n  # use function to allow failing via !, run is a bit unwieldy with the pipe and subshells\n  check_no_new_variables() {\n    # -23 -> only look at additions on the bats list\n    ! comm -23 <(normalize_variable_list <\"$BATS_DECLARED_VARIABLES_FILE\") \\\n      <(normalize_variable_list <<<\"$BASH_DECLARED_VARIABLES\") |\n      grep -v '^BATS_' # variables that are prefixed with BATS_ don't count\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1274,
                  "startColumn": 99,
                  "endLine": 1274,
                  "endColumn": 105,
                  "snippet": {
                    "text": "  local BATS_DECLARED_VARIABLES_FILE=\"${BATS_TEST_TMPDIR}/variables.log\"\n  bats_require_minimum_version 1.5.0\n  # now capture bats @test environment\n  reentrant_run -0 env -i PATH=\"$PATH\" BATS_DECLARED_VARIABLES_FILE=\"$BATS_DECLARED_VARIABLES_FILE\" bash \"${BATS_ROOT}/bin/bats\" \"${FIXTURE_ROOT}/issue-519.bats\"\n  # use function to allow failing via !, run is a bit unwieldy with the pipe and subshells\n  check_no_new_variables() {\n    # -23 -> only look at additions on the bats list\n",
                    "rendered": {
                      "text": "  local BATS_DECLARED_VARIABLES_FILE=\"${BATS_TEST_TMPDIR}/variables.log\"\n  bats_require_minimum_version 1.5.0\n  # now capture bats @test environment\n  reentrant_run -0 env -i PATH=\"$PATH\" BATS_DECLARED_VARIABLES_FILE=\"$BATS_DECLARED_VARIABLES_FILE\" bash \"${BATS_ROOT}/bin/bats\" \"${FIXTURE_ROOT}/issue-519.bats\"\n  # use function to allow failing via !, run is a bit unwieldy with the pipe and subshells\n  check_no_new_variables() {\n    # -23 -> only look at additions on the bats list\n",
                      "markdown": "`  local BATS_DECLARED_VARIABLES_FILE=\"${BATS_TEST_TMPDIR}/variables.log\"\n  bats_require_minimum_version 1.5.0\n  # now capture bats @test environment\n  reentrant_run -0 env -i PATH=\"$PATH\" BATS_DECLARED_VARIABLES_FILE=\"$BATS_DECLARED_VARIABLES_FILE\" bash \"${BATS_ROOT}/bin/bats\" \"${FIXTURE_ROOT}/issue-519.bats\"\n  # use function to allow failing via !, run is a bit unwieldy with the pipe and subshells\n  check_no_new_variables() {\n    # -23 -> only look at additions on the bats list\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1268,
                  "startColumn": 11,
                  "endLine": 1268,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    }\n  fi\n\n  # get the bash baseline\n  # add variables that should be ignored like PIPESTATUS here\n  BASH_DECLARED_VARIABLES=$(env -i PIPESTATUS= \"$BASH\" -c \"declare -p\")\n  local BATS_DECLARED_VARIABLES_FILE=\"${BATS_TEST_TMPDIR}/variables.log\"\n",
                    "rendered": {
                      "text": "    }\n  fi\n\n  # get the bash baseline\n  # add variables that should be ignored like PIPESTATUS here\n  BASH_DECLARED_VARIABLES=$(env -i PIPESTATUS= \"$BASH\" -c \"declare -p\")\n  local BATS_DECLARED_VARIABLES_FILE=\"${BATS_TEST_TMPDIR}/variables.log\"\n",
                      "markdown": "`    }\n  fi\n\n  # get the bash baseline\n  # add variables that should be ignored like PIPESTATUS here\n  BASH_DECLARED_VARIABLES=$(env -i PIPESTATUS= \"$BASH\" -c \"declare -p\")\n  local BATS_DECLARED_VARIABLES_FILE=\"${BATS_TEST_TMPDIR}/variables.log\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1238,
                  "startColumn": 63,
                  "endLine": 1239,
                  "snippet": {
                    "text": "\n@test \"Debug trap must only override variables that are prefixed with BATS_ (issue #519)\" {\n  # use declare -p to gather variables in pristine bash and bats @test environment\n  # then compare which ones are introduced in @test compared to bash\n\n  # make declare's output more readable and suitable for `comm`\n  if [[ \"${BASH_VERSINFO[0]}\" -eq 3 ]]; then\n    normalize_variable_list() {\n",
                    "rendered": {
                      "text": "\n@test \"Debug trap must only override variables that are prefixed with BATS_ (issue #519)\" {\n  # use declare -p to gather variables in pristine bash and bats @test environment\n  # then compare which ones are introduced in @test compared to bash\n\n  # make declare's output more readable and suitable for `comm`\n  if [[ \"${BASH_VERSINFO[0]}\" -eq 3 ]]; then\n    normalize_variable_list() {\n",
                      "markdown": "`\n@test \"Debug trap must only override variables that are prefixed with BATS_ (issue #519)\" {\n  # use declare -p to gather variables in pristine bash and bats @test environment\n  # then compare which ones are introduced in @test compared to bash\n\n  # make declare's output more readable and suitable for `comm`\n  if [[ \"${BASH_VERSINFO[0]}\" -eq 3 ]]; then\n    normalize_variable_list() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1237,
                  "startColumn": 50,
                  "endLine": 1237,
                  "endColumn": 56,
                  "snippet": {
                    "text": "}\n\n@test \"Debug trap must only override variables that are prefixed with BATS_ (issue #519)\" {\n  # use declare -p to gather variables in pristine bash and bats @test environment\n  # then compare which ones are introduced in @test compared to bash\n\n  # make declare's output more readable and suitable for `comm`\n",
                    "rendered": {
                      "text": "}\n\n@test \"Debug trap must only override variables that are prefixed with BATS_ (issue #519)\" {\n  # use declare -p to gather variables in pristine bash and bats @test environment\n  # then compare which ones are introduced in @test compared to bash\n\n  # make declare's output more readable and suitable for `comm`\n",
                      "markdown": "`}\n\n@test \"Debug trap must only override variables that are prefixed with BATS_ (issue #519)\" {\n  # use declare -p to gather variables in pristine bash and bats @test environment\n  # then compare which ones are introduced in @test compared to bash\n\n  # make declare's output more readable and suitable for `comm`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 100,
                  "endLine": 752,
                  "snippet": {
                    "text": "  reentrant_run bats -j 2 \"$FIXTURE_ROOT/issue-433\"\n\n  [ \"$status\" -eq 0 ]\n  [[ \"$output\" != *\"No such file or directory\"* ]] || exit 1 # ensure failures are detected with old bash\n}\n\n@test \"Failure in free code (see #399)\" {\n  reentrant_run bats --tap \"$FIXTURE_ROOT/failure_in_free_code.bats\"\n",
                    "rendered": {
                      "text": "  reentrant_run bats -j 2 \"$FIXTURE_ROOT/issue-433\"\n\n  [ \"$status\" -eq 0 ]\n  [[ \"$output\" != *\"No such file or directory\"* ]] || exit 1 # ensure failures are detected with old bash\n}\n\n@test \"Failure in free code (see #399)\" {\n  reentrant_run bats --tap \"$FIXTURE_ROOT/failure_in_free_code.bats\"\n",
                      "markdown": "`  reentrant_run bats -j 2 \"$FIXTURE_ROOT/issue-433\"\n\n  [ \"$status\" -eq 0 ]\n  [[ \"$output\" != *\"No such file or directory\"* ]] || exit 1 # ensure failures are detected with old bash\n}\n\n@test \"Failure in free code (see #399)\" {\n  reentrant_run bats --tap \"$FIXTURE_ROOT/failure_in_free_code.bats\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 685,
                  "startColumn": 15,
                  "endLine": 685,
                  "endColumn": 21,
                  "snippet": {
                    "text": "@test \"Test nounset does not trip up bats' internals (see #385)\" {\n  # don't export nounset within this file or we might trip up the testsuite itself,\n  # getting bad diagnostics\n  reentrant_run bash -c \"set -o nounset; export SHELLOPTS; bats --tap '$FIXTURE_ROOT/passing.bats'\"\n  echo \"$output\"\n  [ \"${lines[0]}\" = \"1..1\" ]\n  [ \"${lines[1]}\" = \"ok 1 a passing test\" ]\n",
                    "rendered": {
                      "text": "@test \"Test nounset does not trip up bats' internals (see #385)\" {\n  # don't export nounset within this file or we might trip up the testsuite itself,\n  # getting bad diagnostics\n  reentrant_run bash -c \"set -o nounset; export SHELLOPTS; bats --tap '$FIXTURE_ROOT/passing.bats'\"\n  echo \"$output\"\n  [ \"${lines[0]}\" = \"1..1\" ]\n  [ \"${lines[1]}\" = \"ok 1 a passing test\" ]\n",
                      "markdown": "`@test \"Test nounset does not trip up bats' internals (see #385)\" {\n  # don't export nounset within this file or we might trip up the testsuite itself,\n  # getting bad diagnostics\n  reentrant_run bash -c \"set -o nounset; export SHELLOPTS; bats --tap '$FIXTURE_ROOT/passing.bats'\"\n  echo \"$output\"\n  [ \"${lines[0]}\" = \"1..1\" ]\n  [ \"${lines[1]}\" = \"ok 1 a passing test\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 587,
                  "startColumn": 15,
                  "endLine": 587,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1' | bats_test_count_validator\"\n  [[ $status -eq 0 ]]\n}\n\n",
                    "rendered": {
                      "text": "  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1' | bats_test_count_validator\"\n  [[ $status -eq 0 ]]\n}\n\n",
                      "markdown": "`  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1' | bats_test_count_validator\"\n  [[ $status -eq 0 ]]\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 584,
                  "startColumn": 15,
                  "endLine": 584,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  reentrant_run bash -c \"echo $'1..1\\n' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1' | bats_test_count_validator\"\n",
                    "rendered": {
                      "text": "  reentrant_run bash -c \"echo $'1..1\\n' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1' | bats_test_count_validator\"\n",
                      "markdown": "`  reentrant_run bash -c \"echo $'1..1\\n' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1' | bats_test_count_validator\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 15,
                  "endLine": 581,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  # shellcheck source=lib/bats-core/validator.bash\n  source \"$BATS_ROOT/$BATS_LIBDIR/bats-core/validator.bash\"\n  export -f bats_test_count_validator\n  reentrant_run bash -c \"echo $'1..1\\n' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n",
                    "rendered": {
                      "text": "  # shellcheck source=lib/bats-core/validator.bash\n  source \"$BATS_ROOT/$BATS_LIBDIR/bats-core/validator.bash\"\n  export -f bats_test_count_validator\n  reentrant_run bash -c \"echo $'1..1\\n' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n",
                      "markdown": "`  # shellcheck source=lib/bats-core/validator.bash\n  source \"$BATS_ROOT/$BATS_LIBDIR/bats-core/validator.bash\"\n  export -f bats_test_count_validator\n  reentrant_run bash -c \"echo $'1..1\\n' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 30,
                  "endLine": 415,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  [ \"${lines[3]}\" = 'ok 3 tab before description' ]\n  [ \"${lines[4]}\" = 'ok 4 tab before opening brace' ]\n  [ \"${lines[5]}\" = 'ok 5 tabs at beginning of line and before description' ]\n  [ \"${lines[6]}\" = 'ok 6 tabs at beginning, before description, before brace' ]\n  [ \"${lines[7]}\" = 'ok 7 extra whitespace around single-line test' ]\n  [ \"${lines[8]}\" = 'ok 8 no extra whitespace around single-line test' ]\n  [ \"${lines[9]}\" = 'ok 9 parse unquoted name between extra whitespace' ]\n",
                    "rendered": {
                      "text": "  [ \"${lines[3]}\" = 'ok 3 tab before description' ]\n  [ \"${lines[4]}\" = 'ok 4 tab before opening brace' ]\n  [ \"${lines[5]}\" = 'ok 5 tabs at beginning of line and before description' ]\n  [ \"${lines[6]}\" = 'ok 6 tabs at beginning, before description, before brace' ]\n  [ \"${lines[7]}\" = 'ok 7 extra whitespace around single-line test' ]\n  [ \"${lines[8]}\" = 'ok 8 no extra whitespace around single-line test' ]\n  [ \"${lines[9]}\" = 'ok 9 parse unquoted name between extra whitespace' ]\n",
                      "markdown": "`  [ \"${lines[3]}\" = 'ok 3 tab before description' ]\n  [ \"${lines[4]}\" = 'ok 4 tab before opening brace' ]\n  [ \"${lines[5]}\" = 'ok 5 tabs at beginning of line and before description' ]\n  [ \"${lines[6]}\" = 'ok 6 tabs at beginning, before description, before brace' ]\n  [ \"${lines[7]}\" = 'ok 7 extra whitespace around single-line test' ]\n  [ \"${lines[8]}\" = 'ok 8 no extra whitespace around single-line test' ]\n  [ \"${lines[9]}\" = 'ok 9 parse unquoted name between extra whitespace' ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 414,
                  "startColumn": 30,
                  "endLine": 414,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  [ \"${lines[2]}\" = 'ok 2 tab at beginning of line' ]\n  [ \"${lines[3]}\" = 'ok 3 tab before description' ]\n  [ \"${lines[4]}\" = 'ok 4 tab before opening brace' ]\n  [ \"${lines[5]}\" = 'ok 5 tabs at beginning of line and before description' ]\n  [ \"${lines[6]}\" = 'ok 6 tabs at beginning, before description, before brace' ]\n  [ \"${lines[7]}\" = 'ok 7 extra whitespace around single-line test' ]\n  [ \"${lines[8]}\" = 'ok 8 no extra whitespace around single-line test' ]\n",
                    "rendered": {
                      "text": "  [ \"${lines[2]}\" = 'ok 2 tab at beginning of line' ]\n  [ \"${lines[3]}\" = 'ok 3 tab before description' ]\n  [ \"${lines[4]}\" = 'ok 4 tab before opening brace' ]\n  [ \"${lines[5]}\" = 'ok 5 tabs at beginning of line and before description' ]\n  [ \"${lines[6]}\" = 'ok 6 tabs at beginning, before description, before brace' ]\n  [ \"${lines[7]}\" = 'ok 7 extra whitespace around single-line test' ]\n  [ \"${lines[8]}\" = 'ok 8 no extra whitespace around single-line test' ]\n",
                      "markdown": "`  [ \"${lines[2]}\" = 'ok 2 tab at beginning of line' ]\n  [ \"${lines[3]}\" = 'ok 3 tab before description' ]\n  [ \"${lines[4]}\" = 'ok 4 tab before opening brace' ]\n  [ \"${lines[5]}\" = 'ok 5 tabs at beginning of line and before description' ]\n  [ \"${lines[6]}\" = 'ok 6 tabs at beginning, before description, before brace' ]\n  [ \"${lines[7]}\" = 'ok 7 extra whitespace around single-line test' ]\n  [ \"${lines[8]}\" = 'ok 8 no extra whitespace around single-line test' ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 29,
                  "endLine": 411,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  reentrant_run bats \"$FIXTURE_ROOT/whitespace_no_shellcheck.bats\"\n  [ $status -eq 0 ]\n  [ \"${lines[1]}\" = 'ok 1 no extra whitespace' ]\n  [ \"${lines[2]}\" = 'ok 2 tab at beginning of line' ]\n  [ \"${lines[3]}\" = 'ok 3 tab before description' ]\n  [ \"${lines[4]}\" = 'ok 4 tab before opening brace' ]\n  [ \"${lines[5]}\" = 'ok 5 tabs at beginning of line and before description' ]\n",
                    "rendered": {
                      "text": "  reentrant_run bats \"$FIXTURE_ROOT/whitespace_no_shellcheck.bats\"\n  [ $status -eq 0 ]\n  [ \"${lines[1]}\" = 'ok 1 no extra whitespace' ]\n  [ \"${lines[2]}\" = 'ok 2 tab at beginning of line' ]\n  [ \"${lines[3]}\" = 'ok 3 tab before description' ]\n  [ \"${lines[4]}\" = 'ok 4 tab before opening brace' ]\n  [ \"${lines[5]}\" = 'ok 5 tabs at beginning of line and before description' ]\n",
                      "markdown": "`  reentrant_run bats \"$FIXTURE_ROOT/whitespace_no_shellcheck.bats\"\n  [ $status -eq 0 ]\n  [ \"${lines[1]}\" = 'ok 1 no extra whitespace' ]\n  [ \"${lines[2]}\" = 'ok 2 tab at beginning of line' ]\n  [ \"${lines[3]}\" = 'ok 3 tab before description' ]\n  [ \"${lines[4]}\" = 'ok 4 tab before opening brace' ]\n  [ \"${lines[5]}\" = 'ok 5 tabs at beginning of line and before description' ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 65,
                  "endLine": 397,
                  "endColumn": 71,
                  "snippet": {
                    "text": "output for unset variable accesses.\n\nIf there's no output even when running the latest Bash, the problem may reside\nin the DEBUG trap handler. A particularly sneaky issue is that in Bash before\n4.1-alpha, an expansion of an empty array, e.g. \"\\${FOO[@]}\", is considered\nan unset variable access. The solution is to add a size check before the\nexpansion, e.g. [[ \"\\${#FOO[@]}\" -ne 0 ]].\n",
                    "rendered": {
                      "text": "output for unset variable accesses.\n\nIf there's no output even when running the latest Bash, the problem may reside\nin the DEBUG trap handler. A particularly sneaky issue is that in Bash before\n4.1-alpha, an expansion of an empty array, e.g. \"\\${FOO[@]}\", is considered\nan unset variable access. The solution is to add a size check before the\nexpansion, e.g. [[ \"\\${#FOO[@]}\" -ne 0 ]].\n",
                      "markdown": "`output for unset variable accesses.\n\nIf there's no output even when running the latest Bash, the problem may reside\nin the DEBUG trap handler. A particularly sneaky issue is that in Bash before\n4.1-alpha, an expansion of an empty array, e.g. \"\\${FOO[@]}\", is considered\nan unset variable access. The solution is to add a size check before the\nexpansion, e.g. [[ \"\\${#FOO[@]}\" -ne 0 ]].\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 33,
                  "endLine": 353,
                  "endColumn": 39,
                  "snippet": {
                    "text": "}\n\n@test 'ensure compatibility with unofficial Bash strict mode' {\n  local expected='ok 1 unofficial Bash strict mode conditions met'\n\n  if [[ -n \"${BATS_NUMBER_OF_PARALLEL_JOBS:-}\" ]]; then\n    if [[ -z \"${BATS_NO_PARALLELIZE_ACROSS_FILES:-}\" ]]; then\n",
                    "rendered": {
                      "text": "}\n\n@test 'ensure compatibility with unofficial Bash strict mode' {\n  local expected='ok 1 unofficial Bash strict mode conditions met'\n\n  if [[ -n \"${BATS_NUMBER_OF_PARALLEL_JOBS:-}\" ]]; then\n    if [[ -z \"${BATS_NO_PARALLELIZE_ACROSS_FILES:-}\" ]]; then\n",
                      "markdown": "`}\n\n@test 'ensure compatibility with unofficial Bash strict mode' {\n  local expected='ok 1 unofficial Bash strict mode conditions met'\n\n  if [[ -n \"${BATS_NUMBER_OF_PARALLEL_JOBS:-}\" ]]; then\n    if [[ -z \"${BATS_NO_PARALLELIZE_ACROSS_FILES:-}\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 43,
                  "endLine": 352,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  [ \"${lines[3]}\" = \"ok 3 unquoted name\" ]\n}\n\n@test 'ensure compatibility with unofficial Bash strict mode' {\n  local expected='ok 1 unofficial Bash strict mode conditions met'\n\n  if [[ -n \"${BATS_NUMBER_OF_PARALLEL_JOBS:-}\" ]]; then\n",
                    "rendered": {
                      "text": "  [ \"${lines[3]}\" = \"ok 3 unquoted name\" ]\n}\n\n@test 'ensure compatibility with unofficial Bash strict mode' {\n  local expected='ok 1 unofficial Bash strict mode conditions met'\n\n  if [[ -n \"${BATS_NUMBER_OF_PARALLEL_JOBS:-}\" ]]; then\n",
                      "markdown": "`  [ \"${lines[3]}\" = \"ok 3 unquoted name\" ]\n}\n\n@test 'ensure compatibility with unofficial Bash strict mode' {\n  local expected='ok 1 unofficial Bash strict mode conditions met'\n\n  if [[ -n \"${BATS_NUMBER_OF_PARALLEL_JOBS:-}\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 14,
                  "endLine": 129,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  [ \"${lines[3]}\" = \"#   \\`[[ 1 == 2 ]]' failed\" ]\n}\n\n@test \"failing bash expression logs correct line number\" {\n  reentrant_run bats \"$FIXTURE_ROOT/failing_with_bash_expression.bats\"\n  [ \"$status\" -eq 1 ]\n  [ \"${#lines[@]}\" -eq 4 ]\n",
                    "rendered": {
                      "text": "  [ \"${lines[3]}\" = \"#   \\`[[ 1 == 2 ]]' failed\" ]\n}\n\n@test \"failing bash expression logs correct line number\" {\n  reentrant_run bats \"$FIXTURE_ROOT/failing_with_bash_expression.bats\"\n  [ \"$status\" -eq 1 ]\n  [ \"${#lines[@]}\" -eq 4 ]\n",
                      "markdown": "`  [ \"${lines[3]}\" = \"#   \\`[[ 1 == 2 ]]' failed\" ]\n}\n\n@test \"failing bash expression logs correct line number\" {\n  reentrant_run bats \"$FIXTURE_ROOT/failing_with_bash_expression.bats\"\n  [ \"$status\" -eq 1 ]\n  [ \"${#lines[@]}\" -eq 4 ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 14,
                  "endLine": 120,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  [ \"${lines[4]}\" = \"#   \\`failing_helper' failed\" ]\n}\n\n@test \"failing bash condition logs correct line number\" {\n  reentrant_run bats \"$FIXTURE_ROOT/failing_with_bash_cond.bats\"\n  [ \"$status\" -eq 1 ]\n  [ \"${#lines[@]}\" -eq 4 ]\n",
                    "rendered": {
                      "text": "  [ \"${lines[4]}\" = \"#   \\`failing_helper' failed\" ]\n}\n\n@test \"failing bash condition logs correct line number\" {\n  reentrant_run bats \"$FIXTURE_ROOT/failing_with_bash_cond.bats\"\n  [ \"$status\" -eq 1 ]\n  [ \"${#lines[@]}\" -eq 4 ]\n",
                      "markdown": "`  [ \"${lines[4]}\" = \"#   \\`failing_helper' failed\" ]\n}\n\n@test \"failing bash condition logs correct line number\" {\n  reentrant_run bats \"$FIXTURE_ROOT/failing_with_bash_cond.bats\"\n  [ \"$status\" -eq 1 ]\n  [ \"${#lines[@]}\" -eq 4 ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 41,
                  "endLine": 12,
                  "endColumn": 45,
                  "snippet": {
                    "text": "@test \"no arguments prints message and usage instructions\" {\n  reentrant_run bats\n  [ $status -eq 1 ]\n  [ \"${lines[0]}\" == 'Error: Must specify at least one <test>' ]\n  [ \"${lines[1]%% *}\" == 'Usage:' ]\n}\n\n",
                    "rendered": {
                      "text": "@test \"no arguments prints message and usage instructions\" {\n  reentrant_run bats\n  [ $status -eq 1 ]\n  [ \"${lines[0]}\" == 'Error: Must specify at least one <test>' ]\n  [ \"${lines[1]%% *}\" == 'Usage:' ]\n}\n\n",
                      "markdown": "`@test \"no arguments prints message and usage instructions\" {\n  reentrant_run bats\n  [ $status -eq 1 ]\n  [ \"${lines[0]}\" == 'Error: Must specify at least one <test>' ]\n  [ \"${lines[1]%% *}\" == 'Usage:' ]\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1426,
                  "startColumn": 3,
                  "endLine": 1426,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n@test \"Focus tests filter out other tests and override exit code\" {\n  bats_require_minimum_version 1.5.0\n  # expect exit 1: focus mode always fails tests\n  reentrant_run -1 bats \"$FIXTURE_ROOT/focus.bats\"\n  [ \"${lines[0]}\" == \"WARNING: This test run only contains tests tagged \\`bats:focus\\`!\" ]\n  [ \"${lines[1]}\" == '1..1' ]\n",
                    "rendered": {
                      "text": "\n@test \"Focus tests filter out other tests and override exit code\" {\n  bats_require_minimum_version 1.5.0\n  # expect exit 1: focus mode always fails tests\n  reentrant_run -1 bats \"$FIXTURE_ROOT/focus.bats\"\n  [ \"${lines[0]}\" == \"WARNING: This test run only contains tests tagged \\`bats:focus\\`!\" ]\n  [ \"${lines[1]}\" == '1..1' ]\n",
                      "markdown": "`\n@test \"Focus tests filter out other tests and override exit code\" {\n  bats_require_minimum_version 1.5.0\n  # expect exit 1: focus mode always fails tests\n  reentrant_run -1 bats \"$FIXTURE_ROOT/focus.bats\"\n  [ \"${lines[0]}\" == \"WARNING: This test run only contains tests tagged \\`bats:focus\\`!\" ]\n  [ \"${lines[1]}\" == '1..1' ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1372,
                  "startColumn": 5,
                  "endLine": 1372,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  [ \"${#lines[@]}\" -eq 6 ]\n\n  # 2x Override retries (give up after second try/first retry)\n  run grep test_Override_retries <\"$LOG\"\n  [ \"${lines[0]}\" == 'test_Override_retries setup 1' ]\n  [ \"${lines[1]}\" == 'test_Override_retries test_Override_retries 1' ]\n  [ \"${lines[2]}\" == 'test_Override_retries teardown 1' ]\n",
                    "rendered": {
                      "text": "  [ \"${#lines[@]}\" -eq 6 ]\n\n  # 2x Override retries (give up after second try/first retry)\n  run grep test_Override_retries <\"$LOG\"\n  [ \"${lines[0]}\" == 'test_Override_retries setup 1' ]\n  [ \"${lines[1]}\" == 'test_Override_retries test_Override_retries 1' ]\n  [ \"${lines[2]}\" == 'test_Override_retries teardown 1' ]\n",
                      "markdown": "`  [ \"${#lines[@]}\" -eq 6 ]\n\n  # 2x Override retries (give up after second try/first retry)\n  run grep test_Override_retries <\"$LOG\"\n  [ \"${lines[0]}\" == 'test_Override_retries setup 1' ]\n  [ \"${lines[1]}\" == 'test_Override_retries test_Override_retries 1' ]\n  [ \"${lines[2]}\" == 'test_Override_retries teardown 1' ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1362,
                  "startColumn": 5,
                  "endLine": 1362,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  [ \"${#lines[@]}\" -eq 9 ]\n\n  # 2x Fail once (pass second try/first retry)\n  run grep test_Fail_once <\"$LOG\"\n  [ \"${lines[0]}\" == 'test_Fail_once setup 1' ]\n  [ \"${lines[1]}\" == 'test_Fail_once test_Fail_once 1' ]\n  [ \"${lines[2]}\" == 'test_Fail_once teardown 1' ]\n",
                    "rendered": {
                      "text": "  [ \"${#lines[@]}\" -eq 9 ]\n\n  # 2x Fail once (pass second try/first retry)\n  run grep test_Fail_once <\"$LOG\"\n  [ \"${lines[0]}\" == 'test_Fail_once setup 1' ]\n  [ \"${lines[1]}\" == 'test_Fail_once test_Fail_once 1' ]\n  [ \"${lines[2]}\" == 'test_Fail_once teardown 1' ]\n",
                      "markdown": "`  [ \"${#lines[@]}\" -eq 9 ]\n\n  # 2x Fail once (pass second try/first retry)\n  run grep test_Fail_once <\"$LOG\"\n  [ \"${lines[0]}\" == 'test_Fail_once setup 1' ]\n  [ \"${lines[1]}\" == 'test_Fail_once test_Fail_once 1' ]\n  [ \"${lines[2]}\" == 'test_Fail_once teardown 1' ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1349,
                  "startColumn": 5,
                  "endLine": 1349,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  [ \"${#lines[@]}\" -eq 23 ]\n\n  # 3x Fail All (give up after 3 tries/2 retries)\n  run grep test_Fail_all <\"$LOG\"\n  [ \"${lines[0]}\" == 'test_Fail_all setup 1' ] # should be executed for each try\n  [ \"${lines[1]}\" == 'test_Fail_all test_Fail_all 1' ]\n  [ \"${lines[2]}\" == 'test_Fail_all teardown 1' ] # should be executed for each try\n",
                    "rendered": {
                      "text": "  [ \"${#lines[@]}\" -eq 23 ]\n\n  # 3x Fail All (give up after 3 tries/2 retries)\n  run grep test_Fail_all <\"$LOG\"\n  [ \"${lines[0]}\" == 'test_Fail_all setup 1' ] # should be executed for each try\n  [ \"${lines[1]}\" == 'test_Fail_all test_Fail_all 1' ]\n  [ \"${lines[2]}\" == 'test_Fail_all teardown 1' ] # should be executed for each try\n",
                      "markdown": "`  [ \"${#lines[@]}\" -eq 23 ]\n\n  # 3x Fail All (give up after 3 tries/2 retries)\n  run grep test_Fail_all <\"$LOG\"\n  [ \"${lines[0]}\" == 'test_Fail_all setup 1' ] # should be executed for each try\n  [ \"${lines[1]}\" == 'test_Fail_all test_Fail_all 1' ]\n  [ \"${lines[2]}\" == 'test_Fail_all teardown 1' ] # should be executed for each try\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1343,
                  "startColumn": 5,
                  "endLine": 1343,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  [ \"${lines[4]}\" == 'ok 2 Fail once' ]\n  [ \"${lines[5]}\" == 'not ok 3 Override retries' ]\n\n  run cat \"$LOG\"\n  [ \"${lines[0]}\" == ' setup_file ' ]     # should only be executed once\n  [ \"${lines[22]}\" == ' teardown_file ' ] # should only be executed once\n  [ \"${#lines[@]}\" -eq 23 ]\n",
                    "rendered": {
                      "text": "  [ \"${lines[4]}\" == 'ok 2 Fail once' ]\n  [ \"${lines[5]}\" == 'not ok 3 Override retries' ]\n\n  run cat \"$LOG\"\n  [ \"${lines[0]}\" == ' setup_file ' ]     # should only be executed once\n  [ \"${lines[22]}\" == ' teardown_file ' ] # should only be executed once\n  [ \"${#lines[@]}\" -eq 23 ]\n",
                      "markdown": "`  [ \"${lines[4]}\" == 'ok 2 Fail once' ]\n  [ \"${lines[5]}\" == 'not ok 3 Override retries' ]\n\n  run cat \"$LOG\"\n  [ \"${lines[0]}\" == ' setup_file ' ]     # should only be executed once\n  [ \"${lines[22]}\" == ' teardown_file ' ] # should only be executed once\n  [ \"${#lines[@]}\" -eq 23 ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1280,
                  "startColumn": 5,
                  "endLine": 1280,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    # -23 -> only look at additions on the bats list\n    ! comm -23 <(normalize_variable_list <\"$BATS_DECLARED_VARIABLES_FILE\") \\\n      <(normalize_variable_list <<<\"$BASH_DECLARED_VARIABLES\") |\n      grep -v '^BATS_' # variables that are prefixed with BATS_ don't count\n  }\n  check_no_new_variables\n}\n",
                    "rendered": {
                      "text": "    # -23 -> only look at additions on the bats list\n    ! comm -23 <(normalize_variable_list <\"$BATS_DECLARED_VARIABLES_FILE\") \\\n      <(normalize_variable_list <<<\"$BASH_DECLARED_VARIABLES\") |\n      grep -v '^BATS_' # variables that are prefixed with BATS_ don't count\n  }\n  check_no_new_variables\n}\n",
                      "markdown": "`    # -23 -> only look at additions on the bats list\n    ! comm -23 <(normalize_variable_list <\"$BATS_DECLARED_VARIABLES_FILE\") \\\n      <(normalize_variable_list <<<\"$BASH_DECLARED_VARIABLES\") |\n      grep -v '^BATS_' # variables that are prefixed with BATS_ don't count\n  }\n  check_no_new_variables\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1274,
                  "startColumn": 99,
                  "endLine": 1274,
                  "endColumn": 105,
                  "snippet": {
                    "text": "  local BATS_DECLARED_VARIABLES_FILE=\"${BATS_TEST_TMPDIR}/variables.log\"\n  bats_require_minimum_version 1.5.0\n  # now capture bats @test environment\n  reentrant_run -0 env -i PATH=\"$PATH\" BATS_DECLARED_VARIABLES_FILE=\"$BATS_DECLARED_VARIABLES_FILE\" bash \"${BATS_ROOT}/bin/bats\" \"${FIXTURE_ROOT}/issue-519.bats\"\n  # use function to allow failing via !, run is a bit unwieldy with the pipe and subshells\n  check_no_new_variables() {\n    # -23 -> only look at additions on the bats list\n",
                    "rendered": {
                      "text": "  local BATS_DECLARED_VARIABLES_FILE=\"${BATS_TEST_TMPDIR}/variables.log\"\n  bats_require_minimum_version 1.5.0\n  # now capture bats @test environment\n  reentrant_run -0 env -i PATH=\"$PATH\" BATS_DECLARED_VARIABLES_FILE=\"$BATS_DECLARED_VARIABLES_FILE\" bash \"${BATS_ROOT}/bin/bats\" \"${FIXTURE_ROOT}/issue-519.bats\"\n  # use function to allow failing via !, run is a bit unwieldy with the pipe and subshells\n  check_no_new_variables() {\n    # -23 -> only look at additions on the bats list\n",
                      "markdown": "`  local BATS_DECLARED_VARIABLES_FILE=\"${BATS_TEST_TMPDIR}/variables.log\"\n  bats_require_minimum_version 1.5.0\n  # now capture bats @test environment\n  reentrant_run -0 env -i PATH=\"$PATH\" BATS_DECLARED_VARIABLES_FILE=\"$BATS_DECLARED_VARIABLES_FILE\" bash \"${BATS_ROOT}/bin/bats\" \"${FIXTURE_ROOT}/issue-519.bats\"\n  # use function to allow failing via !, run is a bit unwieldy with the pipe and subshells\n  check_no_new_variables() {\n    # -23 -> only look at additions on the bats list\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1274,
                  "startColumn": 18,
                  "endLine": 1274,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  local BATS_DECLARED_VARIABLES_FILE=\"${BATS_TEST_TMPDIR}/variables.log\"\n  bats_require_minimum_version 1.5.0\n  # now capture bats @test environment\n  reentrant_run -0 env -i PATH=\"$PATH\" BATS_DECLARED_VARIABLES_FILE=\"$BATS_DECLARED_VARIABLES_FILE\" bash \"${BATS_ROOT}/bin/bats\" \"${FIXTURE_ROOT}/issue-519.bats\"\n  # use function to allow failing via !, run is a bit unwieldy with the pipe and subshells\n  check_no_new_variables() {\n    # -23 -> only look at additions on the bats list\n",
                    "rendered": {
                      "text": "  local BATS_DECLARED_VARIABLES_FILE=\"${BATS_TEST_TMPDIR}/variables.log\"\n  bats_require_minimum_version 1.5.0\n  # now capture bats @test environment\n  reentrant_run -0 env -i PATH=\"$PATH\" BATS_DECLARED_VARIABLES_FILE=\"$BATS_DECLARED_VARIABLES_FILE\" bash \"${BATS_ROOT}/bin/bats\" \"${FIXTURE_ROOT}/issue-519.bats\"\n  # use function to allow failing via !, run is a bit unwieldy with the pipe and subshells\n  check_no_new_variables() {\n    # -23 -> only look at additions on the bats list\n",
                      "markdown": "`  local BATS_DECLARED_VARIABLES_FILE=\"${BATS_TEST_TMPDIR}/variables.log\"\n  bats_require_minimum_version 1.5.0\n  # now capture bats @test environment\n  reentrant_run -0 env -i PATH=\"$PATH\" BATS_DECLARED_VARIABLES_FILE=\"$BATS_DECLARED_VARIABLES_FILE\" bash \"${BATS_ROOT}/bin/bats\" \"${FIXTURE_ROOT}/issue-519.bats\"\n  # use function to allow failing via !, run is a bit unwieldy with the pipe and subshells\n  check_no_new_variables() {\n    # -23 -> only look at additions on the bats list\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1268,
                  "startColumn": 11,
                  "endLine": 1268,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    }\n  fi\n\n  # get the bash baseline\n  # add variables that should be ignored like PIPESTATUS here\n  BASH_DECLARED_VARIABLES=$(env -i PIPESTATUS= \"$BASH\" -c \"declare -p\")\n  local BATS_DECLARED_VARIABLES_FILE=\"${BATS_TEST_TMPDIR}/variables.log\"\n",
                    "rendered": {
                      "text": "    }\n  fi\n\n  # get the bash baseline\n  # add variables that should be ignored like PIPESTATUS here\n  BASH_DECLARED_VARIABLES=$(env -i PIPESTATUS= \"$BASH\" -c \"declare -p\")\n  local BATS_DECLARED_VARIABLES_FILE=\"${BATS_TEST_TMPDIR}/variables.log\"\n",
                      "markdown": "`    }\n  fi\n\n  # get the bash baseline\n  # add variables that should be ignored like PIPESTATUS here\n  BASH_DECLARED_VARIABLES=$(env -i PIPESTATUS= \"$BASH\" -c \"declare -p\")\n  local BATS_DECLARED_VARIABLES_FILE=\"${BATS_TEST_TMPDIR}/variables.log\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1264,
                  "startColumn": 12,
                  "endLine": 1265,
                  "snippet": {
                    "text": "        if [[ \"$_declare\" == declare ]]; then # skip multiline variables' values\n          printf \"%s\\n\" \"$variable\"\n        fi\n      done | sort\n    }\n  fi\n\n  # get the bash baseline\n",
                    "rendered": {
                      "text": "        if [[ \"$_declare\" == declare ]]; then # skip multiline variables' values\n          printf \"%s\\n\" \"$variable\"\n        fi\n      done | sort\n    }\n  fi\n\n  # get the bash baseline\n",
                      "markdown": "`        if [[ \"$_declare\" == declare ]]; then # skip multiline variables' values\n          printf \"%s\\n\" \"$variable\"\n        fi\n      done | sort\n    }\n  fi\n\n  # get the bash baseline\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1255,
                  "startColumn": 12,
                  "endLine": 1256,
                  "snippet": {
                    "text": "        elif [[ $line =~ $plain_regex ]]; then\n          printf \"%s\\n\" \"${BASH_REMATCH[1]}\"\n        fi\n      done | sort\n    }\n  else\n    normalize_variable_list() {\n      # `declare -p`: declare -X VAR_NAME=\"VALUE\"\n",
                    "rendered": {
                      "text": "        elif [[ $line =~ $plain_regex ]]; then\n          printf \"%s\\n\" \"${BASH_REMATCH[1]}\"\n        fi\n      done | sort\n    }\n  else\n    normalize_variable_list() {\n      # `declare -p`: declare -X VAR_NAME=\"VALUE\"\n",
                      "markdown": "`        elif [[ $line =~ $plain_regex ]]; then\n          printf \"%s\\n\" \"${BASH_REMATCH[1]}\"\n        fi\n      done | sort\n    }\n  else\n    normalize_variable_list() {\n      # `declare -p`: declare -X VAR_NAME=\"VALUE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1238,
                  "startColumn": 63,
                  "endLine": 1239,
                  "snippet": {
                    "text": "\n@test \"Debug trap must only override variables that are prefixed with BATS_ (issue #519)\" {\n  # use declare -p to gather variables in pristine bash and bats @test environment\n  # then compare which ones are introduced in @test compared to bash\n\n  # make declare's output more readable and suitable for `comm`\n  if [[ \"${BASH_VERSINFO[0]}\" -eq 3 ]]; then\n    normalize_variable_list() {\n",
                    "rendered": {
                      "text": "\n@test \"Debug trap must only override variables that are prefixed with BATS_ (issue #519)\" {\n  # use declare -p to gather variables in pristine bash and bats @test environment\n  # then compare which ones are introduced in @test compared to bash\n\n  # make declare's output more readable and suitable for `comm`\n  if [[ \"${BASH_VERSINFO[0]}\" -eq 3 ]]; then\n    normalize_variable_list() {\n",
                      "markdown": "`\n@test \"Debug trap must only override variables that are prefixed with BATS_ (issue #519)\" {\n  # use declare -p to gather variables in pristine bash and bats @test environment\n  # then compare which ones are introduced in @test compared to bash\n\n  # make declare's output more readable and suitable for `comm`\n  if [[ \"${BASH_VERSINFO[0]}\" -eq 3 ]]; then\n    normalize_variable_list() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1237,
                  "startColumn": 50,
                  "endLine": 1237,
                  "endColumn": 56,
                  "snippet": {
                    "text": "}\n\n@test \"Debug trap must only override variables that are prefixed with BATS_ (issue #519)\" {\n  # use declare -p to gather variables in pristine bash and bats @test environment\n  # then compare which ones are introduced in @test compared to bash\n\n  # make declare's output more readable and suitable for `comm`\n",
                    "rendered": {
                      "text": "}\n\n@test \"Debug trap must only override variables that are prefixed with BATS_ (issue #519)\" {\n  # use declare -p to gather variables in pristine bash and bats @test environment\n  # then compare which ones are introduced in @test compared to bash\n\n  # make declare's output more readable and suitable for `comm`\n",
                      "markdown": "`}\n\n@test \"Debug trap must only override variables that are prefixed with BATS_ (issue #519)\" {\n  # use declare -p to gather variables in pristine bash and bats @test environment\n  # then compare which ones are introduced in @test compared to bash\n\n  # make declare's output more readable and suitable for `comm`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1165,
                  "startColumn": 28,
                  "endLine": 1165,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    skip \"this test requires flock not to be installed\"\n  fi\n  if command -v shlock; then\n    skip \"this test requires flock not to be installed\"\n  fi\n\n  bats_require_minimum_version 1.5.0\n",
                    "rendered": {
                      "text": "    skip \"this test requires flock not to be installed\"\n  fi\n  if command -v shlock; then\n    skip \"this test requires flock not to be installed\"\n  fi\n\n  bats_require_minimum_version 1.5.0\n",
                      "markdown": "`    skip \"this test requires flock not to be installed\"\n  fi\n  if command -v shlock; then\n    skip \"this test requires flock not to be installed\"\n  fi\n\n  bats_require_minimum_version 1.5.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1162,
                  "startColumn": 28,
                  "endLine": 1162,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    skip \"this test requires GNU parallel to be installed\"\n  fi\n  if command -v flock; then\n    skip \"this test requires flock not to be installed\"\n  fi\n  if command -v shlock; then\n    skip \"this test requires flock not to be installed\"\n",
                    "rendered": {
                      "text": "    skip \"this test requires GNU parallel to be installed\"\n  fi\n  if command -v flock; then\n    skip \"this test requires flock not to be installed\"\n  fi\n  if command -v shlock; then\n    skip \"this test requires flock not to be installed\"\n",
                      "markdown": "`    skip \"this test requires GNU parallel to be installed\"\n  fi\n  if command -v flock; then\n    skip \"this test requires flock not to be installed\"\n  fi\n  if command -v shlock; then\n    skip \"this test requires flock not to be installed\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1157,
                  "startColumn": 25,
                  "endLine": 1157,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  [ -e \"$OUTPUT_DIR/1-test with %2F in %2F name.log\" ]\n}\n\n@test \"Tell about missing flock and shlock\" {\n  if ! command -v parallel; then\n    skip \"this test requires GNU parallel to be installed\"\n  fi\n",
                    "rendered": {
                      "text": "  [ -e \"$OUTPUT_DIR/1-test with %2F in %2F name.log\" ]\n}\n\n@test \"Tell about missing flock and shlock\" {\n  if ! command -v parallel; then\n    skip \"this test requires GNU parallel to be installed\"\n  fi\n",
                      "markdown": "`  [ -e \"$OUTPUT_DIR/1-test with %2F in %2F name.log\" ]\n}\n\n@test \"Tell about missing flock and shlock\" {\n  if ! command -v parallel; then\n    skip \"this test requires GNU parallel to be installed\"\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1104,
                  "startColumn": 18,
                  "endLine": 1104,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n@test \"BATS_VERBOSE_RUN=1 also prints output\" {\n  bats_require_minimum_version 1.5.0\n  reentrant_run -1 env BATS_VERBOSE_RUN=1 bats \"$FIXTURE_ROOT/verbose-run.bats\"\n  [ \"${lines[0]}\" == '1..1' ]\n  [ \"${lines[1]}\" == 'not ok 1 test' ]\n  [ \"${lines[2]}\" == \"# (in test file $RELATIVE_FIXTURE_ROOT/verbose-run.bats, line 3)\" ]\n",
                    "rendered": {
                      "text": "\n@test \"BATS_VERBOSE_RUN=1 also prints output\" {\n  bats_require_minimum_version 1.5.0\n  reentrant_run -1 env BATS_VERBOSE_RUN=1 bats \"$FIXTURE_ROOT/verbose-run.bats\"\n  [ \"${lines[0]}\" == '1..1' ]\n  [ \"${lines[1]}\" == 'not ok 1 test' ]\n  [ \"${lines[2]}\" == \"# (in test file $RELATIVE_FIXTURE_ROOT/verbose-run.bats, line 3)\" ]\n",
                      "markdown": "`\n@test \"BATS_VERBOSE_RUN=1 also prints output\" {\n  bats_require_minimum_version 1.5.0\n  reentrant_run -1 env BATS_VERBOSE_RUN=1 bats \"$FIXTURE_ROOT/verbose-run.bats\"\n  [ \"${lines[0]}\" == '1..1' ]\n  [ \"${lines[1]}\" == 'not ok 1 test' ]\n  [ \"${lines[2]}\" == \"# (in test file $RELATIVE_FIXTURE_ROOT/verbose-run.bats, line 3)\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1037,
                  "startColumn": 1,
                  "endLine": 1037,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n  grep test/fixtures <<<\"$output\"\n  grep install.sh <<<\"$output\"\n}\n\n@test \"BATS_RUN_COMMAND: test content of variable\" {\n",
                    "rendered": {
                      "text": "  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n  grep test/fixtures <<<\"$output\"\n  grep install.sh <<<\"$output\"\n}\n\n@test \"BATS_RUN_COMMAND: test content of variable\" {\n",
                      "markdown": "`  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n  grep test/fixtures <<<\"$output\"\n  grep install.sh <<<\"$output\"\n}\n\n@test \"BATS_RUN_COMMAND: test content of variable\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1036,
                  "startColumn": 1,
                  "endLine": 1036,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n  grep test/fixtures <<<\"$output\"\n  grep install.sh <<<\"$output\"\n}\n\n",
                    "rendered": {
                      "text": "  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n  grep test/fixtures <<<\"$output\"\n  grep install.sh <<<\"$output\"\n}\n\n",
                      "markdown": "`  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n  grep test/fixtures <<<\"$output\"\n  grep install.sh <<<\"$output\"\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1035,
                  "startColumn": 1,
                  "endLine": 1035,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  grep contrib/ <<<\"$output\"\n  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n  grep test/fixtures <<<\"$output\"\n  grep install.sh <<<\"$output\"\n}\n",
                    "rendered": {
                      "text": "  grep contrib/ <<<\"$output\"\n  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n  grep test/fixtures <<<\"$output\"\n  grep install.sh <<<\"$output\"\n}\n",
                      "markdown": "`  grep contrib/ <<<\"$output\"\n  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n  grep test/fixtures <<<\"$output\"\n  grep install.sh <<<\"$output\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1034,
                  "startColumn": 1,
                  "endLine": 1034,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  grep bin/bats <<<\"$output\"\n  grep contrib/ <<<\"$output\"\n  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n  grep test/fixtures <<<\"$output\"\n  grep install.sh <<<\"$output\"\n",
                    "rendered": {
                      "text": "  grep bin/bats <<<\"$output\"\n  grep contrib/ <<<\"$output\"\n  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n  grep test/fixtures <<<\"$output\"\n  grep install.sh <<<\"$output\"\n",
                      "markdown": "`  grep bin/bats <<<\"$output\"\n  grep contrib/ <<<\"$output\"\n  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n  grep test/fixtures <<<\"$output\"\n  grep install.sh <<<\"$output\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1033,
                  "startColumn": 1,
                  "endLine": 1033,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n  grep bin/bats <<<\"$output\"\n  grep contrib/ <<<\"$output\"\n  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n  grep test/fixtures <<<\"$output\"\n",
                    "rendered": {
                      "text": "\n  grep bin/bats <<<\"$output\"\n  grep contrib/ <<<\"$output\"\n  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n  grep test/fixtures <<<\"$output\"\n",
                      "markdown": "`\n  grep bin/bats <<<\"$output\"\n  grep contrib/ <<<\"$output\"\n  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n  grep test/fixtures <<<\"$output\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1032,
                  "startColumn": 1,
                  "endLine": 1032,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  echo \"$output\"\n\n  grep bin/bats <<<\"$output\"\n  grep contrib/ <<<\"$output\"\n  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n",
                    "rendered": {
                      "text": "  echo \"$output\"\n\n  grep bin/bats <<<\"$output\"\n  grep contrib/ <<<\"$output\"\n  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n",
                      "markdown": "`  echo \"$output\"\n\n  grep bin/bats <<<\"$output\"\n  grep contrib/ <<<\"$output\"\n  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n  grep libexec/bats-core/ <<<\"$output\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 1031,
                  "startColumn": 1,
                  "endLine": 1031,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  run \"./shellcheck.sh\" --list\n  echo \"$output\"\n\n  grep bin/bats <<<\"$output\"\n  grep contrib/ <<<\"$output\"\n  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n",
                    "rendered": {
                      "text": "  run \"./shellcheck.sh\" --list\n  echo \"$output\"\n\n  grep bin/bats <<<\"$output\"\n  grep contrib/ <<<\"$output\"\n  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n",
                      "markdown": "`  run \"./shellcheck.sh\" --list\n  echo \"$output\"\n\n  grep bin/bats <<<\"$output\"\n  grep contrib/ <<<\"$output\"\n  grep docker/ <<<\"$output\"\n  grep lib/bats-core/ <<<\"$output\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 997,
                  "startColumn": 5,
                  "endLine": 997,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n  echo \"$output\"\n\n  [ \"${lines[0]}\" == \"1..1\" ]\n",
                    "rendered": {
                      "text": "  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n  echo \"$output\"\n\n  [ \"${lines[0]}\" == \"1..1\" ]\n",
                      "markdown": "`  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n  echo \"$output\"\n\n  [ \"${lines[0]}\" == \"1..1\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 990,
                  "startColumn": 3,
                  "endLine": 990,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n",
                    "rendered": {
                      "text": "\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n",
                      "markdown": "`\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 959,
                  "startColumn": 5,
                  "endLine": 959,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n  echo \"$output\"\n\n  [ \"${lines[1]}\" == \"not ok 1 setup_file failed\" ]\n",
                    "rendered": {
                      "text": "  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n  echo \"$output\"\n\n  [ \"${lines[1]}\" == \"not ok 1 setup_file failed\" ]\n",
                      "markdown": "`  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n  echo \"$output\"\n\n  [ \"${lines[1]}\" == \"not ok 1 setup_file failed\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 952,
                  "startColumn": 3,
                  "endLine": 952,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n",
                    "rendered": {
                      "text": "\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n",
                      "markdown": "`\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 920,
                  "startColumn": 5,
                  "endLine": 920,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n  echo \"$output\"\n\n  [ \"${lines[1]}\" == \"not ok 1 empty\" ]\n",
                    "rendered": {
                      "text": "  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n  echo \"$output\"\n\n  [ \"${lines[1]}\" == \"not ok 1 empty\" ]\n",
                      "markdown": "`  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n  echo \"$output\"\n\n  [ \"${lines[1]}\" == \"not ok 1 empty\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 913,
                  "startColumn": 3,
                  "endLine": 913,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n",
                    "rendered": {
                      "text": "\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n",
                      "markdown": "`\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 882,
                  "startColumn": 5,
                  "endLine": 882,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n\n  [ \"${lines[1]}\" == \"not ok 1 test\" ]\n  # due to scheduling the exact line will vary but we should exit with 130\n",
                    "rendered": {
                      "text": "  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n\n  [ \"${lines[1]}\" == \"not ok 1 test\" ]\n  # due to scheduling the exact line will vary but we should exit with 130\n",
                      "markdown": "`  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n\n  [ \"${lines[1]}\" == \"not ok 1 test\" ]\n  # due to scheduling the exact line will vary but we should exit with 130\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 875,
                  "startColumn": 3,
                  "endLine": 875,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n",
                    "rendered": {
                      "text": "\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n",
                      "markdown": "`\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 842,
                  "startColumn": 5,
                  "endLine": 842,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n\n  [ \"${lines[1]}\" == \"not ok 1 test\" ]\n  # due to scheduling the exact line will vary but we should exit with 130\n",
                    "rendered": {
                      "text": "  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n\n  [ \"${lines[1]}\" == \"not ok 1 test\" ]\n  # due to scheduling the exact line will vary but we should exit with 130\n",
                      "markdown": "`  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n\n  [ \"${lines[1]}\" == \"not ok 1 test\" ]\n  # due to scheduling the exact line will vary but we should exit with 130\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 835,
                  "startColumn": 3,
                  "endLine": 835,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n",
                    "rendered": {
                      "text": "\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n",
                      "markdown": "`\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 5,
                  "endLine": 798,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n  echo \"$output\"\n\n  [ \"${lines[1]}\" == \"not ok 1 test\" ]\n",
                    "rendered": {
                      "text": "  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n  echo \"$output\"\n\n  [ \"${lines[1]}\" == \"not ok 1 test\" ]\n",
                      "markdown": "`  # the test suite must be marked as failed!\n  wait $SUBPROCESS_PID && return 1\n\n  run cat \"$TEMPFILE\"\n  echo \"$output\"\n\n  [ \"${lines[1]}\" == \"not ok 1 test\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 3,
                  "endLine": 791,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n",
                    "rendered": {
                      "text": "\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n",
                      "markdown": "`\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n    false\n  )\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 787,
                  "startColumn": 29,
                  "endLine": 788,
                  "snippet": {
                    "text": "  single-use-latch::wait hang_in_test 1 10 || (\n    cat \"$TEMPFILE\"\n    false\n  ) # still forward output on timeout\n\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n",
                    "rendered": {
                      "text": "  single-use-latch::wait hang_in_test 1 10 || (\n    cat \"$TEMPFILE\"\n    false\n  ) # still forward output on timeout\n\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n",
                      "markdown": "`  single-use-latch::wait hang_in_test 1 10 || (\n    cat \"$TEMPFILE\"\n    false\n  ) # still forward output on timeout\n\n  # emulate CTRL-C by sending SIGINT to the whole process group\n  kill -SIGINT -- -$SUBPROCESS_PID || (\n    cat \"$TEMPFILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 785,
                  "startColumn": 3,
                  "endLine": 785,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  SUBPROCESS_PID=$!\n\n  single-use-latch::wait hang_in_test 1 10 || (\n    cat \"$TEMPFILE\"\n    false\n  ) # still forward output on timeout\n\n",
                    "rendered": {
                      "text": "  SUBPROCESS_PID=$!\n\n  single-use-latch::wait hang_in_test 1 10 || (\n    cat \"$TEMPFILE\"\n    false\n  ) # still forward output on timeout\n\n",
                      "markdown": "`  SUBPROCESS_PID=$!\n\n  single-use-latch::wait hang_in_test 1 10 || (\n    cat \"$TEMPFILE\"\n    false\n  ) # still forward output on timeout\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 100,
                  "endLine": 752,
                  "snippet": {
                    "text": "  reentrant_run bats -j 2 \"$FIXTURE_ROOT/issue-433\"\n\n  [ \"$status\" -eq 0 ]\n  [[ \"$output\" != *\"No such file or directory\"* ]] || exit 1 # ensure failures are detected with old bash\n}\n\n@test \"Failure in free code (see #399)\" {\n  reentrant_run bats --tap \"$FIXTURE_ROOT/failure_in_free_code.bats\"\n",
                    "rendered": {
                      "text": "  reentrant_run bats -j 2 \"$FIXTURE_ROOT/issue-433\"\n\n  [ \"$status\" -eq 0 ]\n  [[ \"$output\" != *\"No such file or directory\"* ]] || exit 1 # ensure failures are detected with old bash\n}\n\n@test \"Failure in free code (see #399)\" {\n  reentrant_run bats --tap \"$FIXTURE_ROOT/failure_in_free_code.bats\"\n",
                      "markdown": "`  reentrant_run bats -j 2 \"$FIXTURE_ROOT/issue-433\"\n\n  [ \"$status\" -eq 0 ]\n  [[ \"$output\" != *\"No such file or directory\"* ]] || exit 1 # ensure failures are detected with old bash\n}\n\n@test \"Failure in free code (see #399)\" {\n  reentrant_run bats --tap \"$FIXTURE_ROOT/failure_in_free_code.bats\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 747,
                  "startColumn": 10,
                  "endLine": 747,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n@test \"Parallel mode works on MacOS with over subscription (issue #433)\" {\n  type -p \"${BATS_PARALLEL_BINARY_NAME:-\"parallel\"}\" &>/dev/null || skip \"--jobs requires GNU parallel\"\n  (type -p flock &>/dev/null || type -p shlock &>/dev/null) || skip \"--jobs requires flock/shlock\"\n  reentrant_run bats -j 2 \"$FIXTURE_ROOT/issue-433\"\n\n  [ \"$status\" -eq 0 ]\n",
                    "rendered": {
                      "text": "\n@test \"Parallel mode works on MacOS with over subscription (issue #433)\" {\n  type -p \"${BATS_PARALLEL_BINARY_NAME:-\"parallel\"}\" &>/dev/null || skip \"--jobs requires GNU parallel\"\n  (type -p flock &>/dev/null || type -p shlock &>/dev/null) || skip \"--jobs requires flock/shlock\"\n  reentrant_run bats -j 2 \"$FIXTURE_ROOT/issue-433\"\n\n  [ \"$status\" -eq 0 ]\n",
                      "markdown": "`\n@test \"Parallel mode works on MacOS with over subscription (issue #433)\" {\n  type -p \"${BATS_PARALLEL_BINARY_NAME:-\"parallel\"}\" &>/dev/null || skip \"--jobs requires GNU parallel\"\n  (type -p flock &>/dev/null || type -p shlock &>/dev/null) || skip \"--jobs requires flock/shlock\"\n  reentrant_run bats -j 2 \"$FIXTURE_ROOT/issue-433\"\n\n  [ \"$status\" -eq 0 ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 705,
                  "startColumn": 15,
                  "endLine": 705,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n  [ -d \"$TEST_TMPDIR\" ]\n\n  # should also find preprocessed files!\n  [ \"$(find \"$TEST_TMPDIR\" -name '*.src' | wc -l)\" -gt 0 ]\n}\n\n",
                    "rendered": {
                      "text": "\n  [ -d \"$TEST_TMPDIR\" ]\n\n  # should also find preprocessed files!\n  [ \"$(find \"$TEST_TMPDIR\" -name '*.src' | wc -l)\" -gt 0 ]\n}\n\n",
                      "markdown": "`\n  [ -d \"$TEST_TMPDIR\" ]\n\n  # should also find preprocessed files!\n  [ \"$(find \"$TEST_TMPDIR\" -name '*.src' | wc -l)\" -gt 0 ]\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 685,
                  "startColumn": 15,
                  "endLine": 685,
                  "endColumn": 21,
                  "snippet": {
                    "text": "@test \"Test nounset does not trip up bats' internals (see #385)\" {\n  # don't export nounset within this file or we might trip up the testsuite itself,\n  # getting bad diagnostics\n  reentrant_run bash -c \"set -o nounset; export SHELLOPTS; bats --tap '$FIXTURE_ROOT/passing.bats'\"\n  echo \"$output\"\n  [ \"${lines[0]}\" = \"1..1\" ]\n  [ \"${lines[1]}\" = \"ok 1 a passing test\" ]\n",
                    "rendered": {
                      "text": "@test \"Test nounset does not trip up bats' internals (see #385)\" {\n  # don't export nounset within this file or we might trip up the testsuite itself,\n  # getting bad diagnostics\n  reentrant_run bash -c \"set -o nounset; export SHELLOPTS; bats --tap '$FIXTURE_ROOT/passing.bats'\"\n  echo \"$output\"\n  [ \"${lines[0]}\" = \"1..1\" ]\n  [ \"${lines[1]}\" = \"ok 1 a passing test\" ]\n",
                      "markdown": "`@test \"Test nounset does not trip up bats' internals (see #385)\" {\n  # don't export nounset within this file or we might trip up the testsuite itself,\n  # getting bad diagnostics\n  reentrant_run bash -c \"set -o nounset; export SHELLOPTS; bats --tap '$FIXTURE_ROOT/passing.bats'\"\n  echo \"$output\"\n  [ \"${lines[0]}\" = \"1..1\" ]\n  [ \"${lines[1]}\" = \"ok 1 a passing test\" ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 628,
                  "startColumn": 5,
                  "endLine": 628,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  run grep \"file1\" \"$TEMPFILE\"\n  [[ ${#lines[@]} -eq 3 ]]\n\n  run grep \"file2\" \"$TEMPFILE\"\n  [[ ${#lines[@]} -eq 4 ]]\n}\n\n",
                    "rendered": {
                      "text": "  run grep \"file1\" \"$TEMPFILE\"\n  [[ ${#lines[@]} -eq 3 ]]\n\n  run grep \"file2\" \"$TEMPFILE\"\n  [[ ${#lines[@]} -eq 4 ]]\n}\n\n",
                      "markdown": "`  run grep \"file1\" \"$TEMPFILE\"\n  [[ ${#lines[@]} -eq 3 ]]\n\n  run grep \"file2\" \"$TEMPFILE\"\n  [[ ${#lines[@]} -eq 4 ]]\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 625,
                  "startColumn": 5,
                  "endLine": 625,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n  cat \"$TEMPFILE\"\n\n  run grep \"file1\" \"$TEMPFILE\"\n  [[ ${#lines[@]} -eq 3 ]]\n\n  run grep \"file2\" \"$TEMPFILE\"\n",
                    "rendered": {
                      "text": "\n  cat \"$TEMPFILE\"\n\n  run grep \"file1\" \"$TEMPFILE\"\n  [[ ${#lines[@]} -eq 3 ]]\n\n  run grep \"file2\" \"$TEMPFILE\"\n",
                      "markdown": "`\n  cat \"$TEMPFILE\"\n\n  run grep \"file1\" \"$TEMPFILE\"\n  [[ ${#lines[@]} -eq 3 ]]\n\n  run grep \"file2\" \"$TEMPFILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 623,
                  "startColumn": 1,
                  "endLine": 623,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  export TEMPFILE=\"$BATS_TEST_TMPDIR/$BATS_TEST_NAME.log\"\n  reentrant_run bats \"$FIXTURE_ROOT/evaluation_count/\"\n\n  cat \"$TEMPFILE\"\n\n  run grep \"file1\" \"$TEMPFILE\"\n  [[ ${#lines[@]} -eq 3 ]]\n",
                    "rendered": {
                      "text": "  export TEMPFILE=\"$BATS_TEST_TMPDIR/$BATS_TEST_NAME.log\"\n  reentrant_run bats \"$FIXTURE_ROOT/evaluation_count/\"\n\n  cat \"$TEMPFILE\"\n\n  run grep \"file1\" \"$TEMPFILE\"\n  [[ ${#lines[@]} -eq 3 ]]\n",
                      "markdown": "`  export TEMPFILE=\"$BATS_TEST_TMPDIR/$BATS_TEST_NAME.log\"\n  reentrant_run bats \"$FIXTURE_ROOT/evaluation_count/\"\n\n  cat \"$TEMPFILE\"\n\n  run grep \"file1\" \"$TEMPFILE\"\n  [[ ${#lines[@]} -eq 3 ]]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 614,
                  "startColumn": 1,
                  "endLine": 614,
                  "endColumn": 5,
                  "snippet": {
                    "text": "@test \"filenames with tab can be used\" {\n  [[ \"$OSTYPE\" == \"linux\"* ]] || skip \"FS cannot deal with tabs in filenames\"\n\n  cp \"${FIXTURE_ROOT}/tab in filename.bats\" \"${BATS_TEST_TMPDIR}/tab\"$'\\t'\"in filename.bats\"\n  bats \"${BATS_TEST_TMPDIR}/tab\"$'\\t'\"in filename.bats\"\n}\n\n",
                    "rendered": {
                      "text": "@test \"filenames with tab can be used\" {\n  [[ \"$OSTYPE\" == \"linux\"* ]] || skip \"FS cannot deal with tabs in filenames\"\n\n  cp \"${FIXTURE_ROOT}/tab in filename.bats\" \"${BATS_TEST_TMPDIR}/tab\"$'\\t'\"in filename.bats\"\n  bats \"${BATS_TEST_TMPDIR}/tab\"$'\\t'\"in filename.bats\"\n}\n\n",
                      "markdown": "`@test \"filenames with tab can be used\" {\n  [[ \"$OSTYPE\" == \"linux\"* ]] || skip \"FS cannot deal with tabs in filenames\"\n\n  cp \"${FIXTURE_ROOT}/tab in filename.bats\" \"${BATS_TEST_TMPDIR}/tab\"$'\\t'\"in filename.bats\"\n  bats \"${BATS_TEST_TMPDIR}/tab\"$'\\t'\"in filename.bats\"\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 587,
                  "startColumn": 15,
                  "endLine": 587,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1' | bats_test_count_validator\"\n  [[ $status -eq 0 ]]\n}\n\n",
                    "rendered": {
                      "text": "  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1' | bats_test_count_validator\"\n  [[ $status -eq 0 ]]\n}\n\n",
                      "markdown": "`  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1' | bats_test_count_validator\"\n  [[ $status -eq 0 ]]\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 584,
                  "startColumn": 15,
                  "endLine": 584,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  reentrant_run bash -c \"echo $'1..1\\n' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1' | bats_test_count_validator\"\n",
                    "rendered": {
                      "text": "  reentrant_run bash -c \"echo $'1..1\\n' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1' | bats_test_count_validator\"\n",
                      "markdown": "`  reentrant_run bash -c \"echo $'1..1\\n' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1' | bats_test_count_validator\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 15,
                  "endLine": 581,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  # shellcheck source=lib/bats-core/validator.bash\n  source \"$BATS_ROOT/$BATS_LIBDIR/bats-core/validator.bash\"\n  export -f bats_test_count_validator\n  reentrant_run bash -c \"echo $'1..1\\n' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n",
                    "rendered": {
                      "text": "  # shellcheck source=lib/bats-core/validator.bash\n  source \"$BATS_ROOT/$BATS_LIBDIR/bats-core/validator.bash\"\n  export -f bats_test_count_validator\n  reentrant_run bash -c \"echo $'1..1\\n' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n",
                      "markdown": "`  # shellcheck source=lib/bats-core/validator.bash\n  source \"$BATS_ROOT/$BATS_LIBDIR/bats-core/validator.bash\"\n  export -f bats_test_count_validator\n  reentrant_run bash -c \"echo $'1..1\\n' | bats_test_count_validator\"\n  [[ $status -ne 0 ]]\n\n  reentrant_run bash -c \"echo $'1..1\\nok 1\\nok 2' | bats_test_count_validator\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 65,
                  "endLine": 397,
                  "endColumn": 71,
                  "snippet": {
                    "text": "output for unset variable accesses.\n\nIf there's no output even when running the latest Bash, the problem may reside\nin the DEBUG trap handler. A particularly sneaky issue is that in Bash before\n4.1-alpha, an expansion of an empty array, e.g. \"\\${FOO[@]}\", is considered\nan unset variable access. The solution is to add a size check before the\nexpansion, e.g. [[ \"\\${#FOO[@]}\" -ne 0 ]].\n",
                    "rendered": {
                      "text": "output for unset variable accesses.\n\nIf there's no output even when running the latest Bash, the problem may reside\nin the DEBUG trap handler. A particularly sneaky issue is that in Bash before\n4.1-alpha, an expansion of an empty array, e.g. \"\\${FOO[@]}\", is considered\nan unset variable access. The solution is to add a size check before the\nexpansion, e.g. [[ \"\\${#FOO[@]}\" -ne 0 ]].\n",
                      "markdown": "`output for unset variable accesses.\n\nIf there's no output even when running the latest Bash, the problem may reside\nin the DEBUG trap handler. A particularly sneaky issue is that in Bash before\n4.1-alpha, an expansion of an empty array, e.g. \"\\${FOO[@]}\", is considered\nan unset variable access. The solution is to add a size check before the\nexpansion, e.g. [[ \"\\${#FOO[@]}\" -ne 0 ]].\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 3,
                  "endLine": 374,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    SHELLOPTS=nounset \\\n    \"${BATS_ROOT}/bin/bats\" \"$FIXTURE_ROOT/unofficial_bash_strict_mode.bats\"\n  if [[ \"$status\" -ne 0 || \"${lines[1]}\" != \"$expected\" ]]; then\n    cat <<END_OF_ERR_MSG\n\nThis test failed because the Bats internals are violating one of the\nconstraints imposed by:\n",
                    "rendered": {
                      "text": "    SHELLOPTS=nounset \\\n    \"${BATS_ROOT}/bin/bats\" \"$FIXTURE_ROOT/unofficial_bash_strict_mode.bats\"\n  if [[ \"$status\" -ne 0 || \"${lines[1]}\" != \"$expected\" ]]; then\n    cat <<END_OF_ERR_MSG\n\nThis test failed because the Bats internals are violating one of the\nconstraints imposed by:\n",
                      "markdown": "`    SHELLOPTS=nounset \\\n    \"${BATS_ROOT}/bin/bats\" \"$FIXTURE_ROOT/unofficial_bash_strict_mode.bats\"\n  if [[ \"$status\" -ne 0 || \"${lines[1]}\" != \"$expected\" ]]; then\n    cat <<END_OF_ERR_MSG\n\nThis test failed because the Bats internals are violating one of the\nconstraints imposed by:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 5,
                  "endLine": 366,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  # HOME required to avoid error from GNU Parallel\n  # Run Bats under SHELLOPTS=nounset (recursive `set -u`) to catch\n  # as many unset variable accesses as possible.\n  run env - \\\n    \"PATH=$PATH\" \\\n    \"HOME=$HOME\" \\\n    \"BATS_NO_PARALLELIZE_ACROSS_FILES=${BATS_NO_PARALLELIZE_ACROSS_FILES:-}\" \\\n",
                    "rendered": {
                      "text": "  # HOME required to avoid error from GNU Parallel\n  # Run Bats under SHELLOPTS=nounset (recursive `set -u`) to catch\n  # as many unset variable accesses as possible.\n  run env - \\\n    \"PATH=$PATH\" \\\n    \"HOME=$HOME\" \\\n    \"BATS_NO_PARALLELIZE_ACROSS_FILES=${BATS_NO_PARALLELIZE_ACROSS_FILES:-}\" \\\n",
                      "markdown": "`  # HOME required to avoid error from GNU Parallel\n  # Run Bats under SHELLOPTS=nounset (recursive `set -u`) to catch\n  # as many unset variable accesses as possible.\n  run env - \\\n    \"PATH=$PATH\" \\\n    \"HOME=$HOME\" \\\n    \"BATS_NO_PARALLELIZE_ACROSS_FILES=${BATS_NO_PARALLELIZE_ACROSS_FILES:-}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 12,
                  "endLine": 359,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    if [[ -z \"${BATS_NO_PARALLELIZE_ACROSS_FILES:-}\" ]]; then\n      type -p parallel &>/dev/null || skip \"Don't check file parallelized without GNU parallel\"\n    fi\n    (type -p flock &>/dev/null || type -p shlock &>/dev/null) || skip \"Don't check parallelized without flock/shlock \"\n  fi\n\n  # PATH required for windows\n",
                    "rendered": {
                      "text": "    if [[ -z \"${BATS_NO_PARALLELIZE_ACROSS_FILES:-}\" ]]; then\n      type -p parallel &>/dev/null || skip \"Don't check file parallelized without GNU parallel\"\n    fi\n    (type -p flock &>/dev/null || type -p shlock &>/dev/null) || skip \"Don't check parallelized without flock/shlock \"\n  fi\n\n  # PATH required for windows\n",
                      "markdown": "`    if [[ -z \"${BATS_NO_PARALLELIZE_ACROSS_FILES:-}\" ]]; then\n      type -p parallel &>/dev/null || skip \"Don't check file parallelized without GNU parallel\"\n    fi\n    (type -p flock &>/dev/null || type -p shlock &>/dev/null) || skip \"Don't check parallelized without flock/shlock \"\n  fi\n\n  # PATH required for windows\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 33,
                  "endLine": 353,
                  "endColumn": 39,
                  "snippet": {
                    "text": "}\n\n@test 'ensure compatibility with unofficial Bash strict mode' {\n  local expected='ok 1 unofficial Bash strict mode conditions met'\n\n  if [[ -n \"${BATS_NUMBER_OF_PARALLEL_JOBS:-}\" ]]; then\n    if [[ -z \"${BATS_NO_PARALLELIZE_ACROSS_FILES:-}\" ]]; then\n",
                    "rendered": {
                      "text": "}\n\n@test 'ensure compatibility with unofficial Bash strict mode' {\n  local expected='ok 1 unofficial Bash strict mode conditions met'\n\n  if [[ -n \"${BATS_NUMBER_OF_PARALLEL_JOBS:-}\" ]]; then\n    if [[ -z \"${BATS_NO_PARALLELIZE_ACROSS_FILES:-}\" ]]; then\n",
                      "markdown": "`}\n\n@test 'ensure compatibility with unofficial Bash strict mode' {\n  local expected='ok 1 unofficial Bash strict mode conditions met'\n\n  if [[ -n \"${BATS_NUMBER_OF_PARALLEL_JOBS:-}\" ]]; then\n    if [[ -z \"${BATS_NO_PARALLELIZE_ACROSS_FILES:-}\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 43,
                  "endLine": 352,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  [ \"${lines[3]}\" = \"ok 3 unquoted name\" ]\n}\n\n@test 'ensure compatibility with unofficial Bash strict mode' {\n  local expected='ok 1 unofficial Bash strict mode conditions met'\n\n  if [[ -n \"${BATS_NUMBER_OF_PARALLEL_JOBS:-}\" ]]; then\n",
                    "rendered": {
                      "text": "  [ \"${lines[3]}\" = \"ok 3 unquoted name\" ]\n}\n\n@test 'ensure compatibility with unofficial Bash strict mode' {\n  local expected='ok 1 unofficial Bash strict mode conditions met'\n\n  if [[ -n \"${BATS_NUMBER_OF_PARALLEL_JOBS:-}\" ]]; then\n",
                      "markdown": "`  [ \"${lines[3]}\" = \"ok 3 unquoted name\" ]\n}\n\n@test 'ensure compatibility with unofficial Bash strict mode' {\n  local expected='ok 1 unofficial Bash strict mode conditions met'\n\n  if [[ -n \"${BATS_NUMBER_OF_PARALLEL_JOBS:-}\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 15,
                  "endLine": 176,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n  reentrant_run bats \"$FIXTURE_ROOT/teardown.bats\"\n  [ $status -eq 1 ]\n  reentrant_run cat \"$BATS_TEST_SUITE_TMPDIR/teardown.log\"\n  [ ${#lines[@]} -eq 3 ]\n}\n\n",
                    "rendered": {
                      "text": "\n  reentrant_run bats \"$FIXTURE_ROOT/teardown.bats\"\n  [ $status -eq 1 ]\n  reentrant_run cat \"$BATS_TEST_SUITE_TMPDIR/teardown.log\"\n  [ ${#lines[@]} -eq 3 ]\n}\n\n",
                      "markdown": "`\n  reentrant_run bats \"$FIXTURE_ROOT/teardown.bats\"\n  [ $status -eq 1 ]\n  reentrant_run cat \"$BATS_TEST_SUITE_TMPDIR/teardown.log\"\n  [ ${#lines[@]} -eq 3 ]\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 15,
                  "endLine": 162,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n  reentrant_run bats \"$FIXTURE_ROOT/setup.bats\"\n  [ $status -eq 0 ]\n  reentrant_run cat \"$BATS_TEST_SUITE_TMPDIR/setup.log\"\n  [ ${#lines[@]} -eq 3 ]\n}\n\n",
                    "rendered": {
                      "text": "\n  reentrant_run bats \"$FIXTURE_ROOT/setup.bats\"\n  [ $status -eq 0 ]\n  reentrant_run cat \"$BATS_TEST_SUITE_TMPDIR/setup.log\"\n  [ ${#lines[@]} -eq 3 ]\n}\n\n",
                      "markdown": "`\n  reentrant_run bats \"$FIXTURE_ROOT/setup.bats\"\n  [ $status -eq 0 ]\n  reentrant_run cat \"$BATS_TEST_SUITE_TMPDIR/setup.log\"\n  [ ${#lines[@]} -eq 3 ]\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 14,
                  "endLine": 129,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  [ \"${lines[3]}\" = \"#   \\`[[ 1 == 2 ]]' failed\" ]\n}\n\n@test \"failing bash expression logs correct line number\" {\n  reentrant_run bats \"$FIXTURE_ROOT/failing_with_bash_expression.bats\"\n  [ \"$status\" -eq 1 ]\n  [ \"${#lines[@]}\" -eq 4 ]\n",
                    "rendered": {
                      "text": "  [ \"${lines[3]}\" = \"#   \\`[[ 1 == 2 ]]' failed\" ]\n}\n\n@test \"failing bash expression logs correct line number\" {\n  reentrant_run bats \"$FIXTURE_ROOT/failing_with_bash_expression.bats\"\n  [ \"$status\" -eq 1 ]\n  [ \"${#lines[@]}\" -eq 4 ]\n",
                      "markdown": "`  [ \"${lines[3]}\" = \"#   \\`[[ 1 == 2 ]]' failed\" ]\n}\n\n@test \"failing bash expression logs correct line number\" {\n  reentrant_run bats \"$FIXTURE_ROOT/failing_with_bash_expression.bats\"\n  [ \"$status\" -eq 1 ]\n  [ \"${#lines[@]}\" -eq 4 ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/bats.bats"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 14,
                  "endLine": 120,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  [ \"${lines[4]}\" = \"#   \\`failing_helper' failed\" ]\n}\n\n@test \"failing bash condition logs correct line number\" {\n  reentrant_run bats \"$FIXTURE_ROOT/failing_with_bash_cond.bats\"\n  [ \"$status\" -eq 1 ]\n  [ \"${#lines[@]}\" -eq 4 ]\n",
                    "rendered": {
                      "text": "  [ \"${lines[4]}\" = \"#   \\`failing_helper' failed\" ]\n}\n\n@test \"failing bash condition logs correct line number\" {\n  reentrant_run bats \"$FIXTURE_ROOT/failing_with_bash_cond.bats\"\n  [ \"$status\" -eq 1 ]\n  [ \"${#lines[@]}\" -eq 4 ]\n",
                      "markdown": "`  [ \"${lines[4]}\" = \"#   \\`failing_helper' failed\" ]\n}\n\n@test \"failing bash condition logs correct line number\" {\n  reentrant_run bats \"$FIXTURE_ROOT/failing_with_bash_cond.bats\"\n  [ \"$status\" -eq 1 ]\n  [ \"${#lines[@]}\" -eq 4 ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/concurrent-coordination.bash"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 13,
                  "endLine": 30,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  echo \"out-$$\" >>\"$BARRIER_FILE\"\n}\n\n# block until at least <latch-size> signalling threads have passed the latch\n# SINGLE_USE_LATCH_DIR must be exported!\nsingle-use-latch::wait() { # <latch-name> <latch-size> [<timeout-in-seconds> [<sleep-cycle-time>]]\n  local latch_name=\"$1\"\n",
                    "rendered": {
                      "text": "  echo \"out-$$\" >>\"$BARRIER_FILE\"\n}\n\n# block until at least <latch-size> signalling threads have passed the latch\n# SINGLE_USE_LATCH_DIR must be exported!\nsingle-use-latch::wait() { # <latch-name> <latch-size> [<timeout-in-seconds> [<sleep-cycle-time>]]\n  local latch_name=\"$1\"\n",
                      "markdown": "`  echo \"out-$$\" >>\"$BARRIER_FILE\"\n}\n\n# block until at least <latch-size> signalling threads have passed the latch\n# SINGLE_USE_LATCH_DIR must be exported!\nsingle-use-latch::wait() { # <latch-name> <latch-size> [<timeout-in-seconds> [<sleep-cycle-time>]]\n  local latch_name=\"$1\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/concurrent-coordination.bash"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 13,
                  "endLine": 1,
                  "endColumn": 17,
                  "snippet": {
                    "text": "# block until at least <barrier-size> processes of this barrier group entered the barrier\n# once this happened, all latecomers will go through immediately!\n# WARNING: a barrier group consists of all processes with the same barrier name *and* size!\nsingle-use-barrier() { # <barrier-name> <barrier-size> [<timeout-in-seconds> [<sleep-cycle-time>]]\n",
                    "rendered": {
                      "text": "# block until at least <barrier-size> processes of this barrier group entered the barrier\n# once this happened, all latecomers will go through immediately!\n# WARNING: a barrier group consists of all processes with the same barrier name *and* size!\nsingle-use-barrier() { # <barrier-name> <barrier-size> [<timeout-in-seconds> [<sleep-cycle-time>]]\n",
                      "markdown": "`# block until at least <barrier-size> processes of this barrier group entered the barrier\n# once this happened, all latecomers will go through immediately!\n# WARNING: a barrier group consists of all processes with the same barrier name *and* size!\nsingle-use-barrier() { # <barrier-name> <barrier-size> [<timeout-in-seconds> [<sleep-cycle-time>]]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/concurrent-coordination.bash"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 5,
                  "endLine": 44,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  while [[ (! -e \"$LATCH_FILE\") || $(wc -l <\"$LATCH_FILE\") -lt $latch_size ]]; do\n    if [[ $timeout_in_seconds -ne 0 && $((SECONDS - start)) -gt $timeout_in_seconds ]]; then\n      printf \"ERROR: single-use-latch %s timed out\\n\" \"$latch_name\" >&2\n      mv \"$LATCH_FILE\" \"$LATCH_FILE-timeout\"\n      return 1\n    fi\n    sleep \"$sleep_cycle_time\"\n",
                    "rendered": {
                      "text": "  while [[ (! -e \"$LATCH_FILE\") || $(wc -l <\"$LATCH_FILE\") -lt $latch_size ]]; do\n    if [[ $timeout_in_seconds -ne 0 && $((SECONDS - start)) -gt $timeout_in_seconds ]]; then\n      printf \"ERROR: single-use-latch %s timed out\\n\" \"$latch_name\" >&2\n      mv \"$LATCH_FILE\" \"$LATCH_FILE-timeout\"\n      return 1\n    fi\n    sleep \"$sleep_cycle_time\"\n",
                      "markdown": "`  while [[ (! -e \"$LATCH_FILE\") || $(wc -l <\"$LATCH_FILE\") -lt $latch_size ]]; do\n    if [[ $timeout_in_seconds -ne 0 && $((SECONDS - start)) -gt $timeout_in_seconds ]]; then\n      printf \"ERROR: single-use-latch %s timed out\\n\" \"$latch_name\" >&2\n      mv \"$LATCH_FILE\" \"$LATCH_FILE-timeout\"\n      return 1\n    fi\n    sleep \"$sleep_cycle_time\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/test/concurrent-coordination.bash"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 5,
                  "endLine": 20,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  # wait for others to enter\n  while [[ $(wc -l <\"$BARRIER_FILE\") -lt $barrier_size ]]; do\n    if [[ $timeout_in_seconds -ne 0 && $((SECONDS - start)) -gt $timeout_in_seconds ]]; then\n      mv \"$BARRIER_FILE\" \"$BARRIER_FILE-timeout\"\n      printf \"ERROR: single-use-barrier %s timed out\\n\" \"$BARRIER_SUFFIX\" >&2\n      return 1\n    fi\n",
                    "rendered": {
                      "text": "  # wait for others to enter\n  while [[ $(wc -l <\"$BARRIER_FILE\") -lt $barrier_size ]]; do\n    if [[ $timeout_in_seconds -ne 0 && $((SECONDS - start)) -gt $timeout_in_seconds ]]; then\n      mv \"$BARRIER_FILE\" \"$BARRIER_FILE-timeout\"\n      printf \"ERROR: single-use-barrier %s timed out\\n\" \"$BARRIER_SUFFIX\" >&2\n      return 1\n    fi\n",
                      "markdown": "`  # wait for others to enter\n  while [[ $(wc -l <\"$BARRIER_FILE\") -lt $barrier_size ]]; do\n    if [[ $timeout_in_seconds -ne 0 && $((SECONDS - start)) -gt $timeout_in_seconds ]]; then\n      mv \"$BARRIER_FILE\" \"$BARRIER_FILE-timeout\"\n      printf \"ERROR: single-use-barrier %s timed out\\n\" \"$BARRIER_SUFFIX\" >&2\n      return 1\n    fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 55,
                  "endLine": 117,
                  "endColumn": 61,
                  "snippet": {
                    "text": "`[[ ]]` (or `(( ))` did not fail my test\n----------------------------------------\n\nThe `set -e` handling of `[[ ]]` and `(( ))` changed in Bash 4.1. Older versions, like 3.2 on MacOS,\ndon't abort the test when they fail, unless they are the last command before the (test) function returns,\nmaking their exit code the return code.\n\n",
                    "rendered": {
                      "text": "`[[ ]]` (or `(( ))` did not fail my test\n----------------------------------------\n\nThe `set -e` handling of `[[ ]]` and `(( ))` changed in Bash 4.1. Older versions, like 3.2 on MacOS,\ndon't abort the test when they fail, unless they are the last command before the (test) function returns,\nmaking their exit code the return code.\n\n",
                      "markdown": "``[[ ]]` (or `(( ))` did not fail my test\n----------------------------------------\n\nThe `set -e` handling of `[[ ]]` and `(( ))` changed in Bash 4.1. Older versions, like 3.2 on MacOS,\ndon't abort the test when they fail, unless they are the last command before the (test) function returns,\nmaking their exit code the return code.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 15,
                  "endLine": 107,
                  "snippet": {
                    "text": "\nor use a function to wrap the pipe in:\n\n.. code-block:: bash\n\n    fun_with_pipes() {\n        echo foo | grep bar\n    }\n",
                    "rendered": {
                      "text": "\nor use a function to wrap the pipe in:\n\n.. code-block:: bash\n\n    fun_with_pipes() {\n        echo foo | grep bar\n    }\n",
                      "markdown": "`\nor use a function to wrap the pipe in:\n\n.. code-block:: bash\n\n    fun_with_pipes() {\n        echo foo | grep bar\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 7,
                  "endLine": 102,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n.. code-block:: bash\n\n    run bash -c 'echo foo | grep bar'\n\nor use a function to wrap the pipe in:\n\n",
                    "rendered": {
                      "text": "\n.. code-block:: bash\n\n    run bash -c 'echo foo | grep bar'\n\nor use a function to wrap the pipe in:\n\n",
                      "markdown": "`\n.. code-block:: bash\n\n    run bash -c 'echo foo | grep bar'\n\nor use a function to wrap the pipe in:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 15,
                  "endLine": 101,
                  "snippet": {
                    "text": "\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n\n.. code-block:: bash\n\n    run bash -c 'echo foo | grep bar'\n\nor use a function to wrap the pipe in:\n",
                    "rendered": {
                      "text": "\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n\n.. code-block:: bash\n\n    run bash -c 'echo foo | grep bar'\n\nor use a function to wrap the pipe in:\n",
                      "markdown": "`\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n\n.. code-block:: bash\n\n    run bash -c 'echo foo | grep bar'\n\nor use a function to wrap the pipe in:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 15,
                  "endLine": 95,
                  "snippet": {
                    "text": "\nBe careful with using pipes and with `run`. While your mind model of `run` might wrap the whole command behind it, bash's parser won't\n\n.. code-block:: bash\n\n    run echo foo | grep bar\n\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n",
                    "rendered": {
                      "text": "\nBe careful with using pipes and with `run`. While your mind model of `run` might wrap the whole command behind it, bash's parser won't\n\n.. code-block:: bash\n\n    run echo foo | grep bar\n\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n",
                      "markdown": "`\nBe careful with using pipes and with `run`. While your mind model of `run` might wrap the whole command behind it, bash's parser won't\n\n.. code-block:: bash\n\n    run echo foo | grep bar\n\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 15,
                  "endLine": 76,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\nAdditionally, there is bash compatible syntax for tests: \n\n.. code-block:: bash \n\n    function bash_compliant_function_name_as_test_name { # @test\n        # your code\n",
                    "rendered": {
                      "text": "\nAdditionally, there is bash compatible syntax for tests: \n\n.. code-block:: bash \n\n    function bash_compliant_function_name_as_test_name { # @test\n        # your code\n",
                      "markdown": "`\nAdditionally, there is bash compatible syntax for tests: \n\n.. code-block:: bash \n\n    function bash_compliant_function_name_as_test_name { # @test\n        # your code\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 22,
                  "endLine": 74,
                  "endColumn": 28,
                  "snippet": {
                    "text": "Therefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\nAdditionally, there is bash compatible syntax for tests: \n\n.. code-block:: bash \n\n",
                    "rendered": {
                      "text": "Therefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\nAdditionally, there is bash compatible syntax for tests: \n\n.. code-block:: bash \n\n",
                      "markdown": "`Therefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\nAdditionally, there is bash compatible syntax for tests: \n\n.. code-block:: bash \n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 19,
                  "endLine": 71,
                  "endColumn": 25,
                  "snippet": {
                    "text": "----------------------------------------\n\nBats uses a custom syntax for annotating tests (`@test`) that is not bash compliant.\nTherefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\nAdditionally, there is bash compatible syntax for tests: \n",
                    "rendered": {
                      "text": "----------------------------------------\n\nBats uses a custom syntax for annotating tests (`@test`) that is not bash compliant.\nTherefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\nAdditionally, there is bash compatible syntax for tests: \n",
                      "markdown": "`----------------------------------------\n\nBats uses a custom syntax for annotating tests (`@test`) that is not bash compliant.\nTherefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\nAdditionally, there is bash compatible syntax for tests: \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 68,
                  "endLine": 70,
                  "endColumn": 74,
                  "snippet": {
                    "text": "I can't lint/shell-format my bats tests.\n----------------------------------------\n\nBats uses a custom syntax for annotating tests (`@test`) that is not bash compliant.\nTherefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\n",
                    "rendered": {
                      "text": "I can't lint/shell-format my bats tests.\n----------------------------------------\n\nBats uses a custom syntax for annotating tests (`@test`) that is not bash compliant.\nTherefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\n",
                      "markdown": "`I can't lint/shell-format my bats tests.\n----------------------------------------\n\nBats uses a custom syntax for annotating tests (`@test`) that is not bash compliant.\nTherefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 15,
                  "endLine": 35,
                  "snippet": {
                    "text": "\nEspecially while using bats via shebang:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bats\n\n    @test \"test\" {\n",
                    "rendered": {
                      "text": "\nEspecially while using bats via shebang:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bats\n\n    @test \"test\" {\n",
                      "markdown": "`\nEspecially while using bats via shebang:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bats\n\n    @test \"test\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 15,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nMy negated statement (e.g. ! true) does not fail the test, even when it should.\n-------------------------------------------------------------------------------\n\nBash deliberately excludes negated return values from causing a pipeline to exit (see bash's `-e` option).\nUse `run !` on Bats 1.5.0 and above. For older bats versions, use one of `! x || false` or `run` with `[ $status != 0 ]`.\n\nIf the negated command is the final statement in a test, that final statement's (negated) exit status will propagate through to the test's return code as usual.\n",
                    "rendered": {
                      "text": "\nMy negated statement (e.g. ! true) does not fail the test, even when it should.\n-------------------------------------------------------------------------------\n\nBash deliberately excludes negated return values from causing a pipeline to exit (see bash's `-e` option).\nUse `run !` on Bats 1.5.0 and above. For older bats versions, use one of `! x || false` or `run` with `[ $status != 0 ]`.\n\nIf the negated command is the final statement in a test, that final statement's (negated) exit status will propagate through to the test's return code as usual.\n",
                      "markdown": "`\nMy negated statement (e.g. ! true) does not fail the test, even when it should.\n-------------------------------------------------------------------------------\n\nBash deliberately excludes negated return values from causing a pipeline to exit (see bash's `-e` option).\nUse `run !` on Bats 1.5.0 and above. For older bats versions, use one of `! x || false` or `run` with `[ $status != 0 ]`.\n\nIf the negated command is the final statement in a test, that final statement's (negated) exit status will propagate through to the test's return code as usual.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 55,
                  "endLine": 117,
                  "endColumn": 61,
                  "snippet": {
                    "text": "`[[ ]]` (or `(( ))` did not fail my test\n----------------------------------------\n\nThe `set -e` handling of `[[ ]]` and `(( ))` changed in Bash 4.1. Older versions, like 3.2 on MacOS,\ndon't abort the test when they fail, unless they are the last command before the (test) function returns,\nmaking their exit code the return code.\n\n",
                    "rendered": {
                      "text": "`[[ ]]` (or `(( ))` did not fail my test\n----------------------------------------\n\nThe `set -e` handling of `[[ ]]` and `(( ))` changed in Bash 4.1. Older versions, like 3.2 on MacOS,\ndon't abort the test when they fail, unless they are the last command before the (test) function returns,\nmaking their exit code the return code.\n\n",
                      "markdown": "``[[ ]]` (or `(( ))` did not fail my test\n----------------------------------------\n\nThe `set -e` handling of `[[ ]]` and `(( ))` changed in Bash 4.1. Older versions, like 3.2 on MacOS,\ndon't abort the test when they fail, unless they are the last command before the (test) function returns,\nmaking their exit code the return code.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 18,
                  "endLine": 109,
                  "endColumn": 24,
                  "snippet": {
                    "text": ".. code-block:: bash\n\n    fun_with_pipes() {\n        echo foo | grep bar\n    }\n\n    run fun_with_pipes\n",
                    "rendered": {
                      "text": ".. code-block:: bash\n\n    fun_with_pipes() {\n        echo foo | grep bar\n    }\n\n    run fun_with_pipes\n",
                      "markdown": "`.. code-block:: bash\n\n    fun_with_pipes() {\n        echo foo | grep bar\n    }\n\n    run fun_with_pipes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 15,
                  "endLine": 107,
                  "snippet": {
                    "text": "\nor use a function to wrap the pipe in:\n\n.. code-block:: bash\n\n    fun_with_pipes() {\n        echo foo | grep bar\n    }\n",
                    "rendered": {
                      "text": "\nor use a function to wrap the pipe in:\n\n.. code-block:: bash\n\n    fun_with_pipes() {\n        echo foo | grep bar\n    }\n",
                      "markdown": "`\nor use a function to wrap the pipe in:\n\n.. code-block:: bash\n\n    fun_with_pipes() {\n        echo foo | grep bar\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 27,
                  "endLine": 102,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n.. code-block:: bash\n\n    run bash -c 'echo foo | grep bar'\n\nor use a function to wrap the pipe in:\n\n",
                    "rendered": {
                      "text": "\n.. code-block:: bash\n\n    run bash -c 'echo foo | grep bar'\n\nor use a function to wrap the pipe in:\n\n",
                      "markdown": "`\n.. code-block:: bash\n\n    run bash -c 'echo foo | grep bar'\n\nor use a function to wrap the pipe in:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 7,
                  "endLine": 102,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n.. code-block:: bash\n\n    run bash -c 'echo foo | grep bar'\n\nor use a function to wrap the pipe in:\n\n",
                    "rendered": {
                      "text": "\n.. code-block:: bash\n\n    run bash -c 'echo foo | grep bar'\n\nor use a function to wrap the pipe in:\n\n",
                      "markdown": "`\n.. code-block:: bash\n\n    run bash -c 'echo foo | grep bar'\n\nor use a function to wrap the pipe in:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 15,
                  "endLine": 101,
                  "snippet": {
                    "text": "\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n\n.. code-block:: bash\n\n    run bash -c 'echo foo | grep bar'\n\nor use a function to wrap the pipe in:\n",
                    "rendered": {
                      "text": "\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n\n.. code-block:: bash\n\n    run bash -c 'echo foo | grep bar'\n\nor use a function to wrap the pipe in:\n",
                      "markdown": "`\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n\n.. code-block:: bash\n\n    run bash -c 'echo foo | grep bar'\n\nor use a function to wrap the pipe in:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 60,
                  "endLine": 98,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n    run echo foo | grep bar\n\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n\n.. code-block:: bash\n\n",
                    "rendered": {
                      "text": "\n    run echo foo | grep bar\n\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n\n.. code-block:: bash\n\n",
                      "markdown": "`\n    run echo foo | grep bar\n\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n\n.. code-block:: bash\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 22,
                  "endLine": 98,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n    run echo foo | grep bar\n\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n\n.. code-block:: bash\n\n",
                    "rendered": {
                      "text": "\n    run echo foo | grep bar\n\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n\n.. code-block:: bash\n\n",
                      "markdown": "`\n    run echo foo | grep bar\n\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n\n.. code-block:: bash\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 18,
                  "endLine": 96,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n.. code-block:: bash\n\n    run echo foo | grep bar\n\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n\n",
                    "rendered": {
                      "text": "\n.. code-block:: bash\n\n    run echo foo | grep bar\n\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n\n",
                      "markdown": "`\n.. code-block:: bash\n\n    run echo foo | grep bar\n\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 15,
                  "endLine": 95,
                  "snippet": {
                    "text": "\nBe careful with using pipes and with `run`. While your mind model of `run` might wrap the whole command behind it, bash's parser won't\n\n.. code-block:: bash\n\n    run echo foo | grep bar\n\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n",
                    "rendered": {
                      "text": "\nBe careful with using pipes and with `run`. While your mind model of `run` might wrap the whole command behind it, bash's parser won't\n\n.. code-block:: bash\n\n    run echo foo | grep bar\n\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n",
                      "markdown": "`\nBe careful with using pipes and with `run`. While your mind model of `run` might wrap the whole command behind it, bash's parser won't\n\n.. code-block:: bash\n\n    run echo foo | grep bar\n\nWon't `run (echo foo | grep bar)` but will `(run echo foo) | grep bar`. If you need to incorporate pipes, you either should do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 15,
                  "endLine": 76,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\nAdditionally, there is bash compatible syntax for tests: \n\n.. code-block:: bash \n\n    function bash_compliant_function_name_as_test_name { # @test\n        # your code\n",
                    "rendered": {
                      "text": "\nAdditionally, there is bash compatible syntax for tests: \n\n.. code-block:: bash \n\n    function bash_compliant_function_name_as_test_name { # @test\n        # your code\n",
                      "markdown": "`\nAdditionally, there is bash compatible syntax for tests: \n\n.. code-block:: bash \n\n    function bash_compliant_function_name_as_test_name { # @test\n        # your code\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 22,
                  "endLine": 74,
                  "endColumn": 28,
                  "snippet": {
                    "text": "Therefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\nAdditionally, there is bash compatible syntax for tests: \n\n.. code-block:: bash \n\n",
                    "rendered": {
                      "text": "Therefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\nAdditionally, there is bash compatible syntax for tests: \n\n.. code-block:: bash \n\n",
                      "markdown": "`Therefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\nAdditionally, there is bash compatible syntax for tests: \n\n.. code-block:: bash \n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 19,
                  "endLine": 71,
                  "endColumn": 25,
                  "snippet": {
                    "text": "----------------------------------------\n\nBats uses a custom syntax for annotating tests (`@test`) that is not bash compliant.\nTherefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\nAdditionally, there is bash compatible syntax for tests: \n",
                    "rendered": {
                      "text": "----------------------------------------\n\nBats uses a custom syntax for annotating tests (`@test`) that is not bash compliant.\nTherefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\nAdditionally, there is bash compatible syntax for tests: \n",
                      "markdown": "`----------------------------------------\n\nBats uses a custom syntax for annotating tests (`@test`) that is not bash compliant.\nTherefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\nAdditionally, there is bash compatible syntax for tests: \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 68,
                  "endLine": 70,
                  "endColumn": 74,
                  "snippet": {
                    "text": "I can't lint/shell-format my bats tests.\n----------------------------------------\n\nBats uses a custom syntax for annotating tests (`@test`) that is not bash compliant.\nTherefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\n",
                    "rendered": {
                      "text": "I can't lint/shell-format my bats tests.\n----------------------------------------\n\nBats uses a custom syntax for annotating tests (`@test`) that is not bash compliant.\nTherefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\n",
                      "markdown": "`I can't lint/shell-format my bats tests.\n----------------------------------------\n\nBats uses a custom syntax for annotating tests (`@test`) that is not bash compliant.\nTherefore, standard bash tooling won't be able to interact directly with `.bats` files.\nShellcheck supports bats' native syntax as of version 0.7.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 15,
                  "endLine": 35,
                  "snippet": {
                    "text": "\nEspecially while using bats via shebang:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bats\n\n    @test \"test\" {\n",
                    "rendered": {
                      "text": "\nEspecially while using bats via shebang:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bats\n\n    @test \"test\" {\n",
                      "markdown": "`\nEspecially while using bats via shebang:\n\n.. code-block:: bash\n\n    #!/usr/bin/env bats\n\n    @test \"test\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/gotchas.rst"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 15,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nMy negated statement (e.g. ! true) does not fail the test, even when it should.\n-------------------------------------------------------------------------------\n\nBash deliberately excludes negated return values from causing a pipeline to exit (see bash's `-e` option).\nUse `run !` on Bats 1.5.0 and above. For older bats versions, use one of `! x || false` or `run` with `[ $status != 0 ]`.\n\nIf the negated command is the final statement in a test, that final statement's (negated) exit status will propagate through to the test's return code as usual.\n",
                    "rendered": {
                      "text": "\nMy negated statement (e.g. ! true) does not fail the test, even when it should.\n-------------------------------------------------------------------------------\n\nBash deliberately excludes negated return values from causing a pipeline to exit (see bash's `-e` option).\nUse `run !` on Bats 1.5.0 and above. For older bats versions, use one of `! x || false` or `run` with `[ $status != 0 ]`.\n\nIf the negated command is the final statement in a test, that final statement's (negated) exit status will propagate through to the test's return code as usual.\n",
                      "markdown": "`\nMy negated statement (e.g. ! true) does not fail the test, even when it should.\n-------------------------------------------------------------------------------\n\nBash deliberately excludes negated return values from causing a pipeline to exit (see bash's `-e` option).\nUse `run !` on Bats 1.5.0 and above. For older bats versions, use one of `! x || false` or `run` with `[ $status != 0 ]`.\n\nIf the negated command is the final statement in a test, that final statement's (negated) exit status will propagate through to the test's return code as usual.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 65,
                  "endLine": 109,
                  "snippet": {
                    "text": "(to push to private registries, tag it with another organisation, e.g.\n``my-org/bats:latest``\\ ).\n\nTo run Bats' internal test suite (which is in the container image at\n``/opt/bats/test``\\ ):\n\n.. code-block::\n\n",
                    "rendered": {
                      "text": "(to push to private registries, tag it with another organisation, e.g.\n``my-org/bats:latest``\\ ).\n\nTo run Bats' internal test suite (which is in the container image at\n``/opt/bats/test``\\ ):\n\n.. code-block::\n\n",
                      "markdown": "`(to push to private registries, tag it with another organisation, e.g.\n``my-org/bats:latest``\\ ).\n\nTo run Bats' internal test suite (which is in the container image at\n``/opt/bats/test``\\ ):\n\n.. code-block::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 44,
                  "endLine": 68,
                  "snippet": {
                    "text": "**Note:** You may need to run ``install.sh`` with ``sudo`` if you do not have\npermission to write to the installation prefix.\n\nWindows: Installing Bats from source via Git Bash\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCheck out a copy of the Bats repository and install it to ``$HOME``. This\nwill place the ``bats`` executable in ``$HOME/bin``\\ , which should already be\n",
                    "rendered": {
                      "text": "**Note:** You may need to run ``install.sh`` with ``sudo`` if you do not have\npermission to write to the installation prefix.\n\nWindows: Installing Bats from source via Git Bash\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCheck out a copy of the Bats repository and install it to ``$HOME``. This\nwill place the ``bats`` executable in ``$HOME/bin``\\ , which should already be\n",
                      "markdown": "`**Note:** You may need to run ``install.sh`` with ``sudo`` if you do not have\npermission to write to the installation prefix.\n\nWindows: Installing Bats from source via Git Bash\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCheck out a copy of the Bats repository and install it to ``$HOME``. This\nwill place the ``bats`` executable in ``$HOME/bin``\\ , which should already be\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 15,
                  "endLine": 32,
                  "snippet": {
                    "text": "On macOS, you can install `Homebrew <https://brew.sh/>`__ if you haven't already,\nthen run:\n\n.. code-block:: bash\n\n   $ brew install bats-core\n\nAny OS: npm\n",
                    "rendered": {
                      "text": "On macOS, you can install `Homebrew <https://brew.sh/>`__ if you haven't already,\nthen run:\n\n.. code-block:: bash\n\n   $ brew install bats-core\n\nAny OS: npm\n",
                      "markdown": "`On macOS, you can install `Homebrew <https://brew.sh/>`__ if you haven't already,\nthen run:\n\n.. code-block:: bash\n\n   $ brew install bats-core\n\nAny OS: npm\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 17,
                  "endLine": 131,
                  "endColumn": 25,
                  "snippet": {
                    "text": "   location of the test directory on the local machine.\n\n\nThis is a minimal Docker image. If more tools are required this can be used as a\nbase image in a Dockerfile using ``FROM <Docker image>``.  In the future there may\nbe images based on Debian, and/or with more tools installed (\\ ``curl`` and ``openssl``\\ ,\nfor example). If you require a specific configuration please search and +1 an\n",
                    "rendered": {
                      "text": "   location of the test directory on the local machine.\n\n\nThis is a minimal Docker image. If more tools are required this can be used as a\nbase image in a Dockerfile using ``FROM <Docker image>``.  In the future there may\nbe images based on Debian, and/or with more tools installed (\\ ``curl`` and ``openssl``\\ ,\nfor example). If you require a specific configuration please search and +1 an\n",
                      "markdown": "`   location of the test directory on the local machine.\n\n\nThis is a minimal Docker image. If more tools are required this can be used as a\nbase image in a Dockerfile using ``FROM <Docker image>``.  In the future there may\nbe images based on Debian, and/or with more tools installed (\\ ``curl`` and ``openssl``\\ ,\nfor example). If you require a specific configuration please search and +1 an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 44,
                  "endLine": 127,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n..\n\n   ``/code`` is the working directory of the Docker image. \"${PWD}/test\" is the\n   location of the test directory on the local machine.\n\n\n",
                    "rendered": {
                      "text": "\n..\n\n   ``/code`` is the working directory of the Docker image. \"${PWD}/test\" is the\n   location of the test directory on the local machine.\n\n\n",
                      "markdown": "`\n..\n\n   ``/code`` is the working directory of the Docker image. \"${PWD}/test\" is the\n   location of the test directory on the local machine.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 4,
                  "endLine": 122,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n.. code-block::\n\n   $ docker run -it -v \"${PWD}:/code\" bats/bats:latest test\n\n\n..\n",
                    "rendered": {
                      "text": "\n.. code-block::\n\n   $ docker run -it -v \"${PWD}:/code\" bats/bats:latest test\n\n\n..\n",
                      "markdown": "`\n.. code-block::\n\n   $ docker run -it -v \"${PWD}:/code\" bats/bats:latest test\n\n\n..\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 19,
                  "endLine": 117,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n\nTo run a test suite from a directory called ``test`` in the current directory of\nyour local machine, mount in a volume and direct Bats to its path inside the\ncontainer:\n\n.. code-block::\n",
                    "rendered": {
                      "text": "\n\nTo run a test suite from a directory called ``test`` in the current directory of\nyour local machine, mount in a volume and direct Bats to its path inside the\ncontainer:\n\n.. code-block::\n",
                      "markdown": "`\n\nTo run a test suite from a directory called ``test`` in the current directory of\nyour local machine, mount in a volume and direct Bats to its path inside the\ncontainer:\n\n.. code-block::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 4,
                  "endLine": 113,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n.. code-block::\n\n   $ docker run -it bats/bats:latest /opt/bats/test\n\n\nTo run a test suite from a directory called ``test`` in the current directory of\n",
                    "rendered": {
                      "text": "\n.. code-block::\n\n   $ docker run -it bats/bats:latest /opt/bats/test\n\n\nTo run a test suite from a directory called ``test`` in the current directory of\n",
                      "markdown": "`\n.. code-block::\n\n   $ docker run -it bats/bats:latest /opt/bats/test\n\n\nTo run a test suite from a directory called ``test`` in the current directory of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 20,
                  "endLine": 103,
                  "endColumn": 28,
                  "snippet": {
                    "text": "   $ docker build --tag bats/bats:latest .\n\n\nThis creates a local Docker image called ``bats/bats:latest`` based on `Alpine\nLinux <https://github.com/gliderlabs/docker-alpine/blob/master/docs/usage.md>`__\n(to push to private registries, tag it with another organisation, e.g.\n``my-org/bats:latest``\\ ).\n",
                    "rendered": {
                      "text": "   $ docker build --tag bats/bats:latest .\n\n\nThis creates a local Docker image called ``bats/bats:latest`` based on `Alpine\nLinux <https://github.com/gliderlabs/docker-alpine/blob/master/docs/usage.md>`__\n(to push to private registries, tag it with another organisation, e.g.\n``my-org/bats:latest``\\ ).\n",
                      "markdown": "`   $ docker build --tag bats/bats:latest .\n\n\nThis creates a local Docker image called ``bats/bats:latest`` based on `Alpine\nLinux <https://github.com/gliderlabs/docker-alpine/blob/master/docs/usage.md>`__\n(to push to private registries, tag it with another organisation, e.g.\n``my-org/bats:latest``\\ ).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 4,
                  "endLine": 100,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n   $ git clone https://github.com/bats-core/bats-core.git\n   $ cd bats-core\n   $ docker build --tag bats/bats:latest .\n\n\nThis creates a local Docker image called ``bats/bats:latest`` based on `Alpine\n",
                    "rendered": {
                      "text": "\n   $ git clone https://github.com/bats-core/bats-core.git\n   $ cd bats-core\n   $ docker build --tag bats/bats:latest .\n\n\nThis creates a local Docker image called ``bats/bats:latest`` based on `Alpine\n",
                      "markdown": "`\n   $ git clone https://github.com/bats-core/bats-core.git\n   $ cd bats-core\n   $ docker build --tag bats/bats:latest .\n\n\nThis creates a local Docker image called ``bats/bats:latest`` based on `Alpine\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 4,
                  "endLine": 98,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n.. code-block::\n\n   $ git clone https://github.com/bats-core/bats-core.git\n   $ cd bats-core\n   $ docker build --tag bats/bats:latest .\n\n",
                    "rendered": {
                      "text": "\n.. code-block::\n\n   $ git clone https://github.com/bats-core/bats-core.git\n   $ cd bats-core\n   $ docker build --tag bats/bats:latest .\n\n",
                      "markdown": "`\n.. code-block::\n\n   $ git clone https://github.com/bats-core/bats-core.git\n   $ cd bats-core\n   $ docker build --tag bats/bats:latest .\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 10,
                  "endLine": 91,
                  "endColumn": 18,
                  "snippet": {
                    "text": "   $ docker run -it bats/bats:latest --version\n\n\nBuilding a Docker image\n~~~~~~~~~~~~~~~~~~~~~~~\n\nCheck out a copy of the Bats repository, then build a container image:\n",
                    "rendered": {
                      "text": "   $ docker run -it bats/bats:latest --version\n\n\nBuilding a Docker image\n~~~~~~~~~~~~~~~~~~~~~~~\n\nCheck out a copy of the Bats repository, then build a container image:\n",
                      "markdown": "`   $ docker run -it bats/bats:latest --version\n\n\nBuilding a Docker image\n~~~~~~~~~~~~~~~~~~~~~~~\n\nCheck out a copy of the Bats repository, then build a container image:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 4,
                  "endLine": 88,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n.. code-block::\n\n   $ docker run -it bats/bats:latest --version\n\n\nBuilding a Docker image\n",
                    "rendered": {
                      "text": "\n.. code-block::\n\n   $ docker run -it bats/bats:latest --version\n\n\nBuilding a Docker image\n",
                      "markdown": "`\n.. code-block::\n\n   $ docker run -it bats/bats:latest --version\n\n\nBuilding a Docker image\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 33,
                  "endLine": 84,
                  "endColumn": 41,
                  "snippet": {
                    "text": "Running Bats in Docker\n^^^^^^^^^^^^^^^^^^^^^^\n\nThere is an official image on the Docker Hub:\n\n.. code-block::\n\n",
                    "rendered": {
                      "text": "Running Bats in Docker\n^^^^^^^^^^^^^^^^^^^^^^\n\nThere is an official image on the Docker Hub:\n\n.. code-block::\n\n",
                      "markdown": "`Running Bats in Docker\n^^^^^^^^^^^^^^^^^^^^^^\n\nThere is an official image on the Docker Hub:\n\n.. code-block::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 15,
                  "endLine": 82,
                  "snippet": {
                    "text": "   $ ./install.sh $HOME\n\n\nRunning Bats in Docker\n^^^^^^^^^^^^^^^^^^^^^^\n\nThere is an official image on the Docker Hub:\n\n",
                    "rendered": {
                      "text": "   $ ./install.sh $HOME\n\n\nRunning Bats in Docker\n^^^^^^^^^^^^^^^^^^^^^^\n\nThere is an official image on the Docker Hub:\n\n",
                      "markdown": "`   $ ./install.sh $HOME\n\n\nRunning Bats in Docker\n^^^^^^^^^^^^^^^^^^^^^^\n\nThere is an official image on the Docker Hub:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 4,
                  "endLine": 76,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n.. code-block::\n\n   $ git clone https://github.com/bats-core/bats-core.git\n   $ cd bats-core\n   $ ./install.sh $HOME\n\n",
                    "rendered": {
                      "text": "\n.. code-block::\n\n   $ git clone https://github.com/bats-core/bats-core.git\n   $ cd bats-core\n   $ ./install.sh $HOME\n\n",
                      "markdown": "`\n.. code-block::\n\n   $ git clone https://github.com/bats-core/bats-core.git\n   $ cd bats-core\n   $ ./install.sh $HOME\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 40,
                  "endLine": 67,
                  "endColumn": 45,
                  "snippet": {
                    "text": "**Note:** You may need to run ``install.sh`` with ``sudo`` if you do not have\npermission to write to the installation prefix.\n\nWindows: Installing Bats from source via Git Bash\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCheck out a copy of the Bats repository and install it to ``$HOME``. This\n",
                    "rendered": {
                      "text": "**Note:** You may need to run ``install.sh`` with ``sudo`` if you do not have\npermission to write to the installation prefix.\n\nWindows: Installing Bats from source via Git Bash\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCheck out a copy of the Bats repository and install it to ``$HOME``. This\n",
                      "markdown": "`**Note:** You may need to run ``install.sh`` with ``sudo`` if you do not have\npermission to write to the installation prefix.\n\nWindows: Installing Bats from source via Git Bash\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCheck out a copy of the Bats repository and install it to ``$HOME``. This\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 4,
                  "endLine": 59,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n.. code-block::\n\n   $ git clone https://github.com/bats-core/bats-core.git\n   $ cd bats-core\n   $ ./install.sh /usr/local\n\n",
                    "rendered": {
                      "text": "\n.. code-block::\n\n   $ git clone https://github.com/bats-core/bats-core.git\n   $ cd bats-core\n   $ ./install.sh /usr/local\n\n",
                      "markdown": "`\n.. code-block::\n\n   $ git clone https://github.com/bats-core/bats-core.git\n   $ cd bats-core\n   $ ./install.sh /usr/local\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/source/installation.rst"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 15,
                  "endLine": 32,
                  "snippet": {
                    "text": "On macOS, you can install `Homebrew <https://brew.sh/>`__ if you haven't already,\nthen run:\n\n.. code-block:: bash\n\n   $ brew install bats-core\n\nAny OS: npm\n",
                    "rendered": {
                      "text": "On macOS, you can install `Homebrew <https://brew.sh/>`__ if you haven't already,\nthen run:\n\n.. code-block:: bash\n\n   $ brew install bats-core\n\nAny OS: npm\n",
                      "markdown": "`On macOS, you can install `Homebrew <https://brew.sh/>`__ if you haven't already,\nthen run:\n\n.. code-block:: bash\n\n   $ brew install bats-core\n\nAny OS: npm\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/examples/package-tarball.bats"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 7,
                  "snippet": {
                    "text": "}\n\nmain() {\n  bash \"${BATS_TEST_DIRNAME}\"/package-tarball\n}\n\n@test \"fail when \\$src_dir and \\$dst_tarball are unbound\" {\n",
                    "rendered": {
                      "text": "}\n\nmain() {\n  bash \"${BATS_TEST_DIRNAME}\"/package-tarball\n}\n\n@test \"fail when \\$src_dir and \\$dst_tarball are unbound\" {\n",
                      "markdown": "`}\n\nmain() {\n  bash \"${BATS_TEST_DIRNAME}\"/package-tarball\n}\n\n@test \"fail when \\$src_dir and \\$dst_tarball are unbound\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/examples/package-tarball.bats"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 5,
                  "endLine": 46,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  run main\n  [ \"${status}\" -eq 0 ]\n\n  run tar tf \"$dst_tarball\"\n  [ \"${status}\" -eq 0 ]\n  [[ \"${output}\" =~ a ]]\n  [[ \"${output}\" =~ b ]]\n",
                    "rendered": {
                      "text": "  run main\n  [ \"${status}\" -eq 0 ]\n\n  run tar tf \"$dst_tarball\"\n  [ \"${status}\" -eq 0 ]\n  [[ \"${output}\" =~ a ]]\n  [[ \"${output}\" =~ b ]]\n",
                      "markdown": "`  run main\n  [ \"${status}\" -eq 0 ]\n\n  run tar tf \"$dst_tarball\"\n  [ \"${status}\" -eq 0 ]\n  [[ \"${output}\" =~ a ]]\n  [[ \"${output}\" =~ b ]]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/examples/package-tarball.bats"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 38,
                  "endLine": 42,
                  "endColumn": 43,
                  "snippet": {
                    "text": "}\n\n# shellcheck disable=SC2016\n@test \"files in \\$src_dir are added to tar archive\" {\n  run main\n  [ \"${status}\" -eq 0 ]\n\n",
                    "rendered": {
                      "text": "}\n\n# shellcheck disable=SC2016\n@test \"files in \\$src_dir are added to tar archive\" {\n  run main\n  [ \"${status}\" -eq 0 ]\n\n",
                      "markdown": "`}\n\n# shellcheck disable=SC2016\n@test \"files in \\$src_dir are added to tar archive\" {\n  run main\n  [ \"${status}\" -eq 0 ]\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/examples/package-tarball.bats"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 7,
                  "snippet": {
                    "text": "}\n\nmain() {\n  bash \"${BATS_TEST_DIRNAME}\"/package-tarball\n}\n\n@test \"fail when \\$src_dir and \\$dst_tarball are unbound\" {\n",
                    "rendered": {
                      "text": "}\n\nmain() {\n  bash \"${BATS_TEST_DIRNAME}\"/package-tarball\n}\n\n@test \"fail when \\$src_dir and \\$dst_tarball are unbound\" {\n",
                      "markdown": "`}\n\nmain() {\n  bash \"${BATS_TEST_DIRNAME}\"/package-tarball\n}\n\n@test \"fail when \\$src_dir and \\$dst_tarball are unbound\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/examples/package-tarball"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 14,
                  "endLine": 3,
                  "endColumn": 20,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# \"unofficial\" bash strict mode\n# See: http://redsymbol.net/articles/unofficial-bash-strict-mode\nset -o errexit  # Exit when simple command fails               'set -e'\nset -o errtrace # Exit on error inside any functions or subshells.\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# \"unofficial\" bash strict mode\n# See: http://redsymbol.net/articles/unofficial-bash-strict-mode\nset -o errexit  # Exit when simple command fails               'set -e'\nset -o errtrace # Exit on error inside any functions or subshells.\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# \"unofficial\" bash strict mode\n# See: http://redsymbol.net/articles/unofficial-bash-strict-mode\nset -o errexit  # Exit when simple command fails               'set -e'\nset -o errtrace # Exit on error inside any functions or subshells.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/examples/package-tarball"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# \"unofficial\" bash strict mode\n# See: http://redsymbol.net/articles/unofficial-bash-strict-mode\nset -o errexit  # Exit when simple command fails               'set -e'\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# \"unofficial\" bash strict mode\n# See: http://redsymbol.net/articles/unofficial-bash-strict-mode\nset -o errexit  # Exit when simple command fails               'set -e'\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# \"unofficial\" bash strict mode\n# See: http://redsymbol.net/articles/unofficial-bash-strict-mode\nset -o errexit  # Exit when simple command fails               'set -e'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/examples/package-tarball"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 6,
                  "snippet": {
                    "text": "IFS=$'\\n\\t'     # Split words on \\n\\t rather than spaces\n\nmain() {\n  tar -czf \"$dst_tarball\" -C \"$src_dir\" .\n}\n\nmain \"$@\"\n",
                    "rendered": {
                      "text": "IFS=$'\\n\\t'     # Split words on \\n\\t rather than spaces\n\nmain() {\n  tar -czf \"$dst_tarball\" -C \"$src_dir\" .\n}\n\nmain \"$@\"\n",
                      "markdown": "`IFS=$'\\n\\t'     # Split words on \\n\\t rather than spaces\n\nmain() {\n  tar -czf \"$dst_tarball\" -C \"$src_dir\" .\n}\n\nmain \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/examples/package-tarball"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 14,
                  "endLine": 3,
                  "endColumn": 20,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# \"unofficial\" bash strict mode\n# See: http://redsymbol.net/articles/unofficial-bash-strict-mode\nset -o errexit  # Exit when simple command fails               'set -e'\nset -o errtrace # Exit on error inside any functions or subshells.\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# \"unofficial\" bash strict mode\n# See: http://redsymbol.net/articles/unofficial-bash-strict-mode\nset -o errexit  # Exit when simple command fails               'set -e'\nset -o errtrace # Exit on error inside any functions or subshells.\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# \"unofficial\" bash strict mode\n# See: http://redsymbol.net/articles/unofficial-bash-strict-mode\nset -o errexit  # Exit when simple command fails               'set -e'\nset -o errtrace # Exit on error inside any functions or subshells.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/examples/package-tarball"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# \"unofficial\" bash strict mode\n# See: http://redsymbol.net/articles/unofficial-bash-strict-mode\nset -o errexit  # Exit when simple command fails               'set -e'\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# \"unofficial\" bash strict mode\n# See: http://redsymbol.net/articles/unofficial-bash-strict-mode\nset -o errexit  # Exit when simple command fails               'set -e'\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# \"unofficial\" bash strict mode\n# See: http://redsymbol.net/articles/unofficial-bash-strict-mode\nset -o errexit  # Exit when simple command fails               'set -e'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 13,
                  "endLine": 209,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n## Credits\n\nThe [official bash logo](https://github.com/odb/official-bash-logo) is copyrighted\nby the [Free Software Foundation](https://www.fsf.org/), 2016 under the [Free Art License](http://artlibre.org/licence/lal/en/)\n\nThis guide borrows **heavily** from [@mbland's go-script-bash][gsb] (with some \n",
                    "rendered": {
                      "text": "\n## Credits\n\nThe [official bash logo](https://github.com/odb/official-bash-logo) is copyrighted\nby the [Free Software Foundation](https://www.fsf.org/), 2016 under the [Free Art License](http://artlibre.org/licence/lal/en/)\n\nThis guide borrows **heavily** from [@mbland's go-script-bash][gsb] (with some \n",
                      "markdown": "`\n## Credits\n\nThe [official bash logo](https://github.com/odb/official-bash-logo) is copyrighted\nby the [Free Software Foundation](https://www.fsf.org/), 2016 under the [Free Art License](http://artlibre.org/licence/lal/en/)\n\nThis guide borrows **heavily** from [@mbland's go-script-bash][gsb] (with some \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 36,
                  "endLine": 202,
                  "endColumn": 42,
                  "snippet": {
                    "text": "$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - int && echo success'\nbash: line 0: trap: int: invalid signal specification\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - INT && echo success'\nsuccess\n```\n\n",
                    "rendered": {
                      "text": "$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - int && echo success'\nbash: line 0: trap: int: invalid signal specification\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - INT && echo success'\nsuccess\n```\n\n",
                      "markdown": "`$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - int && echo success'\nbash: line 0: trap: int: invalid signal specification\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - INT && echo success'\nsuccess\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 36,
                  "endLine": 200,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n```bash\n$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - int && echo success'\nbash: line 0: trap: int: invalid signal specification\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - INT && echo success'\nsuccess\n",
                    "rendered": {
                      "text": "\n```bash\n$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - int && echo success'\nbash: line 0: trap: int: invalid signal specification\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - INT && echo success'\nsuccess\n",
                      "markdown": "`\n```bash\n$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - int && echo success'\nbash: line 0: trap: int: invalid signal specification\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - INT && echo success'\nsuccess\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 23,
                  "endLine": 196,
                  "endColumn": 29,
                  "snippet": {
                    "text": "Always use upper case signal names (e.g. `trap - INT EXIT`) to avoid locale \ndependent errors. In some locales (for example Turkish, see \n[Turkish dotless i](https://en.wikipedia.org/wiki/Dotted_and_dotless_I)) lower \ncase signal names cause Bash to error. An example of the problem:\n\n```bash\n$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n",
                    "rendered": {
                      "text": "Always use upper case signal names (e.g. `trap - INT EXIT`) to avoid locale \ndependent errors. In some locales (for example Turkish, see \n[Turkish dotless i](https://en.wikipedia.org/wiki/Dotted_and_dotless_I)) lower \ncase signal names cause Bash to error. An example of the problem:\n\n```bash\n$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n",
                      "markdown": "`Always use upper case signal names (e.g. `trap - INT EXIT`) to avoid locale \ndependent errors. In some locales (for example Turkish, see \n[Turkish dotless i](https://en.wikipedia.org/wiki/Dotted_and_dotless_I)) lower \ncase signal names cause Bash to error. An example of the problem:\n\n```bash\n$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 75,
                  "endLine": 185,
                  "snippet": {
                    "text": "- Use `printf` instead of `echo`. Both are Bash builtins, and there's no\n  perceptible performance difference when running Bats under the `time` builtin.\n  However, `printf` provides a more consistent experience in general, as `echo`\n  has limitations to the arguments it accepts, and even the same version of Bash\n  may produce different results for `echo` based on how the binary was compiled.\n  See [Stack Overflow: Why is printf better than echo?][printf-vs-echo] for\n  excruciating details.\n\n",
                    "rendered": {
                      "text": "- Use `printf` instead of `echo`. Both are Bash builtins, and there's no\n  perceptible performance difference when running Bats under the `time` builtin.\n  However, `printf` provides a more consistent experience in general, as `echo`\n  has limitations to the arguments it accepts, and even the same version of Bash\n  may produce different results for `echo` based on how the binary was compiled.\n  See [Stack Overflow: Why is printf better than echo?][printf-vs-echo] for\n  excruciating details.\n\n",
                      "markdown": "`- Use `printf` instead of `echo`. Both are Bash builtins, and there's no\n  perceptible performance difference when running Bats under the `time` builtin.\n  However, `printf` provides a more consistent experience in general, as `echo`\n  has limitations to the arguments it accepts, and even the same version of Bash\n  may produce different results for `echo` based on how the binary was compiled.\n  See [Stack Overflow: Why is printf better than echo?][printf-vs-echo] for\n  excruciating details.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 42,
                  "endLine": 181,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n### Generating output\n\n- Use `printf` instead of `echo`. Both are Bash builtins, and there's no\n  perceptible performance difference when running Bats under the `time` builtin.\n  However, `printf` provides a more consistent experience in general, as `echo`\n  has limitations to the arguments it accepts, and even the same version of Bash\n",
                    "rendered": {
                      "text": "\n### Generating output\n\n- Use `printf` instead of `echo`. Both are Bash builtins, and there's no\n  perceptible performance difference when running Bats under the `time` builtin.\n  However, `printf` provides a more consistent experience in general, as `echo`\n  has limitations to the arguments it accepts, and even the same version of Bash\n",
                      "markdown": "`\n### Generating output\n\n- Use `printf` instead of `echo`. Both are Bash builtins, and there's no\n  perceptible performance difference when running Bats under the `time` builtin.\n  However, `printf` provides a more consistent experience in general, as `echo`\n  has limitations to the arguments it accepts, and even the same version of Bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 30,
                  "endLine": 150,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  true on Windows, [where process creation is one or two orders of magnitude\n  slower][win-slow]. See [bats-core/bats-core#8][pr-8] for an illustration of\n  the difference avoiding subshells makes.) Bash is quite powerful; see if you\n  can do what you need in pure Bash first.\n- If you need to capture the output from a function, store the output using\n  `printf -v` instead if possible. `-v` specifies the name of the variable into\n  which to write the result; the caller can supply this name as a parameter.\n",
                    "rendered": {
                      "text": "  true on Windows, [where process creation is one or two orders of magnitude\n  slower][win-slow]. See [bats-core/bats-core#8][pr-8] for an illustration of\n  the difference avoiding subshells makes.) Bash is quite powerful; see if you\n  can do what you need in pure Bash first.\n- If you need to capture the output from a function, store the output using\n  `printf -v` instead if possible. `-v` specifies the name of the variable into\n  which to write the result; the caller can supply this name as a parameter.\n",
                      "markdown": "`  true on Windows, [where process creation is one or two orders of magnitude\n  slower][win-slow]. See [bats-core/bats-core#8][pr-8] for an illustration of\n  the difference avoiding subshells makes.) Bash is quite powerful; see if you\n  can do what you need in pure Bash first.\n- If you need to capture the output from a function, store the output using\n  `printf -v` instead if possible. `-v` specifies the name of the variable into\n  which to write the result; the caller can supply this name as a parameter.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 43,
                  "endLine": 149,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  critical to encouraging the practice of automated testing. (This is especially\n  true on Windows, [where process creation is one or two orders of magnitude\n  slower][win-slow]. See [bats-core/bats-core#8][pr-8] for an illustration of\n  the difference avoiding subshells makes.) Bash is quite powerful; see if you\n  can do what you need in pure Bash first.\n- If you need to capture the output from a function, store the output using\n  `printf -v` instead if possible. `-v` specifies the name of the variable into\n",
                    "rendered": {
                      "text": "  critical to encouraging the practice of automated testing. (This is especially\n  true on Windows, [where process creation is one or two orders of magnitude\n  slower][win-slow]. See [bats-core/bats-core#8][pr-8] for an illustration of\n  the difference avoiding subshells makes.) Bash is quite powerful; see if you\n  can do what you need in pure Bash first.\n- If you need to capture the output from a function, store the output using\n  `printf -v` instead if possible. `-v` specifies the name of the variable into\n",
                      "markdown": "`  critical to encouraging the practice of automated testing. (This is especially\n  true on Windows, [where process creation is one or two orders of magnitude\n  slower][win-slow]. See [bats-core/bats-core#8][pr-8] for an illustration of\n  the difference avoiding subshells makes.) Bash is quite powerful; see if you\n  can do what you need in pure Bash first.\n- If you need to capture the output from a function, store the output using\n  `printf -v` instead if possible. `-v` specifies the name of the variable into\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 13,
                  "endLine": 209,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n## Credits\n\nThe [official bash logo](https://github.com/odb/official-bash-logo) is copyrighted\nby the [Free Software Foundation](https://www.fsf.org/), 2016 under the [Free Art License](http://artlibre.org/licence/lal/en/)\n\nThis guide borrows **heavily** from [@mbland's go-script-bash][gsb] (with some \n",
                    "rendered": {
                      "text": "\n## Credits\n\nThe [official bash logo](https://github.com/odb/official-bash-logo) is copyrighted\nby the [Free Software Foundation](https://www.fsf.org/), 2016 under the [Free Art License](http://artlibre.org/licence/lal/en/)\n\nThis guide borrows **heavily** from [@mbland's go-script-bash][gsb] (with some \n",
                      "markdown": "`\n## Credits\n\nThe [official bash logo](https://github.com/odb/official-bash-logo) is copyrighted\nby the [Free Software Foundation](https://www.fsf.org/), 2016 under the [Free Art License](http://artlibre.org/licence/lal/en/)\n\nThis guide borrows **heavily** from [@mbland's go-script-bash][gsb] (with some \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 36,
                  "endLine": 202,
                  "endColumn": 42,
                  "snippet": {
                    "text": "$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - int && echo success'\nbash: line 0: trap: int: invalid signal specification\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - INT && echo success'\nsuccess\n```\n\n",
                    "rendered": {
                      "text": "$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - int && echo success'\nbash: line 0: trap: int: invalid signal specification\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - INT && echo success'\nsuccess\n```\n\n",
                      "markdown": "`$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - int && echo success'\nbash: line 0: trap: int: invalid signal specification\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - INT && echo success'\nsuccess\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 36,
                  "endLine": 200,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n```bash\n$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - int && echo success'\nbash: line 0: trap: int: invalid signal specification\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - INT && echo success'\nsuccess\n",
                    "rendered": {
                      "text": "\n```bash\n$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - int && echo success'\nbash: line 0: trap: int: invalid signal specification\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - INT && echo success'\nsuccess\n",
                      "markdown": "`\n```bash\n$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - int && echo success'\nbash: line 0: trap: int: invalid signal specification\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - INT && echo success'\nsuccess\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 23,
                  "endLine": 196,
                  "endColumn": 29,
                  "snippet": {
                    "text": "Always use upper case signal names (e.g. `trap - INT EXIT`) to avoid locale \ndependent errors. In some locales (for example Turkish, see \n[Turkish dotless i](https://en.wikipedia.org/wiki/Dotted_and_dotless_I)) lower \ncase signal names cause Bash to error. An example of the problem:\n\n```bash\n$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n",
                    "rendered": {
                      "text": "Always use upper case signal names (e.g. `trap - INT EXIT`) to avoid locale \ndependent errors. In some locales (for example Turkish, see \n[Turkish dotless i](https://en.wikipedia.org/wiki/Dotted_and_dotless_I)) lower \ncase signal names cause Bash to error. An example of the problem:\n\n```bash\n$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n",
                      "markdown": "`Always use upper case signal names (e.g. `trap - INT EXIT`) to avoid locale \ndependent errors. In some locales (for example Turkish, see \n[Turkish dotless i](https://en.wikipedia.org/wiki/Dotted_and_dotless_I)) lower \ncase signal names cause Bash to error. An example of the problem:\n\n```bash\n$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 75,
                  "endLine": 185,
                  "snippet": {
                    "text": "- Use `printf` instead of `echo`. Both are Bash builtins, and there's no\n  perceptible performance difference when running Bats under the `time` builtin.\n  However, `printf` provides a more consistent experience in general, as `echo`\n  has limitations to the arguments it accepts, and even the same version of Bash\n  may produce different results for `echo` based on how the binary was compiled.\n  See [Stack Overflow: Why is printf better than echo?][printf-vs-echo] for\n  excruciating details.\n\n",
                    "rendered": {
                      "text": "- Use `printf` instead of `echo`. Both are Bash builtins, and there's no\n  perceptible performance difference when running Bats under the `time` builtin.\n  However, `printf` provides a more consistent experience in general, as `echo`\n  has limitations to the arguments it accepts, and even the same version of Bash\n  may produce different results for `echo` based on how the binary was compiled.\n  See [Stack Overflow: Why is printf better than echo?][printf-vs-echo] for\n  excruciating details.\n\n",
                      "markdown": "`- Use `printf` instead of `echo`. Both are Bash builtins, and there's no\n  perceptible performance difference when running Bats under the `time` builtin.\n  However, `printf` provides a more consistent experience in general, as `echo`\n  has limitations to the arguments it accepts, and even the same version of Bash\n  may produce different results for `echo` based on how the binary was compiled.\n  See [Stack Overflow: Why is printf better than echo?][printf-vs-echo] for\n  excruciating details.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 42,
                  "endLine": 181,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n### Generating output\n\n- Use `printf` instead of `echo`. Both are Bash builtins, and there's no\n  perceptible performance difference when running Bats under the `time` builtin.\n  However, `printf` provides a more consistent experience in general, as `echo`\n  has limitations to the arguments it accepts, and even the same version of Bash\n",
                    "rendered": {
                      "text": "\n### Generating output\n\n- Use `printf` instead of `echo`. Both are Bash builtins, and there's no\n  perceptible performance difference when running Bats under the `time` builtin.\n  However, `printf` provides a more consistent experience in general, as `echo`\n  has limitations to the arguments it accepts, and even the same version of Bash\n",
                      "markdown": "`\n### Generating output\n\n- Use `printf` instead of `echo`. Both are Bash builtins, and there's no\n  perceptible performance difference when running Bats under the `time` builtin.\n  However, `printf` provides a more consistent experience in general, as `echo`\n  has limitations to the arguments it accepts, and even the same version of Bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 30,
                  "endLine": 150,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  true on Windows, [where process creation is one or two orders of magnitude\n  slower][win-slow]. See [bats-core/bats-core#8][pr-8] for an illustration of\n  the difference avoiding subshells makes.) Bash is quite powerful; see if you\n  can do what you need in pure Bash first.\n- If you need to capture the output from a function, store the output using\n  `printf -v` instead if possible. `-v` specifies the name of the variable into\n  which to write the result; the caller can supply this name as a parameter.\n",
                    "rendered": {
                      "text": "  true on Windows, [where process creation is one or two orders of magnitude\n  slower][win-slow]. See [bats-core/bats-core#8][pr-8] for an illustration of\n  the difference avoiding subshells makes.) Bash is quite powerful; see if you\n  can do what you need in pure Bash first.\n- If you need to capture the output from a function, store the output using\n  `printf -v` instead if possible. `-v` specifies the name of the variable into\n  which to write the result; the caller can supply this name as a parameter.\n",
                      "markdown": "`  true on Windows, [where process creation is one or two orders of magnitude\n  slower][win-slow]. See [bats-core/bats-core#8][pr-8] for an illustration of\n  the difference avoiding subshells makes.) Bash is quite powerful; see if you\n  can do what you need in pure Bash first.\n- If you need to capture the output from a function, store the output using\n  `printf -v` instead if possible. `-v` specifies the name of the variable into\n  which to write the result; the caller can supply this name as a parameter.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 43,
                  "endLine": 149,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  critical to encouraging the practice of automated testing. (This is especially\n  true on Windows, [where process creation is one or two orders of magnitude\n  slower][win-slow]. See [bats-core/bats-core#8][pr-8] for an illustration of\n  the difference avoiding subshells makes.) Bash is quite powerful; see if you\n  can do what you need in pure Bash first.\n- If you need to capture the output from a function, store the output using\n  `printf -v` instead if possible. `-v` specifies the name of the variable into\n",
                    "rendered": {
                      "text": "  critical to encouraging the practice of automated testing. (This is especially\n  true on Windows, [where process creation is one or two orders of magnitude\n  slower][win-slow]. See [bats-core/bats-core#8][pr-8] for an illustration of\n  the difference avoiding subshells makes.) Bash is quite powerful; see if you\n  can do what you need in pure Bash first.\n- If you need to capture the output from a function, store the output using\n  `printf -v` instead if possible. `-v` specifies the name of the variable into\n",
                      "markdown": "`  critical to encouraging the practice of automated testing. (This is especially\n  true on Windows, [where process creation is one or two orders of magnitude\n  slower][win-slow]. See [bats-core/bats-core#8][pr-8] for an illustration of\n  the difference avoiding subshells makes.) Bash is quite powerful; see if you\n  can do what you need in pure Bash first.\n- If you need to capture the output from a function, store the output using\n  `printf -v` instead if possible. `-v` specifies the name of the variable into\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 13,
                  "endLine": 69,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\nPlease check the [documentation][documentation] or existing [discussions][] and [issues][repoissues] first.\n\nIf you cannot find an answer to your question, please feel free to hop on our \n[Gitter][gitterurl]. [![Gitter](https://badges.gitter.im/bats-core/bats-core.svg)](https://gitter.im/bats-core/bats-core)\n\n## Updating documentation\n",
                    "rendered": {
                      "text": "\nPlease check the [documentation][documentation] or existing [discussions][] and [issues][repoissues] first.\n\nIf you cannot find an answer to your question, please feel free to hop on our \n[Gitter][gitterurl]. [![Gitter](https://badges.gitter.im/bats-core/bats-core.svg)](https://gitter.im/bats-core/bats-core)\n\n## Updating documentation\n",
                      "markdown": "`\nPlease check the [documentation][documentation] or existing [discussions][] and [issues][repoissues] first.\n\nIf you cannot find an answer to your question, please feel free to hop on our \n[Gitter][gitterurl]. [![Gitter](https://badges.gitter.im/bats-core/bats-core.svg)](https://gitter.im/bats-core/bats-core)\n\n## Updating documentation\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 21,
                  "endLine": 7,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\nThank you for considering contributing to this project's \ndevelopment and/or documentation. Just a reminder: if you're new to this project\nor to OSS and want to find issues to work on, please check the following labels \non issues:\n\n- [help wanted][helpwantedlabel]\n",
                    "rendered": {
                      "text": "\nThank you for considering contributing to this project's \ndevelopment and/or documentation. Just a reminder: if you're new to this project\nor to OSS and want to find issues to work on, please check the following labels \non issues:\n\n- [help wanted][helpwantedlabel]\n",
                      "markdown": "`\nThank you for considering contributing to this project's \ndevelopment and/or documentation. Just a reminder: if you're new to this project\nor to OSS and want to find issues to work on, please check the following labels \non issues:\n\n- [help wanted][helpwantedlabel]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CODE_OF_CONDUCT.md"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 9,
                  "endLine": 84,
                  "endColumn": 13,
                  "snippet": {
                    "text": "## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[bt-gh]: https://github.com/btamayo\n[mb-gh]: https://github.com/mbland\n",
                    "rendered": {
                      "text": "## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[bt-gh]: https://github.com/btamayo\n[mb-gh]: https://github.com/mbland\n",
                      "markdown": "`## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[bt-gh]: https://github.com/btamayo\n[mb-gh]: https://github.com/mbland\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docs/CODE_OF_CONDUCT.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 14,
                  "endLine": 52,
                  "endColumn": 18,
                  "snippet": {
                    "text": "when an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n",
                    "rendered": {
                      "text": "when an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n",
                      "markdown": "`when an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docker/install_libs.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -o errexit\nset -o nounset\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -o errexit\nset -o nounset\n\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -o errexit\nset -o nounset\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docker/install_libs.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 71,
                  "endLine": 32,
                  "endColumn": 76,
                  "snippet": {
                    "text": "}\n\ndownload_extract_source() {\n    wget -qO- ${BASEURL}/bats-\"${1}\"/archive/refs/tags/v\"${2}\".tar.gz | tar xz -C \"${TMPDIR}/${1}\" --strip-components 1\n}\n\ninstall_files() {\n",
                    "rendered": {
                      "text": "}\n\ndownload_extract_source() {\n    wget -qO- ${BASEURL}/bats-\"${1}\"/archive/refs/tags/v\"${2}\".tar.gz | tar xz -C \"${TMPDIR}/${1}\" --strip-components 1\n}\n\ninstall_files() {\n",
                      "markdown": "`}\n\ndownload_extract_source() {\n    wget -qO- ${BASEURL}/bats-\"${1}\"/archive/refs/tags/v\"${2}\".tar.gz | tar xz -C \"${TMPDIR}/${1}\" --strip-components 1\n}\n\ninstall_files() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docker/install_libs.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 3,
                  "endLine": 32,
                  "endColumn": 9,
                  "snippet": {
                    "text": "}\n\ndownload_extract_source() {\n    wget -qO- ${BASEURL}/bats-\"${1}\"/archive/refs/tags/v\"${2}\".tar.gz | tar xz -C \"${TMPDIR}/${1}\" --strip-components 1\n}\n\ninstall_files() {\n",
                    "rendered": {
                      "text": "}\n\ndownload_extract_source() {\n    wget -qO- ${BASEURL}/bats-\"${1}\"/archive/refs/tags/v\"${2}\".tar.gz | tar xz -C \"${TMPDIR}/${1}\" --strip-components 1\n}\n\ninstall_files() {\n",
                      "markdown": "`}\n\ndownload_extract_source() {\n    wget -qO- ${BASEURL}/bats-\"${1}\"/archive/refs/tags/v\"${2}\".tar.gz | tar xz -C \"${TMPDIR}/${1}\" --strip-components 1\n}\n\ninstall_files() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docker/install_libs.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -o errexit\nset -o nounset\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -o errexit\nset -o nounset\n\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -o errexit\nset -o nounset\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docker/install_tini.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -e\n\ncase ${1#linux/} in\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -e\n\ncase ${1#linux/} in\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -e\n\ncase ${1#linux/} in\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docker/install_tini.sh"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 25,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}\" -O /tini\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}.asc\" -O /tini.asc\n\nchmod +x /tini\n\napk add gnupg\ngpg --import </tmp/docker/tini.pubkey.gpg\n",
                    "rendered": {
                      "text": "\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}\" -O /tini\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}.asc\" -O /tini.asc\n\nchmod +x /tini\n\napk add gnupg\ngpg --import </tmp/docker/tini.pubkey.gpg\n",
                      "markdown": "`\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}\" -O /tini\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}.asc\" -O /tini.asc\n\nchmod +x /tini\n\napk add gnupg\ngpg --import </tmp/docker/tini.pubkey.gpg\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docker/install_tini.sh"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 110,
                  "endLine": 23,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\necho \"Installing tini for $TINI_PLATFORM\"\n\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}\" -O /tini\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}.asc\" -O /tini.asc\n\nchmod +x /tini\n\n",
                    "rendered": {
                      "text": "\necho \"Installing tini for $TINI_PLATFORM\"\n\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}\" -O /tini\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}.asc\" -O /tini.asc\n\nchmod +x /tini\n\n",
                      "markdown": "`\necho \"Installing tini for $TINI_PLATFORM\"\n\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}\" -O /tini\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}.asc\" -O /tini.asc\n\nchmod +x /tini\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docker/install_tini.sh"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 22,
                  "endColumn": 5,
                  "snippet": {
                    "text": "esac\n\necho \"Installing tini for $TINI_PLATFORM\"\n\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}\" -O /tini\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}.asc\" -O /tini.asc\n\nchmod +x /tini\n",
                    "rendered": {
                      "text": "esac\n\necho \"Installing tini for $TINI_PLATFORM\"\n\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}\" -O /tini\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}.asc\" -O /tini.asc\n\nchmod +x /tini\n",
                      "markdown": "`esac\n\necho \"Installing tini for $TINI_PLATFORM\"\n\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}\" -O /tini\nwget \"https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-${TINI_PLATFORM}.asc\" -O /tini.asc\n\nchmod +x /tini\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/docker/install_tini.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -e\n\ncase ${1#linux/} in\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -e\n\ncase ${1#linux/} in\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -e\n\ncase ${1#linux/} in\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/rpm/bats.spec"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 15,
                  "endLine": 18,
                  "snippet": {
                    "text": "\nBuildArch:      noarch\n\nRequires:       bash\n\n%description\nBats is a TAP-compliant testing framework for Bash.\nIt provides a simple way to verify that the UNIX programs you write behave as expected.\n",
                    "rendered": {
                      "text": "\nBuildArch:      noarch\n\nRequires:       bash\n\n%description\nBats is a TAP-compliant testing framework for Bash.\nIt provides a simple way to verify that the UNIX programs you write behave as expected.\n",
                      "markdown": "`\nBuildArch:      noarch\n\nRequires:       bash\n\n%description\nBats is a TAP-compliant testing framework for Bash.\nIt provides a simple way to verify that the UNIX programs you write behave as expected.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/rpm/bats.spec"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 15,
                  "endLine": 8,
                  "endColumn": 21,
                  "snippet": {
                    "text": "Name:           bats\nVersion:        1.11.0\nRelease:        1%{?dist}\nSummary:        Bash Automated Testing System\n\nGroup:          Development/Libraries\nLicense:        MIT\n",
                    "rendered": {
                      "text": "Name:           bats\nVersion:        1.11.0\nRelease:        1%{?dist}\nSummary:        Bash Automated Testing System\n\nGroup:          Development/Libraries\nLicense:        MIT\n",
                      "markdown": "`Name:           bats\nVersion:        1.11.0\nRelease:        1%{?dist}\nSummary:        Bash Automated Testing System\n\nGroup:          Development/Libraries\nLicense:        MIT\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/rpm/bats.spec"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 14,
                  "endLine": 53,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n%changelog\n* Wed Sep 07 2022 Marcel Hecko <marcel@blava.net> - 1.2.0-1\n- Fix and test RPM build on Rocky Linux release 8.6\n\n* Sun Jul 08 2018 mbland <mbland@acm.org> - 1.1.0-1\n- Increase version to match upstream release\n",
                    "rendered": {
                      "text": "\n%changelog\n* Wed Sep 07 2022 Marcel Hecko <marcel@blava.net> - 1.2.0-1\n- Fix and test RPM build on Rocky Linux release 8.6\n\n* Sun Jul 08 2018 mbland <mbland@acm.org> - 1.1.0-1\n- Increase version to match upstream release\n",
                      "markdown": "`\n%changelog\n* Wed Sep 07 2022 Marcel Hecko <marcel@blava.net> - 1.2.0-1\n- Fix and test RPM build on Rocky Linux release 8.6\n\n* Sun Jul 08 2018 mbland <mbland@acm.org> - 1.1.0-1\n- Increase version to match upstream release\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/rpm/bats.spec"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 15,
                  "endLine": 18,
                  "snippet": {
                    "text": "\nBuildArch:      noarch\n\nRequires:       bash\n\n%description\nBats is a TAP-compliant testing framework for Bash.\nIt provides a simple way to verify that the UNIX programs you write behave as expected.\n",
                    "rendered": {
                      "text": "\nBuildArch:      noarch\n\nRequires:       bash\n\n%description\nBats is a TAP-compliant testing framework for Bash.\nIt provides a simple way to verify that the UNIX programs you write behave as expected.\n",
                      "markdown": "`\nBuildArch:      noarch\n\nRequires:       bash\n\n%description\nBats is a TAP-compliant testing framework for Bash.\nIt provides a simple way to verify that the UNIX programs you write behave as expected.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/contrib/rpm/bats.spec"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 15,
                  "endLine": 8,
                  "endColumn": 21,
                  "snippet": {
                    "text": "Name:           bats\nVersion:        1.11.0\nRelease:        1%{?dist}\nSummary:        Bash Automated Testing System\n\nGroup:          Development/Libraries\nLicense:        MIT\n",
                    "rendered": {
                      "text": "Name:           bats\nVersion:        1.11.0\nRelease:        1%{?dist}\nSummary:        Bash Automated Testing System\n\nGroup:          Development/Libraries\nLicense:        MIT\n",
                      "markdown": "`Name:           bats\nVersion:        1.11.0\nRelease:        1%{?dist}\nSummary:        Bash Automated Testing System\n\nGroup:          Development/Libraries\nLicense:        MIT\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.1"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 123,
                  "endLine": 36,
                  "endColumn": 127,
                  "snippet": {
                    "text": "hich now won\\'t match tests with tags \\fBa,b,c\\fR, due to the \\fBb\\fR, but will select \\fBa,c\\fR\\. To put it more formally, \\fB\\-\\-filter\\-tags\\fR is a boolean conjunction\\.\n.P\nTo allow for more complex queries, you can specify multiple \\fB\\-\\-filter\\-tags\\fR\\. A test will be executed, if it matches at least one of them\\. This means multiple \\fB\\-\\-filter\\-tags\\fR form a boolean disjunction\\.\n.P\nA query of \\fB\\-\\-filter\\-tags a,!b \\-\\-filter\\-tags b,c\\fR can be translated to: Execute only tests that (have tag a, but not tag b) or (have tag b and c)\\.\n.P\nAn empty tag list matches tests without tags",
                    "rendered": {
                      "text": "hich now won\\'t match tests with tags \\fBa,b,c\\fR, due to the \\fBb\\fR, but will select \\fBa,c\\fR\\. To put it more formally, \\fB\\-\\-filter\\-tags\\fR is a boolean conjunction\\.\n.P\nTo allow for more complex queries, you can specify multiple \\fB\\-\\-filter\\-tags\\fR\\. A test will be executed, if it matches at least one of them\\. This means multiple \\fB\\-\\-filter\\-tags\\fR form a boolean disjunction\\.\n.P\nA query of \\fB\\-\\-filter\\-tags a,!b \\-\\-filter\\-tags b,c\\fR can be translated to: Execute only tests that (have tag a, but not tag b) or (have tag b and c)\\.\n.P\nAn empty tag list matches tests without tags",
                      "markdown": "`hich now won\\'t match tests with tags \\fBa,b,c\\fR, due to the \\fBb\\fR, but will select \\fBa,c\\fR\\. To put it more formally, \\fB\\-\\-filter\\-tags\\fR is a boolean conjunction\\.\n.P\nTo allow for more complex queries, you can specify multiple \\fB\\-\\-filter\\-tags\\fR\\. A test will be executed, if it matches at least one of them\\. This means multiple \\fB\\-\\-filter\\-tags\\fR form a boolean disjunction\\.\n.P\nA query of \\fB\\-\\-filter\\-tags a,!b \\-\\-filter\\-tags b,c\\fR can be translated to: Execute only tests that (have tag a, but not tag b) or (have tag b and c)\\.\n.P\nAn empty tag list matches tests without tags`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.1"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 21,
                  "endLine": 13,
                  "endColumn": 27,
                  "snippet": {
                    "text": ".SH \"DESCRIPTION\"\nBats is a TAP\\-compliant testing framework for Bash\\. It provides a simple way to verify that the UNIX programs you write behave as expected\\.\n.P\nA Bats test file is a Bash script with special syntax for defining test cases\\. Under the hood, each test case is just a function with a description\\.\n.P\nTest cases consist of standard shell commands\\. Bats makes use of Bash\\'s \\fBerrexit\\fR (\\fBset \\-e\\fR) option when running test cases\\. If every command in the test case exits with a \\fB0\\fR status code (success), the test passes\\. In this way, each line is an assertion of truth\\.\n.P\n",
                    "rendered": {
                      "text": ".SH \"DESCRIPTION\"\nBats is a TAP\\-compliant testing framework for Bash\\. It provides a simple way to verify that the UNIX programs you write behave as expected\\.\n.P\nA Bats test file is a Bash script with special syntax for defining test cases\\. Under the hood, each test case is just a function with a description\\.\n.P\nTest cases consist of standard shell commands\\. Bats makes use of Bash\\'s \\fBerrexit\\fR (\\fBset \\-e\\fR) option when running test cases\\. If every command in the test case exits with a \\fB0\\fR status code (success), the test passes\\. In this way, each line is an assertion of truth\\.\n.P\n",
                      "markdown": "`.SH \"DESCRIPTION\"\nBats is a TAP\\-compliant testing framework for Bash\\. It provides a simple way to verify that the UNIX programs you write behave as expected\\.\n.P\nA Bats test file is a Bash script with special syntax for defining test cases\\. Under the hood, each test case is just a function with a description\\.\n.P\nTest cases consist of standard shell commands\\. Bats makes use of Bash\\'s \\fBerrexit\\fR (\\fBset \\-e\\fR) option when running test cases\\. If every command in the test case exits with a \\fB0\\fR status code (success), the test passes\\. In this way, each line is an assertion of truth\\.\n.P\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.1"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "endLine": 5,
                  "endColumn": 19,
                  "snippet": {
                    "text": ".\\\" http://github.com/apjanke/ronn-ng/tree/0.9.1\n.TH \"BATS\" \"1\" \"November 2022\" \"bats-core\" \"Bash Automated Testing System\"\n.SH \"NAME\"\n\\fBbats\\fR \\- Bash Automated Testing System\n.SH \"SYNOPSIS\"\nUsage: bats [OPTIONS] \\fItests\\fR bats [\\-h | \\-v]\n.P\n",
                    "rendered": {
                      "text": ".\\\" http://github.com/apjanke/ronn-ng/tree/0.9.1\n.TH \"BATS\" \"1\" \"November 2022\" \"bats-core\" \"Bash Automated Testing System\"\n.SH \"NAME\"\n\\fBbats\\fR \\- Bash Automated Testing System\n.SH \"SYNOPSIS\"\nUsage: bats [OPTIONS] \\fItests\\fR bats [\\-h | \\-v]\n.P\n",
                      "markdown": "`.\\\" http://github.com/apjanke/ronn-ng/tree/0.9.1\n.TH \"BATS\" \"1\" \"November 2022\" \"bats-core\" \"Bash Automated Testing System\"\n.SH \"NAME\"\n\\fBbats\\fR \\- Bash Automated Testing System\n.SH \"SYNOPSIS\"\nUsage: bats [OPTIONS] \\fItests\\fR bats [\\-h | \\-v]\n.P\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.1"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 21,
                  "endLine": 13,
                  "endColumn": 27,
                  "snippet": {
                    "text": ".SH \"DESCRIPTION\"\nBats is a TAP\\-compliant testing framework for Bash\\. It provides a simple way to verify that the UNIX programs you write behave as expected\\.\n.P\nA Bats test file is a Bash script with special syntax for defining test cases\\. Under the hood, each test case is just a function with a description\\.\n.P\nTest cases consist of standard shell commands\\. Bats makes use of Bash\\'s \\fBerrexit\\fR (\\fBset \\-e\\fR) option when running test cases\\. If every command in the test case exits with a \\fB0\\fR status code (success), the test passes\\. In this way, each line is an assertion of truth\\.\n.P\n",
                    "rendered": {
                      "text": ".SH \"DESCRIPTION\"\nBats is a TAP\\-compliant testing framework for Bash\\. It provides a simple way to verify that the UNIX programs you write behave as expected\\.\n.P\nA Bats test file is a Bash script with special syntax for defining test cases\\. Under the hood, each test case is just a function with a description\\.\n.P\nTest cases consist of standard shell commands\\. Bats makes use of Bash\\'s \\fBerrexit\\fR (\\fBset \\-e\\fR) option when running test cases\\. If every command in the test case exits with a \\fB0\\fR status code (success), the test passes\\. In this way, each line is an assertion of truth\\.\n.P\n",
                      "markdown": "`.SH \"DESCRIPTION\"\nBats is a TAP\\-compliant testing framework for Bash\\. It provides a simple way to verify that the UNIX programs you write behave as expected\\.\n.P\nA Bats test file is a Bash script with special syntax for defining test cases\\. Under the hood, each test case is just a function with a description\\.\n.P\nTest cases consist of standard shell commands\\. Bats makes use of Bash\\'s \\fBerrexit\\fR (\\fBset \\-e\\fR) option when running test cases\\. If every command in the test case exits with a \\fB0\\fR status code (success), the test passes\\. In this way, each line is an assertion of truth\\.\n.P\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.1"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 13,
                  "endLine": 5,
                  "endColumn": 19,
                  "snippet": {
                    "text": ".\\\" http://github.com/apjanke/ronn-ng/tree/0.9.1\n.TH \"BATS\" \"1\" \"November 2022\" \"bats-core\" \"Bash Automated Testing System\"\n.SH \"NAME\"\n\\fBbats\\fR \\- Bash Automated Testing System\n.SH \"SYNOPSIS\"\nUsage: bats [OPTIONS] \\fItests\\fR bats [\\-h | \\-v]\n.P\n",
                    "rendered": {
                      "text": ".\\\" http://github.com/apjanke/ronn-ng/tree/0.9.1\n.TH \"BATS\" \"1\" \"November 2022\" \"bats-core\" \"Bash Automated Testing System\"\n.SH \"NAME\"\n\\fBbats\\fR \\- Bash Automated Testing System\n.SH \"SYNOPSIS\"\nUsage: bats [OPTIONS] \\fItests\\fR bats [\\-h | \\-v]\n.P\n",
                      "markdown": "`.\\\" http://github.com/apjanke/ronn-ng/tree/0.9.1\n.TH \"BATS\" \"1\" \"November 2022\" \"bats-core\" \"Bash Automated Testing System\"\n.SH \"NAME\"\n\\fBbats\\fR \\- Bash Automated Testing System\n.SH \"SYNOPSIS\"\nUsage: bats [OPTIONS] \\fItests\\fR bats [\\-h | \\-v]\n.P\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7.ronn"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 67,
                  "endLine": 377,
                  "endColumn": 75,
                  "snippet": {
                    "text": "  The default of 0 means the test must pass on the first attempt.\n* `BATS_TEST_TIMEOUT` is the number of seconds after which a test (including setup)\n  will be aborted and marked as failed. Updates to this value in `setup()` or `@test`\n  cannot change the running timeout countdown, so the latest useful update location is `setup_file()`.\n* `$BATS_TEST_NUMBER` is the (1-based) index of the current test case\nin the test file.\n* `$BATS_SUITE_TEST_NUMBER` is the (1-based) index of the current test\n",
                    "rendered": {
                      "text": "  The default of 0 means the test must pass on the first attempt.\n* `BATS_TEST_TIMEOUT` is the number of seconds after which a test (including setup)\n  will be aborted and marked as failed. Updates to this value in `setup()` or `@test`\n  cannot change the running timeout countdown, so the latest useful update location is `setup_file()`.\n* `$BATS_TEST_NUMBER` is the (1-based) index of the current test case\nin the test file.\n* `$BATS_SUITE_TEST_NUMBER` is the (1-based) index of the current test\n",
                      "markdown": "`  The default of 0 means the test must pass on the first attempt.\n* `BATS_TEST_TIMEOUT` is the number of seconds after which a test (including setup)\n  will be aborted and marked as failed. Updates to this value in `setup()` or `@test`\n  cannot change the running timeout countdown, so the latest useful update location is `setup_file()`.\n* `$BATS_TEST_NUMBER` is the (1-based) index of the current test case\nin the test file.\n* `$BATS_SUITE_TEST_NUMBER` is the (1-based) index of the current test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7.ronn"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 48,
                  "endLine": 289,
                  "endColumn": 52,
                  "snippet": {
                    "text": "THE SKIP COMMAND\n----------------\n\nTests can be skipped by using the `skip` command at the point in a\ntest you wish to skip.\n\n    @test \"A test I don't want to execute for now\" {\n",
                    "rendered": {
                      "text": "THE SKIP COMMAND\n----------------\n\nTests can be skipped by using the `skip` command at the point in a\ntest you wish to skip.\n\n    @test \"A test I don't want to execute for now\" {\n",
                      "markdown": "`THE SKIP COMMAND\n----------------\n\nTests can be skipped by using the `skip` command at the point in a\ntest you wish to skip.\n\n    @test \"A test I don't want to execute for now\" {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7.ronn"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 51,
                  "endLine": 232,
                  "endColumn": 57,
                  "snippet": {
                    "text": "----------------\n\nYou may want to share common code across multiple test files. Bats\nincludes a convenient `load` command for sourcing a Bash source file\nrelative to the location of the current test file. For example, if you\nhave a Bats test in `test/foo.bats`, the command\n\n",
                    "rendered": {
                      "text": "----------------\n\nYou may want to share common code across multiple test files. Bats\nincludes a convenient `load` command for sourcing a Bash source file\nrelative to the location of the current test file. For example, if you\nhave a Bats test in `test/foo.bats`, the command\n\n",
                      "markdown": "`----------------\n\nYou may want to share common code across multiple test files. Bats\nincludes a convenient `load` command for sourcing a Bash source file\nrelative to the location of the current test file. For example, if you\nhave a Bats test in `test/foo.bats`, the command\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7.ronn"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 68,
                  "endLine": 176,
                  "snippet": {
                    "text": "within the context of the `run` command, and thus have the output and status\nvariables properly contained within the normal `output` and `status` variables.\n\nNote that this requires the usage of `\\|`, not `|`. This is to avoid bash\nparsing out `|` first, instead sending `\\|` to the bats_pipe command for it to\nparse and set up intended piping. Running bats_pipe with no instances of `\\|`\nwill always fail; this is intended to catch typos (accidentally using `|`) by\nthe test author.\n",
                    "rendered": {
                      "text": "within the context of the `run` command, and thus have the output and status\nvariables properly contained within the normal `output` and `status` variables.\n\nNote that this requires the usage of `\\|`, not `|`. This is to avoid bash\nparsing out `|` first, instead sending `\\|` to the bats_pipe command for it to\nparse and set up intended piping. Running bats_pipe with no instances of `\\|`\nwill always fail; this is intended to catch typos (accidentally using `|`) by\nthe test author.\n",
                      "markdown": "`within the context of the `run` command, and thus have the output and status\nvariables properly contained within the normal `output` and `status` variables.\n\nNote that this requires the usage of `\\|`, not `|`. This is to avoid bash\nparsing out `|` first, instead sending `\\|` to the bats_pipe command for it to\nparse and set up intended piping. Running bats_pipe with no instances of `\\|`\nwill always fail; this is intended to catch typos (accidentally using `|`) by\nthe test author.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7.ronn"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 6,
                  "endLine": 168,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nThe bats_pipe helper command is meant to handle piping between commands. Its\nmain purpose is to aide the `run` helper command (which cannot handle pipes,\ndue to bash parsing priority). `run command0 | command1` will parse `|` before\n`run`, which is commonly not intended by test authors.\n\nRunning `run bats_pipe command0 \\| command1` will have the piped commands run\n",
                    "rendered": {
                      "text": "\nThe bats_pipe helper command is meant to handle piping between commands. Its\nmain purpose is to aide the `run` helper command (which cannot handle pipes,\ndue to bash parsing priority). `run command0 | command1` will parse `|` before\n`run`, which is commonly not intended by test authors.\n\nRunning `run bats_pipe command0 \\| command1` will have the piped commands run\n",
                      "markdown": "`\nThe bats_pipe helper command is meant to handle piping between commands. Its\nmain purpose is to aide the `run` helper command (which cannot handle pipes,\ndue to bash parsing priority). `run command0 | command1` will parse `|` before\n`run`, which is commonly not intended by test authors.\n\nRunning `run bats_pipe command0 \\| command1` will have the piped commands run\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7.ronn"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 21,
                  "endLine": 8,
                  "endColumn": 27,
                  "snippet": {
                    "text": "DESCRIPTION\n-----------\n\nA Bats test file is a Bash script with special syntax for defining\ntest cases. Under the hood, each test case is just a function with a\ndescription.\n\n",
                    "rendered": {
                      "text": "DESCRIPTION\n-----------\n\nA Bats test file is a Bash script with special syntax for defining\ntest cases. Under the hood, each test case is just a function with a\ndescription.\n\n",
                      "markdown": "`DESCRIPTION\n-----------\n\nA Bats test file is a Bash script with special syntax for defining\ntest cases. Under the hood, each test case is just a function with a\ndescription.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7.ronn"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 27,
                  "endLine": 377,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  The default of 0 means the test must pass on the first attempt.\n* `BATS_TEST_TIMEOUT` is the number of seconds after which a test (including setup)\n  will be aborted and marked as failed. Updates to this value in `setup()` or `@test`\n  cannot change the running timeout countdown, so the latest useful update location is `setup_file()`.\n* `$BATS_TEST_NUMBER` is the (1-based) index of the current test case\nin the test file.\n* `$BATS_SUITE_TEST_NUMBER` is the (1-based) index of the current test\n",
                    "rendered": {
                      "text": "  The default of 0 means the test must pass on the first attempt.\n* `BATS_TEST_TIMEOUT` is the number of seconds after which a test (including setup)\n  will be aborted and marked as failed. Updates to this value in `setup()` or `@test`\n  cannot change the running timeout countdown, so the latest useful update location is `setup_file()`.\n* `$BATS_TEST_NUMBER` is the (1-based) index of the current test case\nin the test file.\n* `$BATS_SUITE_TEST_NUMBER` is the (1-based) index of the current test\n",
                      "markdown": "`  The default of 0 means the test must pass on the first attempt.\n* `BATS_TEST_TIMEOUT` is the number of seconds after which a test (including setup)\n  will be aborted and marked as failed. Updates to this value in `setup()` or `@test`\n  cannot change the running timeout countdown, so the latest useful update location is `setup_file()`.\n* `$BATS_TEST_NUMBER` is the (1-based) index of the current test case\nin the test file.\n* `$BATS_SUITE_TEST_NUMBER` is the (1-based) index of the current test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7.ronn"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 8,
                  "endLine": 290,
                  "endColumn": 14,
                  "snippet": {
                    "text": "----------------\n\nTests can be skipped by using the `skip` command at the point in a\ntest you wish to skip.\n\n    @test \"A test I don't want to execute for now\" {\n      skip\n",
                    "rendered": {
                      "text": "----------------\n\nTests can be skipped by using the `skip` command at the point in a\ntest you wish to skip.\n\n    @test \"A test I don't want to execute for now\" {\n      skip\n",
                      "markdown": "`----------------\n\nTests can be skipped by using the `skip` command at the point in a\ntest you wish to skip.\n\n    @test \"A test I don't want to execute for now\" {\n      skip\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7.ronn"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 15,
                  "endLine": 238,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n    load test_helper\n\nwill source the script `test/test_helper.bash` in your test file. This\ncan be useful for sharing functions to set up your environment or load\nfixtures.\n\n",
                    "rendered": {
                      "text": "\n    load test_helper\n\nwill source the script `test/test_helper.bash` in your test file. This\ncan be useful for sharing functions to set up your environment or load\nfixtures.\n\n",
                      "markdown": "`\n    load test_helper\n\nwill source the script `test/test_helper.bash` in your test file. This\ncan be useful for sharing functions to set up your environment or load\nfixtures.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7.ronn"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 51,
                  "endLine": 232,
                  "endColumn": 57,
                  "snippet": {
                    "text": "----------------\n\nYou may want to share common code across multiple test files. Bats\nincludes a convenient `load` command for sourcing a Bash source file\nrelative to the location of the current test file. For example, if you\nhave a Bats test in `test/foo.bats`, the command\n\n",
                    "rendered": {
                      "text": "----------------\n\nYou may want to share common code across multiple test files. Bats\nincludes a convenient `load` command for sourcing a Bash source file\nrelative to the location of the current test file. For example, if you\nhave a Bats test in `test/foo.bats`, the command\n\n",
                      "markdown": "`----------------\n\nYou may want to share common code across multiple test files. Bats\nincludes a convenient `load` command for sourcing a Bash source file\nrelative to the location of the current test file. For example, if you\nhave a Bats test in `test/foo.bats`, the command\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7.ronn"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 68,
                  "endLine": 176,
                  "snippet": {
                    "text": "within the context of the `run` command, and thus have the output and status\nvariables properly contained within the normal `output` and `status` variables.\n\nNote that this requires the usage of `\\|`, not `|`. This is to avoid bash\nparsing out `|` first, instead sending `\\|` to the bats_pipe command for it to\nparse and set up intended piping. Running bats_pipe with no instances of `\\|`\nwill always fail; this is intended to catch typos (accidentally using `|`) by\nthe test author.\n",
                    "rendered": {
                      "text": "within the context of the `run` command, and thus have the output and status\nvariables properly contained within the normal `output` and `status` variables.\n\nNote that this requires the usage of `\\|`, not `|`. This is to avoid bash\nparsing out `|` first, instead sending `\\|` to the bats_pipe command for it to\nparse and set up intended piping. Running bats_pipe with no instances of `\\|`\nwill always fail; this is intended to catch typos (accidentally using `|`) by\nthe test author.\n",
                      "markdown": "`within the context of the `run` command, and thus have the output and status\nvariables properly contained within the normal `output` and `status` variables.\n\nNote that this requires the usage of `\\|`, not `|`. This is to avoid bash\nparsing out `|` first, instead sending `\\|` to the bats_pipe command for it to\nparse and set up intended piping. Running bats_pipe with no instances of `\\|`\nwill always fail; this is intended to catch typos (accidentally using `|`) by\nthe test author.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7.ronn"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 6,
                  "endLine": 168,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nThe bats_pipe helper command is meant to handle piping between commands. Its\nmain purpose is to aide the `run` helper command (which cannot handle pipes,\ndue to bash parsing priority). `run command0 | command1` will parse `|` before\n`run`, which is commonly not intended by test authors.\n\nRunning `run bats_pipe command0 \\| command1` will have the piped commands run\n",
                    "rendered": {
                      "text": "\nThe bats_pipe helper command is meant to handle piping between commands. Its\nmain purpose is to aide the `run` helper command (which cannot handle pipes,\ndue to bash parsing priority). `run command0 | command1` will parse `|` before\n`run`, which is commonly not intended by test authors.\n\nRunning `run bats_pipe command0 \\| command1` will have the piped commands run\n",
                      "markdown": "`\nThe bats_pipe helper command is meant to handle piping between commands. Its\nmain purpose is to aide the `run` helper command (which cannot handle pipes,\ndue to bash parsing priority). `run command0 | command1` will parse `|` before\n`run`, which is commonly not intended by test authors.\n\nRunning `run bats_pipe command0 \\| command1` will have the piped commands run\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7.ronn"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 41,
                  "endLine": 122,
                  "endColumn": 49,
                  "snippet": {
                    "text": "      [ \"$output\" = \"foo: no such file 'nonexistent_filename'\" ]\n    }\n\nThe `-1` as first argument tells `run` to expect 1 as an exit\nstatus, and to fail if the command exits with any other value.\nOn failure, both actual and expected values will be displayed,\nalong with the invoked command and its output:\n",
                    "rendered": {
                      "text": "      [ \"$output\" = \"foo: no such file 'nonexistent_filename'\" ]\n    }\n\nThe `-1` as first argument tells `run` to expect 1 as an exit\nstatus, and to fail if the command exits with any other value.\nOn failure, both actual and expected values will be displayed,\nalong with the invoked command and its output:\n",
                      "markdown": "`      [ \"$output\" = \"foo: no such file 'nonexistent_filename'\" ]\n    }\n\nThe `-1` as first argument tells `run` to expect 1 as an exit\nstatus, and to fail if the command exits with any other value.\nOn failure, both actual and expected values will be displayed,\nalong with the invoked command and its output:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/man/bats.7.ronn"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 21,
                  "endLine": 8,
                  "endColumn": 27,
                  "snippet": {
                    "text": "DESCRIPTION\n-----------\n\nA Bats test file is a Bash script with special syntax for defining\ntest cases. Under the hood, each test case is just a function with a\ndescription.\n\n",
                    "rendered": {
                      "text": "DESCRIPTION\n-----------\n\nA Bats test file is a Bash script with special syntax for defining\ntest cases. Under the hood, each test case is just a function with a\ndescription.\n\n",
                      "markdown": "`DESCRIPTION\n-----------\n\nA Bats test file is a Bash script with special syntax for defining\ntest cases. Under the hood, each test case is just a function with a\ndescription.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/LICENSE.md"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 36,
                  "endLine": 49,
                  "endColumn": 45,
                  "snippet": {
                    "text": "OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nFor details, please see the [version control history][commits].\n\n[bats-core]: https://github.com/bats-core/bats-core\n[bats]:https://github.com/sstephenson/bats\n",
                    "rendered": {
                      "text": "OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nFor details, please see the [version control history][commits].\n\n[bats-core]: https://github.com/bats-core/bats-core\n[bats]:https://github.com/sstephenson/bats\n",
                      "markdown": "`OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nFor details, please see the [version control history][commits].\n\n[bats-core]: https://github.com/bats-core/bats-core\n[bats]:https://github.com/sstephenson/bats\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/shellcheck.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -e\n\ntargets=()\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -e\n\ntargets=()\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -e\n\ntargets=()\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/shellcheck.sh"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  find . -type f \\( -name \\*.bash -o -name \\*.sh \\) -print0\n  find . -type f -name '*.bats' -not -name '*_no_shellcheck*' -print0\n  find libexec -type f -print0\n  find bin -type f -print0\n)\n\nif [[ $1 == --list ]]; then\n",
                    "rendered": {
                      "text": "  find . -type f \\( -name \\*.bash -o -name \\*.sh \\) -print0\n  find . -type f -name '*.bats' -not -name '*_no_shellcheck*' -print0\n  find libexec -type f -print0\n  find bin -type f -print0\n)\n\nif [[ $1 == --list ]]; then\n",
                      "markdown": "`  find . -type f \\( -name \\*.bash -o -name \\*.sh \\) -print0\n  find . -type f -name '*.bats' -not -name '*_no_shellcheck*' -print0\n  find libexec -type f -print0\n  find bin -type f -print0\n)\n\nif [[ $1 == --list ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/shellcheck.sh"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 7,
                  "snippet": {
                    "text": "done < <(\n  find . -type f \\( -name \\*.bash -o -name \\*.sh \\) -print0\n  find . -type f -name '*.bats' -not -name '*_no_shellcheck*' -print0\n  find libexec -type f -print0\n  find bin -type f -print0\n)\n\n",
                    "rendered": {
                      "text": "done < <(\n  find . -type f \\( -name \\*.bash -o -name \\*.sh \\) -print0\n  find . -type f -name '*.bats' -not -name '*_no_shellcheck*' -print0\n  find libexec -type f -print0\n  find bin -type f -print0\n)\n\n",
                      "markdown": "`done < <(\n  find . -type f \\( -name \\*.bash -o -name \\*.sh \\) -print0\n  find . -type f -name '*.bats' -not -name '*_no_shellcheck*' -print0\n  find libexec -type f -print0\n  find bin -type f -print0\n)\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/shellcheck.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  targets+=(\"$REPLY\")\ndone < <(\n  find . -type f \\( -name \\*.bash -o -name \\*.sh \\) -print0\n  find . -type f -name '*.bats' -not -name '*_no_shellcheck*' -print0\n  find libexec -type f -print0\n  find bin -type f -print0\n)\n",
                    "rendered": {
                      "text": "  targets+=(\"$REPLY\")\ndone < <(\n  find . -type f \\( -name \\*.bash -o -name \\*.sh \\) -print0\n  find . -type f -name '*.bats' -not -name '*_no_shellcheck*' -print0\n  find libexec -type f -print0\n  find bin -type f -print0\n)\n",
                      "markdown": "`  targets+=(\"$REPLY\")\ndone < <(\n  find . -type f \\( -name \\*.bash -o -name \\*.sh \\) -print0\n  find . -type f -name '*.bats' -not -name '*_no_shellcheck*' -print0\n  find libexec -type f -print0\n  find bin -type f -print0\n)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/shellcheck.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 7,
                  "snippet": {
                    "text": "while IFS= read -r -d $'\\0'; do\n  targets+=(\"$REPLY\")\ndone < <(\n  find . -type f \\( -name \\*.bash -o -name \\*.sh \\) -print0\n  find . -type f -name '*.bats' -not -name '*_no_shellcheck*' -print0\n  find libexec -type f -print0\n  find bin -type f -print0\n",
                    "rendered": {
                      "text": "while IFS= read -r -d $'\\0'; do\n  targets+=(\"$REPLY\")\ndone < <(\n  find . -type f \\( -name \\*.bash -o -name \\*.sh \\) -print0\n  find . -type f -name '*.bats' -not -name '*_no_shellcheck*' -print0\n  find libexec -type f -print0\n  find bin -type f -print0\n",
                      "markdown": "`while IFS= read -r -d $'\\0'; do\n  targets+=(\"$REPLY\")\ndone < <(\n  find . -type f \\( -name \\*.bash -o -name \\*.sh \\) -print0\n  find . -type f -name '*.bats' -not -name '*_no_shellcheck*' -print0\n  find libexec -type f -print0\n  find bin -type f -print0\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/shellcheck.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -e\n\ntargets=()\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -e\n\ntargets=()\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -e\n\ntargets=()\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/install.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -e\n\nBATS_ROOT=\"${0%/*}\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -e\n\nBATS_ROOT=\"${0%/*}\"\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -e\n\nBATS_ROOT=\"${0%/*}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/bats.zip/install.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -e\n\nBATS_ROOT=\"${0%/*}\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -e\n\nBATS_ROOT=\"${0%/*}\"\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -e\n\nBATS_ROOT=\"${0%/*}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}