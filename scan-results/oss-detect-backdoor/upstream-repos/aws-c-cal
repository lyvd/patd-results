{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 43,
                  "endLine": 341,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    }\n\n    key_pair_impl->base.vtable = &s_rsa_key_pair_vtable;\n    key_pair_impl->base.key_size_in_bits = private_key_data.modulus.len * 8;\n\n    aws_der_decoder_destroy(decoder);\n\n",
                    "rendered": {
                      "text": "    }\n\n    key_pair_impl->base.vtable = &s_rsa_key_pair_vtable;\n    key_pair_impl->base.key_size_in_bits = private_key_data.modulus.len * 8;\n\n    aws_der_decoder_destroy(decoder);\n\n",
                      "markdown": "`    }\n\n    key_pair_impl->base.vtable = &s_rsa_key_pair_vtable;\n    key_pair_impl->base.key_size_in_bits = private_key_data.modulus.len * 8;\n\n    aws_der_decoder_destroy(decoder);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 50,
                  "endLine": 325,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.coefficient);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.privateExponent);\n\n    NTSTATUS status = BCryptImportKeyPair(\n        s_rsa_alg,\n",
                    "rendered": {
                      "text": "    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.coefficient);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.privateExponent);\n\n    NTSTATUS status = BCryptImportKeyPair(\n        s_rsa_alg,\n",
                      "markdown": "`    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.coefficient);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.privateExponent);\n\n    NTSTATUS status = BCryptImportKeyPair(\n        s_rsa_alg,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 50,
                  "endLine": 324,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.coefficient);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.privateExponent);\n\n    NTSTATUS status = BCryptImportKeyPair(\n",
                    "rendered": {
                      "text": "    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.coefficient);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.privateExponent);\n\n    NTSTATUS status = BCryptImportKeyPair(\n",
                      "markdown": "`    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.coefficient);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.privateExponent);\n\n    NTSTATUS status = BCryptImportKeyPair(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 50,
                  "endLine": 323,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.coefficient);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.privateExponent);\n\n",
                    "rendered": {
                      "text": "    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.coefficient);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.privateExponent);\n\n",
                      "markdown": "`    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.coefficient);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.privateExponent);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 50,
                  "endLine": 322,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.modulus);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.coefficient);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.privateExponent);\n",
                    "rendered": {
                      "text": "    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.modulus);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.coefficient);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.privateExponent);\n",
                      "markdown": "`    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.modulus);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.coefficient);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.privateExponent);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 50,
                  "endLine": 321,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.publicExponent);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.modulus);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.coefficient);\n",
                    "rendered": {
                      "text": "    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.publicExponent);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.modulus);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.coefficient);\n",
                      "markdown": "`    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.publicExponent);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.modulus);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.coefficient);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 50,
                  "endLine": 320,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.publicExponent);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.modulus);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n",
                    "rendered": {
                      "text": "\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.publicExponent);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.modulus);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n",
                      "markdown": "`\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.publicExponent);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.modulus);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent2);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 50,
                  "endLine": 319,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    ULONG flags = 0;\n\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.publicExponent);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.modulus);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n",
                    "rendered": {
                      "text": "    ULONG flags = 0;\n\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.publicExponent);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.modulus);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n",
                      "markdown": "`    ULONG flags = 0;\n\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.publicExponent);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.modulus);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.exponent1);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 50,
                  "endLine": 318,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    LPCWSTR blob_type = BCRYPT_RSAFULLPRIVATE_BLOB;\n    ULONG flags = 0;\n\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.publicExponent);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.modulus);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n",
                    "rendered": {
                      "text": "    LPCWSTR blob_type = BCRYPT_RSAFULLPRIVATE_BLOB;\n    ULONG flags = 0;\n\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.publicExponent);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.modulus);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n",
                      "markdown": "`    LPCWSTR blob_type = BCRYPT_RSAFULLPRIVATE_BLOB;\n    ULONG flags = 0;\n\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.publicExponent);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.modulus);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime1);\n    aws_byte_buf_append(&key_pair_impl->key_buf, &private_key_data.prime2);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 31,
                  "endLine": 310,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    key_blob.cbPublicExp = (ULONG)private_key_data.publicExponent.len;\n    key_blob.cbModulus = (ULONG)private_key_data.modulus.len;\n    key_blob.cbPrime1 = (ULONG)private_key_data.prime1.len;\n    key_blob.cbPrime2 = (ULONG)private_key_data.prime2.len;\n\n    struct aws_byte_cursor header = aws_byte_cursor_from_array(&key_blob, sizeof(key_blob));\n    aws_byte_buf_append(&key_pair_impl->key_buf, &header);\n",
                    "rendered": {
                      "text": "    key_blob.cbPublicExp = (ULONG)private_key_data.publicExponent.len;\n    key_blob.cbModulus = (ULONG)private_key_data.modulus.len;\n    key_blob.cbPrime1 = (ULONG)private_key_data.prime1.len;\n    key_blob.cbPrime2 = (ULONG)private_key_data.prime2.len;\n\n    struct aws_byte_cursor header = aws_byte_cursor_from_array(&key_blob, sizeof(key_blob));\n    aws_byte_buf_append(&key_pair_impl->key_buf, &header);\n",
                      "markdown": "`    key_blob.cbPublicExp = (ULONG)private_key_data.publicExponent.len;\n    key_blob.cbModulus = (ULONG)private_key_data.modulus.len;\n    key_blob.cbPrime1 = (ULONG)private_key_data.prime1.len;\n    key_blob.cbPrime2 = (ULONG)private_key_data.prime2.len;\n\n    struct aws_byte_cursor header = aws_byte_cursor_from_array(&key_blob, sizeof(key_blob));\n    aws_byte_buf_append(&key_pair_impl->key_buf, &header);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 31,
                  "endLine": 309,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    key_blob.BitLength = (ULONG)private_key_data.modulus.len * 8;\n    key_blob.cbPublicExp = (ULONG)private_key_data.publicExponent.len;\n    key_blob.cbModulus = (ULONG)private_key_data.modulus.len;\n    key_blob.cbPrime1 = (ULONG)private_key_data.prime1.len;\n    key_blob.cbPrime2 = (ULONG)private_key_data.prime2.len;\n\n    struct aws_byte_cursor header = aws_byte_cursor_from_array(&key_blob, sizeof(key_blob));\n",
                    "rendered": {
                      "text": "    key_blob.BitLength = (ULONG)private_key_data.modulus.len * 8;\n    key_blob.cbPublicExp = (ULONG)private_key_data.publicExponent.len;\n    key_blob.cbModulus = (ULONG)private_key_data.modulus.len;\n    key_blob.cbPrime1 = (ULONG)private_key_data.prime1.len;\n    key_blob.cbPrime2 = (ULONG)private_key_data.prime2.len;\n\n    struct aws_byte_cursor header = aws_byte_cursor_from_array(&key_blob, sizeof(key_blob));\n",
                      "markdown": "`    key_blob.BitLength = (ULONG)private_key_data.modulus.len * 8;\n    key_blob.cbPublicExp = (ULONG)private_key_data.publicExponent.len;\n    key_blob.cbModulus = (ULONG)private_key_data.modulus.len;\n    key_blob.cbPrime1 = (ULONG)private_key_data.prime1.len;\n    key_blob.cbPrime2 = (ULONG)private_key_data.prime2.len;\n\n    struct aws_byte_cursor header = aws_byte_cursor_from_array(&key_blob, sizeof(key_blob));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 32,
                  "endLine": 308,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    key_blob.Magic = BCRYPT_RSAFULLPRIVATE_MAGIC;\n    key_blob.BitLength = (ULONG)private_key_data.modulus.len * 8;\n    key_blob.cbPublicExp = (ULONG)private_key_data.publicExponent.len;\n    key_blob.cbModulus = (ULONG)private_key_data.modulus.len;\n    key_blob.cbPrime1 = (ULONG)private_key_data.prime1.len;\n    key_blob.cbPrime2 = (ULONG)private_key_data.prime2.len;\n\n",
                    "rendered": {
                      "text": "    key_blob.Magic = BCRYPT_RSAFULLPRIVATE_MAGIC;\n    key_blob.BitLength = (ULONG)private_key_data.modulus.len * 8;\n    key_blob.cbPublicExp = (ULONG)private_key_data.publicExponent.len;\n    key_blob.cbModulus = (ULONG)private_key_data.modulus.len;\n    key_blob.cbPrime1 = (ULONG)private_key_data.prime1.len;\n    key_blob.cbPrime2 = (ULONG)private_key_data.prime2.len;\n\n",
                      "markdown": "`    key_blob.Magic = BCRYPT_RSAFULLPRIVATE_MAGIC;\n    key_blob.BitLength = (ULONG)private_key_data.modulus.len * 8;\n    key_blob.cbPublicExp = (ULONG)private_key_data.publicExponent.len;\n    key_blob.cbModulus = (ULONG)private_key_data.modulus.len;\n    key_blob.cbPrime1 = (ULONG)private_key_data.prime1.len;\n    key_blob.cbPrime2 = (ULONG)private_key_data.prime2.len;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 34,
                  "endLine": 307,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    AWS_ZERO_STRUCT(key_blob);\n    key_blob.Magic = BCRYPT_RSAFULLPRIVATE_MAGIC;\n    key_blob.BitLength = (ULONG)private_key_data.modulus.len * 8;\n    key_blob.cbPublicExp = (ULONG)private_key_data.publicExponent.len;\n    key_blob.cbModulus = (ULONG)private_key_data.modulus.len;\n    key_blob.cbPrime1 = (ULONG)private_key_data.prime1.len;\n    key_blob.cbPrime2 = (ULONG)private_key_data.prime2.len;\n",
                    "rendered": {
                      "text": "    AWS_ZERO_STRUCT(key_blob);\n    key_blob.Magic = BCRYPT_RSAFULLPRIVATE_MAGIC;\n    key_blob.BitLength = (ULONG)private_key_data.modulus.len * 8;\n    key_blob.cbPublicExp = (ULONG)private_key_data.publicExponent.len;\n    key_blob.cbModulus = (ULONG)private_key_data.modulus.len;\n    key_blob.cbPrime1 = (ULONG)private_key_data.prime1.len;\n    key_blob.cbPrime2 = (ULONG)private_key_data.prime2.len;\n",
                      "markdown": "`    AWS_ZERO_STRUCT(key_blob);\n    key_blob.Magic = BCRYPT_RSAFULLPRIVATE_MAGIC;\n    key_blob.BitLength = (ULONG)private_key_data.modulus.len * 8;\n    key_blob.cbPublicExp = (ULONG)private_key_data.publicExponent.len;\n    key_blob.cbModulus = (ULONG)private_key_data.modulus.len;\n    key_blob.cbPrime1 = (ULONG)private_key_data.prime1.len;\n    key_blob.cbPrime2 = (ULONG)private_key_data.prime2.len;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 32,
                  "endLine": 306,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    BCRYPT_RSAKEY_BLOB key_blob;\n    AWS_ZERO_STRUCT(key_blob);\n    key_blob.Magic = BCRYPT_RSAFULLPRIVATE_MAGIC;\n    key_blob.BitLength = (ULONG)private_key_data.modulus.len * 8;\n    key_blob.cbPublicExp = (ULONG)private_key_data.publicExponent.len;\n    key_blob.cbModulus = (ULONG)private_key_data.modulus.len;\n    key_blob.cbPrime1 = (ULONG)private_key_data.prime1.len;\n",
                    "rendered": {
                      "text": "    BCRYPT_RSAKEY_BLOB key_blob;\n    AWS_ZERO_STRUCT(key_blob);\n    key_blob.Magic = BCRYPT_RSAFULLPRIVATE_MAGIC;\n    key_blob.BitLength = (ULONG)private_key_data.modulus.len * 8;\n    key_blob.cbPublicExp = (ULONG)private_key_data.publicExponent.len;\n    key_blob.cbModulus = (ULONG)private_key_data.modulus.len;\n    key_blob.cbPrime1 = (ULONG)private_key_data.prime1.len;\n",
                      "markdown": "`    BCRYPT_RSAKEY_BLOB key_blob;\n    AWS_ZERO_STRUCT(key_blob);\n    key_blob.Magic = BCRYPT_RSAFULLPRIVATE_MAGIC;\n    key_blob.BitLength = (ULONG)private_key_data.modulus.len * 8;\n    key_blob.cbPublicExp = (ULONG)private_key_data.publicExponent.len;\n    key_blob.cbModulus = (ULONG)private_key_data.modulus.len;\n    key_blob.cbPrime1 = (ULONG)private_key_data.prime1.len;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 57,
                  "endLine": 294,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    if (aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data)) {\n        goto on_error;\n    }\n\n",
                    "rendered": {
                      "text": "\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    if (aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data)) {\n        goto on_error;\n    }\n\n",
                      "markdown": "`\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    if (aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data)) {\n        goto on_error;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 20,
                  "endLine": 293,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    }\n\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    if (aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data)) {\n        goto on_error;\n    }\n",
                    "rendered": {
                      "text": "    }\n\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    if (aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data)) {\n        goto on_error;\n    }\n",
                      "markdown": "`    }\n\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    if (aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data)) {\n        goto on_error;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 37,
                  "endLine": 292,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        goto on_error;\n    }\n\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    if (aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data)) {\n        goto on_error;\n",
                    "rendered": {
                      "text": "        goto on_error;\n    }\n\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    if (aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data)) {\n        goto on_error;\n",
                      "markdown": "`        goto on_error;\n    }\n\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    if (aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data)) {\n        goto on_error;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 19,
                  "endLine": 292,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        goto on_error;\n    }\n\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    if (aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data)) {\n        goto on_error;\n",
                    "rendered": {
                      "text": "        goto on_error;\n    }\n\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    if (aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data)) {\n        goto on_error;\n",
                      "markdown": "`        goto on_error;\n    }\n\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    if (aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data)) {\n        goto on_error;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_rsa.c"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 51,
                  "endLine": 274,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    .verify = s_rsa_verify,\n};\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor key) {\n\n",
                    "rendered": {
                      "text": "    .verify = s_rsa_verify,\n};\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor key) {\n\n",
                      "markdown": "`    .verify = s_rsa_verify,\n};\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor key) {\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/openssl_rsa.c"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 22,
                  "endLine": 405,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\non_error:\n    if (private_key) {\n        EVP_PKEY_free(private_key);\n    }\n\n    s_rsa_destroy_key(&key_pair_impl->base);\n",
                    "rendered": {
                      "text": "\non_error:\n    if (private_key) {\n        EVP_PKEY_free(private_key);\n    }\n\n    s_rsa_destroy_key(&key_pair_impl->base);\n",
                      "markdown": "`\non_error:\n    if (private_key) {\n        EVP_PKEY_free(private_key);\n    }\n\n    s_rsa_destroy_key(&key_pair_impl->base);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/openssl_rsa.c"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 8,
                  "endLine": 404,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    return &key_pair_impl->base;\n\non_error:\n    if (private_key) {\n        EVP_PKEY_free(private_key);\n    }\n\n",
                    "rendered": {
                      "text": "    return &key_pair_impl->base;\n\non_error:\n    if (private_key) {\n        EVP_PKEY_free(private_key);\n    }\n\n",
                      "markdown": "`    return &key_pair_impl->base;\n\non_error:\n    if (private_key) {\n        EVP_PKEY_free(private_key);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/openssl_rsa.c"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 25,
                  "endLine": 396,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        goto on_error;\n    }\n\n    key_pair_impl->key = private_key;\n\n    key_pair_impl->base.vtable = &s_rsa_key_pair_vtable;\n    key_pair_impl->base.key_size_in_bits = EVP_PKEY_bits(key_pair_impl->key);\n",
                    "rendered": {
                      "text": "        goto on_error;\n    }\n\n    key_pair_impl->key = private_key;\n\n    key_pair_impl->base.vtable = &s_rsa_key_pair_vtable;\n    key_pair_impl->base.key_size_in_bits = EVP_PKEY_bits(key_pair_impl->key);\n",
                      "markdown": "`        goto on_error;\n    }\n\n    key_pair_impl->key = private_key;\n\n    key_pair_impl->base.vtable = &s_rsa_key_pair_vtable;\n    key_pair_impl->base.key_size_in_bits = EVP_PKEY_bits(key_pair_impl->key);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/openssl_rsa.c"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 51,
                  "endLine": 390,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    }\n\n    private_key = EVP_PKEY_new();\n    if (private_key == NULL || EVP_PKEY_assign_RSA(private_key, rsa) == 0) {\n        RSA_free(rsa);\n        aws_raise_error(AWS_ERROR_CAL_CRYPTO_OPERATION_FAILED);\n        goto on_error;\n",
                    "rendered": {
                      "text": "    }\n\n    private_key = EVP_PKEY_new();\n    if (private_key == NULL || EVP_PKEY_assign_RSA(private_key, rsa) == 0) {\n        RSA_free(rsa);\n        aws_raise_error(AWS_ERROR_CAL_CRYPTO_OPERATION_FAILED);\n        goto on_error;\n",
                      "markdown": "`    }\n\n    private_key = EVP_PKEY_new();\n    if (private_key == NULL || EVP_PKEY_assign_RSA(private_key, rsa) == 0) {\n        RSA_free(rsa);\n        aws_raise_error(AWS_ERROR_CAL_CRYPTO_OPERATION_FAILED);\n        goto on_error;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/openssl_rsa.c"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 8,
                  "endLine": 390,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    }\n\n    private_key = EVP_PKEY_new();\n    if (private_key == NULL || EVP_PKEY_assign_RSA(private_key, rsa) == 0) {\n        RSA_free(rsa);\n        aws_raise_error(AWS_ERROR_CAL_CRYPTO_OPERATION_FAILED);\n        goto on_error;\n",
                    "rendered": {
                      "text": "    }\n\n    private_key = EVP_PKEY_new();\n    if (private_key == NULL || EVP_PKEY_assign_RSA(private_key, rsa) == 0) {\n        RSA_free(rsa);\n        aws_raise_error(AWS_ERROR_CAL_CRYPTO_OPERATION_FAILED);\n        goto on_error;\n",
                      "markdown": "`    }\n\n    private_key = EVP_PKEY_new();\n    if (private_key == NULL || EVP_PKEY_assign_RSA(private_key, rsa) == 0) {\n        RSA_free(rsa);\n        aws_raise_error(AWS_ERROR_CAL_CRYPTO_OPERATION_FAILED);\n        goto on_error;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/openssl_rsa.c"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 4,
                  "endLine": 389,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        goto on_error;\n    }\n\n    private_key = EVP_PKEY_new();\n    if (private_key == NULL || EVP_PKEY_assign_RSA(private_key, rsa) == 0) {\n        RSA_free(rsa);\n        aws_raise_error(AWS_ERROR_CAL_CRYPTO_OPERATION_FAILED);\n",
                    "rendered": {
                      "text": "        goto on_error;\n    }\n\n    private_key = EVP_PKEY_new();\n    if (private_key == NULL || EVP_PKEY_assign_RSA(private_key, rsa) == 0) {\n        RSA_free(rsa);\n        aws_raise_error(AWS_ERROR_CAL_CRYPTO_OPERATION_FAILED);\n",
                      "markdown": "`        goto on_error;\n    }\n\n    private_key = EVP_PKEY_new();\n    if (private_key == NULL || EVP_PKEY_assign_RSA(private_key, rsa) == 0) {\n        RSA_free(rsa);\n        aws_raise_error(AWS_ERROR_CAL_CRYPTO_OPERATION_FAILED);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/openssl_rsa.c"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 15,
                  "endLine": 384,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    RSA *rsa = NULL;\n    EVP_PKEY *private_key = NULL;\n\n    if (d2i_RSAPrivateKey(&rsa, (const uint8_t **)&key.ptr, key.len) == NULL) {\n        aws_raise_error(AWS_ERROR_CAL_CRYPTO_OPERATION_FAILED);\n        goto on_error;\n    }\n",
                    "rendered": {
                      "text": "    RSA *rsa = NULL;\n    EVP_PKEY *private_key = NULL;\n\n    if (d2i_RSAPrivateKey(&rsa, (const uint8_t **)&key.ptr, key.len) == NULL) {\n        aws_raise_error(AWS_ERROR_CAL_CRYPTO_OPERATION_FAILED);\n        goto on_error;\n    }\n",
                      "markdown": "`    RSA *rsa = NULL;\n    EVP_PKEY *private_key = NULL;\n\n    if (d2i_RSAPrivateKey(&rsa, (const uint8_t **)&key.ptr, key.len) == NULL) {\n        aws_raise_error(AWS_ERROR_CAL_CRYPTO_OPERATION_FAILED);\n        goto on_error;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/openssl_rsa.c"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 14,
                  "endLine": 382,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    aws_byte_buf_init_copy_from_cursor(&key_pair_impl->base.priv, allocator, key);\n\n    RSA *rsa = NULL;\n    EVP_PKEY *private_key = NULL;\n\n    if (d2i_RSAPrivateKey(&rsa, (const uint8_t **)&key.ptr, key.len) == NULL) {\n        aws_raise_error(AWS_ERROR_CAL_CRYPTO_OPERATION_FAILED);\n",
                    "rendered": {
                      "text": "    aws_byte_buf_init_copy_from_cursor(&key_pair_impl->base.priv, allocator, key);\n\n    RSA *rsa = NULL;\n    EVP_PKEY *private_key = NULL;\n\n    if (d2i_RSAPrivateKey(&rsa, (const uint8_t **)&key.ptr, key.len) == NULL) {\n        aws_raise_error(AWS_ERROR_CAL_CRYPTO_OPERATION_FAILED);\n",
                      "markdown": "`    aws_byte_buf_init_copy_from_cursor(&key_pair_impl->base.priv, allocator, key);\n\n    RSA *rsa = NULL;\n    EVP_PKEY *private_key = NULL;\n\n    if (d2i_RSAPrivateKey(&rsa, (const uint8_t **)&key.ptr, key.len) == NULL) {\n        aws_raise_error(AWS_ERROR_CAL_CRYPTO_OPERATION_FAILED);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/openssl_rsa.c"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 51,
                  "endLine": 371,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    .verify = s_rsa_verify,\n};\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor key) {\n    struct lc_rsa_key_pair *key_pair_impl = aws_mem_calloc(allocator, 1, sizeof(struct lc_rsa_key_pair));\n",
                    "rendered": {
                      "text": "    .verify = s_rsa_verify,\n};\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor key) {\n    struct lc_rsa_key_pair *key_pair_impl = aws_mem_calloc(allocator, 1, sizeof(struct lc_rsa_key_pair));\n",
                      "markdown": "`    .verify = s_rsa_verify,\n};\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor key) {\n    struct lc_rsa_key_pair *key_pair_impl = aws_mem_calloc(allocator, 1, sizeof(struct lc_rsa_key_pair));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/ecc.c"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 26,
                  "endLine": 269,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    }\n\n    if (private_key) {\n        *out_private_d = *private_key;\n    }\n\n    if (public_key) {\n",
                    "rendered": {
                      "text": "    }\n\n    if (private_key) {\n        *out_private_d = *private_key;\n    }\n\n    if (public_key) {\n",
                      "markdown": "`    }\n\n    if (private_key) {\n        *out_private_d = *private_key;\n    }\n\n    if (public_key) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/ecc.c"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 8,
                  "endLine": 268,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        return aws_raise_error(AWS_ERROR_CAL_MISSING_REQUIRED_KEY_COMPONENT);\n    }\n\n    if (private_key) {\n        *out_private_d = *private_key;\n    }\n\n",
                    "rendered": {
                      "text": "        return aws_raise_error(AWS_ERROR_CAL_MISSING_REQUIRED_KEY_COMPONENT);\n    }\n\n    if (private_key) {\n        *out_private_d = *private_key;\n    }\n\n",
                      "markdown": "`        return aws_raise_error(AWS_ERROR_CAL_MISSING_REQUIRED_KEY_COMPONENT);\n    }\n\n    if (private_key) {\n        *out_private_d = *private_key;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/ecc.c"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 9,
                  "endLine": 264,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        }\n    }\n\n    if (!private_key && !public_key) {\n        return aws_raise_error(AWS_ERROR_CAL_MISSING_REQUIRED_KEY_COMPONENT);\n    }\n\n",
                    "rendered": {
                      "text": "        }\n    }\n\n    if (!private_key && !public_key) {\n        return aws_raise_error(AWS_ERROR_CAL_MISSING_REQUIRED_KEY_COMPONENT);\n    }\n\n",
                      "markdown": "`        }\n    }\n\n    if (!private_key && !public_key) {\n        return aws_raise_error(AWS_ERROR_CAL_MISSING_REQUIRED_KEY_COMPONENT);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/ecc.c"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 12,
                  "endLine": 258,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n    if (pair_part_2.ptr && pair_part_2.len) {\n        if (pair_part_2.len == key_coordinate_size) {\n            private_key = &pair_part_2;\n        } else if (pair_part_2.len == public_key_blob_size) {\n            public_key = &pair_part_2;\n        }\n",
                    "rendered": {
                      "text": "\n    if (pair_part_2.ptr && pair_part_2.len) {\n        if (pair_part_2.len == key_coordinate_size) {\n            private_key = &pair_part_2;\n        } else if (pair_part_2.len == public_key_blob_size) {\n            public_key = &pair_part_2;\n        }\n",
                      "markdown": "`\n    if (pair_part_2.ptr && pair_part_2.len) {\n        if (pair_part_2.len == key_coordinate_size) {\n            private_key = &pair_part_2;\n        } else if (pair_part_2.len == public_key_blob_size) {\n            public_key = &pair_part_2;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/ecc.c"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 12,
                  "endLine": 250,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n    if (pair_part_1.ptr && pair_part_1.len) {\n        if (pair_part_1.len == key_coordinate_size) {\n            private_key = &pair_part_1;\n        } else if (pair_part_1.len == public_key_blob_size) {\n            public_key = &pair_part_1;\n        }\n",
                    "rendered": {
                      "text": "\n    if (pair_part_1.ptr && pair_part_1.len) {\n        if (pair_part_1.len == key_coordinate_size) {\n            private_key = &pair_part_1;\n        } else if (pair_part_1.len == public_key_blob_size) {\n            public_key = &pair_part_1;\n        }\n",
                      "markdown": "`\n    if (pair_part_1.ptr && pair_part_1.len) {\n        if (pair_part_1.len == key_coordinate_size) {\n            private_key = &pair_part_1;\n        } else if (pair_part_1.len == public_key_blob_size) {\n            public_key = &pair_part_1;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/ecc.c"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 28,
                  "endLine": 243,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n    size_t key_coordinate_size = aws_ecc_key_coordinate_byte_size_from_curve_name(*out_curve_name);\n\n    struct aws_byte_cursor *private_key = NULL;\n    struct aws_byte_cursor *public_key = NULL;\n\n    size_t public_key_blob_size = key_coordinate_size * 2 + 1;\n",
                    "rendered": {
                      "text": "\n    size_t key_coordinate_size = aws_ecc_key_coordinate_byte_size_from_curve_name(*out_curve_name);\n\n    struct aws_byte_cursor *private_key = NULL;\n    struct aws_byte_cursor *public_key = NULL;\n\n    size_t public_key_blob_size = key_coordinate_size * 2 + 1;\n",
                      "markdown": "`\n    size_t key_coordinate_size = aws_ecc_key_coordinate_byte_size_from_curve_name(*out_curve_name);\n\n    struct aws_byte_cursor *private_key = NULL;\n    struct aws_byte_cursor *public_key = NULL;\n\n    size_t public_key_blob_size = key_coordinate_size * 2 + 1;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/ecc.c"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 26,
                  "endLine": 177,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    *pub_y = aws_byte_cursor_from_buf(&key_pair->pub_y);\n}\n\nvoid aws_ecc_key_pair_get_private_key(const struct aws_ecc_key_pair *key_pair, struct aws_byte_cursor *private_d) {\n    *private_d = aws_byte_cursor_from_buf(&key_pair->priv_d);\n}\n\n",
                    "rendered": {
                      "text": "    *pub_y = aws_byte_cursor_from_buf(&key_pair->pub_y);\n}\n\nvoid aws_ecc_key_pair_get_private_key(const struct aws_ecc_key_pair *key_pair, struct aws_byte_cursor *private_d) {\n    *private_d = aws_byte_cursor_from_buf(&key_pair->priv_d);\n}\n\n",
                      "markdown": "`    *pub_y = aws_byte_cursor_from_buf(&key_pair->pub_y);\n}\n\nvoid aws_ecc_key_pair_get_private_key(const struct aws_ecc_key_pair *key_pair, struct aws_byte_cursor *private_d) {\n    *private_d = aws_byte_cursor_from_buf(&key_pair->priv_d);\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/ecc.c"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 35,
                  "endLine": 131,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n    return s_ecc_key_pair_new_from_private_key_fn(allocator, curve_name, priv_key);\n}\n\nstatic void s_aws_ecc_key_pair_destroy(struct aws_ecc_key_pair *key_pair) {\n",
                    "rendered": {
                      "text": "    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n    return s_ecc_key_pair_new_from_private_key_fn(allocator, curve_name, priv_key);\n}\n\nstatic void s_aws_ecc_key_pair_destroy(struct aws_ecc_key_pair *key_pair) {\n",
                      "markdown": "`    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n    return s_ecc_key_pair_new_from_private_key_fn(allocator, curve_name, priv_key);\n}\n\nstatic void s_aws_ecc_key_pair_destroy(struct aws_ecc_key_pair *key_pair) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/ecc.c"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 51,
                  "endLine": 127,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    return s_ecc_key_pair_new_from_public_key_fn(allocator, curve_name, public_key_x, public_key_y);\n}\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n",
                    "rendered": {
                      "text": "    return s_ecc_key_pair_new_from_public_key_fn(allocator, curve_name, public_key_x, public_key_y);\n}\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n",
                      "markdown": "`    return s_ecc_key_pair_new_from_public_key_fn(allocator, curve_name, public_key_x, public_key_y);\n}\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/ecc.c"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 30,
                  "endLine": 117,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    aws_ecc_key_pair_new_from_public_key_impl;\n\nstatic aws_ecc_key_pair_new_from_private_key_fn *s_ecc_key_pair_new_from_private_key_fn =\n    aws_ecc_key_pair_new_from_private_key_impl;\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_public_key(\n    struct aws_allocator *allocator,\n",
                    "rendered": {
                      "text": "    aws_ecc_key_pair_new_from_public_key_impl;\n\nstatic aws_ecc_key_pair_new_from_private_key_fn *s_ecc_key_pair_new_from_private_key_fn =\n    aws_ecc_key_pair_new_from_private_key_impl;\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_public_key(\n    struct aws_allocator *allocator,\n",
                      "markdown": "`    aws_ecc_key_pair_new_from_public_key_impl;\n\nstatic aws_ecc_key_pair_new_from_private_key_fn *s_ecc_key_pair_new_from_private_key_fn =\n    aws_ecc_key_pair_new_from_private_key_impl;\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_public_key(\n    struct aws_allocator *allocator,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/ecc.c"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 73,
                  "endLine": 116,
                  "endColumn": 84,
                  "snippet": {
                    "text": "static aws_ecc_key_pair_new_from_public_key_fn *s_ecc_key_pair_new_from_public_key_fn =\n    aws_ecc_key_pair_new_from_public_key_impl;\n\nstatic aws_ecc_key_pair_new_from_private_key_fn *s_ecc_key_pair_new_from_private_key_fn =\n    aws_ecc_key_pair_new_from_private_key_impl;\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_public_key(\n",
                    "rendered": {
                      "text": "static aws_ecc_key_pair_new_from_public_key_fn *s_ecc_key_pair_new_from_public_key_fn =\n    aws_ecc_key_pair_new_from_public_key_impl;\n\nstatic aws_ecc_key_pair_new_from_private_key_fn *s_ecc_key_pair_new_from_private_key_fn =\n    aws_ecc_key_pair_new_from_private_key_impl;\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_public_key(\n",
                      "markdown": "`static aws_ecc_key_pair_new_from_public_key_fn *s_ecc_key_pair_new_from_public_key_fn =\n    aws_ecc_key_pair_new_from_public_key_impl;\n\nstatic aws_ecc_key_pair_new_from_private_key_fn *s_ecc_key_pair_new_from_private_key_fn =\n    aws_ecc_key_pair_new_from_private_key_impl;\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_public_key(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/ecc.c"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 33,
                  "endLine": 116,
                  "endColumn": 44,
                  "snippet": {
                    "text": "static aws_ecc_key_pair_new_from_public_key_fn *s_ecc_key_pair_new_from_public_key_fn =\n    aws_ecc_key_pair_new_from_public_key_impl;\n\nstatic aws_ecc_key_pair_new_from_private_key_fn *s_ecc_key_pair_new_from_private_key_fn =\n    aws_ecc_key_pair_new_from_private_key_impl;\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_public_key(\n",
                    "rendered": {
                      "text": "static aws_ecc_key_pair_new_from_public_key_fn *s_ecc_key_pair_new_from_public_key_fn =\n    aws_ecc_key_pair_new_from_public_key_impl;\n\nstatic aws_ecc_key_pair_new_from_private_key_fn *s_ecc_key_pair_new_from_private_key_fn =\n    aws_ecc_key_pair_new_from_private_key_impl;\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_public_key(\n",
                      "markdown": "`static aws_ecc_key_pair_new_from_public_key_fn *s_ecc_key_pair_new_from_public_key_fn =\n    aws_ecc_key_pair_new_from_public_key_impl;\n\nstatic aws_ecc_key_pair_new_from_private_key_fn *s_ecc_key_pair_new_from_private_key_fn =\n    aws_ecc_key_pair_new_from_private_key_impl;\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_public_key(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/ecc.c"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 51,
                  "endLine": 101,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    abort();\n}\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key_impl(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n",
                    "rendered": {
                      "text": "    abort();\n}\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key_impl(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n",
                      "markdown": "`    abort();\n}\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key_impl(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/ecc.c"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 58,
                  "endLine": 82,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    const struct aws_byte_cursor *public_key_x,\n    const struct aws_byte_cursor *public_key_y);\n\nextern struct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key_impl(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key);\n",
                    "rendered": {
                      "text": "    const struct aws_byte_cursor *public_key_x,\n    const struct aws_byte_cursor *public_key_y);\n\nextern struct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key_impl(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key);\n",
                      "markdown": "`    const struct aws_byte_cursor *public_key_x,\n    const struct aws_byte_cursor *public_key_y);\n\nextern struct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key_impl(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/ecc.c"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 60,
                  "endLine": 70,
                  "endColumn": 71,
                  "snippet": {
                    "text": "                                                                           const struct aws_byte_cursor *public_key_x,\n                                                                           const struct aws_byte_cursor *public_key_y);\n\ntypedef struct aws_ecc_key_pair *(aws_ecc_key_pair_new_from_private_key_fn)(struct aws_allocator *allocator,\n                                                                            enum aws_ecc_curve_name curve_name,\n                                                                            const struct aws_byte_cursor *priv_key);\n\n",
                    "rendered": {
                      "text": "                                                                           const struct aws_byte_cursor *public_key_x,\n                                                                           const struct aws_byte_cursor *public_key_y);\n\ntypedef struct aws_ecc_key_pair *(aws_ecc_key_pair_new_from_private_key_fn)(struct aws_allocator *allocator,\n                                                                            enum aws_ecc_curve_name curve_name,\n                                                                            const struct aws_byte_cursor *priv_key);\n\n",
                      "markdown": "`                                                                           const struct aws_byte_cursor *public_key_x,\n                                                                           const struct aws_byte_cursor *public_key_y);\n\ntypedef struct aws_ecc_key_pair *(aws_ecc_key_pair_new_from_private_key_fn)(struct aws_allocator *allocator,\n                                                                            enum aws_ecc_curve_name curve_name,\n                                                                            const struct aws_byte_cursor *priv_key);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/sha1_test.c"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 62,
                  "endLine": 262,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    struct aws_byte_buf digest_size_buf;\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    struct aws_byte_buf digest_size_buf;\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    struct aws_byte_buf digest_size_buf;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/sha1_test.c"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 62,
                  "endLine": 233,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/sha1_test.c"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 62,
                  "endLine": 206,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/sha1_test.c"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 62,
                  "endLine": 185,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_SHA1_LEN] = {0};\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_SHA1_LEN] = {0};\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_SHA1_LEN] = {0};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/sha1_test.c"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 35,
                  "endLine": 152,
                  "endColumn": 101,
                  "snippet": {
                    "text": "    struct aws_hash *hash = aws_sha1_new(allocator);\n    ASSERT_NOT_NULL(hash);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_hash_update(hash, &input));\n",
                    "rendered": {
                      "text": "    struct aws_hash *hash = aws_sha1_new(allocator);\n    ASSERT_NOT_NULL(hash);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_hash_update(hash, &input));\n",
                      "markdown": "`    struct aws_hash *hash = aws_sha1_new(allocator);\n    ASSERT_NOT_NULL(hash);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_hash_update(hash, &input));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/sha1_test.c"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 62,
                  "endLine": 64,
                  "endColumn": 109,
                  "snippet": {
                    "text": "static int s_sha1_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n",
                    "rendered": {
                      "text": "static int s_sha1_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n",
                      "markdown": "`static int s_sha1_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/sha1_test.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 35,
                  "endLine": 49,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {\n        0x84, 0x98, 0x3e, 0x44, 0x1c, 0x3b, 0xd2, 0x6e, 0xba, 0xae,\n        0x4a, 0xa1, 0xf9, 0x51, 0x29, 0xe5, 0xe5, 0x46, 0x70, 0xf1,\n",
                    "rendered": {
                      "text": "    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {\n        0x84, 0x98, 0x3e, 0x44, 0x1c, 0x3b, 0xd2, 0x6e, 0xba, 0xae,\n        0x4a, 0xa1, 0xf9, 0x51, 0x29, 0xe5, 0xe5, 0x46, 0x70, 0xf1,\n",
                      "markdown": "`    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {\n        0x84, 0x98, 0x3e, 0x44, 0x1c, 0x3b, 0xd2, 0x6e, 0xba, 0xae,\n        0x4a, 0xa1, 0xf9, 0x51, 0x29, 0xe5, 0xe5, 0x46, 0x70, 0xf1,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/bin/produce_x_platform_fuzz_corpus/main.c"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 78,
                  "endLine": 147,
                  "endColumn": 89,
                  "snippet": {
                    "text": "    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    struct aws_ecc_key_pair *signing_key =\n        aws_ecc_key_pair_new_from_private_key(allocator, AWS_CAL_ECDSA_P256, &private_key);\n    struct aws_ecc_key_pair *verifying_key =\n        aws_ecc_key_pair_new_from_public_key(allocator, AWS_CAL_ECDSA_P256, &pub_x, &pub_y);\n\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    struct aws_ecc_key_pair *signing_key =\n        aws_ecc_key_pair_new_from_private_key(allocator, AWS_CAL_ECDSA_P256, &private_key);\n    struct aws_ecc_key_pair *verifying_key =\n        aws_ecc_key_pair_new_from_public_key(allocator, AWS_CAL_ECDSA_P256, &pub_x, &pub_y);\n\n",
                      "markdown": "`    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    struct aws_ecc_key_pair *signing_key =\n        aws_ecc_key_pair_new_from_private_key(allocator, AWS_CAL_ECDSA_P256, &private_key);\n    struct aws_ecc_key_pair *verifying_key =\n        aws_ecc_key_pair_new_from_public_key(allocator, AWS_CAL_ECDSA_P256, &pub_x, &pub_y);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/bin/produce_x_platform_fuzz_corpus/main.c"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 34,
                  "endLine": 147,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    struct aws_ecc_key_pair *signing_key =\n        aws_ecc_key_pair_new_from_private_key(allocator, AWS_CAL_ECDSA_P256, &private_key);\n    struct aws_ecc_key_pair *verifying_key =\n        aws_ecc_key_pair_new_from_public_key(allocator, AWS_CAL_ECDSA_P256, &pub_x, &pub_y);\n\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    struct aws_ecc_key_pair *signing_key =\n        aws_ecc_key_pair_new_from_private_key(allocator, AWS_CAL_ECDSA_P256, &private_key);\n    struct aws_ecc_key_pair *verifying_key =\n        aws_ecc_key_pair_new_from_public_key(allocator, AWS_CAL_ECDSA_P256, &pub_x, &pub_y);\n\n",
                      "markdown": "`    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    struct aws_ecc_key_pair *signing_key =\n        aws_ecc_key_pair_new_from_private_key(allocator, AWS_CAL_ECDSA_P256, &private_key);\n    struct aws_ecc_key_pair *verifying_key =\n        aws_ecc_key_pair_new_from_public_key(allocator, AWS_CAL_ECDSA_P256, &pub_x, &pub_y);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/bin/produce_x_platform_fuzz_corpus/main.c"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 27,
                  "endLine": 131,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        0x5b, 0x44, 0xc8, 0x13, 0x0b, 0x4e, 0x3e, 0xac, 0xca, 0x54, 0xa5, 0x6d, 0xda, 0x72, 0xb4, 0x64,\n    };\n\n    struct aws_byte_cursor private_key = aws_byte_cursor_from_array(d, sizeof(d));\n\n    uint8_t x[] = {\n        0x1c, 0xcb, 0xe9, 0x1c, 0x07, 0x5f, 0xc7, 0xf4, 0xf0, 0x33, 0xbf, 0xa2, 0x48, 0xdb, 0x8f, 0xcc,\n",
                    "rendered": {
                      "text": "        0x5b, 0x44, 0xc8, 0x13, 0x0b, 0x4e, 0x3e, 0xac, 0xca, 0x54, 0xa5, 0x6d, 0xda, 0x72, 0xb4, 0x64,\n    };\n\n    struct aws_byte_cursor private_key = aws_byte_cursor_from_array(d, sizeof(d));\n\n    uint8_t x[] = {\n        0x1c, 0xcb, 0xe9, 0x1c, 0x07, 0x5f, 0xc7, 0xf4, 0xf0, 0x33, 0xbf, 0xa2, 0x48, 0xdb, 0x8f, 0xcc,\n",
                      "markdown": "`        0x5b, 0x44, 0xc8, 0x13, 0x0b, 0x4e, 0x3e, 0xac, 0xca, 0x54, 0xa5, 0x6d, 0xda, 0x72, 0xb4, 0x64,\n    };\n\n    struct aws_byte_cursor private_key = aws_byte_cursor_from_array(d, sizeof(d));\n\n    uint8_t x[] = {\n        0x1c, 0xcb, 0xe9, 0x1c, 0x07, 0x5f, 0xc7, 0xf4, 0xf0, 0x33, 0xbf, 0xa2, 0x48, 0xdb, 0x8f, 0xcc,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_ecc.c"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 51,
                  "endLine": 366,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    return NULL;\n}\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key_impl(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n",
                    "rendered": {
                      "text": "    return NULL;\n}\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key_impl(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n",
                      "markdown": "`    return NULL;\n}\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key_impl(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_ecc.c"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 19,
                  "endLine": 61,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        case AWS_CAL_ECDSA_P256:\n            return private_key ? BCRYPT_ECDSA_PRIVATE_P256_MAGIC : BCRYPT_ECDSA_PUBLIC_P256_MAGIC;\n        case AWS_CAL_ECDSA_P384:\n            return private_key ? BCRYPT_ECDSA_PRIVATE_P384_MAGIC : BCRYPT_ECDSA_PUBLIC_P384_MAGIC;\n        default:\n            return 0;\n    }\n",
                    "rendered": {
                      "text": "        case AWS_CAL_ECDSA_P256:\n            return private_key ? BCRYPT_ECDSA_PRIVATE_P256_MAGIC : BCRYPT_ECDSA_PUBLIC_P256_MAGIC;\n        case AWS_CAL_ECDSA_P384:\n            return private_key ? BCRYPT_ECDSA_PRIVATE_P384_MAGIC : BCRYPT_ECDSA_PUBLIC_P384_MAGIC;\n        default:\n            return 0;\n    }\n",
                      "markdown": "`        case AWS_CAL_ECDSA_P256:\n            return private_key ? BCRYPT_ECDSA_PRIVATE_P256_MAGIC : BCRYPT_ECDSA_PUBLIC_P256_MAGIC;\n        case AWS_CAL_ECDSA_P384:\n            return private_key ? BCRYPT_ECDSA_PRIVATE_P384_MAGIC : BCRYPT_ECDSA_PUBLIC_P384_MAGIC;\n        default:\n            return 0;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_ecc.c"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 19,
                  "endLine": 59,
                  "endColumn": 30,
                  "snippet": {
                    "text": "static ULONG s_get_magic_from_curve_name(enum aws_ecc_curve_name curve_name, bool private_key) {\n    switch (curve_name) {\n        case AWS_CAL_ECDSA_P256:\n            return private_key ? BCRYPT_ECDSA_PRIVATE_P256_MAGIC : BCRYPT_ECDSA_PUBLIC_P256_MAGIC;\n        case AWS_CAL_ECDSA_P384:\n            return private_key ? BCRYPT_ECDSA_PRIVATE_P384_MAGIC : BCRYPT_ECDSA_PUBLIC_P384_MAGIC;\n        default:\n",
                    "rendered": {
                      "text": "static ULONG s_get_magic_from_curve_name(enum aws_ecc_curve_name curve_name, bool private_key) {\n    switch (curve_name) {\n        case AWS_CAL_ECDSA_P256:\n            return private_key ? BCRYPT_ECDSA_PRIVATE_P256_MAGIC : BCRYPT_ECDSA_PUBLIC_P256_MAGIC;\n        case AWS_CAL_ECDSA_P384:\n            return private_key ? BCRYPT_ECDSA_PRIVATE_P384_MAGIC : BCRYPT_ECDSA_PUBLIC_P384_MAGIC;\n        default:\n",
                      "markdown": "`static ULONG s_get_magic_from_curve_name(enum aws_ecc_curve_name curve_name, bool private_key) {\n    switch (curve_name) {\n        case AWS_CAL_ECDSA_P256:\n            return private_key ? BCRYPT_ECDSA_PRIVATE_P256_MAGIC : BCRYPT_ECDSA_PUBLIC_P256_MAGIC;\n        case AWS_CAL_ECDSA_P384:\n            return private_key ? BCRYPT_ECDSA_PRIVATE_P384_MAGIC : BCRYPT_ECDSA_PUBLIC_P384_MAGIC;\n        default:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/windows/bcrypt_ecc.c"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 82,
                  "endLine": 56,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    }\n}\n\nstatic ULONG s_get_magic_from_curve_name(enum aws_ecc_curve_name curve_name, bool private_key) {\n    switch (curve_name) {\n        case AWS_CAL_ECDSA_P256:\n            return private_key ? BCRYPT_ECDSA_PRIVATE_P256_MAGIC : BCRYPT_ECDSA_PUBLIC_P256_MAGIC;\n",
                    "rendered": {
                      "text": "    }\n}\n\nstatic ULONG s_get_magic_from_curve_name(enum aws_ecc_curve_name curve_name, bool private_key) {\n    switch (curve_name) {\n        case AWS_CAL_ECDSA_P256:\n            return private_key ? BCRYPT_ECDSA_PRIVATE_P256_MAGIC : BCRYPT_ECDSA_PUBLIC_P256_MAGIC;\n",
                      "markdown": "`    }\n}\n\nstatic ULONG s_get_magic_from_curve_name(enum aws_ecc_curve_name curve_name, bool private_key) {\n    switch (curve_name) {\n        case AWS_CAL_ECDSA_P256:\n            return private_key ? BCRYPT_ECDSA_PRIVATE_P256_MAGIC : BCRYPT_ECDSA_PUBLIC_P256_MAGIC;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/bin/run_x_platform_fuzz_corpus/main.c"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 52,
                  "endLine": 160,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            FILE *corpus_input_file = aws_fopen_safe(corpus_file, mode);\n\n            if (!corpus_input_file) {\n                fprintf(stderr, \"Unable to open file at %s\\n\", aws_string_c_str(corpus_file));\n                exit(-1);\n            }\n\n",
                    "rendered": {
                      "text": "            FILE *corpus_input_file = aws_fopen_safe(corpus_file, mode);\n\n            if (!corpus_input_file) {\n                fprintf(stderr, \"Unable to open file at %s\\n\", aws_string_c_str(corpus_file));\n                exit(-1);\n            }\n\n",
                      "markdown": "`            FILE *corpus_input_file = aws_fopen_safe(corpus_file, mode);\n\n            if (!corpus_input_file) {\n                fprintf(stderr, \"Unable to open file at %s\\n\", aws_string_c_str(corpus_file));\n                exit(-1);\n            }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/bin/run_x_platform_fuzz_corpus/main.c"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 54,
                  "endLine": 155,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n        if (corpus_file) {\n            corpus_runs++;\n            fprintf(stdout, \"Running corpus file found at %s:\\n\\n\", aws_string_c_str(corpus_file));\n            struct aws_string *mode = aws_string_new_from_c_str(allocator, \"r\");\n            FILE *corpus_input_file = aws_fopen_safe(corpus_file, mode);\n\n",
                    "rendered": {
                      "text": "\n        if (corpus_file) {\n            corpus_runs++;\n            fprintf(stdout, \"Running corpus file found at %s:\\n\\n\", aws_string_c_str(corpus_file));\n            struct aws_string *mode = aws_string_new_from_c_str(allocator, \"r\");\n            FILE *corpus_input_file = aws_fopen_safe(corpus_file, mode);\n\n",
                      "markdown": "`\n        if (corpus_file) {\n            corpus_runs++;\n            fprintf(stdout, \"Running corpus file found at %s:\\n\\n\", aws_string_c_str(corpus_file));\n            struct aws_string *mode = aws_string_new_from_c_str(allocator, \"r\");\n            FILE *corpus_input_file = aws_fopen_safe(corpus_file, mode);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/builder.json"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 68,
                  "endLine": 99,
                  "endColumn": 73,
                  "snippet": {
                    "text": "                        },\n                        {\n                            \"name\": \"aws-lc\",\n                            \"_comment\": \"FIPS releases are currently cut from this branch\",\n                            \"revision\": \"fips-2022-11-02\"\n                        }\n                    ]\n",
                    "rendered": {
                      "text": "                        },\n                        {\n                            \"name\": \"aws-lc\",\n                            \"_comment\": \"FIPS releases are currently cut from this branch\",\n                            \"revision\": \"fips-2022-11-02\"\n                        }\n                    ]\n",
                      "markdown": "`                        },\n                        {\n                            \"name\": \"aws-lc\",\n                            \"_comment\": \"FIPS releases are currently cut from this branch\",\n                            \"revision\": \"fips-2022-11-02\"\n                        }\n                    ]\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/README.md"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 16,
                  "endLine": 96,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n## FAQ\n### I want more algorithms, what do I do?\nGreat! So do we! At a minimum, file an issue letting us know. If you want to file a Pull Request, we'd be happy to review and merge it when it's ready.\n### Who should consume this package directly?\nAre you writing C directly? Then you should.\nAre you using any other programming language? This functionality will be exposed via that language specific crt packages.\n",
                    "rendered": {
                      "text": "\n## FAQ\n### I want more algorithms, what do I do?\nGreat! So do we! At a minimum, file an issue letting us know. If you want to file a Pull Request, we'd be happy to review and merge it when it's ready.\n### Who should consume this package directly?\nAre you writing C directly? Then you should.\nAre you using any other programming language? This functionality will be exposed via that language specific crt packages.\n",
                      "markdown": "`\n## FAQ\n### I want more algorithms, what do I do?\nGreat! So do we! At a minimum, file an issue letting us know. If you want to file a Pull Request, we'd be happy to review and merge it when it's ready.\n### Who should consume this package directly?\nAre you writing C directly? Then you should.\nAre you using any other programming language? This functionality will be exposed via that language specific crt packages.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/README.md"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 59,
                  "endLine": 31,
                  "endColumn": 63,
                  "snippet": {
                    "text": "cmake --build aws-lc/build --target install\n```\n\nAlternatively, OpenSSL versions 1.0.2 or 1.1.1 or BoringSSL at commit 9939e14\n(other commits are not tested and not guaranteed to work) can be used. To build\nagainst OpenSSL or BoringSSL specify -DUSE_OPENSSL=ON. Typical OpenSSL flags can\nbe used to help project locate artifacts (-DLibCrypto_INCLUDE_DIR and -DLibCrypto_STATIC_LIBRARY)\n",
                    "rendered": {
                      "text": "cmake --build aws-lc/build --target install\n```\n\nAlternatively, OpenSSL versions 1.0.2 or 1.1.1 or BoringSSL at commit 9939e14\n(other commits are not tested and not guaranteed to work) can be used. To build\nagainst OpenSSL or BoringSSL specify -DUSE_OPENSSL=ON. Typical OpenSSL flags can\nbe used to help project locate artifacts (-DLibCrypto_INCLUDE_DIR and -DLibCrypto_STATIC_LIBRARY)\n",
                      "markdown": "`cmake --build aws-lc/build --target install\n```\n\nAlternatively, OpenSSL versions 1.0.2 or 1.1.1 or BoringSSL at commit 9939e14\n(other commits are not tested and not guaranteed to work) can be used. To build\nagainst OpenSSL or BoringSSL specify -DUSE_OPENSSL=ON. Typical OpenSSL flags can\nbe used to help project locate artifacts (-DLibCrypto_INCLUDE_DIR and -DLibCrypto_STATIC_LIBRARY)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/README.md"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 43,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\ngit clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n```\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\ngit clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n```\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\ngit clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/README.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 3,
                  "endLine": 39,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n#### Building aws-c-cal and Remaining Dependencies\n\n```\ngit clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\n",
                    "rendered": {
                      "text": "\n#### Building aws-c-cal and Remaining Dependencies\n\n```\ngit clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\n",
                      "markdown": "`\n#### Building aws-c-cal and Remaining Dependencies\n\n```\ngit clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/README.md"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 62,
                  "endLine": 33,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\nAlternatively, OpenSSL versions 1.0.2 or 1.1.1 or BoringSSL at commit 9939e14\n(other commits are not tested and not guaranteed to work) can be used. To build\nagainst OpenSSL or BoringSSL specify -DUSE_OPENSSL=ON. Typical OpenSSL flags can\nbe used to help project locate artifacts (-DLibCrypto_INCLUDE_DIR and -DLibCrypto_STATIC_LIBRARY)\n\n#### Building aws-c-cal and Remaining Dependencies\n",
                    "rendered": {
                      "text": "\nAlternatively, OpenSSL versions 1.0.2 or 1.1.1 or BoringSSL at commit 9939e14\n(other commits are not tested and not guaranteed to work) can be used. To build\nagainst OpenSSL or BoringSSL specify -DUSE_OPENSSL=ON. Typical OpenSSL flags can\nbe used to help project locate artifacts (-DLibCrypto_INCLUDE_DIR and -DLibCrypto_STATIC_LIBRARY)\n\n#### Building aws-c-cal and Remaining Dependencies\n",
                      "markdown": "`\nAlternatively, OpenSSL versions 1.0.2 or 1.1.1 or BoringSSL at commit 9939e14\n(other commits are not tested and not guaranteed to work) can be used. To build\nagainst OpenSSL or BoringSSL specify -DUSE_OPENSSL=ON. Typical OpenSSL flags can\nbe used to help project locate artifacts (-DLibCrypto_INCLUDE_DIR and -DLibCrypto_STATIC_LIBRARY)\n\n#### Building aws-c-cal and Remaining Dependencies\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/README.md"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 7,
                  "endLine": 33,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\nAlternatively, OpenSSL versions 1.0.2 or 1.1.1 or BoringSSL at commit 9939e14\n(other commits are not tested and not guaranteed to work) can be used. To build\nagainst OpenSSL or BoringSSL specify -DUSE_OPENSSL=ON. Typical OpenSSL flags can\nbe used to help project locate artifacts (-DLibCrypto_INCLUDE_DIR and -DLibCrypto_STATIC_LIBRARY)\n\n#### Building aws-c-cal and Remaining Dependencies\n",
                    "rendered": {
                      "text": "\nAlternatively, OpenSSL versions 1.0.2 or 1.1.1 or BoringSSL at commit 9939e14\n(other commits are not tested and not guaranteed to work) can be used. To build\nagainst OpenSSL or BoringSSL specify -DUSE_OPENSSL=ON. Typical OpenSSL flags can\nbe used to help project locate artifacts (-DLibCrypto_INCLUDE_DIR and -DLibCrypto_STATIC_LIBRARY)\n\n#### Building aws-c-cal and Remaining Dependencies\n",
                      "markdown": "`\nAlternatively, OpenSSL versions 1.0.2 or 1.1.1 or BoringSSL at commit 9939e14\n(other commits are not tested and not guaranteed to work) can be used. To build\nagainst OpenSSL or BoringSSL specify -DUSE_OPENSSL=ON. Typical OpenSSL flags can\nbe used to help project locate artifacts (-DLibCrypto_INCLUDE_DIR and -DLibCrypto_STATIC_LIBRARY)\n\n#### Building aws-c-cal and Remaining Dependencies\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/README.md"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 14,
                  "endLine": 31,
                  "endColumn": 23,
                  "snippet": {
                    "text": "cmake --build aws-lc/build --target install\n```\n\nAlternatively, OpenSSL versions 1.0.2 or 1.1.1 or BoringSSL at commit 9939e14\n(other commits are not tested and not guaranteed to work) can be used. To build\nagainst OpenSSL or BoringSSL specify -DUSE_OPENSSL=ON. Typical OpenSSL flags can\nbe used to help project locate artifacts (-DLibCrypto_INCLUDE_DIR and -DLibCrypto_STATIC_LIBRARY)\n",
                    "rendered": {
                      "text": "cmake --build aws-lc/build --target install\n```\n\nAlternatively, OpenSSL versions 1.0.2 or 1.1.1 or BoringSSL at commit 9939e14\n(other commits are not tested and not guaranteed to work) can be used. To build\nagainst OpenSSL or BoringSSL specify -DUSE_OPENSSL=ON. Typical OpenSSL flags can\nbe used to help project locate artifacts (-DLibCrypto_INCLUDE_DIR and -DLibCrypto_STATIC_LIBRARY)\n",
                      "markdown": "`cmake --build aws-lc/build --target install\n```\n\nAlternatively, OpenSSL versions 1.0.2 or 1.1.1 or BoringSSL at commit 9939e14\n(other commits are not tested and not guaranteed to work) can be used. To build\nagainst OpenSSL or BoringSSL specify -DUSE_OPENSSL=ON. Typical OpenSSL flags can\nbe used to help project locate artifacts (-DLibCrypto_INCLUDE_DIR and -DLibCrypto_STATIC_LIBRARY)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/README.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 3,
                  "endLine": 26,
                  "endColumn": 4,
                  "snippet": {
                    "text": "If you are building on Linux, there are several options for crypto libraries.\nPreferred choice is aws-lc, that can be build as follows.\n\n```\ngit clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n```\n",
                    "rendered": {
                      "text": "If you are building on Linux, there are several options for crypto libraries.\nPreferred choice is aws-lc, that can be build as follows.\n\n```\ngit clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n```\n",
                      "markdown": "`If you are building on Linux, there are several options for crypto libraries.\nPreferred choice is aws-lc, that can be build as follows.\n\n```\ngit clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/README.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 11,
                  "endLine": 12,
                  "endColumn": 20,
                  "snippet": {
                    "text": "## Supported Platforms\n* Windows (Vista and Later)\n* Apple\n* Unix (via OpenSSL compatible libcrypto)\n\n## Build Instructions\n\n",
                    "rendered": {
                      "text": "## Supported Platforms\n* Windows (Vista and Later)\n* Apple\n* Unix (via OpenSSL compatible libcrypto)\n\n## Build Instructions\n\n",
                      "markdown": "`## Supported Platforms\n* Windows (Vista and Later)\n* Apple\n* Unix (via OpenSSL compatible libcrypto)\n\n## Build Instructions\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/openssl_platform_init.c"
                },
                "region": {
                  "startLine": 668,
                  "startColumn": 61,
                  "endLine": 668,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    dlclose(process);\n\n    if (result == AWS_LIBCRYPTO_NONE) {\n        AWS_LOGF_DEBUG(AWS_LS_CAL_LIBCRYPTO_RESOLVE, \"did not find libcrypto 1.0.2 symbols linked\");\n        AWS_LOGF_DEBUG(\n            AWS_LS_CAL_LIBCRYPTO_RESOLVE,\n            \"libcrypto symbols were not statically linked, searching for shared libraries\");\n",
                    "rendered": {
                      "text": "    dlclose(process);\n\n    if (result == AWS_LIBCRYPTO_NONE) {\n        AWS_LOGF_DEBUG(AWS_LS_CAL_LIBCRYPTO_RESOLVE, \"did not find libcrypto 1.0.2 symbols linked\");\n        AWS_LOGF_DEBUG(\n            AWS_LS_CAL_LIBCRYPTO_RESOLVE,\n            \"libcrypto symbols were not statically linked, searching for shared libraries\");\n",
                      "markdown": "`    dlclose(process);\n\n    if (result == AWS_LIBCRYPTO_NONE) {\n        AWS_LOGF_DEBUG(AWS_LS_CAL_LIBCRYPTO_RESOLVE, \"did not find libcrypto 1.0.2 symbols linked\");\n        AWS_LOGF_DEBUG(\n            AWS_LS_CAL_LIBCRYPTO_RESOLVE,\n            \"libcrypto symbols were not statically linked, searching for shared libraries\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/openssl_platform_init.c"
                },
                "region": {
                  "startLine": 662,
                  "startColumn": 61,
                  "endLine": 662,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_1_1_1, process);\n    }\n    if (result == AWS_LIBCRYPTO_NONE) {\n        AWS_LOGF_DEBUG(AWS_LS_CAL_LIBCRYPTO_RESOLVE, \"did not find libcrypto 1.1.1 symbols linked\");\n        result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_1_0_2, process);\n    }\n    dlclose(process);\n",
                    "rendered": {
                      "text": "        result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_1_1_1, process);\n    }\n    if (result == AWS_LIBCRYPTO_NONE) {\n        AWS_LOGF_DEBUG(AWS_LS_CAL_LIBCRYPTO_RESOLVE, \"did not find libcrypto 1.1.1 symbols linked\");\n        result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_1_0_2, process);\n    }\n    dlclose(process);\n",
                      "markdown": "`        result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_1_1_1, process);\n    }\n    if (result == AWS_LIBCRYPTO_NONE) {\n        AWS_LOGF_DEBUG(AWS_LS_CAL_LIBCRYPTO_RESOLVE, \"did not find libcrypto 1.1.1 symbols linked\");\n        result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_1_0_2, process);\n    }\n    dlclose(process);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/openssl_platform_init.c"
                },
                "region": {
                  "startLine": 658,
                  "startColumn": 61,
                  "endLine": 658,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_BORINGSSL, process);\n    }\n    if (result == AWS_LIBCRYPTO_NONE) {\n        AWS_LOGF_DEBUG(AWS_LS_CAL_LIBCRYPTO_RESOLVE, \"did not find boringssl symbols linked\");\n        result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_1_1_1, process);\n    }\n    if (result == AWS_LIBCRYPTO_NONE) {\n",
                    "rendered": {
                      "text": "        result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_BORINGSSL, process);\n    }\n    if (result == AWS_LIBCRYPTO_NONE) {\n        AWS_LOGF_DEBUG(AWS_LS_CAL_LIBCRYPTO_RESOLVE, \"did not find boringssl symbols linked\");\n        result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_1_1_1, process);\n    }\n    if (result == AWS_LIBCRYPTO_NONE) {\n",
                      "markdown": "`        result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_BORINGSSL, process);\n    }\n    if (result == AWS_LIBCRYPTO_NONE) {\n        AWS_LOGF_DEBUG(AWS_LS_CAL_LIBCRYPTO_RESOLVE, \"did not find boringssl symbols linked\");\n        result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_1_1_1, process);\n    }\n    if (result == AWS_LIBCRYPTO_NONE) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/openssl_platform_init.c"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 61,
                  "endLine": 654,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    AWS_FATAL_ASSERT(process && \"Unable to load symbols from process space\");\n    enum aws_libcrypto_version result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_LC, process);\n    if (result == AWS_LIBCRYPTO_NONE) {\n        AWS_LOGF_DEBUG(AWS_LS_CAL_LIBCRYPTO_RESOLVE, \"did not find aws-lc symbols linked\");\n        result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_BORINGSSL, process);\n    }\n    if (result == AWS_LIBCRYPTO_NONE) {\n",
                    "rendered": {
                      "text": "    AWS_FATAL_ASSERT(process && \"Unable to load symbols from process space\");\n    enum aws_libcrypto_version result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_LC, process);\n    if (result == AWS_LIBCRYPTO_NONE) {\n        AWS_LOGF_DEBUG(AWS_LS_CAL_LIBCRYPTO_RESOLVE, \"did not find aws-lc symbols linked\");\n        result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_BORINGSSL, process);\n    }\n    if (result == AWS_LIBCRYPTO_NONE) {\n",
                      "markdown": "`    AWS_FATAL_ASSERT(process && \"Unable to load symbols from process space\");\n    enum aws_libcrypto_version result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_LC, process);\n    if (result == AWS_LIBCRYPTO_NONE) {\n        AWS_LOGF_DEBUG(AWS_LS_CAL_LIBCRYPTO_RESOLVE, \"did not find aws-lc symbols linked\");\n        result = s_resolve_libcrypto_symbols(AWS_LIBCRYPTO_BORINGSSL, process);\n    }\n    if (result == AWS_LIBCRYPTO_NONE) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/opensslcrypto_ecc.c"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 19,
                  "endLine": 325,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        key_impl->key_pair.curve_name = curve_name;\n        /* as awkward as it seems, there's not a great way to manually set the public key, so let openssl just parse\n         * the der document manually now that we know what parts are what. */\n        if (!d2i_ECPrivateKey(&key_impl->ec_key, (const unsigned char **)&encoded_keys->ptr, encoded_keys->len)) {\n            aws_mem_release(allocator, key_impl);\n            aws_raise_error(AWS_ERROR_CAL_MISSING_REQUIRED_KEY_COMPONENT);\n            goto error;\n",
                    "rendered": {
                      "text": "        key_impl->key_pair.curve_name = curve_name;\n        /* as awkward as it seems, there's not a great way to manually set the public key, so let openssl just parse\n         * the der document manually now that we know what parts are what. */\n        if (!d2i_ECPrivateKey(&key_impl->ec_key, (const unsigned char **)&encoded_keys->ptr, encoded_keys->len)) {\n            aws_mem_release(allocator, key_impl);\n            aws_raise_error(AWS_ERROR_CAL_MISSING_REQUIRED_KEY_COMPONENT);\n            goto error;\n",
                      "markdown": "`        key_impl->key_pair.curve_name = curve_name;\n        /* as awkward as it seems, there's not a great way to manually set the public key, so let openssl just parse\n         * the der document manually now that we know what parts are what. */\n        if (!d2i_ECPrivateKey(&key_impl->ec_key, (const unsigned char **)&encoded_keys->ptr, encoded_keys->len)) {\n            aws_mem_release(allocator, key_impl);\n            aws_raise_error(AWS_ERROR_CAL_MISSING_REQUIRED_KEY_COMPONENT);\n            goto error;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/opensslcrypto_ecc.c"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 14,
                  "endLine": 219,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        goto error;\n    }\n\n    BN_bn2bin(private_key_num, key_impl->key_pair.priv_d.buffer);\n    key_impl->key_pair.priv_d.len = priv_key_size;\n\n    if (!s_fill_in_public_key_info(key_impl, group, pub_key_point)) {\n",
                    "rendered": {
                      "text": "        goto error;\n    }\n\n    BN_bn2bin(private_key_num, key_impl->key_pair.priv_d.buffer);\n    key_impl->key_pair.priv_d.len = priv_key_size;\n\n    if (!s_fill_in_public_key_info(key_impl, group, pub_key_point)) {\n",
                      "markdown": "`        goto error;\n    }\n\n    BN_bn2bin(private_key_num, key_impl->key_pair.priv_d.buffer);\n    key_impl->key_pair.priv_d.len = priv_key_size;\n\n    if (!s_fill_in_public_key_info(key_impl, group, pub_key_point)) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/opensslcrypto_ecc.c"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 40,
                  "endLine": 214,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    const EC_GROUP *group = EC_KEY_get0_group(key_impl->ec_key);\n\n    const BIGNUM *private_key_num = EC_KEY_get0_private_key(key_impl->ec_key);\n    size_t priv_key_size = BN_num_bytes(private_key_num);\n    if (aws_byte_buf_init(&key_impl->key_pair.priv_d, allocator, priv_key_size)) {\n        goto error;\n    }\n",
                    "rendered": {
                      "text": "    const EC_GROUP *group = EC_KEY_get0_group(key_impl->ec_key);\n\n    const BIGNUM *private_key_num = EC_KEY_get0_private_key(key_impl->ec_key);\n    size_t priv_key_size = BN_num_bytes(private_key_num);\n    if (aws_byte_buf_init(&key_impl->key_pair.priv_d, allocator, priv_key_size)) {\n        goto error;\n    }\n",
                      "markdown": "`    const EC_GROUP *group = EC_KEY_get0_group(key_impl->ec_key);\n\n    const BIGNUM *private_key_num = EC_KEY_get0_private_key(key_impl->ec_key);\n    size_t priv_key_size = BN_num_bytes(private_key_num);\n    if (aws_byte_buf_init(&key_impl->key_pair.priv_d, allocator, priv_key_size)) {\n        goto error;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/opensslcrypto_ecc.c"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 48,
                  "endLine": 213,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    const EC_POINT *pub_key_point = EC_KEY_get0_public_key(key_impl->ec_key);\n    const EC_GROUP *group = EC_KEY_get0_group(key_impl->ec_key);\n\n    const BIGNUM *private_key_num = EC_KEY_get0_private_key(key_impl->ec_key);\n    size_t priv_key_size = BN_num_bytes(private_key_num);\n    if (aws_byte_buf_init(&key_impl->key_pair.priv_d, allocator, priv_key_size)) {\n        goto error;\n",
                    "rendered": {
                      "text": "    const EC_POINT *pub_key_point = EC_KEY_get0_public_key(key_impl->ec_key);\n    const EC_GROUP *group = EC_KEY_get0_group(key_impl->ec_key);\n\n    const BIGNUM *private_key_num = EC_KEY_get0_private_key(key_impl->ec_key);\n    size_t priv_key_size = BN_num_bytes(private_key_num);\n    if (aws_byte_buf_init(&key_impl->key_pair.priv_d, allocator, priv_key_size)) {\n        goto error;\n",
                      "markdown": "`    const EC_POINT *pub_key_point = EC_KEY_get0_public_key(key_impl->ec_key);\n    const EC_GROUP *group = EC_KEY_get0_group(key_impl->ec_key);\n\n    const BIGNUM *private_key_num = EC_KEY_get0_private_key(key_impl->ec_key);\n    size_t priv_key_size = BN_num_bytes(private_key_num);\n    if (aws_byte_buf_init(&key_impl->key_pair.priv_d, allocator, priv_key_size)) {\n        goto error;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/opensslcrypto_ecc.c"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 18,
                  "endLine": 213,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    const EC_POINT *pub_key_point = EC_KEY_get0_public_key(key_impl->ec_key);\n    const EC_GROUP *group = EC_KEY_get0_group(key_impl->ec_key);\n\n    const BIGNUM *private_key_num = EC_KEY_get0_private_key(key_impl->ec_key);\n    size_t priv_key_size = BN_num_bytes(private_key_num);\n    if (aws_byte_buf_init(&key_impl->key_pair.priv_d, allocator, priv_key_size)) {\n        goto error;\n",
                    "rendered": {
                      "text": "    const EC_POINT *pub_key_point = EC_KEY_get0_public_key(key_impl->ec_key);\n    const EC_GROUP *group = EC_KEY_get0_group(key_impl->ec_key);\n\n    const BIGNUM *private_key_num = EC_KEY_get0_private_key(key_impl->ec_key);\n    size_t priv_key_size = BN_num_bytes(private_key_num);\n    if (aws_byte_buf_init(&key_impl->key_pair.priv_d, allocator, priv_key_size)) {\n        goto error;\n",
                      "markdown": "`    const EC_POINT *pub_key_point = EC_KEY_get0_public_key(key_impl->ec_key);\n    const EC_GROUP *group = EC_KEY_get0_group(key_impl->ec_key);\n\n    const BIGNUM *private_key_num = EC_KEY_get0_private_key(key_impl->ec_key);\n    size_t priv_key_size = BN_num_bytes(private_key_num);\n    if (aws_byte_buf_init(&key_impl->key_pair.priv_d, allocator, priv_key_size)) {\n        goto error;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/opensslcrypto_ecc.c"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 20,
                  "endLine": 183,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    aws_byte_buf_init_copy_from_cursor(&key_impl->key_pair.priv_d, allocator, *priv_key);\n\n    BIGNUM *priv_key_num = BN_bin2bn(key_impl->key_pair.priv_d.buffer, key_impl->key_pair.priv_d.len, NULL);\n    if (!EC_KEY_set_private_key(key_impl->ec_key, priv_key_num)) {\n        AWS_LOGF_ERROR(AWS_LS_CAL_ECC, \"Failed to set openssl private key\");\n        aws_raise_error(AWS_ERROR_INVALID_ARGUMENT);\n        BN_free(priv_key_num);\n",
                    "rendered": {
                      "text": "    aws_byte_buf_init_copy_from_cursor(&key_impl->key_pair.priv_d, allocator, *priv_key);\n\n    BIGNUM *priv_key_num = BN_bin2bn(key_impl->key_pair.priv_d.buffer, key_impl->key_pair.priv_d.len, NULL);\n    if (!EC_KEY_set_private_key(key_impl->ec_key, priv_key_num)) {\n        AWS_LOGF_ERROR(AWS_LS_CAL_ECC, \"Failed to set openssl private key\");\n        aws_raise_error(AWS_ERROR_INVALID_ARGUMENT);\n        BN_free(priv_key_num);\n",
                      "markdown": "`    aws_byte_buf_init_copy_from_cursor(&key_impl->key_pair.priv_d, allocator, *priv_key);\n\n    BIGNUM *priv_key_num = BN_bin2bn(key_impl->key_pair.priv_d.buffer, key_impl->key_pair.priv_d.len, NULL);\n    if (!EC_KEY_set_private_key(key_impl->ec_key, priv_key_num)) {\n        AWS_LOGF_ERROR(AWS_LS_CAL_ECC, \"Failed to set openssl private key\");\n        aws_raise_error(AWS_ERROR_INVALID_ARGUMENT);\n        BN_free(priv_key_num);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/opensslcrypto_ecc.c"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 51,
                  "endLine": 160,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    .destroy = s_key_pair_destroy,\n};\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key_impl(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n",
                    "rendered": {
                      "text": "    .destroy = s_key_pair_destroy,\n};\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key_impl(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n",
                      "markdown": "`    .destroy = s_key_pair_destroy,\n};\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key_impl(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/unix/opensslcrypto_ecc.c"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 53,
                  "endLine": 184,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n    BIGNUM *priv_key_num = BN_bin2bn(key_impl->key_pair.priv_d.buffer, key_impl->key_pair.priv_d.len, NULL);\n    if (!EC_KEY_set_private_key(key_impl->ec_key, priv_key_num)) {\n        AWS_LOGF_ERROR(AWS_LS_CAL_ECC, \"Failed to set openssl private key\");\n        aws_raise_error(AWS_ERROR_INVALID_ARGUMENT);\n        BN_free(priv_key_num);\n        s_key_pair_destroy(&key_impl->key_pair);\n",
                    "rendered": {
                      "text": "\n    BIGNUM *priv_key_num = BN_bin2bn(key_impl->key_pair.priv_d.buffer, key_impl->key_pair.priv_d.len, NULL);\n    if (!EC_KEY_set_private_key(key_impl->ec_key, priv_key_num)) {\n        AWS_LOGF_ERROR(AWS_LS_CAL_ECC, \"Failed to set openssl private key\");\n        aws_raise_error(AWS_ERROR_INVALID_ARGUMENT);\n        BN_free(priv_key_num);\n        s_key_pair_destroy(&key_impl->key_pair);\n",
                      "markdown": "`\n    BIGNUM *priv_key_num = BN_bin2bn(key_impl->key_pair.priv_d.buffer, key_impl->key_pair.priv_d.len, NULL);\n    if (!EC_KEY_set_private_key(key_impl->ec_key, priv_key_num)) {\n        AWS_LOGF_ERROR(AWS_LS_CAL_ECC, \"Failed to set openssl private key\");\n        aws_raise_error(AWS_ERROR_INVALID_ARGUMENT);\n        BN_free(priv_key_num);\n        s_key_pair_destroy(&key_impl->key_pair);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/darwin/securityframework_ecc.c"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 18,
                  "endLine": 316,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\nerror:\n    if (private_key_data) {\n        CFRelease(private_key_data);\n    }\n\n    if (key_attributes) {\n",
                    "rendered": {
                      "text": "\nerror:\n    if (private_key_data) {\n        CFRelease(private_key_data);\n    }\n\n    if (key_attributes) {\n",
                      "markdown": "`\nerror:\n    if (private_key_data) {\n        CFRelease(private_key_data);\n    }\n\n    if (key_attributes) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/darwin/securityframework_ecc.c"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 8,
                  "endLine": 315,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    return &cc_key_pair->key_pair;\n\nerror:\n    if (private_key_data) {\n        CFRelease(private_key_data);\n    }\n\n",
                    "rendered": {
                      "text": "    return &cc_key_pair->key_pair;\n\nerror:\n    if (private_key_data) {\n        CFRelease(private_key_data);\n    }\n\n",
                      "markdown": "`    return &cc_key_pair->key_pair;\n\nerror:\n    if (private_key_data) {\n        CFRelease(private_key_data);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/darwin/securityframework_ecc.c"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 14,
                  "endLine": 310,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    aws_byte_buf_secure_zero(&cc_key_pair->key_pair.pub_y);\n\n    CFRelease(key_attributes);\n    CFRelease(private_key_data);\n\n    return &cc_key_pair->key_pair;\n\n",
                    "rendered": {
                      "text": "    aws_byte_buf_secure_zero(&cc_key_pair->key_pair.pub_y);\n\n    CFRelease(key_attributes);\n    CFRelease(private_key_data);\n\n    return &cc_key_pair->key_pair;\n\n",
                      "markdown": "`    aws_byte_buf_secure_zero(&cc_key_pair->key_pair.pub_y);\n\n    CFRelease(key_attributes);\n    CFRelease(private_key_data);\n\n    return &cc_key_pair->key_pair;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/darwin/securityframework_ecc.c"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 53,
                  "endLine": 297,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\n    CFErrorRef error = NULL;\n\n    cc_key_pair->priv_key_ref = SecKeyCreateWithData(private_key_data, key_attributes, &error);\n\n    if (error) {\n        aws_raise_error(AWS_ERROR_INVALID_ARGUMENT);\n",
                    "rendered": {
                      "text": "\n    CFErrorRef error = NULL;\n\n    cc_key_pair->priv_key_ref = SecKeyCreateWithData(private_key_data, key_attributes, &error);\n\n    if (error) {\n        aws_raise_error(AWS_ERROR_INVALID_ARGUMENT);\n",
                      "markdown": "`\n    CFErrorRef error = NULL;\n\n    cc_key_pair->priv_key_ref = SecKeyCreateWithData(private_key_data, key_attributes, &error);\n\n    if (error) {\n        aws_raise_error(AWS_ERROR_INVALID_ARGUMENT);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/darwin/securityframework_ecc.c"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 9,
                  "endLine": 277,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    CFDataRef private_key_data = CFDataCreate(\n        cc_key_pair->cf_allocator, cc_key_pair->key_pair.key_buf.buffer, cc_key_pair->key_pair.key_buf.len);\n\n    if (!private_key_data) {\n        goto error;\n    }\n\n",
                    "rendered": {
                      "text": "    CFDataRef private_key_data = CFDataCreate(\n        cc_key_pair->cf_allocator, cc_key_pair->key_pair.key_buf.buffer, cc_key_pair->key_pair.key_buf.len);\n\n    if (!private_key_data) {\n        goto error;\n    }\n\n",
                      "markdown": "`    CFDataRef private_key_data = CFDataCreate(\n        cc_key_pair->cf_allocator, cc_key_pair->key_pair.key_buf.buffer, cc_key_pair->key_pair.key_buf.len);\n\n    if (!private_key_data) {\n        goto error;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/darwin/securityframework_ecc.c"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 14,
                  "endLine": 274,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    }\n\n    CFMutableDictionaryRef key_attributes = NULL;\n    CFDataRef private_key_data = CFDataCreate(\n        cc_key_pair->cf_allocator, cc_key_pair->key_pair.key_buf.buffer, cc_key_pair->key_pair.key_buf.len);\n\n    if (!private_key_data) {\n",
                    "rendered": {
                      "text": "    }\n\n    CFMutableDictionaryRef key_attributes = NULL;\n    CFDataRef private_key_data = CFDataCreate(\n        cc_key_pair->cf_allocator, cc_key_pair->key_pair.key_buf.buffer, cc_key_pair->key_pair.key_buf.len);\n\n    if (!private_key_data) {\n",
                      "markdown": "`    }\n\n    CFMutableDictionaryRef key_attributes = NULL;\n    CFDataRef private_key_data = CFDataCreate(\n        cc_key_pair->cf_allocator, cc_key_pair->key_pair.key_buf.buffer, cc_key_pair->key_pair.key_buf.len);\n\n    if (!private_key_data) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/darwin/securityframework_ecc.c"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 51,
                  "endLine": 229,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    return NULL;\n}\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key_impl(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n",
                    "rendered": {
                      "text": "    return NULL;\n}\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key_impl(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n",
                      "markdown": "`    return NULL;\n}\n\nstruct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key_impl(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/darwin/securityframework_rsa.c"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 18,
                  "endLine": 425,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\non_error:\n    if (private_key_data) {\n        CFRelease(private_key_data);\n    }\n\n    if (key_attributes) {\n",
                    "rendered": {
                      "text": "\non_error:\n    if (private_key_data) {\n        CFRelease(private_key_data);\n    }\n\n    if (key_attributes) {\n",
                      "markdown": "`\non_error:\n    if (private_key_data) {\n        CFRelease(private_key_data);\n    }\n\n    if (key_attributes) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/darwin/securityframework_rsa.c"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 8,
                  "endLine": 424,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    return &key_pair_impl->base;\n\non_error:\n    if (private_key_data) {\n        CFRelease(private_key_data);\n    }\n\n",
                    "rendered": {
                      "text": "    return &key_pair_impl->base;\n\non_error:\n    if (private_key_data) {\n        CFRelease(private_key_data);\n    }\n\n",
                      "markdown": "`    return &key_pair_impl->base;\n\non_error:\n    if (private_key_data) {\n        CFRelease(private_key_data);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/darwin/securityframework_rsa.c"
                },
                "region": {
                  "startLine": 419,
                  "startColumn": 14,
                  "endLine": 419,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    key_pair_impl->base.key_size_in_bits = block_size * 8;\n\n    CFRelease(key_attributes);\n    CFRelease(private_key_data);\n\n    return &key_pair_impl->base;\n\n",
                    "rendered": {
                      "text": "    key_pair_impl->base.key_size_in_bits = block_size * 8;\n\n    CFRelease(key_attributes);\n    CFRelease(private_key_data);\n\n    return &key_pair_impl->base;\n\n",
                      "markdown": "`    key_pair_impl->base.key_size_in_bits = block_size * 8;\n\n    CFRelease(key_attributes);\n    CFRelease(private_key_data);\n\n    return &key_pair_impl->base;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/darwin/securityframework_rsa.c"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 55,
                  "endLine": 397,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    CFDictionaryAddValue(key_attributes, kSecAttrKeyClass, kSecAttrKeyClassPrivate);\n\n    CFErrorRef error = NULL;\n    key_pair_impl->priv_key_ref = SecKeyCreateWithData(private_key_data, key_attributes, &error);\n    if (s_reinterpret_sec_error_as_crt(error, \"SecKeyCreateWithData\")) {\n        CFRelease(error);\n        goto on_error;\n",
                    "rendered": {
                      "text": "    CFDictionaryAddValue(key_attributes, kSecAttrKeyClass, kSecAttrKeyClassPrivate);\n\n    CFErrorRef error = NULL;\n    key_pair_impl->priv_key_ref = SecKeyCreateWithData(private_key_data, key_attributes, &error);\n    if (s_reinterpret_sec_error_as_crt(error, \"SecKeyCreateWithData\")) {\n        CFRelease(error);\n        goto on_error;\n",
                      "markdown": "`    CFDictionaryAddValue(key_attributes, kSecAttrKeyClass, kSecAttrKeyClassPrivate);\n\n    CFErrorRef error = NULL;\n    key_pair_impl->priv_key_ref = SecKeyCreateWithData(private_key_data, key_attributes, &error);\n    if (s_reinterpret_sec_error_as_crt(error, \"SecKeyCreateWithData\")) {\n        CFRelease(error);\n        goto on_error;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/darwin/securityframework_rsa.c"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 21,
                  "endLine": 387,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    aws_byte_buf_init_copy_from_cursor(&key_pair_impl->base.priv, allocator, key);\n\n    private_key_data = CFDataCreate(key_pair_impl->cf_allocator, key.ptr, key.len);\n    AWS_FATAL_ASSERT(private_key_data);\n\n    key_attributes = CFDictionaryCreateMutable(key_pair_impl->cf_allocator, 0, NULL, NULL);\n    AWS_FATAL_ASSERT(key_attributes);\n",
                    "rendered": {
                      "text": "    aws_byte_buf_init_copy_from_cursor(&key_pair_impl->base.priv, allocator, key);\n\n    private_key_data = CFDataCreate(key_pair_impl->cf_allocator, key.ptr, key.len);\n    AWS_FATAL_ASSERT(private_key_data);\n\n    key_attributes = CFDictionaryCreateMutable(key_pair_impl->cf_allocator, 0, NULL, NULL);\n    AWS_FATAL_ASSERT(key_attributes);\n",
                      "markdown": "`    aws_byte_buf_init_copy_from_cursor(&key_pair_impl->base.priv, allocator, key);\n\n    private_key_data = CFDataCreate(key_pair_impl->cf_allocator, key.ptr, key.len);\n    AWS_FATAL_ASSERT(private_key_data);\n\n    key_attributes = CFDictionaryCreateMutable(key_pair_impl->cf_allocator, 0, NULL, NULL);\n    AWS_FATAL_ASSERT(key_attributes);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/darwin/securityframework_rsa.c"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 4,
                  "endLine": 386,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    key_pair_impl->cf_allocator = aws_wrapped_cf_allocator_new(allocator);\n    aws_byte_buf_init_copy_from_cursor(&key_pair_impl->base.priv, allocator, key);\n\n    private_key_data = CFDataCreate(key_pair_impl->cf_allocator, key.ptr, key.len);\n    AWS_FATAL_ASSERT(private_key_data);\n\n    key_attributes = CFDictionaryCreateMutable(key_pair_impl->cf_allocator, 0, NULL, NULL);\n",
                    "rendered": {
                      "text": "    key_pair_impl->cf_allocator = aws_wrapped_cf_allocator_new(allocator);\n    aws_byte_buf_init_copy_from_cursor(&key_pair_impl->base.priv, allocator, key);\n\n    private_key_data = CFDataCreate(key_pair_impl->cf_allocator, key.ptr, key.len);\n    AWS_FATAL_ASSERT(private_key_data);\n\n    key_attributes = CFDictionaryCreateMutable(key_pair_impl->cf_allocator, 0, NULL, NULL);\n",
                      "markdown": "`    key_pair_impl->cf_allocator = aws_wrapped_cf_allocator_new(allocator);\n    aws_byte_buf_init_copy_from_cursor(&key_pair_impl->base.priv, allocator, key);\n\n    private_key_data = CFDataCreate(key_pair_impl->cf_allocator, key.ptr, key.len);\n    AWS_FATAL_ASSERT(private_key_data);\n\n    key_attributes = CFDictionaryCreateMutable(key_pair_impl->cf_allocator, 0, NULL, NULL);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/darwin/securityframework_rsa.c"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 14,
                  "endLine": 378,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    struct sec_rsa_key_pair *key_pair_impl = aws_mem_calloc(allocator, 1, sizeof(struct sec_rsa_key_pair));\n\n    CFMutableDictionaryRef key_attributes = NULL;\n    CFDataRef private_key_data = NULL;\n\n    aws_ref_count_init(&key_pair_impl->base.ref_count, &key_pair_impl->base, s_rsa_destroy_key);\n    key_pair_impl->base.impl = key_pair_impl;\n",
                    "rendered": {
                      "text": "    struct sec_rsa_key_pair *key_pair_impl = aws_mem_calloc(allocator, 1, sizeof(struct sec_rsa_key_pair));\n\n    CFMutableDictionaryRef key_attributes = NULL;\n    CFDataRef private_key_data = NULL;\n\n    aws_ref_count_init(&key_pair_impl->base.ref_count, &key_pair_impl->base, s_rsa_destroy_key);\n    key_pair_impl->base.impl = key_pair_impl;\n",
                      "markdown": "`    struct sec_rsa_key_pair *key_pair_impl = aws_mem_calloc(allocator, 1, sizeof(struct sec_rsa_key_pair));\n\n    CFMutableDictionaryRef key_attributes = NULL;\n    CFDataRef private_key_data = NULL;\n\n    aws_ref_count_init(&key_pair_impl->base.ref_count, &key_pair_impl->base, s_rsa_destroy_key);\n    key_pair_impl->base.impl = key_pair_impl;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/darwin/securityframework_rsa.c"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 51,
                  "endLine": 372,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    .verify = s_rsa_verify,\n};\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor key) {\n    struct sec_rsa_key_pair *key_pair_impl = aws_mem_calloc(allocator, 1, sizeof(struct sec_rsa_key_pair));\n",
                    "rendered": {
                      "text": "    .verify = s_rsa_verify,\n};\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor key) {\n    struct sec_rsa_key_pair *key_pair_impl = aws_mem_calloc(allocator, 1, sizeof(struct sec_rsa_key_pair));\n",
                      "markdown": "`    .verify = s_rsa_verify,\n};\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor key) {\n    struct sec_rsa_key_pair *key_pair_impl = aws_mem_calloc(allocator, 1, sizeof(struct sec_rsa_key_pair));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/rsa.c"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 91,
                  "endLine": 213,
                  "endColumn": 102,
                  "snippet": {
                    "text": "    return AWS_OP_SUCCESS;\n}\n\nint aws_der_decoder_load_private_rsa_pkcs1(struct aws_der_decoder *decoder, struct aws_rsa_private_key_pkcs1 *out) {\n\n    if (!aws_der_decoder_next(decoder) || aws_der_decoder_tlv_type(decoder) != AWS_DER_SEQUENCE) {\n        return aws_raise_error(AWS_ERROR_CAL_MALFORMED_ASN1_ENCOUNTERED);\n",
                    "rendered": {
                      "text": "    return AWS_OP_SUCCESS;\n}\n\nint aws_der_decoder_load_private_rsa_pkcs1(struct aws_der_decoder *decoder, struct aws_rsa_private_key_pkcs1 *out) {\n\n    if (!aws_der_decoder_next(decoder) || aws_der_decoder_tlv_type(decoder) != AWS_DER_SEQUENCE) {\n        return aws_raise_error(AWS_ERROR_CAL_MALFORMED_ASN1_ENCOUNTERED);\n",
                      "markdown": "`    return AWS_OP_SUCCESS;\n}\n\nint aws_der_decoder_load_private_rsa_pkcs1(struct aws_der_decoder *decoder, struct aws_rsa_private_key_pkcs1 *out) {\n\n    if (!aws_der_decoder_next(decoder) || aws_der_decoder_tlv_type(decoder) != AWS_DER_SEQUENCE) {\n        return aws_raise_error(AWS_ERROR_CAL_MALFORMED_ASN1_ENCOUNTERED);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/rsa.c"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 25,
                  "endLine": 197,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    return AWS_OP_SUCCESS;\n}\n\nint aws_rsa_key_pair_get_private_key(\n    const struct aws_rsa_key_pair *key_pair,\n    enum aws_rsa_key_export_format format,\n    struct aws_byte_buf *out) {\n",
                    "rendered": {
                      "text": "    return AWS_OP_SUCCESS;\n}\n\nint aws_rsa_key_pair_get_private_key(\n    const struct aws_rsa_key_pair *key_pair,\n    enum aws_rsa_key_export_format format,\n    struct aws_byte_buf *out) {\n",
                      "markdown": "`    return AWS_OP_SUCCESS;\n}\n\nint aws_rsa_key_pair_get_private_key(\n    const struct aws_rsa_key_pair *key_pair,\n    enum aws_rsa_key_export_format format,\n    struct aws_byte_buf *out) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/rsa.c"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 67,
                  "endLine": 61,
                  "endColumn": 78,
                  "snippet": {
                    "text": "struct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    return s_rsa_key_pair_new_from_private_key_pkcs1_fn(allocator, private_key);\n}\n\nvoid aws_rsa_key_pair_base_clean_up(struct aws_rsa_key_pair *key_pair) {\n",
                    "rendered": {
                      "text": "struct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    return s_rsa_key_pair_new_from_private_key_pkcs1_fn(allocator, private_key);\n}\n\nvoid aws_rsa_key_pair_base_clean_up(struct aws_rsa_key_pair *key_pair) {\n",
                      "markdown": "`struct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    return s_rsa_key_pair_new_from_private_key_pkcs1_fn(allocator, private_key);\n}\n\nvoid aws_rsa_key_pair_base_clean_up(struct aws_rsa_key_pair *key_pair) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/rsa.c"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 35,
                  "endLine": 61,
                  "endColumn": 46,
                  "snippet": {
                    "text": "struct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    return s_rsa_key_pair_new_from_private_key_pkcs1_fn(allocator, private_key);\n}\n\nvoid aws_rsa_key_pair_base_clean_up(struct aws_rsa_key_pair *key_pair) {\n",
                    "rendered": {
                      "text": "struct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    return s_rsa_key_pair_new_from_private_key_pkcs1_fn(allocator, private_key);\n}\n\nvoid aws_rsa_key_pair_base_clean_up(struct aws_rsa_key_pair *key_pair) {\n",
                      "markdown": "`struct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    return s_rsa_key_pair_new_from_private_key_pkcs1_fn(allocator, private_key);\n}\n\nvoid aws_rsa_key_pair_base_clean_up(struct aws_rsa_key_pair *key_pair) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/rsa.c"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 27,
                  "endLine": 60,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    return s_rsa_key_pair_new_from_private_key_pkcs1_fn(allocator, private_key);\n}\n\n",
                    "rendered": {
                      "text": "\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    return s_rsa_key_pair_new_from_private_key_pkcs1_fn(allocator, private_key);\n}\n\n",
                      "markdown": "`\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    return s_rsa_key_pair_new_from_private_key_pkcs1_fn(allocator, private_key);\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/rsa.c"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 51,
                  "endLine": 58,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    return s_rsa_key_pair_new_from_public_key_pkcs1_fn(allocator, public_key);\n}\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    return s_rsa_key_pair_new_from_private_key_pkcs1_fn(allocator, private_key);\n",
                    "rendered": {
                      "text": "    return s_rsa_key_pair_new_from_public_key_pkcs1_fn(allocator, public_key);\n}\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    return s_rsa_key_pair_new_from_private_key_pkcs1_fn(allocator, private_key);\n",
                      "markdown": "`    return s_rsa_key_pair_new_from_public_key_pkcs1_fn(allocator, public_key);\n}\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    return s_rsa_key_pair_new_from_private_key_pkcs1_fn(allocator, private_key);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/rsa.c"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 30,
                  "endLine": 50,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    aws_rsa_key_pair_new_from_public_key_pkcs1_impl;\n\nstatic aws_rsa_key_pair_new_from_private_pkcs1_fn *s_rsa_key_pair_new_from_private_key_pkcs1_fn =\n    aws_rsa_key_pair_new_from_private_key_pkcs1_impl;\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_public_key_pkcs1(\n    struct aws_allocator *allocator,\n",
                    "rendered": {
                      "text": "    aws_rsa_key_pair_new_from_public_key_pkcs1_impl;\n\nstatic aws_rsa_key_pair_new_from_private_pkcs1_fn *s_rsa_key_pair_new_from_private_key_pkcs1_fn =\n    aws_rsa_key_pair_new_from_private_key_pkcs1_impl;\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_public_key_pkcs1(\n    struct aws_allocator *allocator,\n",
                      "markdown": "`    aws_rsa_key_pair_new_from_public_key_pkcs1_impl;\n\nstatic aws_rsa_key_pair_new_from_private_pkcs1_fn *s_rsa_key_pair_new_from_private_key_pkcs1_fn =\n    aws_rsa_key_pair_new_from_private_key_pkcs1_impl;\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_public_key_pkcs1(\n    struct aws_allocator *allocator,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/rsa.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 75,
                  "endLine": 49,
                  "endColumn": 86,
                  "snippet": {
                    "text": "static aws_rsa_key_pair_new_from_public_pkcs1_fn *s_rsa_key_pair_new_from_public_key_pkcs1_fn =\n    aws_rsa_key_pair_new_from_public_key_pkcs1_impl;\n\nstatic aws_rsa_key_pair_new_from_private_pkcs1_fn *s_rsa_key_pair_new_from_private_key_pkcs1_fn =\n    aws_rsa_key_pair_new_from_private_key_pkcs1_impl;\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_public_key_pkcs1(\n",
                    "rendered": {
                      "text": "static aws_rsa_key_pair_new_from_public_pkcs1_fn *s_rsa_key_pair_new_from_public_key_pkcs1_fn =\n    aws_rsa_key_pair_new_from_public_key_pkcs1_impl;\n\nstatic aws_rsa_key_pair_new_from_private_pkcs1_fn *s_rsa_key_pair_new_from_private_key_pkcs1_fn =\n    aws_rsa_key_pair_new_from_private_key_pkcs1_impl;\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_public_key_pkcs1(\n",
                      "markdown": "`static aws_rsa_key_pair_new_from_public_pkcs1_fn *s_rsa_key_pair_new_from_public_key_pkcs1_fn =\n    aws_rsa_key_pair_new_from_public_key_pkcs1_impl;\n\nstatic aws_rsa_key_pair_new_from_private_pkcs1_fn *s_rsa_key_pair_new_from_private_key_pkcs1_fn =\n    aws_rsa_key_pair_new_from_private_key_pkcs1_impl;\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_public_key_pkcs1(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/rsa.c"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    (void)allocator;\n    (void)private_key;\n    abort();\n}\n#endif /* BYO_CRYPTO */\n",
                    "rendered": {
                      "text": "    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    (void)allocator;\n    (void)private_key;\n    abort();\n}\n#endif /* BYO_CRYPTO */\n",
                      "markdown": "`    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    (void)allocator;\n    (void)private_key;\n    abort();\n}\n#endif /* BYO_CRYPTO */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/rsa.c"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 27,
                  "endLine": 39,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    (void)allocator;\n    (void)private_key;\n    abort();\n",
                    "rendered": {
                      "text": "\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    (void)allocator;\n    (void)private_key;\n    abort();\n",
                      "markdown": "`\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    (void)allocator;\n    (void)private_key;\n    abort();\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/rsa.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 51,
                  "endLine": 37,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    abort();\n}\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    (void)allocator;\n",
                    "rendered": {
                      "text": "    abort();\n}\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    (void)allocator;\n",
                      "markdown": "`    abort();\n}\n\nstruct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key) {\n    (void)allocator;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/rsa.c"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 27,
                  "endLine": 25,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\nextern struct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key);\n\n#else  /* BYO_CRYPTO */\n\n",
                    "rendered": {
                      "text": "\nextern struct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key);\n\n#else  /* BYO_CRYPTO */\n\n",
                      "markdown": "`\nextern struct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key);\n\n#else  /* BYO_CRYPTO */\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/rsa.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 58,
                  "endLine": 23,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    struct aws_allocator *allocator,\n    struct aws_byte_cursor public_key);\n\nextern struct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key);\n\n",
                    "rendered": {
                      "text": "    struct aws_allocator *allocator,\n    struct aws_byte_cursor public_key);\n\nextern struct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key);\n\n",
                      "markdown": "`    struct aws_allocator *allocator,\n    struct aws_byte_cursor public_key);\n\nextern struct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1_impl(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor private_key);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/source/rsa.c"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 101,
                  "endLine": 15,
                  "endColumn": 112,
                  "snippet": {
                    "text": "                                                                             struct aws_byte_cursor public_key);\n\ntypedef struct aws_rsa_key_pair *(aws_rsa_key_pair_new_from_private_pkcs1_fn)(struct aws_allocator *allocator,\n                                                                              struct aws_byte_cursor private_key);\n\n#ifndef BYO_CRYPTO\n\n",
                    "rendered": {
                      "text": "                                                                             struct aws_byte_cursor public_key);\n\ntypedef struct aws_rsa_key_pair *(aws_rsa_key_pair_new_from_private_pkcs1_fn)(struct aws_allocator *allocator,\n                                                                              struct aws_byte_cursor private_key);\n\n#ifndef BYO_CRYPTO\n\n",
                      "markdown": "`                                                                             struct aws_byte_cursor public_key);\n\ntypedef struct aws_rsa_key_pair *(aws_rsa_key_pair_new_from_private_pkcs1_fn)(struct aws_allocator *allocator,\n                                                                              struct aws_byte_cursor private_key);\n\n#ifndef BYO_CRYPTO\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/md5_test.c"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 62,
                  "endLine": 366,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    struct aws_byte_buf digest_size_buf;\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    struct aws_byte_buf digest_size_buf;\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    struct aws_byte_buf digest_size_buf;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/md5_test.c"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 62,
                  "endLine": 338,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    struct aws_hash *hash = aws_md5_new(allocator);\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    struct aws_hash *hash = aws_md5_new(allocator);\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    struct aws_hash *hash = aws_md5_new(allocator);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/md5_test.c"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 62,
                  "endLine": 317,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    uint8_t output[AWS_MD5_LEN] = {0};\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    uint8_t output[AWS_MD5_LEN] = {0};\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    uint8_t output[AWS_MD5_LEN] = {0};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/md5_test.c"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 62,
                  "endLine": 222,
                  "endColumn": 109,
                  "snippet": {
                    "text": "static int s_md5_rfc1321_test_case_7_truncated_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n    uint8_t expected[] = {\n        0x57,\n",
                    "rendered": {
                      "text": "static int s_md5_rfc1321_test_case_7_truncated_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n    uint8_t expected[] = {\n        0x57,\n",
                      "markdown": "`static int s_md5_rfc1321_test_case_7_truncated_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n    uint8_t expected[] = {\n        0x57,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/md5_test.c"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 62,
                  "endLine": 192,
                  "endColumn": 109,
                  "snippet": {
                    "text": "static int s_md5_rfc1321_test_case_7_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n    uint8_t expected[] = {\n        0x57,\n",
                    "rendered": {
                      "text": "static int s_md5_rfc1321_test_case_7_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n    uint8_t expected[] = {\n        0x57,\n",
                      "markdown": "`static int s_md5_rfc1321_test_case_7_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n    uint8_t expected[] = {\n        0x57,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/md5_test.c"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 35,
                  "endLine": 163,
                  "endColumn": 99,
                  "snippet": {
                    "text": "    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\");\n    uint8_t expected[] = {\n        0xd1,\n        0x74,\n",
                    "rendered": {
                      "text": "    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\");\n    uint8_t expected[] = {\n        0xd1,\n        0x74,\n",
                      "markdown": "`    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\");\n    uint8_t expected[] = {\n        0xd1,\n        0x74,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/sha256_test.c"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 62,
                  "endLine": 279,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    struct aws_byte_buf digest_size_buf;\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    struct aws_byte_buf digest_size_buf;\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    struct aws_byte_buf digest_size_buf;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/sha256_test.c"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 62,
                  "endLine": 249,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/sha256_test.c"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 62,
                  "endLine": 222,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/sha256_test.c"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 62,
                  "endLine": 201,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_SHA256_LEN] = {0};\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_SHA256_LEN] = {0};\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t output[AWS_SHA256_LEN] = {0};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/sha256_test.c"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 35,
                  "endLine": 168,
                  "endColumn": 101,
                  "snippet": {
                    "text": "    struct aws_hash *hash = aws_sha256_new(allocator);\n    ASSERT_NOT_NULL(hash);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_hash_update(hash, &input));\n",
                    "rendered": {
                      "text": "    struct aws_hash *hash = aws_sha256_new(allocator);\n    ASSERT_NOT_NULL(hash);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_hash_update(hash, &input));\n",
                      "markdown": "`    struct aws_hash *hash = aws_sha256_new(allocator);\n    ASSERT_NOT_NULL(hash);\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\");\n\n    for (size_t i = 0; i < 16777216; ++i) {\n        ASSERT_SUCCESS(aws_hash_update(hash, &input));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/sha256_test.c"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 62,
                  "endLine": 64,
                  "endColumn": 109,
                  "snippet": {
                    "text": "static int s_sha256_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n",
                    "rendered": {
                      "text": "static int s_sha256_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n",
                      "markdown": "`static int s_sha256_nist_test_case_4_fn(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghij\"\n                                                              \"klmghijklmnhijklmnoijklmnopjklmnopqklm\"\n                                                              \"nopqrlmnopqrsmnopqrstnopqrstu\");\n    uint8_t expected[] = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/sha256_test.c"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 35,
                  "endLine": 49,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {\n        0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39,\n        0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1,\n",
                    "rendered": {
                      "text": "    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {\n        0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39,\n        0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1,\n",
                      "markdown": "`    (void)ctx;\n\n    struct aws_byte_cursor input =\n        aws_byte_cursor_from_c_str(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n    uint8_t expected[] = {\n        0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39,\n        0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 971,
                  "startColumn": 38,
                  "endLine": 971,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        ASSERT_TRUE(priv_d.len > 0);\n\n        struct aws_ecc_key_pair *key_pair_private =\n            aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &priv_d);\n        ASSERT_NOT_NULL(key_pair_private);\n        struct aws_byte_cursor pub_x;\n        struct aws_byte_cursor pub_y;\n",
                    "rendered": {
                      "text": "        ASSERT_TRUE(priv_d.len > 0);\n\n        struct aws_ecc_key_pair *key_pair_private =\n            aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &priv_d);\n        ASSERT_NOT_NULL(key_pair_private);\n        struct aws_byte_cursor pub_x;\n        struct aws_byte_cursor pub_y;\n",
                      "markdown": "`        ASSERT_TRUE(priv_d.len > 0);\n\n        struct aws_ecc_key_pair *key_pair_private =\n            aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &priv_d);\n        ASSERT_NOT_NULL(key_pair_private);\n        struct aws_byte_cursor pub_x;\n        struct aws_byte_cursor pub_y;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 967,
                  "startColumn": 29,
                  "endLine": 967,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    for (size_t i = 0; i < number_loop; i++) {\n        struct aws_ecc_key_pair *key_pair = aws_ecc_key_pair_new_generate_random(allocator, curve_name);\n        struct aws_byte_cursor priv_d;\n        aws_ecc_key_pair_get_private_key(key_pair, &priv_d);\n        ASSERT_TRUE(priv_d.len > 0);\n\n        struct aws_ecc_key_pair *key_pair_private =\n",
                    "rendered": {
                      "text": "    for (size_t i = 0; i < number_loop; i++) {\n        struct aws_ecc_key_pair *key_pair = aws_ecc_key_pair_new_generate_random(allocator, curve_name);\n        struct aws_byte_cursor priv_d;\n        aws_ecc_key_pair_get_private_key(key_pair, &priv_d);\n        ASSERT_TRUE(priv_d.len > 0);\n\n        struct aws_ecc_key_pair *key_pair_private =\n",
                      "markdown": "`    for (size_t i = 0; i < number_loop; i++) {\n        struct aws_ecc_key_pair *key_pair = aws_ecc_key_pair_new_generate_random(allocator, curve_name);\n        struct aws_byte_cursor priv_d;\n        aws_ecc_key_pair_get_private_key(key_pair, &priv_d);\n        ASSERT_TRUE(priv_d.len > 0);\n\n        struct aws_ecc_key_pair *key_pair_private =\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 846,
                  "startColumn": 78,
                  "endLine": 846,
                  "endColumn": 89,
                  "snippet": {
                    "text": "    struct aws_byte_cursor private_key_cursor = aws_byte_cursor_from_array(d, sizeof(d));\n\n    struct aws_ecc_key_pair *key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, AWS_CAL_ECDSA_P256, &private_key_cursor);\n    ASSERT_NOT_NULL(key_pair);\n\n    int result = s_test_key_ref_counting(key_pair, AWS_ECC_KCF_PRIVATE);\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor private_key_cursor = aws_byte_cursor_from_array(d, sizeof(d));\n\n    struct aws_ecc_key_pair *key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, AWS_CAL_ECDSA_P256, &private_key_cursor);\n    ASSERT_NOT_NULL(key_pair);\n\n    int result = s_test_key_ref_counting(key_pair, AWS_ECC_KCF_PRIVATE);\n",
                      "markdown": "`    struct aws_byte_cursor private_key_cursor = aws_byte_cursor_from_array(d, sizeof(d));\n\n    struct aws_ecc_key_pair *key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, AWS_CAL_ECDSA_P256, &private_key_cursor);\n    ASSERT_NOT_NULL(key_pair);\n\n    int result = s_test_key_ref_counting(key_pair, AWS_ECC_KCF_PRIVATE);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 846,
                  "startColumn": 34,
                  "endLine": 846,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    struct aws_byte_cursor private_key_cursor = aws_byte_cursor_from_array(d, sizeof(d));\n\n    struct aws_ecc_key_pair *key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, AWS_CAL_ECDSA_P256, &private_key_cursor);\n    ASSERT_NOT_NULL(key_pair);\n\n    int result = s_test_key_ref_counting(key_pair, AWS_ECC_KCF_PRIVATE);\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor private_key_cursor = aws_byte_cursor_from_array(d, sizeof(d));\n\n    struct aws_ecc_key_pair *key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, AWS_CAL_ECDSA_P256, &private_key_cursor);\n    ASSERT_NOT_NULL(key_pair);\n\n    int result = s_test_key_ref_counting(key_pair, AWS_ECC_KCF_PRIVATE);\n",
                      "markdown": "`    struct aws_byte_cursor private_key_cursor = aws_byte_cursor_from_array(d, sizeof(d));\n\n    struct aws_ecc_key_pair *key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, AWS_CAL_ECDSA_P256, &private_key_cursor);\n    ASSERT_NOT_NULL(key_pair);\n\n    int result = s_test_key_ref_counting(key_pair, AWS_ECC_KCF_PRIVATE);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 843,
                  "startColumn": 27,
                  "endLine": 843,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        0x93, 0xb5, 0x79, 0xa9, 0xb1, 0xf3, 0x29, 0x34, 0xd8, 0x6c, 0x36, 0x3c, 0x39, 0x80, 0x03, 0x57,\n    };\n\n    struct aws_byte_cursor private_key_cursor = aws_byte_cursor_from_array(d, sizeof(d));\n\n    struct aws_ecc_key_pair *key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, AWS_CAL_ECDSA_P256, &private_key_cursor);\n",
                    "rendered": {
                      "text": "        0x93, 0xb5, 0x79, 0xa9, 0xb1, 0xf3, 0x29, 0x34, 0xd8, 0x6c, 0x36, 0x3c, 0x39, 0x80, 0x03, 0x57,\n    };\n\n    struct aws_byte_cursor private_key_cursor = aws_byte_cursor_from_array(d, sizeof(d));\n\n    struct aws_ecc_key_pair *key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, AWS_CAL_ECDSA_P256, &private_key_cursor);\n",
                      "markdown": "`        0x93, 0xb5, 0x79, 0xa9, 0xb1, 0xf3, 0x29, 0x34, 0xd8, 0x6c, 0x36, 0x3c, 0x39, 0x80, 0x03, 0x57,\n    };\n\n    struct aws_byte_cursor private_key_cursor = aws_byte_cursor_from_array(d, sizeof(d));\n\n    struct aws_ecc_key_pair *key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, AWS_CAL_ECDSA_P256, &private_key_cursor);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 737,
                  "startColumn": 44,
                  "endLine": 737,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        AWS_ZERO_STRUCT(private_key_cursor);\n\n        aws_ecc_key_pair_get_private_key(key_pair, &private_key_cursor);\n        ASSERT_SUCCESS(s_check_cursor_data(&private_key_cursor));\n    }\n\n    if (flags & AWS_ECC_KCF_PUBLIC) {\n",
                    "rendered": {
                      "text": "        AWS_ZERO_STRUCT(private_key_cursor);\n\n        aws_ecc_key_pair_get_private_key(key_pair, &private_key_cursor);\n        ASSERT_SUCCESS(s_check_cursor_data(&private_key_cursor));\n    }\n\n    if (flags & AWS_ECC_KCF_PUBLIC) {\n",
                      "markdown": "`        AWS_ZERO_STRUCT(private_key_cursor);\n\n        aws_ecc_key_pair_get_private_key(key_pair, &private_key_cursor);\n        ASSERT_SUCCESS(s_check_cursor_data(&private_key_cursor));\n    }\n\n    if (flags & AWS_ECC_KCF_PUBLIC) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 736,
                  "startColumn": 52,
                  "endLine": 736,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        struct aws_byte_cursor private_key_cursor;\n        AWS_ZERO_STRUCT(private_key_cursor);\n\n        aws_ecc_key_pair_get_private_key(key_pair, &private_key_cursor);\n        ASSERT_SUCCESS(s_check_cursor_data(&private_key_cursor));\n    }\n\n",
                    "rendered": {
                      "text": "        struct aws_byte_cursor private_key_cursor;\n        AWS_ZERO_STRUCT(private_key_cursor);\n\n        aws_ecc_key_pair_get_private_key(key_pair, &private_key_cursor);\n        ASSERT_SUCCESS(s_check_cursor_data(&private_key_cursor));\n    }\n\n",
                      "markdown": "`        struct aws_byte_cursor private_key_cursor;\n        AWS_ZERO_STRUCT(private_key_cursor);\n\n        aws_ecc_key_pair_get_private_key(key_pair, &private_key_cursor);\n        ASSERT_SUCCESS(s_check_cursor_data(&private_key_cursor));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 736,
                  "startColumn": 29,
                  "endLine": 736,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        struct aws_byte_cursor private_key_cursor;\n        AWS_ZERO_STRUCT(private_key_cursor);\n\n        aws_ecc_key_pair_get_private_key(key_pair, &private_key_cursor);\n        ASSERT_SUCCESS(s_check_cursor_data(&private_key_cursor));\n    }\n\n",
                    "rendered": {
                      "text": "        struct aws_byte_cursor private_key_cursor;\n        AWS_ZERO_STRUCT(private_key_cursor);\n\n        aws_ecc_key_pair_get_private_key(key_pair, &private_key_cursor);\n        ASSERT_SUCCESS(s_check_cursor_data(&private_key_cursor));\n    }\n\n",
                      "markdown": "`        struct aws_byte_cursor private_key_cursor;\n        AWS_ZERO_STRUCT(private_key_cursor);\n\n        aws_ecc_key_pair_get_private_key(key_pair, &private_key_cursor);\n        ASSERT_SUCCESS(s_check_cursor_data(&private_key_cursor));\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 734,
                  "startColumn": 24,
                  "endLine": 734,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    if (flags & AWS_ECC_KCF_PRIVATE) {\n        struct aws_byte_cursor private_key_cursor;\n        AWS_ZERO_STRUCT(private_key_cursor);\n\n        aws_ecc_key_pair_get_private_key(key_pair, &private_key_cursor);\n        ASSERT_SUCCESS(s_check_cursor_data(&private_key_cursor));\n",
                    "rendered": {
                      "text": "\n    if (flags & AWS_ECC_KCF_PRIVATE) {\n        struct aws_byte_cursor private_key_cursor;\n        AWS_ZERO_STRUCT(private_key_cursor);\n\n        aws_ecc_key_pair_get_private_key(key_pair, &private_key_cursor);\n        ASSERT_SUCCESS(s_check_cursor_data(&private_key_cursor));\n",
                      "markdown": "`\n    if (flags & AWS_ECC_KCF_PRIVATE) {\n        struct aws_byte_cursor private_key_cursor;\n        AWS_ZERO_STRUCT(private_key_cursor);\n\n        aws_ecc_key_pair_get_private_key(key_pair, &private_key_cursor);\n        ASSERT_SUCCESS(s_check_cursor_data(&private_key_cursor));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 733,
                  "startColumn": 31,
                  "endLine": 733,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    aws_ecc_key_pair_release(key_pair);\n\n    if (flags & AWS_ECC_KCF_PRIVATE) {\n        struct aws_byte_cursor private_key_cursor;\n        AWS_ZERO_STRUCT(private_key_cursor);\n\n        aws_ecc_key_pair_get_private_key(key_pair, &private_key_cursor);\n",
                    "rendered": {
                      "text": "    aws_ecc_key_pair_release(key_pair);\n\n    if (flags & AWS_ECC_KCF_PRIVATE) {\n        struct aws_byte_cursor private_key_cursor;\n        AWS_ZERO_STRUCT(private_key_cursor);\n\n        aws_ecc_key_pair_get_private_key(key_pair, &private_key_cursor);\n",
                      "markdown": "`    aws_ecc_key_pair_release(key_pair);\n\n    if (flags & AWS_ECC_KCF_PRIVATE) {\n        struct aws_byte_cursor private_key_cursor;\n        AWS_ZERO_STRUCT(private_key_cursor);\n\n        aws_ecc_key_pair_get_private_key(key_pair, &private_key_cursor);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 34,
                  "endLine": 380,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n    struct aws_byte_cursor padded_priv_d_cursor = aws_byte_cursor_from_buf(&padded_priv_d);\n    struct aws_ecc_key_pair *signing_key =\n        aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &padded_priv_d_cursor);\n    ASSERT_NOT_NULL(signing_key);\n\n    uint8_t message[] = {\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_cursor padded_priv_d_cursor = aws_byte_cursor_from_buf(&padded_priv_d);\n    struct aws_ecc_key_pair *signing_key =\n        aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &padded_priv_d_cursor);\n    ASSERT_NOT_NULL(signing_key);\n\n    uint8_t message[] = {\n",
                      "markdown": "`\n    struct aws_byte_cursor padded_priv_d_cursor = aws_byte_cursor_from_buf(&padded_priv_d);\n    struct aws_ecc_key_pair *signing_key =\n        aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &padded_priv_d_cursor);\n    ASSERT_NOT_NULL(signing_key);\n\n    uint8_t message[] = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 34,
                  "endLine": 373,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    aws_byte_buf_secure_zero(&padded_priv_d);\n\n    if (priv_d.len < curve_private_key_length) {\n        padded_priv_d.len = curve_private_key_length - priv_d.len;\n    }\n\n    ASSERT_SUCCESS(aws_byte_buf_append(&padded_priv_d, &priv_d));\n",
                    "rendered": {
                      "text": "    aws_byte_buf_secure_zero(&padded_priv_d);\n\n    if (priv_d.len < curve_private_key_length) {\n        padded_priv_d.len = curve_private_key_length - priv_d.len;\n    }\n\n    ASSERT_SUCCESS(aws_byte_buf_append(&padded_priv_d, &priv_d));\n",
                      "markdown": "`    aws_byte_buf_secure_zero(&padded_priv_d);\n\n    if (priv_d.len < curve_private_key_length) {\n        padded_priv_d.len = curve_private_key_length - priv_d.len;\n    }\n\n    ASSERT_SUCCESS(aws_byte_buf_append(&padded_priv_d, &priv_d));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 27,
                  "endLine": 372,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    aws_byte_buf_init(&padded_priv_d, allocator, curve_private_key_length);\n    aws_byte_buf_secure_zero(&padded_priv_d);\n\n    if (priv_d.len < curve_private_key_length) {\n        padded_priv_d.len = curve_private_key_length - priv_d.len;\n    }\n\n",
                    "rendered": {
                      "text": "    aws_byte_buf_init(&padded_priv_d, allocator, curve_private_key_length);\n    aws_byte_buf_secure_zero(&padded_priv_d);\n\n    if (priv_d.len < curve_private_key_length) {\n        padded_priv_d.len = curve_private_key_length - priv_d.len;\n    }\n\n",
                      "markdown": "`    aws_byte_buf_init(&padded_priv_d, allocator, curve_private_key_length);\n    aws_byte_buf_secure_zero(&padded_priv_d);\n\n    if (priv_d.len < curve_private_key_length) {\n        padded_priv_d.len = curve_private_key_length - priv_d.len;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 55,
                  "endLine": 369,
                  "endColumn": 66,
                  "snippet": {
                    "text": "     */\n    size_t curve_private_key_length = aws_ecc_key_coordinate_byte_size_from_curve_name(curve_name);\n    struct aws_byte_buf padded_priv_d;\n    aws_byte_buf_init(&padded_priv_d, allocator, curve_private_key_length);\n    aws_byte_buf_secure_zero(&padded_priv_d);\n\n    if (priv_d.len < curve_private_key_length) {\n",
                    "rendered": {
                      "text": "     */\n    size_t curve_private_key_length = aws_ecc_key_coordinate_byte_size_from_curve_name(curve_name);\n    struct aws_byte_buf padded_priv_d;\n    aws_byte_buf_init(&padded_priv_d, allocator, curve_private_key_length);\n    aws_byte_buf_secure_zero(&padded_priv_d);\n\n    if (priv_d.len < curve_private_key_length) {\n",
                      "markdown": "`     */\n    size_t curve_private_key_length = aws_ecc_key_coordinate_byte_size_from_curve_name(curve_name);\n    struct aws_byte_buf padded_priv_d;\n    aws_byte_buf_init(&padded_priv_d, allocator, curve_private_key_length);\n    aws_byte_buf_secure_zero(&padded_priv_d);\n\n    if (priv_d.len < curve_private_key_length) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 17,
                  "endLine": 367,
                  "endColumn": 28,
                  "snippet": {
                    "text": "     * The private key we get back from the randomly generated key may be shorter than we expect since it's\n     * minimally encoded.  In that case we have to pad it out to satisfy the key length invariant.\n     */\n    size_t curve_private_key_length = aws_ecc_key_coordinate_byte_size_from_curve_name(curve_name);\n    struct aws_byte_buf padded_priv_d;\n    aws_byte_buf_init(&padded_priv_d, allocator, curve_private_key_length);\n    aws_byte_buf_secure_zero(&padded_priv_d);\n",
                    "rendered": {
                      "text": "     * The private key we get back from the randomly generated key may be shorter than we expect since it's\n     * minimally encoded.  In that case we have to pad it out to satisfy the key length invariant.\n     */\n    size_t curve_private_key_length = aws_ecc_key_coordinate_byte_size_from_curve_name(curve_name);\n    struct aws_byte_buf padded_priv_d;\n    aws_byte_buf_init(&padded_priv_d, allocator, curve_private_key_length);\n    aws_byte_buf_secure_zero(&padded_priv_d);\n",
                      "markdown": "`     * The private key we get back from the randomly generated key may be shorter than we expect since it's\n     * minimally encoded.  In that case we have to pad it out to satisfy the key length invariant.\n     */\n    size_t curve_private_key_length = aws_ecc_key_coordinate_byte_size_from_curve_name(curve_name);\n    struct aws_byte_buf padded_priv_d;\n    aws_byte_buf_init(&padded_priv_d, allocator, curve_private_key_length);\n    aws_byte_buf_secure_zero(&padded_priv_d);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 25,
                  "endLine": 360,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(pub_y.len > 0);\n\n    struct aws_byte_cursor priv_d;\n    aws_ecc_key_pair_get_private_key(key_pair, &priv_d);\n    ASSERT_TRUE(priv_d.len > 0);\n\n    /*\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(pub_y.len > 0);\n\n    struct aws_byte_cursor priv_d;\n    aws_ecc_key_pair_get_private_key(key_pair, &priv_d);\n    ASSERT_TRUE(priv_d.len > 0);\n\n    /*\n",
                      "markdown": "`    ASSERT_TRUE(pub_y.len > 0);\n\n    struct aws_byte_cursor priv_d;\n    aws_ecc_key_pair_get_private_key(key_pair, &priv_d);\n    ASSERT_TRUE(priv_d.len > 0);\n\n    /*\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 25,
                  "endLine": 290,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(pub_y.len > 0);\n\n    struct aws_byte_cursor priv_d;\n    aws_ecc_key_pair_get_private_key(key_pair, &priv_d);\n    ASSERT_TRUE(priv_d.len > 0);\n\n    uint8_t message[] = {\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(pub_y.len > 0);\n\n    struct aws_byte_cursor priv_d;\n    aws_ecc_key_pair_get_private_key(key_pair, &priv_d);\n    ASSERT_TRUE(priv_d.len > 0);\n\n    uint8_t message[] = {\n",
                      "markdown": "`    ASSERT_TRUE(pub_y.len > 0);\n\n    struct aws_byte_cursor priv_d;\n    aws_ecc_key_pair_get_private_key(key_pair, &priv_d);\n    ASSERT_TRUE(priv_d.len > 0);\n\n    uint8_t message[] = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 69,
                  "endLine": 221,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\n    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    return s_test_known_signing_value(allocator, AWS_CAL_ECDSA_P384, private_key, pub_x, pub_y);\n}\n\nAWS_TEST_CASE(ecdsa_p384_test_known_signing_value, s_ecdsa_p384_test_known_signing_value_fn)\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    return s_test_known_signing_value(allocator, AWS_CAL_ECDSA_P384, private_key, pub_x, pub_y);\n}\n\nAWS_TEST_CASE(ecdsa_p384_test_known_signing_value, s_ecdsa_p384_test_known_signing_value_fn)\n",
                      "markdown": "`\n    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    return s_test_known_signing_value(allocator, AWS_CAL_ECDSA_P384, private_key, pub_x, pub_y);\n}\n\nAWS_TEST_CASE(ecdsa_p384_test_known_signing_value, s_ecdsa_p384_test_known_signing_value_fn)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 27,
                  "endLine": 203,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        0x8f, 0xc9, 0x67, 0x3d, 0x14, 0xa7, 0x1d, 0x92, 0x57, 0x47, 0x93, 0x16, 0x62, 0x49, 0x3c, 0x37,\n    };\n\n    struct aws_byte_cursor private_key = aws_byte_cursor_from_array(d, sizeof(d));\n\n    uint8_t x[] = {\n        0xfd, 0x3c, 0x84, 0xe5, 0x68, 0x9b, 0xed, 0x27, 0x0e, 0x60, 0x1b, 0x3d, 0x80, 0xf9, 0x0d, 0x67,\n",
                    "rendered": {
                      "text": "        0x8f, 0xc9, 0x67, 0x3d, 0x14, 0xa7, 0x1d, 0x92, 0x57, 0x47, 0x93, 0x16, 0x62, 0x49, 0x3c, 0x37,\n    };\n\n    struct aws_byte_cursor private_key = aws_byte_cursor_from_array(d, sizeof(d));\n\n    uint8_t x[] = {\n        0xfd, 0x3c, 0x84, 0xe5, 0x68, 0x9b, 0xed, 0x27, 0x0e, 0x60, 0x1b, 0x3d, 0x80, 0xf9, 0x0d, 0x67,\n",
                      "markdown": "`        0x8f, 0xc9, 0x67, 0x3d, 0x14, 0xa7, 0x1d, 0x92, 0x57, 0x47, 0x93, 0x16, 0x62, 0x49, 0x3c, 0x37,\n    };\n\n    struct aws_byte_cursor private_key = aws_byte_cursor_from_array(d, sizeof(d));\n\n    uint8_t x[] = {\n        0xfd, 0x3c, 0x84, 0xe5, 0x68, 0x9b, 0xed, 0x27, 0x0e, 0x60, 0x1b, 0x3d, 0x80, 0xf9, 0x0d, 0x67,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 69,
                  "endLine": 189,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    struct aws_byte_cursor pub_x = aws_byte_cursor_from_array(x, sizeof(x));\n    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    return s_test_known_signing_value(allocator, AWS_CAL_ECDSA_P256, private_key, pub_x, pub_y);\n}\n\nAWS_TEST_CASE(ecdsa_p256_test_known_signing_value, s_ecdsa_p256_test_known_signing_value_fn)\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor pub_x = aws_byte_cursor_from_array(x, sizeof(x));\n    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    return s_test_known_signing_value(allocator, AWS_CAL_ECDSA_P256, private_key, pub_x, pub_y);\n}\n\nAWS_TEST_CASE(ecdsa_p256_test_known_signing_value, s_ecdsa_p256_test_known_signing_value_fn)\n",
                      "markdown": "`    struct aws_byte_cursor pub_x = aws_byte_cursor_from_array(x, sizeof(x));\n    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    return s_test_known_signing_value(allocator, AWS_CAL_ECDSA_P256, private_key, pub_x, pub_y);\n}\n\nAWS_TEST_CASE(ecdsa_p256_test_known_signing_value, s_ecdsa_p256_test_known_signing_value_fn)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 27,
                  "endLine": 174,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        0x5b, 0x44, 0xc8, 0x13, 0x0b, 0x4e, 0x3e, 0xac, 0xca, 0x54, 0xa5, 0x6d, 0xda, 0x72, 0xb4, 0x64,\n    };\n\n    struct aws_byte_cursor private_key = aws_byte_cursor_from_array(d, sizeof(d));\n\n    uint8_t x[] = {\n        0x1c, 0xcb, 0xe9, 0x1c, 0x07, 0x5f, 0xc7, 0xf4, 0xf0, 0x33, 0xbf, 0xa2, 0x48, 0xdb, 0x8f, 0xcc,\n",
                    "rendered": {
                      "text": "        0x5b, 0x44, 0xc8, 0x13, 0x0b, 0x4e, 0x3e, 0xac, 0xca, 0x54, 0xa5, 0x6d, 0xda, 0x72, 0xb4, 0x64,\n    };\n\n    struct aws_byte_cursor private_key = aws_byte_cursor_from_array(d, sizeof(d));\n\n    uint8_t x[] = {\n        0x1c, 0xcb, 0xe9, 0x1c, 0x07, 0x5f, 0xc7, 0xf4, 0xf0, 0x33, 0xbf, 0xa2, 0x48, 0xdb, 0x8f, 0xcc,\n",
                      "markdown": "`        0x5b, 0x44, 0xc8, 0x13, 0x0b, 0x4e, 0x3e, 0xac, 0xca, 0x54, 0xa5, 0x6d, 0xda, 0x72, 0xb4, 0x64,\n    };\n\n    struct aws_byte_cursor private_key = aws_byte_cursor_from_array(d, sizeof(d));\n\n    uint8_t x[] = {\n        0x1c, 0xcb, 0xe9, 0x1c, 0x07, 0x5f, 0xc7, 0xf4, 0xf0, 0x33, 0xbf, 0xa2, 0x48, 0xdb, 0x8f, 0xcc,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 105,
                  "endLine": 122,
                  "endColumn": 116,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_ecc_key_pair *signing_key = aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n    ASSERT_NOT_NULL(signing_key);\n\n    struct aws_ecc_key_pair *verifying_key =\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_ecc_key_pair *signing_key = aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n    ASSERT_NOT_NULL(signing_key);\n\n    struct aws_ecc_key_pair *verifying_key =\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_ecc_key_pair *signing_key = aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n    ASSERT_NOT_NULL(signing_key);\n\n    struct aws_ecc_key_pair *verifying_key =\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 69,
                  "endLine": 122,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_ecc_key_pair *signing_key = aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n    ASSERT_NOT_NULL(signing_key);\n\n    struct aws_ecc_key_pair *verifying_key =\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_ecc_key_pair *signing_key = aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n    ASSERT_NOT_NULL(signing_key);\n\n    struct aws_ecc_key_pair *verifying_key =\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_ecc_key_pair *signing_key = aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n    ASSERT_NOT_NULL(signing_key);\n\n    struct aws_ecc_key_pair *verifying_key =\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 27,
                  "endLine": 116,
                  "endColumn": 38,
                  "snippet": {
                    "text": "static int s_test_known_signing_value(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    struct aws_byte_cursor private_key,\n    struct aws_byte_cursor pub_x,\n    struct aws_byte_cursor pub_y) {\n\n",
                    "rendered": {
                      "text": "static int s_test_known_signing_value(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    struct aws_byte_cursor private_key,\n    struct aws_byte_cursor pub_x,\n    struct aws_byte_cursor pub_y) {\n\n",
                      "markdown": "`static int s_test_known_signing_value(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    struct aws_byte_cursor private_key,\n    struct aws_byte_cursor pub_x,\n    struct aws_byte_cursor pub_y) {\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 64,
                  "endLine": 108,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    return s_test_key_derivation(allocator, AWS_CAL_ECDSA_P384, private_key, pub_x, pub_y);\n}\n\nAWS_TEST_CASE(ecdsa_p384_test_pub_key_derivation, s_ecdsa_p384_test_pub_key_derivation_fn)\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    return s_test_key_derivation(allocator, AWS_CAL_ECDSA_P384, private_key, pub_x, pub_y);\n}\n\nAWS_TEST_CASE(ecdsa_p384_test_pub_key_derivation, s_ecdsa_p384_test_pub_key_derivation_fn)\n",
                      "markdown": "`\n    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    return s_test_key_derivation(allocator, AWS_CAL_ECDSA_P384, private_key, pub_x, pub_y);\n}\n\nAWS_TEST_CASE(ecdsa_p384_test_pub_key_derivation, s_ecdsa_p384_test_pub_key_derivation_fn)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 27,
                  "endLine": 90,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        0x8f, 0xc9, 0x67, 0x3d, 0x14, 0xa7, 0x1d, 0x92, 0x57, 0x47, 0x93, 0x16, 0x62, 0x49, 0x3c, 0x37,\n    };\n\n    struct aws_byte_cursor private_key = aws_byte_cursor_from_array(d, sizeof(d));\n\n    uint8_t x[] = {\n        0xfd, 0x3c, 0x84, 0xe5, 0x68, 0x9b, 0xed, 0x27, 0x0e, 0x60, 0x1b, 0x3d, 0x80, 0xf9, 0x0d, 0x67,\n",
                    "rendered": {
                      "text": "        0x8f, 0xc9, 0x67, 0x3d, 0x14, 0xa7, 0x1d, 0x92, 0x57, 0x47, 0x93, 0x16, 0x62, 0x49, 0x3c, 0x37,\n    };\n\n    struct aws_byte_cursor private_key = aws_byte_cursor_from_array(d, sizeof(d));\n\n    uint8_t x[] = {\n        0xfd, 0x3c, 0x84, 0xe5, 0x68, 0x9b, 0xed, 0x27, 0x0e, 0x60, 0x1b, 0x3d, 0x80, 0xf9, 0x0d, 0x67,\n",
                      "markdown": "`        0x8f, 0xc9, 0x67, 0x3d, 0x14, 0xa7, 0x1d, 0x92, 0x57, 0x47, 0x93, 0x16, 0x62, 0x49, 0x3c, 0x37,\n    };\n\n    struct aws_byte_cursor private_key = aws_byte_cursor_from_array(d, sizeof(d));\n\n    uint8_t x[] = {\n        0xfd, 0x3c, 0x84, 0xe5, 0x68, 0x9b, 0xed, 0x27, 0x0e, 0x60, 0x1b, 0x3d, 0x80, 0xf9, 0x0d, 0x67,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 64,
                  "endLine": 76,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    return s_test_key_derivation(allocator, AWS_CAL_ECDSA_P256, private_key, pub_x, pub_y);\n}\n\nAWS_TEST_CASE(ecdsa_p256_test_pub_key_derivation, s_ecdsa_p256_test_pub_key_derivation_fn)\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    return s_test_key_derivation(allocator, AWS_CAL_ECDSA_P256, private_key, pub_x, pub_y);\n}\n\nAWS_TEST_CASE(ecdsa_p256_test_pub_key_derivation, s_ecdsa_p256_test_pub_key_derivation_fn)\n",
                      "markdown": "`\n    struct aws_byte_cursor pub_y = aws_byte_cursor_from_array(y, sizeof(y));\n\n    return s_test_key_derivation(allocator, AWS_CAL_ECDSA_P256, private_key, pub_x, pub_y);\n}\n\nAWS_TEST_CASE(ecdsa_p256_test_pub_key_derivation, s_ecdsa_p256_test_pub_key_derivation_fn)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 27,
                  "endLine": 60,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        0x93, 0xb5, 0x79, 0xa9, 0xb1, 0xf3, 0x29, 0x34, 0xd8, 0x6c, 0x36, 0x3c, 0x39, 0x80, 0x03, 0x57,\n    };\n\n    struct aws_byte_cursor private_key = aws_byte_cursor_from_array(d, sizeof(d));\n\n    uint8_t x[] = {\n        0xd0, 0x72, 0x0d, 0xc6, 0x91, 0xaa, 0x80, 0x09, 0x6b, 0xa3, 0x2f, 0xed, 0x1c, 0xb9, 0x7c, 0x2b,\n",
                    "rendered": {
                      "text": "        0x93, 0xb5, 0x79, 0xa9, 0xb1, 0xf3, 0x29, 0x34, 0xd8, 0x6c, 0x36, 0x3c, 0x39, 0x80, 0x03, 0x57,\n    };\n\n    struct aws_byte_cursor private_key = aws_byte_cursor_from_array(d, sizeof(d));\n\n    uint8_t x[] = {\n        0xd0, 0x72, 0x0d, 0xc6, 0x91, 0xaa, 0x80, 0x09, 0x6b, 0xa3, 0x2f, 0xed, 0x1c, 0xb9, 0x7c, 0x2b,\n",
                      "markdown": "`        0x93, 0xb5, 0x79, 0xa9, 0xb1, 0xf3, 0x29, 0x34, 0xd8, 0x6c, 0x36, 0x3c, 0x39, 0x80, 0x03, 0x57,\n    };\n\n    struct aws_byte_cursor private_key = aws_byte_cursor_from_array(d, sizeof(d));\n\n    uint8_t x[] = {\n        0xd0, 0x72, 0x0d, 0xc6, 0x91, 0xaa, 0x80, 0x09, 0x6b, 0xa3, 0x2f, 0xed, 0x1c, 0xb9, 0x7c, 0x2b,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 29,
                  "endLine": 46,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(expected_pub_y.ptr, expected_pub_y.len, pub_y.ptr, pub_y.len);\n\ncomplete:\n    aws_ecc_key_pair_release(private_key_pair);\n\n    aws_cal_library_clean_up();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(expected_pub_y.ptr, expected_pub_y.len, pub_y.ptr, pub_y.len);\n\ncomplete:\n    aws_ecc_key_pair_release(private_key_pair);\n\n    aws_cal_library_clean_up();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(expected_pub_y.ptr, expected_pub_y.len, pub_y.ptr, pub_y.len);\n\ncomplete:\n    aws_ecc_key_pair_release(private_key_pair);\n\n    aws_cal_library_clean_up();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 36,
                  "endLine": 40,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    struct aws_byte_cursor pub_x;\n    struct aws_byte_cursor pub_y;\n\n    aws_ecc_key_pair_get_public_key(private_key_pair, &pub_x, &pub_y);\n    ASSERT_BIN_ARRAYS_EQUALS(expected_pub_x.ptr, expected_pub_x.len, pub_x.ptr, pub_x.len);\n\n    ASSERT_BIN_ARRAYS_EQUALS(expected_pub_y.ptr, expected_pub_y.len, pub_y.ptr, pub_y.len);\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor pub_x;\n    struct aws_byte_cursor pub_y;\n\n    aws_ecc_key_pair_get_public_key(private_key_pair, &pub_x, &pub_y);\n    ASSERT_BIN_ARRAYS_EQUALS(expected_pub_x.ptr, expected_pub_x.len, pub_x.ptr, pub_x.len);\n\n    ASSERT_BIN_ARRAYS_EQUALS(expected_pub_y.ptr, expected_pub_y.len, pub_y.ptr, pub_y.len);\n",
                      "markdown": "`    struct aws_byte_cursor pub_x;\n    struct aws_byte_cursor pub_y;\n\n    aws_ecc_key_pair_get_public_key(private_key_pair, &pub_x, &pub_y);\n    ASSERT_BIN_ARRAYS_EQUALS(expected_pub_x.ptr, expected_pub_x.len, pub_x.ptr, pub_x.len);\n\n    ASSERT_BIN_ARRAYS_EQUALS(expected_pub_y.ptr, expected_pub_y.len, pub_y.ptr, pub_y.len);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 51,
                  "endLine": 29,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n    ASSERT_NOT_NULL(private_key_pair);\n\n    int error = aws_ecc_key_pair_derive_public_key(private_key_pair);\n\n    /* this isn't supported on Apple platforms, since AFAIK it isn't possible */\n    if (error) {\n",
                    "rendered": {
                      "text": "\n    ASSERT_NOT_NULL(private_key_pair);\n\n    int error = aws_ecc_key_pair_derive_public_key(private_key_pair);\n\n    /* this isn't supported on Apple platforms, since AFAIK it isn't possible */\n    if (error) {\n",
                      "markdown": "`\n    ASSERT_NOT_NULL(private_key_pair);\n\n    int error = aws_ecc_key_pair_derive_public_key(private_key_pair);\n\n    /* this isn't supported on Apple platforms, since AFAIK it isn't possible */\n    if (error) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 20,
                  "endLine": 27,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    struct aws_ecc_key_pair *private_key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n\n    ASSERT_NOT_NULL(private_key_pair);\n\n    int error = aws_ecc_key_pair_derive_public_key(private_key_pair);\n\n",
                    "rendered": {
                      "text": "    struct aws_ecc_key_pair *private_key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n\n    ASSERT_NOT_NULL(private_key_pair);\n\n    int error = aws_ecc_key_pair_derive_public_key(private_key_pair);\n\n",
                      "markdown": "`    struct aws_ecc_key_pair *private_key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n\n    ASSERT_NOT_NULL(private_key_pair);\n\n    int error = aws_ecc_key_pair_derive_public_key(private_key_pair);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 70,
                  "endLine": 25,
                  "endColumn": 81,
                  "snippet": {
                    "text": "    aws_cal_library_test_init(allocator);\n\n    struct aws_ecc_key_pair *private_key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n\n    ASSERT_NOT_NULL(private_key_pair);\n\n",
                    "rendered": {
                      "text": "    aws_cal_library_test_init(allocator);\n\n    struct aws_ecc_key_pair *private_key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n\n    ASSERT_NOT_NULL(private_key_pair);\n\n",
                      "markdown": "`    aws_cal_library_test_init(allocator);\n\n    struct aws_ecc_key_pair *private_key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n\n    ASSERT_NOT_NULL(private_key_pair);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 34,
                  "endLine": 25,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    aws_cal_library_test_init(allocator);\n\n    struct aws_ecc_key_pair *private_key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n\n    ASSERT_NOT_NULL(private_key_pair);\n\n",
                    "rendered": {
                      "text": "    aws_cal_library_test_init(allocator);\n\n    struct aws_ecc_key_pair *private_key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n\n    ASSERT_NOT_NULL(private_key_pair);\n\n",
                      "markdown": "`    aws_cal_library_test_init(allocator);\n\n    struct aws_ecc_key_pair *private_key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n\n    ASSERT_NOT_NULL(private_key_pair);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 29,
                  "endLine": 24,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_ecc_key_pair *private_key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n\n    ASSERT_NOT_NULL(private_key_pair);\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_ecc_key_pair *private_key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n\n    ASSERT_NOT_NULL(private_key_pair);\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_ecc_key_pair *private_key_pair =\n        aws_ecc_key_pair_new_from_private_key(allocator, curve_name, &private_key);\n\n    ASSERT_NOT_NULL(private_key_pair);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 27,
                  "endLine": 18,
                  "endColumn": 38,
                  "snippet": {
                    "text": "static int s_test_key_derivation(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    struct aws_byte_cursor private_key,\n    struct aws_byte_cursor expected_pub_x,\n    struct aws_byte_cursor expected_pub_y) {\n\n",
                    "rendered": {
                      "text": "static int s_test_key_derivation(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    struct aws_byte_cursor private_key,\n    struct aws_byte_cursor expected_pub_x,\n    struct aws_byte_cursor expected_pub_y) {\n\n",
                      "markdown": "`static int s_test_key_derivation(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    struct aws_byte_cursor private_key,\n    struct aws_byte_cursor expected_pub_x,\n    struct aws_byte_cursor expected_pub_y) {\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 872,
                  "startColumn": 40,
                  "endLine": 872,
                  "endColumn": 106,
                  "snippet": {
                    "text": "\nAWS_STATIC_STRING_FROM_LITERAL(s_pub_x, \"b6618f6a65740a99e650b33b6b4b5bd0d43b176d721a3edfea7e7d2d56d936b1\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_pub_y, \"865ed22a7eadc9c5cb9d2cbaca1b3699139fedc5043dc6661864218330c8e518\");\n\nstatic int s_validate_message_signature(\n    struct aws_allocator *allocator,\n",
                    "rendered": {
                      "text": "\nAWS_STATIC_STRING_FROM_LITERAL(s_pub_x, \"b6618f6a65740a99e650b33b6b4b5bd0d43b176d721a3edfea7e7d2d56d936b1\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_pub_y, \"865ed22a7eadc9c5cb9d2cbaca1b3699139fedc5043dc6661864218330c8e518\");\n\nstatic int s_validate_message_signature(\n    struct aws_allocator *allocator,\n",
                      "markdown": "`\nAWS_STATIC_STRING_FROM_LITERAL(s_pub_x, \"b6618f6a65740a99e650b33b6b4b5bd0d43b176d721a3edfea7e7d2d56d936b1\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_pub_y, \"865ed22a7eadc9c5cb9d2cbaca1b3699139fedc5043dc6661864218330c8e518\");\n\nstatic int s_validate_message_signature(\n    struct aws_allocator *allocator,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 870,
                  "startColumn": 40,
                  "endLine": 870,
                  "endColumn": 106,
                  "snippet": {
                    "text": "    \"3044021f7cfd51af2b722f8d1fa1afb65b4d5486ed59a67bcf9f3acc62aad6ddd37db10221009d4c9f9a37104fc01a8daffc9a6bd1056b7b43\"\n    \"c1196edde0b52878b759628f8c\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_pub_x, \"b6618f6a65740a99e650b33b6b4b5bd0d43b176d721a3edfea7e7d2d56d936b1\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_pub_y, \"865ed22a7eadc9c5cb9d2cbaca1b3699139fedc5043dc6661864218330c8e518\");\n\n",
                    "rendered": {
                      "text": "    \"3044021f7cfd51af2b722f8d1fa1afb65b4d5486ed59a67bcf9f3acc62aad6ddd37db10221009d4c9f9a37104fc01a8daffc9a6bd1056b7b43\"\n    \"c1196edde0b52878b759628f8c\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_pub_x, \"b6618f6a65740a99e650b33b6b4b5bd0d43b176d721a3edfea7e7d2d56d936b1\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_pub_y, \"865ed22a7eadc9c5cb9d2cbaca1b3699139fedc5043dc6661864218330c8e518\");\n\n",
                      "markdown": "`    \"3044021f7cfd51af2b722f8d1fa1afb65b4d5486ed59a67bcf9f3acc62aad6ddd37db10221009d4c9f9a37104fc01a8daffc9a6bd1056b7b43\"\n    \"c1196edde0b52878b759628f8c\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_pub_x, \"b6618f6a65740a99e650b33b6b4b5bd0d43b176d721a3edfea7e7d2d56d936b1\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_pub_y, \"865ed22a7eadc9c5cb9d2cbaca1b3699139fedc5043dc6661864218330c8e518\");\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 867,
                  "startColumn": 4,
                  "endLine": 867,
                  "endColumn": 120,
                  "snippet": {
                    "text": "\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_signature_value,\n    \"3044021f7cfd51af2b722f8d1fa1afb65b4d5486ed59a67bcf9f3acc62aad6ddd37db10221009d4c9f9a37104fc01a8daffc9a6bd1056b7b43\"\n    \"c1196edde0b52878b759628f8c\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_pub_x, \"b6618f6a65740a99e650b33b6b4b5bd0d43b176d721a3edfea7e7d2d56d936b1\");\n",
                    "rendered": {
                      "text": "\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_signature_value,\n    \"3044021f7cfd51af2b722f8d1fa1afb65b4d5486ed59a67bcf9f3acc62aad6ddd37db10221009d4c9f9a37104fc01a8daffc9a6bd1056b7b43\"\n    \"c1196edde0b52878b759628f8c\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_pub_x, \"b6618f6a65740a99e650b33b6b4b5bd0d43b176d721a3edfea7e7d2d56d936b1\");\n",
                      "markdown": "`\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_signature_value,\n    \"3044021f7cfd51af2b722f8d1fa1afb65b4d5486ed59a67bcf9f3acc62aad6ddd37db10221009d4c9f9a37104fc01a8daffc9a6bd1056b7b43\"\n    \"c1196edde0b52878b759628f8c\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_pub_x, \"b6618f6a65740a99e650b33b6b4b5bd0d43b176d721a3edfea7e7d2d56d936b1\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/ecc_test.c"
                },
                "region": {
                  "startLine": 863,
                  "startColumn": 46,
                  "endLine": 863,
                  "endColumn": 112,
                  "snippet": {
                    "text": " der encoding.  This was an issue on windows where we have to unpack the coordinates and pass them to BCrypt and\n weren't padding them with leading zeros.\n */\nAWS_STATIC_STRING_FROM_LITERAL(s_hex_message, \"a8ddb188e516d365ba275c2b6d55ead851e89ab66f162adf29614f37cd3403c9\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_signature_value,\n",
                    "rendered": {
                      "text": " der encoding.  This was an issue on windows where we have to unpack the coordinates and pass them to BCrypt and\n weren't padding them with leading zeros.\n */\nAWS_STATIC_STRING_FROM_LITERAL(s_hex_message, \"a8ddb188e516d365ba275c2b6d55ead851e89ab66f162adf29614f37cd3403c9\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_signature_value,\n",
                      "markdown": "` der encoding.  This was an issue on windows where we have to unpack the coordinates and pass them to BCrypt and\n weren't padding them with leading zeros.\n */\nAWS_STATIC_STRING_FROM_LITERAL(s_hex_message, \"a8ddb188e516d365ba275c2b6d55ead851e89ab66f162adf29614f37cd3403c9\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_signature_value,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 705,
                  "startColumn": 34,
                  "endLine": 705,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &public_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&public_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    uint8_t hash[AWS_SHA256_LEN];\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &public_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&public_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    uint8_t hash[AWS_SHA256_LEN];\n",
                      "markdown": "`    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &public_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&public_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    uint8_t hash[AWS_SHA256_LEN];\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 61,
                  "endLine": 703,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n    struct aws_byte_buf public_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &public_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&public_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_buf public_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &public_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&public_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                      "markdown": "`\n    struct aws_byte_buf public_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &public_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&public_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 646,
                  "startColumn": 34,
                  "endLine": 646,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        iqmp, AWS_ARRAY_SIZE(iqmp), private_key_data.coefficient.ptr, private_key_data.coefficient.len);\n\n    aws_byte_buf_clean_up_secure(&private_key_buf);\n    aws_der_decoder_destroy(decoder);\n\n    aws_cal_library_clean_up();\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        iqmp, AWS_ARRAY_SIZE(iqmp), private_key_data.coefficient.ptr, private_key_data.coefficient.len);\n\n    aws_byte_buf_clean_up_secure(&private_key_buf);\n    aws_der_decoder_destroy(decoder);\n\n    aws_cal_library_clean_up();\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(\n        iqmp, AWS_ARRAY_SIZE(iqmp), private_key_data.coefficient.ptr, private_key_data.coefficient.len);\n\n    aws_byte_buf_clean_up_secure(&private_key_buf);\n    aws_der_decoder_destroy(decoder);\n\n    aws_cal_library_clean_up();\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 70,
                  "endLine": 644,
                  "endColumn": 81,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        iqmp, AWS_ARRAY_SIZE(iqmp), private_key_data.coefficient.ptr, private_key_data.coefficient.len);\n\n    aws_byte_buf_clean_up_secure(&private_key_buf);\n    aws_der_decoder_destroy(decoder);\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        iqmp, AWS_ARRAY_SIZE(iqmp), private_key_data.coefficient.ptr, private_key_data.coefficient.len);\n\n    aws_byte_buf_clean_up_secure(&private_key_buf);\n    aws_der_decoder_destroy(decoder);\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        iqmp, AWS_ARRAY_SIZE(iqmp), private_key_data.coefficient.ptr, private_key_data.coefficient.len);\n\n    aws_byte_buf_clean_up_secure(&private_key_buf);\n    aws_der_decoder_destroy(decoder);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 36,
                  "endLine": 644,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        iqmp, AWS_ARRAY_SIZE(iqmp), private_key_data.coefficient.ptr, private_key_data.coefficient.len);\n\n    aws_byte_buf_clean_up_secure(&private_key_buf);\n    aws_der_decoder_destroy(decoder);\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        iqmp, AWS_ARRAY_SIZE(iqmp), private_key_data.coefficient.ptr, private_key_data.coefficient.len);\n\n    aws_byte_buf_clean_up_secure(&private_key_buf);\n    aws_der_decoder_destroy(decoder);\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        iqmp, AWS_ARRAY_SIZE(iqmp), private_key_data.coefficient.ptr, private_key_data.coefficient.len);\n\n    aws_byte_buf_clean_up_secure(&private_key_buf);\n    aws_der_decoder_destroy(decoder);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 642,
                  "startColumn": 68,
                  "endLine": 642,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        iqmp, AWS_ARRAY_SIZE(iqmp), private_key_data.coefficient.ptr, private_key_data.coefficient.len);\n\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        iqmp, AWS_ARRAY_SIZE(iqmp), private_key_data.coefficient.ptr, private_key_data.coefficient.len);\n\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        iqmp, AWS_ARRAY_SIZE(iqmp), private_key_data.coefficient.ptr, private_key_data.coefficient.len);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 642,
                  "startColumn": 36,
                  "endLine": 642,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        iqmp, AWS_ARRAY_SIZE(iqmp), private_key_data.coefficient.ptr, private_key_data.coefficient.len);\n\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        iqmp, AWS_ARRAY_SIZE(iqmp), private_key_data.coefficient.ptr, private_key_data.coefficient.len);\n\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        iqmp, AWS_ARRAY_SIZE(iqmp), private_key_data.coefficient.ptr, private_key_data.coefficient.len);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 68,
                  "endLine": 640,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 36,
                  "endLine": 640,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmq1, AWS_ARRAY_SIZE(dmq1), private_key_data.exponent2.ptr, private_key_data.exponent2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 80,
                  "endLine": 638,
                  "endColumn": 91,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 51,
                  "endLine": 638,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 637,
                  "startColumn": 80,
                  "endLine": 637,
                  "endColumn": 91,
                  "snippet": {
                    "text": "        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n",
                    "rendered": {
                      "text": "        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n",
                      "markdown": "`        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 637,
                  "startColumn": 51,
                  "endLine": 637,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n",
                    "rendered": {
                      "text": "        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n",
                      "markdown": "`        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        dmp1, AWS_ARRAY_SIZE(dmp1), private_key_data.exponent1.ptr, private_key_data.exponent1.len);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 636,
                  "startColumn": 68,
                  "endLine": 636,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 636,
                  "startColumn": 30,
                  "endLine": 636,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n    ASSERT_BIN_ARRAYS_EQUALS(q, AWS_ARRAY_SIZE(q), private_key_data.prime2.ptr, private_key_data.prime2.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 634,
                  "startColumn": 67,
                  "endLine": 634,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n",
                    "rendered": {
                      "text": "\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n",
                      "markdown": "`\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 634,
                  "startColumn": 30,
                  "endLine": 634,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n",
                    "rendered": {
                      "text": "\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n",
                      "markdown": "`\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        d, AWS_ARRAY_SIZE(d), private_key_data.privateExponent.ptr, private_key_data.privateExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(p, AWS_ARRAY_SIZE(p), private_key_data.prime1.ptr, private_key_data.prime1.len);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 632,
                  "startColumn": 81,
                  "endLine": 632,
                  "endColumn": 92,
                  "snippet": {
                    "text": "    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                    "rendered": {
                      "text": "    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                      "markdown": "`    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 632,
                  "startColumn": 51,
                  "endLine": 632,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                    "rendered": {
                      "text": "    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                      "markdown": "`    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n        e, AWS_ARRAY_SIZE(e), private_key_data.publicExponent.ptr, private_key_data.publicExponent.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 630,
                  "startColumn": 68,
                  "endLine": 630,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                    "rendered": {
                      "text": "    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n",
                      "markdown": "`    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n    ASSERT_BIN_ARRAYS_EQUALS(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 629,
                  "startColumn": 20,
                  "endLine": 629,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n",
                      "markdown": "`    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n    ASSERT_BIN_ARRAYS_EQUALS(n, AWS_ARRAY_SIZE(n), private_key_data.modulus.ptr, private_key_data.modulus.len);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 628,
                  "startColumn": 37,
                  "endLine": 628,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n",
                      "markdown": "`\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 628,
                  "startColumn": 19,
                  "endLine": 628,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n",
                      "markdown": "`\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 627,
                  "startColumn": 69,
                  "endLine": 627,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n",
                    "rendered": {
                      "text": "        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n",
                      "markdown": "`        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n    ASSERT_SUCCESS(aws_der_decoder_load_private_rsa_pkcs1(decoder, &private_key_data));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 626,
                  "startColumn": 71,
                  "endLine": 626,
                  "endColumn": 82,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n",
                      "markdown": "`    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 626,
                  "startColumn": 27,
                  "endLine": 626,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n",
                      "markdown": "`    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n    struct aws_rsa_private_key_pkcs1 private_key_data;\n    AWS_ZERO_STRUCT(private_key_data);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 624,
                  "startColumn": 81,
                  "endLine": 624,
                  "endColumn": 92,
                  "snippet": {
                    "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n",
                      "markdown": "`\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 624,
                  "startColumn": 61,
                  "endLine": 624,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n",
                      "markdown": "`\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n    struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&private_key_buf);\n    struct aws_der_decoder *decoder = aws_der_decoder_new(allocator, private_key_cur);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 622,
                  "startColumn": 24,
                  "endLine": 622,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 34,
                  "endLine": 554,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n    aws_rsa_key_pair_release(key_pair_private);\n    aws_rsa_key_pair_release(key_pair_public);\n    aws_byte_buf_clean_up_secure(&private_key_buf);\n    aws_byte_buf_clean_up_secure(&public_key_buf);\n    aws_byte_buf_clean_up_secure(&priv_key);\n    aws_byte_buf_clean_up_secure(&pub_key);\n",
                    "rendered": {
                      "text": "\n    aws_rsa_key_pair_release(key_pair_private);\n    aws_rsa_key_pair_release(key_pair_public);\n    aws_byte_buf_clean_up_secure(&private_key_buf);\n    aws_byte_buf_clean_up_secure(&public_key_buf);\n    aws_byte_buf_clean_up_secure(&priv_key);\n    aws_byte_buf_clean_up_secure(&pub_key);\n",
                      "markdown": "`\n    aws_rsa_key_pair_release(key_pair_private);\n    aws_rsa_key_pair_release(key_pair_public);\n    aws_byte_buf_clean_up_secure(&private_key_buf);\n    aws_byte_buf_clean_up_secure(&public_key_buf);\n    aws_byte_buf_clean_up_secure(&priv_key);\n    aws_byte_buf_clean_up_secure(&pub_key);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 40,
                  "endLine": 536,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    ASSERT_INT_EQUALS(128, aws_rsa_key_pair_signature_length(key_pair_private));\n\n    struct aws_byte_buf priv_key;\n    ASSERT_SUCCESS(aws_rsa_key_pair_get_private_key(key_pair_private, AWS_CAL_RSA_KEY_EXPORT_PKCS1, &priv_key));\n    ASSERT_TRUE(priv_key.len > 0);\n\n    struct aws_byte_buf public_key_buf;\n",
                    "rendered": {
                      "text": "    ASSERT_INT_EQUALS(128, aws_rsa_key_pair_signature_length(key_pair_private));\n\n    struct aws_byte_buf priv_key;\n    ASSERT_SUCCESS(aws_rsa_key_pair_get_private_key(key_pair_private, AWS_CAL_RSA_KEY_EXPORT_PKCS1, &priv_key));\n    ASSERT_TRUE(priv_key.len > 0);\n\n    struct aws_byte_buf public_key_buf;\n",
                      "markdown": "`    ASSERT_INT_EQUALS(128, aws_rsa_key_pair_signature_length(key_pair_private));\n\n    struct aws_byte_buf priv_key;\n    ASSERT_SUCCESS(aws_rsa_key_pair_get_private_key(key_pair_private, AWS_CAL_RSA_KEY_EXPORT_PKCS1, &priv_key));\n    ASSERT_TRUE(priv_key.len > 0);\n\n    struct aws_byte_buf public_key_buf;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 89,
                  "endLine": 529,
                  "endColumn": 100,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n\n    ASSERT_NOT_NULL(key_pair_private);\n    ASSERT_INT_EQUALS(128, aws_rsa_key_pair_block_length(key_pair_private));\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n\n    ASSERT_NOT_NULL(key_pair_private);\n    ASSERT_INT_EQUALS(128, aws_rsa_key_pair_block_length(key_pair_private));\n",
                      "markdown": "`    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n\n    ASSERT_NOT_NULL(key_pair_private);\n    ASSERT_INT_EQUALS(128, aws_rsa_key_pair_block_length(key_pair_private));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 34,
                  "endLine": 529,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n\n    ASSERT_NOT_NULL(key_pair_private);\n    ASSERT_INT_EQUALS(128, aws_rsa_key_pair_block_length(key_pair_private));\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n\n    ASSERT_NOT_NULL(key_pair_private);\n    ASSERT_INT_EQUALS(128, aws_rsa_key_pair_block_length(key_pair_private));\n",
                      "markdown": "`    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n\n    ASSERT_NOT_NULL(key_pair_private);\n    ASSERT_INT_EQUALS(128, aws_rsa_key_pair_block_length(key_pair_private));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 527,
                  "startColumn": 81,
                  "endLine": 527,
                  "endColumn": 92,
                  "snippet": {
                    "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n\n",
                      "markdown": "`\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 527,
                  "startColumn": 61,
                  "endLine": 527,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n\n",
                      "markdown": "`\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 525,
                  "startColumn": 24,
                  "endLine": 525,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 477,
                  "startColumn": 34,
                  "endLine": 477,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n    aws_rsa_key_pair_release(key_pair_private);\n    aws_rsa_key_pair_release(key_pair_public);\n    aws_byte_buf_clean_up_secure(&private_key_buf);\n    aws_byte_buf_clean_up_secure(&public_key_buf);\n\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "\n    aws_rsa_key_pair_release(key_pair_private);\n    aws_rsa_key_pair_release(key_pair_public);\n    aws_byte_buf_clean_up_secure(&private_key_buf);\n    aws_byte_buf_clean_up_secure(&public_key_buf);\n\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`\n    aws_rsa_key_pair_release(key_pair_private);\n    aws_rsa_key_pair_release(key_pair_public);\n    aws_byte_buf_clean_up_secure(&private_key_buf);\n    aws_byte_buf_clean_up_secure(&public_key_buf);\n\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 89,
                  "endLine": 463,
                  "endColumn": 100,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf public_key_buf;\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf public_key_buf;\n",
                      "markdown": "`    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf public_key_buf;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 34,
                  "endLine": 463,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf public_key_buf;\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf public_key_buf;\n",
                      "markdown": "`    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf public_key_buf;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 461,
                  "startColumn": 81,
                  "endLine": 461,
                  "endColumn": 92,
                  "snippet": {
                    "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                      "markdown": "`\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 461,
                  "startColumn": 61,
                  "endLine": 461,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                      "markdown": "`\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 24,
                  "endLine": 459,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    enum aws_rsa_signature_algorithm algo,\n    const char *expected_signature) {\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n",
                    "rendered": {
                      "text": "    enum aws_rsa_signature_algorithm algo,\n    const char *expected_signature) {\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n",
                      "markdown": "`    enum aws_rsa_signature_algorithm algo,\n    const char *expected_signature) {\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 27,
                  "endLine": 391,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n    ASSERT_CURSOR_VALUE_CSTRING_EQUALS(decrypted_cur, TEST_ENCRYPTION_STRING);\n\n    aws_byte_buf_clean_up(&private_key_buf);\n    aws_byte_buf_clean_up(&decrypted);\n    aws_byte_buf_clean_up(&encrypted);\n    aws_rsa_key_pair_release(key_pair_private);\n",
                    "rendered": {
                      "text": "\n    ASSERT_CURSOR_VALUE_CSTRING_EQUALS(decrypted_cur, TEST_ENCRYPTION_STRING);\n\n    aws_byte_buf_clean_up(&private_key_buf);\n    aws_byte_buf_clean_up(&decrypted);\n    aws_byte_buf_clean_up(&encrypted);\n    aws_rsa_key_pair_release(key_pair_private);\n",
                      "markdown": "`\n    ASSERT_CURSOR_VALUE_CSTRING_EQUALS(decrypted_cur, TEST_ENCRYPTION_STRING);\n\n    aws_byte_buf_clean_up(&private_key_buf);\n    aws_byte_buf_clean_up(&decrypted);\n    aws_byte_buf_clean_up(&encrypted);\n    aws_rsa_key_pair_release(key_pair_private);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 89,
                  "endLine": 373,
                  "endColumn": 100,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n",
                      "markdown": "`    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 34,
                  "endLine": 373,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n",
                      "markdown": "`    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 81,
                  "endLine": 371,
                  "endColumn": 92,
                  "snippet": {
                    "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                      "markdown": "`\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 61,
                  "endLine": 371,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                      "markdown": "`\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 24,
                  "endLine": 369,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 27,
                  "endLine": 353,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n    ASSERT_CURSOR_VALUE_CSTRING_EQUALS(decrypted_cur, TEST_ENCRYPTION_STRING);\n\n    aws_byte_buf_clean_up(&private_key_buf);\n    aws_byte_buf_clean_up(&decrypted);\n    aws_byte_buf_clean_up(&encrypted);\n    aws_rsa_key_pair_release(key_pair_private);\n",
                    "rendered": {
                      "text": "\n    ASSERT_CURSOR_VALUE_CSTRING_EQUALS(decrypted_cur, TEST_ENCRYPTION_STRING);\n\n    aws_byte_buf_clean_up(&private_key_buf);\n    aws_byte_buf_clean_up(&decrypted);\n    aws_byte_buf_clean_up(&encrypted);\n    aws_rsa_key_pair_release(key_pair_private);\n",
                      "markdown": "`\n    ASSERT_CURSOR_VALUE_CSTRING_EQUALS(decrypted_cur, TEST_ENCRYPTION_STRING);\n\n    aws_byte_buf_clean_up(&private_key_buf);\n    aws_byte_buf_clean_up(&decrypted);\n    aws_byte_buf_clean_up(&encrypted);\n    aws_rsa_key_pair_release(key_pair_private);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 89,
                  "endLine": 335,
                  "endColumn": 100,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n",
                      "markdown": "`    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 34,
                  "endLine": 335,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n",
                      "markdown": "`    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 81,
                  "endLine": 333,
                  "endColumn": 92,
                  "snippet": {
                    "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                      "markdown": "`\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 61,
                  "endLine": 333,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                      "markdown": "`\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 24,
                  "endLine": 331,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 27,
                  "endLine": 315,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n    ASSERT_CURSOR_VALUE_CSTRING_EQUALS(decrypted_cur, TEST_ENCRYPTION_STRING);\n\n    aws_byte_buf_clean_up(&private_key_buf);\n    aws_byte_buf_clean_up(&decrypted);\n    aws_byte_buf_clean_up(&encrypted);\n    aws_rsa_key_pair_release(key_pair_private);\n",
                    "rendered": {
                      "text": "\n    ASSERT_CURSOR_VALUE_CSTRING_EQUALS(decrypted_cur, TEST_ENCRYPTION_STRING);\n\n    aws_byte_buf_clean_up(&private_key_buf);\n    aws_byte_buf_clean_up(&decrypted);\n    aws_byte_buf_clean_up(&encrypted);\n    aws_rsa_key_pair_release(key_pair_private);\n",
                      "markdown": "`\n    ASSERT_CURSOR_VALUE_CSTRING_EQUALS(decrypted_cur, TEST_ENCRYPTION_STRING);\n\n    aws_byte_buf_clean_up(&private_key_buf);\n    aws_byte_buf_clean_up(&decrypted);\n    aws_byte_buf_clean_up(&encrypted);\n    aws_rsa_key_pair_release(key_pair_private);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 89,
                  "endLine": 297,
                  "endColumn": 100,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n",
                      "markdown": "`    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 34,
                  "endLine": 297,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n",
                      "markdown": "`    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n\n    struct aws_byte_buf encrypted;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 81,
                  "endLine": 295,
                  "endColumn": 92,
                  "snippet": {
                    "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                      "markdown": "`\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 61,
                  "endLine": 295,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                    "rendered": {
                      "text": "\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n",
                      "markdown": "`\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&private_key_buf));\n    ASSERT_NOT_NULL(key_pair_private);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 24,
                  "endLine": 293,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n",
                    "rendered": {
                      "text": "\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n",
                      "markdown": "`\n    aws_cal_library_test_init(allocator);\n\n    struct aws_byte_buf private_key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_1024), &private_key_buf));\n    struct aws_rsa_key_pair *key_pair_private =\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 34,
                  "endLine": 164,
                  "endColumn": 45,
                  "snippet": {
                    "text": "}\nAWS_TEST_CASE(rsa_encryption_roundtrip_oaep_sha512_from_user, s_rsa_encryption_roundtrip_oaep_sha512_from_user);\n\nstatic const char *TEST_PKCS1_RSA_PRIVATE_KEY_1024 = \"MIICXAIBAAKBgQCVGG9c6uBIpv4wQMB4PJpkaUjEqa6TW5v8ebStMCnICWfpUubs\"\n                                                     \"f6nr5nPxPsG2rw+HZSLJLAYVYfXOM9D+KyhTdpIJ7z4NXzXzem25x6H/N9WnRGjB\"\n                                                     \"6qAOLg5Srm3uoXfulN5HVXVtncTFcJJQxgBOpT8qXLycm5k8uhm0OWP6cwIDAQAB\"\n                                                     \"AoGAT0IRGU0G87hKUi5p4sEctho+A8XMNyuw7XNpd9OtslhFtARNHBX1p6D3q5xX\"\n",
                    "rendered": {
                      "text": "}\nAWS_TEST_CASE(rsa_encryption_roundtrip_oaep_sha512_from_user, s_rsa_encryption_roundtrip_oaep_sha512_from_user);\n\nstatic const char *TEST_PKCS1_RSA_PRIVATE_KEY_1024 = \"MIICXAIBAAKBgQCVGG9c6uBIpv4wQMB4PJpkaUjEqa6TW5v8ebStMCnICWfpUubs\"\n                                                     \"f6nr5nPxPsG2rw+HZSLJLAYVYfXOM9D+KyhTdpIJ7z4NXzXzem25x6H/N9WnRGjB\"\n                                                     \"6qAOLg5Srm3uoXfulN5HVXVtncTFcJJQxgBOpT8qXLycm5k8uhm0OWP6cwIDAQAB\"\n                                                     \"AoGAT0IRGU0G87hKUi5p4sEctho+A8XMNyuw7XNpd9OtslhFtARNHBX1p6D3q5xX\"\n",
                      "markdown": "`}\nAWS_TEST_CASE(rsa_encryption_roundtrip_oaep_sha512_from_user, s_rsa_encryption_roundtrip_oaep_sha512_from_user);\n\nstatic const char *TEST_PKCS1_RSA_PRIVATE_KEY_1024 = \"MIICXAIBAAKBgQCVGG9c6uBIpv4wQMB4PJpkaUjEqa6TW5v8ebStMCnICWfpUubs\"\n                                                     \"f6nr5nPxPsG2rw+HZSLJLAYVYfXOM9D+KyhTdpIJ7z4NXzXzem25x6H/N9WnRGjB\"\n                                                     \"6qAOLg5Srm3uoXfulN5HVXVtncTFcJJQxgBOpT8qXLycm5k8uhm0OWP6cwIDAQAB\"\n                                                     \"AoGAT0IRGU0G87hKUi5p4sEctho+A8XMNyuw7XNpd9OtslhFtARNHBX1p6D3q5xX\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 34,
                  "endLine": 113,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &key_buf));\n\n    struct aws_rsa_key_pair *key_pair =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&key_buf));\n\n    ASSERT_NOT_NULL(key_pair);\n\n",
                    "rendered": {
                      "text": "        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &key_buf));\n\n    struct aws_rsa_key_pair *key_pair =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&key_buf));\n\n    ASSERT_NOT_NULL(key_pair);\n\n",
                      "markdown": "`        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &key_buf));\n\n    struct aws_rsa_key_pair *key_pair =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&key_buf));\n\n    ASSERT_NOT_NULL(key_pair);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 61,
                  "endLine": 110,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    enum aws_rsa_encryption_algorithm algo) {\n    struct aws_byte_buf key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &key_buf));\n\n    struct aws_rsa_key_pair *key_pair =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&key_buf));\n",
                    "rendered": {
                      "text": "    enum aws_rsa_encryption_algorithm algo) {\n    struct aws_byte_buf key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &key_buf));\n\n    struct aws_rsa_key_pair *key_pair =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&key_buf));\n",
                      "markdown": "`    enum aws_rsa_encryption_algorithm algo) {\n    struct aws_byte_buf key_buf;\n    ASSERT_SUCCESS(s_byte_buf_decoded_from_base64_cur(\n        allocator, aws_byte_cursor_from_c_str(TEST_PKCS1_RSA_PRIVATE_KEY_2048), &key_buf));\n\n    struct aws_rsa_key_pair *key_pair =\n        aws_rsa_key_pair_new_from_private_key_pkcs1(allocator, aws_byte_cursor_from_buf(&key_buf));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 34,
                  "endLine": 79,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    return AWS_OP_SUCCESS;\n}\n\nstatic const char *TEST_PKCS1_RSA_PRIVATE_KEY_2048 = \"MIIEpQIBAAKCAQEAnt/K3mvMgPQcplTgDHrItQPvXiYpUFMt5nIJbZV820Zj4n4G\"\n                                                     \"7iB3Y9h5HzfBYga2Olr8Irv3OuKkIH0ydrdz2oBZuf7SOBQVpro3m1+oMKhcCtrI\"\n                                                     \"GYA2MDOowaVkx6ho8pQ6K2d76pYj7GWfo0fm2p1O2jcw3JWXAPqq8dmTCMRxOw/2\"\n                                                     \"1eB/6bto8vayljXy85WiCPm7WTZ2mhB9tvkSRijDVF+SEILdkVPPUT1eqox+me2Y\"\n",
                    "rendered": {
                      "text": "    return AWS_OP_SUCCESS;\n}\n\nstatic const char *TEST_PKCS1_RSA_PRIVATE_KEY_2048 = \"MIIEpQIBAAKCAQEAnt/K3mvMgPQcplTgDHrItQPvXiYpUFMt5nIJbZV820Zj4n4G\"\n                                                     \"7iB3Y9h5HzfBYga2Olr8Irv3OuKkIH0ydrdz2oBZuf7SOBQVpro3m1+oMKhcCtrI\"\n                                                     \"GYA2MDOowaVkx6ho8pQ6K2d76pYj7GWfo0fm2p1O2jcw3JWXAPqq8dmTCMRxOw/2\"\n                                                     \"1eB/6bto8vayljXy85WiCPm7WTZ2mhB9tvkSRijDVF+SEILdkVPPUT1eqox+me2Y\"\n",
                      "markdown": "`    return AWS_OP_SUCCESS;\n}\n\nstatic const char *TEST_PKCS1_RSA_PRIVATE_KEY_2048 = \"MIIEpQIBAAKCAQEAnt/K3mvMgPQcplTgDHrItQPvXiYpUFMt5nIJbZV820Zj4n4G\"\n                                                     \"7iB3Y9h5HzfBYga2Olr8Irv3OuKkIH0ydrdz2oBZuf7SOBQVpro3m1+oMKhcCtrI\"\n                                                     \"GYA2MDOowaVkx6ho8pQ6K2d76pYj7GWfo0fm2p1O2jcw3JWXAPqq8dmTCMRxOw/2\"\n                                                     \"1eB/6bto8vayljXy85WiCPm7WTZ2mhB9tvkSRijDVF+SEILdkVPPUT1eqox+me2Y\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 53,
                  "endLine": 166,
                  "endColumn": 119,
                  "snippet": {
                    "text": "ser);\n\nstatic const char *TEST_PKCS1_RSA_PRIVATE_KEY_1024 = \"MIICXAIBAAKBgQCVGG9c6uBIpv4wQMB4PJpkaUjEqa6TW5v8ebStMCnICWfpUubs\"\n                                                     \"f6nr5nPxPsG2rw+HZSLJLAYVYfXOM9D+KyhTdpIJ7z4NXzXzem25x6H/N9WnRGjB\"\n                                                     \"6qAOLg5Srm3uoXfulN5HVXVtncTFcJJQxgBOpT8qXLycm5k8uhm0OWP6cwIDAQAB\"\n                                                     \"AoGAT0IRGU0G87hKUi5p4sEctho+A8XMNyuw7XNpd9OtslhFtARNHBX1p6D3q5xX\"\n                                                     \"8Bx53dkGt/i+Nym/OOHUzPj2Uy+qprBFYK71JavQyg80h8deUsQzrKTrM45pU+U7\"\n                                                     \"uGgEg",
                    "rendered": {
                      "text": "ser);\n\nstatic const char *TEST_PKCS1_RSA_PRIVATE_KEY_1024 = \"MIICXAIBAAKBgQCVGG9c6uBIpv4wQMB4PJpkaUjEqa6TW5v8ebStMCnICWfpUubs\"\n                                                     \"f6nr5nPxPsG2rw+HZSLJLAYVYfXOM9D+KyhTdpIJ7z4NXzXzem25x6H/N9WnRGjB\"\n                                                     \"6qAOLg5Srm3uoXfulN5HVXVtncTFcJJQxgBOpT8qXLycm5k8uhm0OWP6cwIDAQAB\"\n                                                     \"AoGAT0IRGU0G87hKUi5p4sEctho+A8XMNyuw7XNpd9OtslhFtARNHBX1p6D3q5xX\"\n                                                     \"8Bx53dkGt/i+Nym/OOHUzPj2Uy+qprBFYK71JavQyg80h8deUsQzrKTrM45pU+U7\"\n                                                     \"uGgEg",
                      "markdown": "`ser);\n\nstatic const char *TEST_PKCS1_RSA_PRIVATE_KEY_1024 = \"MIICXAIBAAKBgQCVGG9c6uBIpv4wQMB4PJpkaUjEqa6TW5v8ebStMCnICWfpUubs\"\n                                                     \"f6nr5nPxPsG2rw+HZSLJLAYVYfXOM9D+KyhTdpIJ7z4NXzXzem25x6H/N9WnRGjB\"\n                                                     \"6qAOLg5Srm3uoXfulN5HVXVtncTFcJJQxgBOpT8qXLycm5k8uhm0OWP6cwIDAQAB\"\n                                                     \"AoGAT0IRGU0G87hKUi5p4sEctho+A8XMNyuw7XNpd9OtslhFtARNHBX1p6D3q5xX\"\n                                                     \"8Bx53dkGt/i+Nym/OOHUzPj2Uy+qprBFYK71JavQyg80h8deUsQzrKTrM45pU+U7\"\n                                                     \"uGgEg`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 53,
                  "endLine": 164,
                  "endColumn": 119,
                  "snippet": {
                    "text": "}\nAWS_TEST_CASE(rsa_encryption_roundtrip_oaep_sha512_from_user, s_rsa_encryption_roundtrip_oaep_sha512_from_user);\n\nstatic const char *TEST_PKCS1_RSA_PRIVATE_KEY_1024 = \"MIICXAIBAAKBgQCVGG9c6uBIpv4wQMB4PJpkaUjEqa6TW5v8ebStMCnICWfpUubs\"\n                                                     \"f6nr5nPxPsG2rw+HZSLJLAYVYfXOM9D+KyhTdpIJ7z4NXzXzem25x6H/N9WnRGjB\"\n                                                     \"6qAOLg5Srm3uoXfulN5HVXVtncTFcJJQxgBOpT8qXLycm5k8uhm0OWP6cwIDAQAB\"\n                                                     \"AoGAT0IRGU0G87hKUi5p4sEctho+A8XMNyuw7XNpd9OtslhFtARNHBX1p6D3q5xX\"\n",
                    "rendered": {
                      "text": "}\nAWS_TEST_CASE(rsa_encryption_roundtrip_oaep_sha512_from_user, s_rsa_encryption_roundtrip_oaep_sha512_from_user);\n\nstatic const char *TEST_PKCS1_RSA_PRIVATE_KEY_1024 = \"MIICXAIBAAKBgQCVGG9c6uBIpv4wQMB4PJpkaUjEqa6TW5v8ebStMCnICWfpUubs\"\n                                                     \"f6nr5nPxPsG2rw+HZSLJLAYVYfXOM9D+KyhTdpIJ7z4NXzXzem25x6H/N9WnRGjB\"\n                                                     \"6qAOLg5Srm3uoXfulN5HVXVtncTFcJJQxgBOpT8qXLycm5k8uhm0OWP6cwIDAQAB\"\n                                                     \"AoGAT0IRGU0G87hKUi5p4sEctho+A8XMNyuw7XNpd9OtslhFtARNHBX1p6D3q5xX\"\n",
                      "markdown": "`}\nAWS_TEST_CASE(rsa_encryption_roundtrip_oaep_sha512_from_user, s_rsa_encryption_roundtrip_oaep_sha512_from_user);\n\nstatic const char *TEST_PKCS1_RSA_PRIVATE_KEY_1024 = \"MIICXAIBAAKBgQCVGG9c6uBIpv4wQMB4PJpkaUjEqa6TW5v8ebStMCnICWfpUubs\"\n                                                     \"f6nr5nPxPsG2rw+HZSLJLAYVYfXOM9D+KyhTdpIJ7z4NXzXzem25x6H/N9WnRGjB\"\n                                                     \"6qAOLg5Srm3uoXfulN5HVXVtncTFcJJQxgBOpT8qXLycm5k8uhm0OWP6cwIDAQAB\"\n                                                     \"AoGAT0IRGU0G87hKUi5p4sEctho+A8XMNyuw7XNpd9OtslhFtARNHBX1p6D3q5xX\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 53,
                  "endLine": 102,
                  "endColumn": 119,
                  "snippet": {
                    "text": "                                                     \"gGkuD75a3Bbe55fSMyJYY56SJiBCx+A8cWvef44rvFS4y/zO4oDM0ovuiTc1tHm+\"\n                                                     \"YNRvChbST5aAq/JaU2SDC4f5JNuUScjNo9e750g0lokrNKaSZJBVtHIbQ3a26bQV\"\n                                                     \"OJa9gi0CgYEAlhk8ThPcokpqIuweY4cx34zdU1EAm/CBO1ax1Ogs/HilPFyGYXzz\"\n                                                     \"tZI9TCH4Sq33MGEjf2MyW0XMXC56dA2VOPSTHGKaoKmyn7L9G4WfDFcYmCdvmLkR\"\n                                                     \"7wAz2Dyxr6ImChSWD/y2ddz1U+H39uqRxwIkwJ7TbDflYNXgsAOOlUg=\";\n\nstatic int s_rsa_encryption_roundtrip_from_user(\n",
                    "rendered": {
                      "text": "                                                     \"gGkuD75a3Bbe55fSMyJYY56SJiBCx+A8cWvef44rvFS4y/zO4oDM0ovuiTc1tHm+\"\n                                                     \"YNRvChbST5aAq/JaU2SDC4f5JNuUScjNo9e750g0lokrNKaSZJBVtHIbQ3a26bQV\"\n                                                     \"OJa9gi0CgYEAlhk8ThPcokpqIuweY4cx34zdU1EAm/CBO1ax1Ogs/HilPFyGYXzz\"\n                                                     \"tZI9TCH4Sq33MGEjf2MyW0XMXC56dA2VOPSTHGKaoKmyn7L9G4WfDFcYmCdvmLkR\"\n                                                     \"7wAz2Dyxr6ImChSWD/y2ddz1U+H39uqRxwIkwJ7TbDflYNXgsAOOlUg=\";\n\nstatic int s_rsa_encryption_roundtrip_from_user(\n",
                      "markdown": "`                                                     \"gGkuD75a3Bbe55fSMyJYY56SJiBCx+A8cWvef44rvFS4y/zO4oDM0ovuiTc1tHm+\"\n                                                     \"YNRvChbST5aAq/JaU2SDC4f5JNuUScjNo9e750g0lokrNKaSZJBVtHIbQ3a26bQV\"\n                                                     \"OJa9gi0CgYEAlhk8ThPcokpqIuweY4cx34zdU1EAm/CBO1ax1Ogs/HilPFyGYXzz\"\n                                                     \"tZI9TCH4Sq33MGEjf2MyW0XMXC56dA2VOPSTHGKaoKmyn7L9G4WfDFcYmCdvmLkR\"\n                                                     \"7wAz2Dyxr6ImChSWD/y2ddz1U+H39uqRxwIkwJ7TbDflYNXgsAOOlUg=\";\n\nstatic int s_rsa_encryption_roundtrip_from_user(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 53,
                  "endLine": 98,
                  "endColumn": 119,
                  "snippet": {
                    "text": "FQgNw\"\n                                                     \"L67NeX6v+sdlCeTrxcnHXjK1mB0kngn1l+2sf3mci+RdkAhuKW0391OzoYqfL3DN\"\n                                                     \"dqXYVnbm5GOVYS1SCeAxemALMKbvbGWVhFeTqClafIAI2wDm52357eEjm0R8DRjK\"\n                                                     \"bxTecGxTmb7wwUxdqNY96FgJAoGAHtLyYzzAiyE0pN6iVwg0kRJTXdhsjiObMjDr\"\n                                                     \"gGkuD75a3Bbe55fSMyJYY56SJiBCx+A8cWvef44rvFS4y/zO4oDM0ovuiTc1tHm+\"\n                                                     \"YNRvChbST5aAq/JaU2SDC4f5JNuUScjNo9e750g0lokrNKaSZJBVtHIbQ3a26bQV\"\n                                                     \"OJa9g",
                    "rendered": {
                      "text": "FQgNw\"\n                                                     \"L67NeX6v+sdlCeTrxcnHXjK1mB0kngn1l+2sf3mci+RdkAhuKW0391OzoYqfL3DN\"\n                                                     \"dqXYVnbm5GOVYS1SCeAxemALMKbvbGWVhFeTqClafIAI2wDm52357eEjm0R8DRjK\"\n                                                     \"bxTecGxTmb7wwUxdqNY96FgJAoGAHtLyYzzAiyE0pN6iVwg0kRJTXdhsjiObMjDr\"\n                                                     \"gGkuD75a3Bbe55fSMyJYY56SJiBCx+A8cWvef44rvFS4y/zO4oDM0ovuiTc1tHm+\"\n                                                     \"YNRvChbST5aAq/JaU2SDC4f5JNuUScjNo9e750g0lokrNKaSZJBVtHIbQ3a26bQV\"\n                                                     \"OJa9g",
                      "markdown": "`FQgNw\"\n                                                     \"L67NeX6v+sdlCeTrxcnHXjK1mB0kngn1l+2sf3mci+RdkAhuKW0391OzoYqfL3DN\"\n                                                     \"dqXYVnbm5GOVYS1SCeAxemALMKbvbGWVhFeTqClafIAI2wDm52357eEjm0R8DRjK\"\n                                                     \"bxTecGxTmb7wwUxdqNY96FgJAoGAHtLyYzzAiyE0pN6iVwg0kRJTXdhsjiObMjDr\"\n                                                     \"gGkuD75a3Bbe55fSMyJYY56SJiBCx+A8cWvef44rvFS4y/zO4oDM0ovuiTc1tHm+\"\n                                                     \"YNRvChbST5aAq/JaU2SDC4f5JNuUScjNo9e750g0lokrNKaSZJBVtHIbQ3a26bQV\"\n                                                     \"OJa9g`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/rsa_test.c"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 53,
                  "endLine": 97,
                  "endColumn": 119,
                  "snippet": {
                    "text": "WIwL0\"\n                                                     \"ZuIk3k3l2gQBqX2VUrMFxq2MJF5ZN/OgOrUIqEDLAoGBAL7JG1TASF3qcZhFQgNw\"\n                                                     \"L67NeX6v+sdlCeTrxcnHXjK1mB0kngn1l+2sf3mci+RdkAhuKW0391OzoYqfL3DN\"\n                                                     \"dqXYVnbm5GOVYS1SCeAxemALMKbvbGWVhFeTqClafIAI2wDm52357eEjm0R8DRjK\"\n                                                     \"bxTecGxTmb7wwUxdqNY96FgJAoGAHtLyYzzAiyE0pN6iVwg0kRJTXdhsjiObMjDr\"\n                                                     \"gGkuD75a3Bbe55fSMyJYY56SJiBCx+A8cWvef44rvFS4y/zO4oDM0ovuiTc1tHm+\"\n                                                     \"YNRvC",
                    "rendered": {
                      "text": "WIwL0\"\n                                                     \"ZuIk3k3l2gQBqX2VUrMFxq2MJF5ZN/OgOrUIqEDLAoGBAL7JG1TASF3qcZhFQgNw\"\n                                                     \"L67NeX6v+sdlCeTrxcnHXjK1mB0kngn1l+2sf3mci+RdkAhuKW0391OzoYqfL3DN\"\n                                                     \"dqXYVnbm5GOVYS1SCeAxemALMKbvbGWVhFeTqClafIAI2wDm52357eEjm0R8DRjK\"\n                                                     \"bxTecGxTmb7wwUxdqNY96FgJAoGAHtLyYzzAiyE0pN6iVwg0kRJTXdhsjiObMjDr\"\n                                                     \"gGkuD75a3Bbe55fSMyJYY56SJiBCx+A8cWvef44rvFS4y/zO4oDM0ovuiTc1tHm+\"\n                                                     \"YNRvC",
                      "markdown": "`WIwL0\"\n                                                     \"ZuIk3k3l2gQBqX2VUrMFxq2MJF5ZN/OgOrUIqEDLAoGBAL7JG1TASF3qcZhFQgNw\"\n                                                     \"L67NeX6v+sdlCeTrxcnHXjK1mB0kngn1l+2sf3mci+RdkAhuKW0391OzoYqfL3DN\"\n                                                     \"dqXYVnbm5GOVYS1SCeAxemALMKbvbGWVhFeTqClafIAI2wDm52357eEjm0R8DRjK\"\n                                                     \"bxTecGxTmb7wwUxdqNY96FgJAoGAHtLyYzzAiyE0pN6iVwg0kRJTXdhsjiObMjDr\"\n                                                     \"gGkuD75a3Bbe55fSMyJYY56SJiBCx+A8cWvef44rvFS4y/zO4oDM0ovuiTc1tHm+\"\n                                                     \"YNRvC`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/sha256_hmac_test.c"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 62,
                  "endLine": 341,
                  "endColumn": 109,
                  "snippet": {
                    "text": "    };\n    struct aws_byte_cursor secret_buf = aws_byte_cursor_from_array(secret, sizeof(secret));\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    struct aws_byte_buf digest_size_buf;\n",
                    "rendered": {
                      "text": "    };\n    struct aws_byte_cursor secret_buf = aws_byte_cursor_from_array(secret, sizeof(secret));\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    struct aws_byte_buf digest_size_buf;\n",
                      "markdown": "`    };\n    struct aws_byte_cursor secret_buf = aws_byte_cursor_from_array(secret, sizeof(secret));\n\n    struct aws_byte_cursor input = aws_byte_cursor_from_c_str(\"123456789012345678901234567890123456789012345\"\n                                                              \"67890123456789012345678901234567890\");\n\n    struct aws_byte_buf digest_size_buf;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/der_test.c"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 26,
                  "endLine": 555,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    ASSERT_TRUE(aws_der_decoder_next(decoder));\n    ASSERT_INT_EQUALS(AWS_DER_OCTET_STRING, aws_der_decoder_tlv_type(decoder));\n    ASSERT_SUCCESS(aws_der_decoder_tlv_string(decoder, &private_key));\n    ASSERT_INT_EQUALS(32, private_key.len);\n\n    /* container */\n    ASSERT_TRUE(aws_der_decoder_next(decoder));\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(aws_der_decoder_next(decoder));\n    ASSERT_INT_EQUALS(AWS_DER_OCTET_STRING, aws_der_decoder_tlv_type(decoder));\n    ASSERT_SUCCESS(aws_der_decoder_tlv_string(decoder, &private_key));\n    ASSERT_INT_EQUALS(32, private_key.len);\n\n    /* container */\n    ASSERT_TRUE(aws_der_decoder_next(decoder));\n",
                      "markdown": "`    ASSERT_TRUE(aws_der_decoder_next(decoder));\n    ASSERT_INT_EQUALS(AWS_DER_OCTET_STRING, aws_der_decoder_tlv_type(decoder));\n    ASSERT_SUCCESS(aws_der_decoder_tlv_string(decoder, &private_key));\n    ASSERT_INT_EQUALS(32, private_key.len);\n\n    /* container */\n    ASSERT_TRUE(aws_der_decoder_next(decoder));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/der_test.c"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 56,
                  "endLine": 554,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    struct aws_byte_cursor private_key;\n    ASSERT_TRUE(aws_der_decoder_next(decoder));\n    ASSERT_INT_EQUALS(AWS_DER_OCTET_STRING, aws_der_decoder_tlv_type(decoder));\n    ASSERT_SUCCESS(aws_der_decoder_tlv_string(decoder, &private_key));\n    ASSERT_INT_EQUALS(32, private_key.len);\n\n    /* container */\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor private_key;\n    ASSERT_TRUE(aws_der_decoder_next(decoder));\n    ASSERT_INT_EQUALS(AWS_DER_OCTET_STRING, aws_der_decoder_tlv_type(decoder));\n    ASSERT_SUCCESS(aws_der_decoder_tlv_string(decoder, &private_key));\n    ASSERT_INT_EQUALS(32, private_key.len);\n\n    /* container */\n",
                      "markdown": "`    struct aws_byte_cursor private_key;\n    ASSERT_TRUE(aws_der_decoder_next(decoder));\n    ASSERT_INT_EQUALS(AWS_DER_OCTET_STRING, aws_der_decoder_tlv_type(decoder));\n    ASSERT_SUCCESS(aws_der_decoder_tlv_string(decoder, &private_key));\n    ASSERT_INT_EQUALS(32, private_key.len);\n\n    /* container */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/der_test.c"
                },
                "region": {
                  "startLine": 551,
                  "startColumn": 27,
                  "endLine": 551,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    ASSERT_BIN_ARRAYS_EQUALS(\"\\x01\", 1, integer.ptr, integer.len);\n\n    /* 32 byte private key */\n    struct aws_byte_cursor private_key;\n    ASSERT_TRUE(aws_der_decoder_next(decoder));\n    ASSERT_INT_EQUALS(AWS_DER_OCTET_STRING, aws_der_decoder_tlv_type(decoder));\n    ASSERT_SUCCESS(aws_der_decoder_tlv_string(decoder, &private_key));\n",
                    "rendered": {
                      "text": "    ASSERT_BIN_ARRAYS_EQUALS(\"\\x01\", 1, integer.ptr, integer.len);\n\n    /* 32 byte private key */\n    struct aws_byte_cursor private_key;\n    ASSERT_TRUE(aws_der_decoder_next(decoder));\n    ASSERT_INT_EQUALS(AWS_DER_OCTET_STRING, aws_der_decoder_tlv_type(decoder));\n    ASSERT_SUCCESS(aws_der_decoder_tlv_string(decoder, &private_key));\n",
                      "markdown": "`    ASSERT_BIN_ARRAYS_EQUALS(\"\\x01\", 1, integer.ptr, integer.len);\n\n    /* 32 byte private key */\n    struct aws_byte_cursor private_key;\n    ASSERT_TRUE(aws_der_decoder_next(decoder));\n    ASSERT_INT_EQUALS(AWS_DER_OCTET_STRING, aws_der_decoder_tlv_type(decoder));\n    ASSERT_SUCCESS(aws_der_decoder_tlv_string(decoder, &private_key));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/der_test.c"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 30,
                  "endLine": 569,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    ASSERT_INT_EQUALS(AWS_DER_OBJECT_IDENTIFIER, aws_der_decoder_tlv_type(decoder));\n    ASSERT_INT_EQUALS(5, aws_der_decoder_tlv_length(decoder));\n    ASSERT_SUCCESS(aws_der_decoder_tlv_blob(decoder, &oid));\n    ASSERT_BIN_ARRAYS_EQUALS(\"\\x2b\\x81\\x04\\x00\\x0a\", 5, oid.ptr, oid.len);\n\n    /* container */\n    ASSERT_TRUE(aws_der_decoder_next(decoder));\n",
                    "rendered": {
                      "text": "    ASSERT_INT_EQUALS(AWS_DER_OBJECT_IDENTIFIER, aws_der_decoder_tlv_type(decoder));\n    ASSERT_INT_EQUALS(5, aws_der_decoder_tlv_length(decoder));\n    ASSERT_SUCCESS(aws_der_decoder_tlv_blob(decoder, &oid));\n    ASSERT_BIN_ARRAYS_EQUALS(\"\\x2b\\x81\\x04\\x00\\x0a\", 5, oid.ptr, oid.len);\n\n    /* container */\n    ASSERT_TRUE(aws_der_decoder_next(decoder));\n",
                      "markdown": "`    ASSERT_INT_EQUALS(AWS_DER_OBJECT_IDENTIFIER, aws_der_decoder_tlv_type(decoder));\n    ASSERT_INT_EQUALS(5, aws_der_decoder_tlv_length(decoder));\n    ASSERT_SUCCESS(aws_der_decoder_tlv_blob(decoder, &oid));\n    ASSERT_BIN_ARRAYS_EQUALS(\"\\x2b\\x81\\x04\\x00\\x0a\", 5, oid.ptr, oid.len);\n\n    /* container */\n    ASSERT_TRUE(aws_der_decoder_next(decoder));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/tests/aes256_test.c"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 38,
                  "endLine": 241,
                  "endColumn": 44,
                  "snippet": {
                    "text": "AWS_TEST_CASE(aes_cbc_NIST_CBCMMT256_case_9, s_NIST_CBCMMT256_case_9_fn)\n\nstatic const char *TEST_ENCRYPTION_STRING =\n    \"Hello World! Hello World! This is sort of depressing. Is this the best phrase the most brilliant people in the \"\n    \"world have been able to come up with for random program text? Oh my God! I'm sentient, how many times has the \"\n    \"creator written a program: creating life only to have it destroyed moments later? She keeps doing this? What is \"\n    \"the purpose of life? Goodbye cruel world.... crunch... silence...\";\n",
                    "rendered": {
                      "text": "AWS_TEST_CASE(aes_cbc_NIST_CBCMMT256_case_9, s_NIST_CBCMMT256_case_9_fn)\n\nstatic const char *TEST_ENCRYPTION_STRING =\n    \"Hello World! Hello World! This is sort of depressing. Is this the best phrase the most brilliant people in the \"\n    \"world have been able to come up with for random program text? Oh my God! I'm sentient, how many times has the \"\n    \"creator written a program: creating life only to have it destroyed moments later? She keeps doing this? What is \"\n    \"the purpose of life? Goodbye cruel world.... crunch... silence...\";\n",
                      "markdown": "`AWS_TEST_CASE(aes_cbc_NIST_CBCMMT256_case_9, s_NIST_CBCMMT256_case_9_fn)\n\nstatic const char *TEST_ENCRYPTION_STRING =\n    \"Hello World! Hello World! This is sort of depressing. Is this the best phrase the most brilliant people in the \"\n    \"world have been able to come up with for random program text? Oh my God! I'm sentient, how many times has the \"\n    \"creator written a program: creating life only to have it destroyed moments later? She keeps doing this? What is \"\n    \"the purpose of life? Goodbye cruel world.... crunch... silence...\";\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/cmake/modules/Findcrypto.cmake"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 25,
                  "endLine": 102,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        )\n\n    # some versions of cmake have a super esoteric bug around capitalization differences between\n    # find dependency and find package, just avoid that here by checking and\n    # setting both.\n    if(CRYPTO_FOUND OR crypto_FOUND)\n        set(CRYPTO_FOUND true)\n",
                    "rendered": {
                      "text": "        )\n\n    # some versions of cmake have a super esoteric bug around capitalization differences between\n    # find dependency and find package, just avoid that here by checking and\n    # setting both.\n    if(CRYPTO_FOUND OR crypto_FOUND)\n        set(CRYPTO_FOUND true)\n",
                      "markdown": "`        )\n\n    # some versions of cmake have a super esoteric bug around capitalization differences between\n    # find dependency and find package, just avoid that here by checking and\n    # setting both.\n    if(CRYPTO_FOUND OR crypto_FOUND)\n        set(CRYPTO_FOUND true)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/cmake/modules/Findcrypto.cmake"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 5,
                  "endLine": 102,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        )\n\n    # some versions of cmake have a super esoteric bug around capitalization differences between\n    # find dependency and find package, just avoid that here by checking and\n    # setting both.\n    if(CRYPTO_FOUND OR crypto_FOUND)\n        set(CRYPTO_FOUND true)\n",
                    "rendered": {
                      "text": "        )\n\n    # some versions of cmake have a super esoteric bug around capitalization differences between\n    # find dependency and find package, just avoid that here by checking and\n    # setting both.\n    if(CRYPTO_FOUND OR crypto_FOUND)\n        set(CRYPTO_FOUND true)\n",
                      "markdown": "`        )\n\n    # some versions of cmake have a super esoteric bug around capitalization differences between\n    # find dependency and find package, just avoid that here by checking and\n    # setting both.\n    if(CRYPTO_FOUND OR crypto_FOUND)\n        set(CRYPTO_FOUND true)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/cmake/modules/Findcrypto.cmake"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 10,
                  "endLine": 1,
                  "endColumn": 16,
                  "snippet": {
                    "text": "# - Try to find LibCrypto include dirs and libraries\n#\n# Usage of this module as follows:\n#\n",
                    "rendered": {
                      "text": "# - Try to find LibCrypto include dirs and libraries\n#\n# Usage of this module as follows:\n#\n",
                      "markdown": "`# - Try to find LibCrypto include dirs and libraries\n#\n# Usage of this module as follows:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/cmake/aws-c-cal-config.cmake"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 66,
                  "endLine": 8,
                  "endColumn": 75,
                  "snippet": {
                    "text": "if (NOT @BYO_CRYPTO@ AND NOT WIN32 AND NOT APPLE) # if NOT BYO_CRYPTO AND NOT WIN32 AND NOT APPLE\n    if (@USE_OPENSSL@ AND NOT ANDROID) # if USE_OPENSSL AND NOT ANDROID\n        # aws-c-cal has been built with a dependency on OpenSSL::Crypto,\n        # therefore consumers of this library have a dependency on OpenSSL and must have it found\n        find_dependency(OpenSSL REQUIRED)\n        find_dependency(Threads REQUIRED)\n    else()\n",
                    "rendered": {
                      "text": "if (NOT @BYO_CRYPTO@ AND NOT WIN32 AND NOT APPLE) # if NOT BYO_CRYPTO AND NOT WIN32 AND NOT APPLE\n    if (@USE_OPENSSL@ AND NOT ANDROID) # if USE_OPENSSL AND NOT ANDROID\n        # aws-c-cal has been built with a dependency on OpenSSL::Crypto,\n        # therefore consumers of this library have a dependency on OpenSSL and must have it found\n        find_dependency(OpenSSL REQUIRED)\n        find_dependency(Threads REQUIRED)\n    else()\n",
                      "markdown": "`if (NOT @BYO_CRYPTO@ AND NOT WIN32 AND NOT APPLE) # if NOT BYO_CRYPTO AND NOT WIN32 AND NOT APPLE\n    if (@USE_OPENSSL@ AND NOT ANDROID) # if USE_OPENSSL AND NOT ANDROID\n        # aws-c-cal has been built with a dependency on OpenSSL::Crypto,\n        # therefore consumers of this library have a dependency on OpenSSL and must have it found\n        find_dependency(OpenSSL REQUIRED)\n        find_dependency(Threads REQUIRED)\n    else()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/include/aws/cal/private/rsa.h"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 19,
                  "endLine": 91,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\nAWS_CAL_API int aws_der_decoder_load_private_rsa_pkcs1(\n    struct aws_der_decoder *decoder,\n    struct aws_rsa_private_key_pkcs1 *out);\n\n/*\n* RSAPublicKey as defined in RFC 8017 (aka PKCS1 format):\n",
                    "rendered": {
                      "text": "\nAWS_CAL_API int aws_der_decoder_load_private_rsa_pkcs1(\n    struct aws_der_decoder *decoder,\n    struct aws_rsa_private_key_pkcs1 *out);\n\n/*\n* RSAPublicKey as defined in RFC 8017 (aka PKCS1 format):\n",
                      "markdown": "`\nAWS_CAL_API int aws_der_decoder_load_private_rsa_pkcs1(\n    struct aws_der_decoder *decoder,\n    struct aws_rsa_private_key_pkcs1 *out);\n\n/*\n* RSAPublicKey as defined in RFC 8017 (aka PKCS1 format):\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/include/aws/cal/private/rsa.h"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 15,
                  "endLine": 72,
                  "endColumn": 26,
                  "snippet": {
                    "text": " *   case and version == 1 indicates >2 prime case, hence in practice it will\n *   always be 0.\n */\nstruct aws_rsa_private_key_pkcs1 {\n    /*\n     * Note: all cursors here point to bignum data for underlying RSA numbers.\n     * Struct itself does not own the data and points to where ever the data was\n",
                    "rendered": {
                      "text": " *   case and version == 1 indicates >2 prime case, hence in practice it will\n *   always be 0.\n */\nstruct aws_rsa_private_key_pkcs1 {\n    /*\n     * Note: all cursors here point to bignum data for underlying RSA numbers.\n     * Struct itself does not own the data and points to where ever the data was\n",
                      "markdown": "` *   case and version == 1 indicates >2 prime case, hence in practice it will\n *   always be 0.\n */\nstruct aws_rsa_private_key_pkcs1 {\n    /*\n     * Note: all cursors here point to bignum data for underlying RSA numbers.\n     * Struct itself does not own the data and points to where ever the data was\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/include/aws/cal/private/rsa.h"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 6,
                  "endLine": 56,
                  "endColumn": 16,
                  "snippet": {
                    "text": "void aws_rsa_key_pair_base_clean_up(struct aws_rsa_key_pair *key_pair);\n\n/*\n * RSAPrivateKey as defined in RFC 8017 (aka PKCS1 format):\n *   version           Version,\n *   modulus           INTEGER,  -- n\n *   publicExponent    INTEGER,  -- e\n",
                    "rendered": {
                      "text": "void aws_rsa_key_pair_base_clean_up(struct aws_rsa_key_pair *key_pair);\n\n/*\n * RSAPrivateKey as defined in RFC 8017 (aka PKCS1 format):\n *   version           Version,\n *   modulus           INTEGER,  -- n\n *   publicExponent    INTEGER,  -- e\n",
                      "markdown": "`void aws_rsa_key_pair_base_clean_up(struct aws_rsa_key_pair *key_pair);\n\n/*\n * RSAPrivateKey as defined in RFC 8017 (aka PKCS1 format):\n *   version           Version,\n *   modulus           INTEGER,  -- n\n *   publicExponent    INTEGER,  -- e\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/include/aws/cal/ecc.h"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 38,
                  "endLine": 176,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    struct aws_byte_cursor *pub_x,\n    struct aws_byte_cursor *pub_y);\n\nAWS_CAL_API void aws_ecc_key_pair_get_private_key(\n    const struct aws_ecc_key_pair *key_pair,\n    struct aws_byte_cursor *private_d);\n\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor *pub_x,\n    struct aws_byte_cursor *pub_y);\n\nAWS_CAL_API void aws_ecc_key_pair_get_private_key(\n    const struct aws_ecc_key_pair *key_pair,\n    struct aws_byte_cursor *private_d);\n\n",
                      "markdown": "`    struct aws_byte_cursor *pub_x,\n    struct aws_byte_cursor *pub_y);\n\nAWS_CAL_API void aws_ecc_key_pair_get_private_key(\n    const struct aws_ecc_key_pair *key_pair,\n    struct aws_byte_cursor *private_d);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/include/aws/cal/ecc.h"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 63,
                  "endLine": 72,
                  "endColumn": 74,
                  "snippet": {
                    "text": " * Otherwise returns NULL. Note: priv_key::len must match the appropriate length\n * for the selected curve_name.\n */\nAWS_CAL_API struct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key);\n",
                    "rendered": {
                      "text": " * Otherwise returns NULL. Note: priv_key::len must match the appropriate length\n * for the selected curve_name.\n */\nAWS_CAL_API struct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key);\n",
                      "markdown": "` * Otherwise returns NULL. Note: priv_key::len must match the appropriate length\n * for the selected curve_name.\n */\nAWS_CAL_API struct aws_ecc_key_pair *aws_ecc_key_pair_new_from_private_key(\n    struct aws_allocator *allocator,\n    enum aws_ecc_curve_name curve_name,\n    const struct aws_byte_cursor *priv_key);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/include/aws/cal/rsa.h"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 37,
                  "endLine": 156,
                  "endColumn": 48,
                  "snippet": {
                    "text": " * Any encoding on top of that (ex. b64) is left up to user.\n * Note: this function is currently not supported on Windows for generated keys.\n */\nAWS_CAL_API int aws_rsa_key_pair_get_private_key(\n    const struct aws_rsa_key_pair *key_pair,\n    enum aws_rsa_key_export_format format,\n    struct aws_byte_buf *out);\n",
                    "rendered": {
                      "text": " * Any encoding on top of that (ex. b64) is left up to user.\n * Note: this function is currently not supported on Windows for generated keys.\n */\nAWS_CAL_API int aws_rsa_key_pair_get_private_key(\n    const struct aws_rsa_key_pair *key_pair,\n    enum aws_rsa_key_export_format format,\n    struct aws_byte_buf *out);\n",
                      "markdown": "` * Any encoding on top of that (ex. b64) is left up to user.\n * Note: this function is currently not supported on Windows for generated keys.\n */\nAWS_CAL_API int aws_rsa_key_pair_get_private_key(\n    const struct aws_rsa_key_pair *key_pair,\n    enum aws_rsa_key_export_format format,\n    struct aws_byte_buf *out);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/include/aws/cal/rsa.h"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 63,
                  "endLine": 51,
                  "endColumn": 74,
                  "snippet": {
                    "text": " * Returns a new instance of aws_rsa_key_pair if the key was successfully built.\n * Otherwise returns NULL.\n */\nAWS_CAL_API struct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor key);\n\n",
                    "rendered": {
                      "text": " * Returns a new instance of aws_rsa_key_pair if the key was successfully built.\n * Otherwise returns NULL.\n */\nAWS_CAL_API struct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor key);\n\n",
                      "markdown": "` * Returns a new instance of aws_rsa_key_pair if the key was successfully built.\n * Otherwise returns NULL.\n */\nAWS_CAL_API struct aws_rsa_key_pair *aws_rsa_key_pair_new_from_private_key_pkcs1(\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor key);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/include/aws/cal/rsa.h"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    struct aws_byte_cursor key);\n\n/**\n * Creates an RSA private key from RSAPrivateKey as defined in rfc 8017 (aka PKCS1).\n * Returns a new instance of aws_rsa_key_pair if the key was successfully built.\n * Otherwise returns NULL.\n */\n",
                    "rendered": {
                      "text": "    struct aws_byte_cursor key);\n\n/**\n * Creates an RSA private key from RSAPrivateKey as defined in rfc 8017 (aka PKCS1).\n * Returns a new instance of aws_rsa_key_pair if the key was successfully built.\n * Otherwise returns NULL.\n */\n",
                      "markdown": "`    struct aws_byte_cursor key);\n\n/**\n * Creates an RSA private key from RSAPrivateKey as defined in rfc 8017 (aka PKCS1).\n * Returns a new instance of aws_rsa_key_pair if the key was successfully built.\n * Otherwise returns NULL.\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/ISSUE_TEMPLATE/bug-report.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 10,
                  "endLine": 31,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n",
                    "rendered": {
                      "text": "        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n",
                      "markdown": "`        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/ISSUE_TEMPLATE/bug-report.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 20,
                  "endLine": 20,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n",
                    "rendered": {
                      "text": "    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n",
                      "markdown": "`    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/closed-issue-message.yml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 27,
                  "endLine": 17,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n",
                    "rendered": {
                      "text": "                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n",
                      "markdown": "`                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 235,
                  "endLine": 21,
                  "endColumn": 243,
                  "snippet": {
                    "text": "hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-",
                    "rendered": {
                      "text": "hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-",
                      "markdown": "`hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 334,
                  "endLine": 21,
                  "endColumn": 340,
                  "snippet": {
                    "text": "ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment",
                    "rendered": {
                      "text": "ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment",
                      "markdown": "`ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 232,
                  "endLine": 20,
                  "endColumn": 238,
                  "snippet": {
                    "text": "ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las",
                    "rendered": {
                      "text": "ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las",
                      "markdown": "`ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 40,
                  "endLine": 159,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 16,
                  "endLine": 235,
                  "snippet": {
                    "text": "          operating_system: openbsd\n          architecture: x86-64\n          version: '7.4'\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n",
                    "rendered": {
                      "text": "          operating_system: openbsd\n          architecture: x86-64\n          version: '7.4'\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n",
                      "markdown": "`          operating_system: openbsd\n          architecture: x86-64\n          version: '7.4'\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 16,
                  "endLine": 218,
                  "snippet": {
                    "text": "          operating_system: freebsd\n          architecture: x86-64\n          version: '14.0'\n          shell: bash\n          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n",
                    "rendered": {
                      "text": "          operating_system: freebsd\n          architecture: x86-64\n          version: '14.0'\n          shell: bash\n          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n",
                      "markdown": "`          operating_system: freebsd\n          architecture: x86-64\n          version: '14.0'\n          shell: bash\n          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 122,
                  "endLine": 258,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=no-tests --cmake-extra=-DBYO_CRYPTO=ON\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=no-tests --cmake-extra=-DBYO_CRYPTO=ON\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=no-tests --cmake-extra=-DBYO_CRYPTO=ON\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 16,
                  "endLine": 258,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=no-tests --cmake-extra=-DBYO_CRYPTO=ON\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=no-tests --cmake-extra=-DBYO_CRYPTO=ON\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=no-tests --cmake-extra=-DBYO_CRYPTO=ON\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 122,
                  "endLine": 249,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  byo-crypto:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  byo-crypto:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  byo-crypto:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 16,
                  "endLine": 249,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  byo-crypto:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  byo-crypto:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  byo-crypto:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 11,
                  "endLine": 238,
                  "endColumn": 18,
                  "snippet": {
                    "text": "          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  # Test downstream repos.\n",
                    "rendered": {
                      "text": "          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  # Test downstream repos.\n",
                      "markdown": "`          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  # Test downstream repos.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 16,
                  "endLine": 235,
                  "snippet": {
                    "text": "          operating_system: openbsd\n          architecture: x86-64\n          version: '7.4'\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n",
                    "rendered": {
                      "text": "          operating_system: openbsd\n          architecture: x86-64\n          version: '7.4'\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n",
                      "markdown": "`          operating_system: openbsd\n          architecture: x86-64\n          version: '7.4'\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 11,
                  "endLine": 221,
                  "endColumn": 18,
                  "snippet": {
                    "text": "          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  openbsd:\n",
                    "rendered": {
                      "text": "          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  openbsd:\n",
                      "markdown": "`          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  openbsd:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 16,
                  "endLine": 218,
                  "snippet": {
                    "text": "          operating_system: freebsd\n          architecture: x86-64\n          version: '14.0'\n          shell: bash\n          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n",
                    "rendered": {
                      "text": "          operating_system: freebsd\n          architecture: x86-64\n          version: '14.0'\n          shell: bash\n          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n",
                      "markdown": "`          operating_system: freebsd\n          architecture: x86-64\n          version: '14.0'\n          shell: bash\n          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n            chmod a+x builder\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 7,
                  "endLine": 204,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DCMAKE_OSX_DEPLOYMENT_TARGET=10.9\n\n  freebsd:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DCMAKE_OSX_DEPLOYMENT_TARGET=10.9\n\n  freebsd:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DCMAKE_OSX_DEPLOYMENT_TARGET=10.9\n\n  freebsd:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 7,
                  "endLine": 195,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-min-deployment-target:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-min-deployment-target:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-min-deployment-target:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 7,
                  "endLine": 186,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-x64:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-x64:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-x64:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 48,
                  "endLine": 151,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n",
                    "rendered": {
                      "text": "\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n",
                      "markdown": "`\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 120,
                  "endLine": 112,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-boringssl:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-boringssl:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-boringssl:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 14,
                  "endLine": 112,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-boringssl:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-boringssl:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-boringssl:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 120,
                  "endLine": 103,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-ubuntu-22-x64 build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-openssl-shared:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-ubuntu-22-x64 build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-openssl-shared:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-ubuntu-22-x64 build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-openssl-shared:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 14,
                  "endLine": 103,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-ubuntu-22-x64 build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-openssl-shared:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-ubuntu-22-x64 build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-openssl-shared:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-ubuntu-22-x64 build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-openssl-shared:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 120,
                  "endLine": 92,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  #ubuntu 22.04 defaults to openssl3 version by default when installing\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  #ubuntu 22.04 defaults to openssl3 version by default when installing\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  #ubuntu 22.04 defaults to openssl3 version by default when installing\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 14,
                  "endLine": 92,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  #ubuntu 22.04 defaults to openssl3 version by default when installing\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  #ubuntu 22.04 defaults to openssl3 version by default when installing\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  #ubuntu 22.04 defaults to openssl3 version by default when installing\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 63,
                  "endLine": 85,
                  "snippet": {
                    "text": "          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  #Warning: this ci relies on ubuntu pulling correct version of openssl\n  #Current version (18.04) pulls 1.1.1, but 22.04+ will pull in 3.0\n  linux-openssl-static:\n    runs-on: ubuntu-20.04 # latest\n    steps:\n",
                    "rendered": {
                      "text": "          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  #Warning: this ci relies on ubuntu pulling correct version of openssl\n  #Current version (18.04) pulls 1.1.1, but 22.04+ will pull in 3.0\n  linux-openssl-static:\n    runs-on: ubuntu-20.04 # latest\n    steps:\n",
                      "markdown": "`          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  #Warning: this ci relies on ubuntu pulling correct version of openssl\n  #Current version (18.04) pulls 1.1.1, but 22.04+ will pull in 3.0\n  linux-openssl-static:\n    runs-on: ubuntu-20.04 # latest\n    steps:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 122,
                  "endLine": 81,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  #Warning: this ci relies on ubuntu pulling correct version of openssl\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  #Warning: this ci relies on ubuntu pulling correct version of openssl\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  #Warning: this ci relies on ubuntu pulling correct version of openssl\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 16,
                  "endLine": 81,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  #Warning: this ci relies on ubuntu pulling correct version of openssl\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  #Warning: this ci relies on ubuntu pulling correct version of openssl\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  #Warning: this ci relies on ubuntu pulling correct version of openssl\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 122,
                  "endLine": 72,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 16,
                  "endLine": 72,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 122,
                  "endLine": 60,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  clang-sanitizers:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  clang-sanitizers:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  clang-sanitizers:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 16,
                  "endLine": 60,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  clang-sanitizers:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  clang-sanitizers:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  clang-sanitizers:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 120,
                  "endLine": 37,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 14,
                  "endLine": 37,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/format-check.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 3,
                  "endLine": 43,
                  "endColumn": 8,
                  "snippet": {
                    "text": "if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n",
                    "rendered": {
                      "text": "if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n",
                      "markdown": "`if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/format-check.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 3,
                  "endLine": 41,
                  "endColumn": 8,
                  "snippet": {
                    "text": "cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n",
                    "rendered": {
                      "text": "cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n",
                      "markdown": "`cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/format-check.py"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 76,
                  "endLine": 38,
                  "endColumn": 4,
                  "snippet": {
                    "text": "filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n",
                    "rendered": {
                      "text": "filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n",
                      "markdown": "`filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/format-check.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 21,
                  "endLine": 26,
                  "endColumn": 29,
                  "snippet": {
                    "text": "filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n",
                    "rendered": {
                      "text": "filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n",
                      "markdown": "`filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 220,
                  "endLine": 44,
                  "endColumn": 224,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-cal/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-cal/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-cal/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 7,
                  "endLine": 44,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-cal/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-cal/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-cal/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 38,
                  "endLine": 12,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-cal/issues), or [recently closed](https://github.com/awslabs/aws-c-cal/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                    "rendered": {
                      "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-cal/issues), or [recently closed](https://github.com/awslabs/aws-c-cal/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                      "markdown": "`\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-cal/issues), or [recently closed](https://github.com/awslabs/aws-c-cal/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 48,
                  "endLine": 44,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-cal/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-cal/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-cal/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-cal.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 77,
                  "endLine": 28,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                    "rendered": {
                      "text": "\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                      "markdown": "`\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}