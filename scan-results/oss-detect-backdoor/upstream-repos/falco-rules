{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/proposals/20230605-rules-adoption-management-maturity-framework.md"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 20,
                  "endLine": 239,
                  "endColumn": 24,
                  "snippet": {
                    "text": "<details>\n    <summary>Advanced behavior analysis / anomaly detection</summary>\n      <p> \n        Falco excels at detecting known patterns and rules-based anomalies. However, it currently may have limitations when it comes to advanced behavior analysis, on host anomaly detection, or identifying zero-day exploits that do not exhibit known patterns.\n      </p> \n</details> \n\n",
                    "rendered": {
                      "text": "<details>\n    <summary>Advanced behavior analysis / anomaly detection</summary>\n      <p> \n        Falco excels at detecting known patterns and rules-based anomalies. However, it currently may have limitations when it comes to advanced behavior analysis, on host anomaly detection, or identifying zero-day exploits that do not exhibit known patterns.\n      </p> \n</details> \n\n",
                      "markdown": "`<details>\n    <summary>Advanced behavior analysis / anomaly detection</summary>\n      <p> \n        Falco excels at detecting known patterns and rules-based anomalies. However, it currently may have limitations when it comes to advanced behavior analysis, on host anomaly detection, or identifying zero-day exploits that do not exhibit known patterns.\n      </p> \n</details> \n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/proposals/20230605-rules-adoption-management-maturity-framework.md"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 676,
                  "endLine": 231,
                  "endColumn": 680,
                  "snippet": {
                    "text": "//falco.org/docs/plugins/\"> plugins</a> framework. One notable example is the integration with Kubernetes audit logs, which provides monitoring at the control plane level within a Kubernetes infrastructure. In addition, Falco's underlying libraries possess the capability to capture abnormal behavior at higher levels of the stack, such as analyzing HTTP requests. However, this potential is currently not exposed in Falco.\n      </p> \n</details> \n\n\n<details>\n    <summary>Advanced behavior analysis / anomaly detection</summary>\n      <p> \n        Falco excels at detecting known patterns and rules-base",
                    "rendered": {
                      "text": "//falco.org/docs/plugins/\"> plugins</a> framework. One notable example is the integration with Kubernetes audit logs, which provides monitoring at the control plane level within a Kubernetes infrastructure. In addition, Falco's underlying libraries possess the capability to capture abnormal behavior at higher levels of the stack, such as analyzing HTTP requests. However, this potential is currently not exposed in Falco.\n      </p> \n</details> \n\n\n<details>\n    <summary>Advanced behavior analysis / anomaly detection</summary>\n      <p> \n        Falco excels at detecting known patterns and rules-base",
                      "markdown": "`//falco.org/docs/plugins/\"> plugins</a> framework. One notable example is the integration with Kubernetes audit logs, which provides monitoring at the control plane level within a Kubernetes infrastructure. In addition, Falco's underlying libraries possess the capability to capture abnormal behavior at higher levels of the stack, such as analyzing HTTP requests. However, this potential is currently not exposed in Falco.\n      </p> \n</details> \n\n\n<details>\n    <summary>Advanced behavior analysis / anomaly detection</summary>\n      <p> \n        Falco excels at detecting known patterns and rules-base`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/proposals/20230605-rules-adoption-management-maturity-framework.md"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 526,
                  "endLine": 231,
                  "endColumn": 535,
                  "snippet": {
                    "text": "application stack. However, there are exceptions where Falco has expanded its monitoring coverage to additional data sources using the <a href=\"https://falco.org/docs/plugins/\"> plugins</a> framework. One notable example is the integration with Kubernetes audit logs, which provides monitoring at the control plane level within a Kubernetes infrastructure. In addition, Falco's underlying libraries possess the capability to capture abnormal behavior at higher levels of the stack, such as analyzing HTTP requests. However, this potential is currently not exposed in Falco.\n      </p> \n</details> \n\n\n<details>",
                    "rendered": {
                      "text": "application stack. However, there are exceptions where Falco has expanded its monitoring coverage to additional data sources using the <a href=\"https://falco.org/docs/plugins/\"> plugins</a> framework. One notable example is the integration with Kubernetes audit logs, which provides monitoring at the control plane level within a Kubernetes infrastructure. In addition, Falco's underlying libraries possess the capability to capture abnormal behavior at higher levels of the stack, such as analyzing HTTP requests. However, this potential is currently not exposed in Falco.\n      </p> \n</details> \n\n\n<details>",
                      "markdown": "`application stack. However, there are exceptions where Falco has expanded its monitoring coverage to additional data sources using the <a href=\"https://falco.org/docs/plugins/\"> plugins</a> framework. One notable example is the integration with Kubernetes audit logs, which provides monitoring at the control plane level within a Kubernetes infrastructure. In addition, Falco's underlying libraries possess the capability to capture abnormal behavior at higher levels of the stack, such as analyzing HTTP requests. However, this potential is currently not exposed in Falco.\n      </p> \n</details> \n\n\n<details>`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/proposals/20230605-rules-adoption-management-maturity-framework.md"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 519,
                  "endLine": 231,
                  "endColumn": 523,
                  "snippet": {
                    "text": "e full application stack. However, there are exceptions where Falco has expanded its monitoring coverage to additional data sources using the <a href=\"https://falco.org/docs/plugins/\"> plugins</a> framework. One notable example is the integration with Kubernetes audit logs, which provides monitoring at the control plane level within a Kubernetes infrastructure. In addition, Falco's underlying libraries possess the capability to capture abnormal behavior at higher levels of the stack, such as analyzing HTTP requests. However, this potential is currently not exposed in Falco.\n      </p> \n</details> ",
                    "rendered": {
                      "text": "e full application stack. However, there are exceptions where Falco has expanded its monitoring coverage to additional data sources using the <a href=\"https://falco.org/docs/plugins/\"> plugins</a> framework. One notable example is the integration with Kubernetes audit logs, which provides monitoring at the control plane level within a Kubernetes infrastructure. In addition, Falco's underlying libraries possess the capability to capture abnormal behavior at higher levels of the stack, such as analyzing HTTP requests. However, this potential is currently not exposed in Falco.\n      </p> \n</details> ",
                      "markdown": "`e full application stack. However, there are exceptions where Falco has expanded its monitoring coverage to additional data sources using the <a href=\"https://falco.org/docs/plugins/\"> plugins</a> framework. One notable example is the integration with Kubernetes audit logs, which provides monitoring at the control plane level within a Kubernetes infrastructure. In addition, Falco's underlying libraries possess the capability to capture abnormal behavior at higher levels of the stack, such as analyzing HTTP requests. However, this potential is currently not exposed in Falco.\n      </p> \n</details> `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/proposals/20230605-rules-adoption-management-maturity-framework.md"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 22,
                  "endLine": 217,
                  "endColumn": 26,
                  "snippet": {
                    "text": "<details>\n    <summary>Deep kernel-level monitoring</summary>\n      <p> \n        Falco operates at the kernel level but does not provide deep visibility into all aspects of kernel internals. It focuses on monitoring system calls and other observable events but may not capture low-level kernel activities.\n      </p> \n</details> \n\n",
                    "rendered": {
                      "text": "<details>\n    <summary>Deep kernel-level monitoring</summary>\n      <p> \n        Falco operates at the kernel level but does not provide deep visibility into all aspects of kernel internals. It focuses on monitoring system calls and other observable events but may not capture low-level kernel activities.\n      </p> \n</details> \n\n",
                      "markdown": "`<details>\n    <summary>Deep kernel-level monitoring</summary>\n      <p> \n        Falco operates at the kernel level but does not provide deep visibility into all aspects of kernel internals. It focuses on monitoring system calls and other observable events but may not capture low-level kernel activities.\n      </p> \n</details> \n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/proposals/20230605-rules-adoption-management-maturity-framework.md"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 1,
                  "endLine": 145,
                  "endColumn": 9,
                  "snippet": {
                    "text": "hem with the compliance related tag if applicable. By the release of Falco 0.36, ensure that there are at least three template Falco rules in the \"incubating\" state specifically designed for \"compliance\" use cases.\n- Add support for the new maturity tags in the Falco binary and configuration file.\n- Update Falco's website to concisely document new processes and information, making it a single source of truth for creating, tuning, or contributing rules.\n\nAs a result of these changes, Falco's principles for rules adoption, maturity, and management will be updated. However, adopters can continue to use F",
                    "rendered": {
                      "text": "hem with the compliance related tag if applicable. By the release of Falco 0.36, ensure that there are at least three template Falco rules in the \"incubating\" state specifically designed for \"compliance\" use cases.\n- Add support for the new maturity tags in the Falco binary and configuration file.\n- Update Falco's website to concisely document new processes and information, making it a single source of truth for creating, tuning, or contributing rules.\n\nAs a result of these changes, Falco's principles for rules adoption, maturity, and management will be updated. However, adopters can continue to use F",
                      "markdown": "`hem with the compliance related tag if applicable. By the release of Falco 0.36, ensure that there are at least three template Falco rules in the \"incubating\" state specifically designed for \"compliance\" use cases.\n- Add support for the new maturity tags in the Falco binary and configuration file.\n- Update Falco's website to concisely document new processes and information, making it a single source of truth for creating, tuning, or contributing rules.\n\nAs a result of these changes, Falco's principles for rules adoption, maturity, and management will be updated. However, adopters can continue to use F`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/proposals/20230605-rules-adoption-management-maturity-framework.md"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 168,
                  "endLine": 143,
                  "endColumn": 172,
                  "snippet": {
                    "text": "r a wide range of top cyber threats and have the potential to effectively detect indicators of compromise related to those threats.\n- Audit the existing rules from a compliance perspective and tag them with the compliance related tag if applicable. By the release of Falco 0.36, ensure that there are at least three template Falco rules in the \"incubating\" state specifically designed for \"compliance\" use cases.\n- Add support for the new maturity tags in the Falco binary and configuration file.\n- Update Falco's website to concisely document new processes and information, making it a single source of ",
                    "rendered": {
                      "text": "r a wide range of top cyber threats and have the potential to effectively detect indicators of compromise related to those threats.\n- Audit the existing rules from a compliance perspective and tag them with the compliance related tag if applicable. By the release of Falco 0.36, ensure that there are at least three template Falco rules in the \"incubating\" state specifically designed for \"compliance\" use cases.\n- Add support for the new maturity tags in the Falco binary and configuration file.\n- Update Falco's website to concisely document new processes and information, making it a single source of ",
                      "markdown": "`r a wide range of top cyber threats and have the potential to effectively detect indicators of compromise related to those threats.\n- Audit the existing rules from a compliance perspective and tag them with the compliance related tag if applicable. By the release of Falco 0.36, ensure that there are at least three template Falco rules in the \"incubating\" state specifically designed for \"compliance\" use cases.\n- Add support for the new maturity tags in the Falco binary and configuration file.\n- Update Falco's website to concisely document new processes and information, making it a single source of `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/proposals/20230605-rules-adoption-management-maturity-framework.md"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 414,
                  "endLine": 118,
                  "endColumn": 422,
                  "snippet": {
                    "text": "hines (VMs), but also deployments in real-world infrastructure. The Falco maintainers will provide guidance and support to contributors throughout the testing process, recognizing that it will vary significantly for each rule due to its unique nature. Additionally, while we aim to automate tests and expand test coverage, we acknowledge that it is a large engineering effort that will take time. Therefore, manual tests during the review processes and best effort deployment tests will be necessary in the interim.\n\n\n### Guidance on Rule Customization and Tuning\n\nEach rule tagged as \"Stable\" will provide c",
                    "rendered": {
                      "text": "hines (VMs), but also deployments in real-world infrastructure. The Falco maintainers will provide guidance and support to contributors throughout the testing process, recognizing that it will vary significantly for each rule due to its unique nature. Additionally, while we aim to automate tests and expand test coverage, we acknowledge that it is a large engineering effort that will take time. Therefore, manual tests during the review processes and best effort deployment tests will be necessary in the interim.\n\n\n### Guidance on Rule Customization and Tuning\n\nEach rule tagged as \"Stable\" will provide c",
                      "markdown": "`hines (VMs), but also deployments in real-world infrastructure. The Falco maintainers will provide guidance and support to contributors throughout the testing process, recognizing that it will vary significantly for each rule due to its unique nature. Additionally, while we aim to automate tests and expand test coverage, we acknowledge that it is a large engineering effort that will take time. Therefore, manual tests during the review processes and best effort deployment tests will be necessary in the interim.\n\n\n### Guidance on Rule Customization and Tuning\n\nEach rule tagged as \"Stable\" will provide c`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/proposals/20230605-rules-adoption-management-maturity-framework.md"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 351,
                  "endLine": 102,
                  "endColumn": 355,
                  "snippet": {
                    "text": "\n*Robustness*\n\nTo enhance the effectiveness of detection, priority is given to behavioral detections, as opposed to simple string matching on process command arguments or other fields. This preference is based on the ease with which the latter can be circumvented. The same principle applies when selecting the most robust system call for detecting a specific threat at a particular point in time or attack scenario. For concrete examples of more robust rules, please refer to Appendix 1.\n\n\n*Relevance*\n",
                    "rendered": {
                      "text": "\n*Robustness*\n\nTo enhance the effectiveness of detection, priority is given to behavioral detections, as opposed to simple string matching on process command arguments or other fields. This preference is based on the ease with which the latter can be circumvented. The same principle applies when selecting the most robust system call for detecting a specific threat at a particular point in time or attack scenario. For concrete examples of more robust rules, please refer to Appendix 1.\n\n\n*Relevance*\n",
                      "markdown": "`\n*Robustness*\n\nTo enhance the effectiveness of detection, priority is given to behavioral detections, as opposed to simple string matching on process command arguments or other fields. This preference is based on the ease with which the latter can be circumvented. The same principle applies when selecting the most robust system call for detecting a specific threat at a particular point in time or attack scenario. For concrete examples of more robust rules, please refer to Appendix 1.\n\n\n*Relevance*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/proposals/20230605-rules-adoption-management-maturity-framework.md"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 54,
                  "endLine": 93,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n*Correctness*\n\nThe criteria with regard to correctness shall include, at a minimum:\n\n- Correctness of the expression language, both syntactically and grammatically.\n- Consistency with the name/description.\n",
                    "rendered": {
                      "text": "\n*Correctness*\n\nThe criteria with regard to correctness shall include, at a minimum:\n\n- Correctness of the expression language, both syntactically and grammatically.\n- Consistency with the name/description.\n",
                      "markdown": "`\n*Correctness*\n\nThe criteria with regard to correctness shall include, at a minimum:\n\n- Correctness of the expression language, both syntactically and grammatically.\n- Consistency with the name/description.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/proposals/20230605-rules-adoption-management-maturity-framework.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 86,
                  "endLine": 25,
                  "endColumn": 90,
                  "snippet": {
                    "text": "ub.com/falcosecurity/plugins/blob/master/plugins/okta/rules/okta_rules.yaml) or [aws_cloudtrail_rules.yaml](https://github.com/falcosecurity/plugins/blob/master/plugins/cloudtrail/rules/aws_cloudtrail_rules.yaml).\n- Rules include a concise description and a sense of `priority` to determine the level at which they should be loaded and activated. Furthermore, there is a key called `tag` that includes additional filter fields and information. This information may indicate whether a rule is designed to detect abnormal behavior in workloads running on the host or in containers. The tag field may also i",
                    "rendered": {
                      "text": "ub.com/falcosecurity/plugins/blob/master/plugins/okta/rules/okta_rules.yaml) or [aws_cloudtrail_rules.yaml](https://github.com/falcosecurity/plugins/blob/master/plugins/cloudtrail/rules/aws_cloudtrail_rules.yaml).\n- Rules include a concise description and a sense of `priority` to determine the level at which they should be loaded and activated. Furthermore, there is a key called `tag` that includes additional filter fields and information. This information may indicate whether a rule is designed to detect abnormal behavior in workloads running on the host or in containers. The tag field may also i",
                      "markdown": "`ub.com/falcosecurity/plugins/blob/master/plugins/okta/rules/okta_rules.yaml) or [aws_cloudtrail_rules.yaml](https://github.com/falcosecurity/plugins/blob/master/plugins/cloudtrail/rules/aws_cloudtrail_rules.yaml).\n- Rules include a concise description and a sense of `priority` to determine the level at which they should be loaded and activated. Furthermore, there is a key called `tag` that includes additional filter fields and information. This information may indicate whether a rule is designed to detect abnormal behavior in workloads running on the host or in containers. The tag field may also i`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/proposals/20230605-rules-adoption-management-maturity-framework.md"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 202,
                  "endLine": 142,
                  "endColumn": 207,
                  "snippet": {
                    "text": "nces the criteria for rules acceptance.\n- Offer guidance and templates for rules tuning purposes.\n- Audit each existing rule and assign a maturity level to it. Ensure a minimum set of 20 or more diverse rules are identified as \"stable\" and enabled by default. These rules should cover a wide range of top cyber threats and have the potential to effectively detect indicators of compromise related to those threats.\n- Audit the existing rules from a compliance perspective and tag them with the compliance related tag if applicable. By the release of Falco 0.36, ensure that there are at least three templa",
                    "rendered": {
                      "text": "nces the criteria for rules acceptance.\n- Offer guidance and templates for rules tuning purposes.\n- Audit each existing rule and assign a maturity level to it. Ensure a minimum set of 20 or more diverse rules are identified as \"stable\" and enabled by default. These rules should cover a wide range of top cyber threats and have the potential to effectively detect indicators of compromise related to those threats.\n- Audit the existing rules from a compliance perspective and tag them with the compliance related tag if applicable. By the release of Falco 0.36, ensure that there are at least three templa",
                      "markdown": "`nces the criteria for rules acceptance.\n- Offer guidance and templates for rules tuning purposes.\n- Audit each existing rule and assign a maturity level to it. Ensure a minimum set of 20 or more diverse rules are identified as \"stable\" and enabled by default. These rules should cover a wide range of top cyber threats and have the potential to effectively detect indicators of compromise related to those threats.\n- Audit the existing rules from a compliance perspective and tag them with the compliance related tag if applicable. By the release of Falco 0.36, ensure that there are at least three templa`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/proposals/20230605-rules-adoption-management-maturity-framework.md"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 414,
                  "endLine": 118,
                  "endColumn": 422,
                  "snippet": {
                    "text": "hines (VMs), but also deployments in real-world infrastructure. The Falco maintainers will provide guidance and support to contributors throughout the testing process, recognizing that it will vary significantly for each rule due to its unique nature. Additionally, while we aim to automate tests and expand test coverage, we acknowledge that it is a large engineering effort that will take time. Therefore, manual tests during the review processes and best effort deployment tests will be necessary in the interim.\n\n\n### Guidance on Rule Customization and Tuning\n\nEach rule tagged as \"Stable\" will provide c",
                    "rendered": {
                      "text": "hines (VMs), but also deployments in real-world infrastructure. The Falco maintainers will provide guidance and support to contributors throughout the testing process, recognizing that it will vary significantly for each rule due to its unique nature. Additionally, while we aim to automate tests and expand test coverage, we acknowledge that it is a large engineering effort that will take time. Therefore, manual tests during the review processes and best effort deployment tests will be necessary in the interim.\n\n\n### Guidance on Rule Customization and Tuning\n\nEach rule tagged as \"Stable\" will provide c",
                      "markdown": "`hines (VMs), but also deployments in real-world infrastructure. The Falco maintainers will provide guidance and support to contributors throughout the testing process, recognizing that it will vary significantly for each rule due to its unique nature. Additionally, while we aim to automate tests and expand test coverage, we acknowledge that it is a large engineering effort that will take time. Therefore, manual tests during the review processes and best effort deployment tests will be necessary in the interim.\n\n\n### Guidance on Rule Customization and Tuning\n\nEach rule tagged as \"Stable\" will provide c`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/proposals/20230605-rules-adoption-management-maturity-framework.md"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 405,
                  "endLine": 107,
                  "endColumn": 410,
                  "snippet": {
                    "text": "ity, cyber defense, and real-world production settings for accurate assessment. Questions such as whether these threats are a priority for most organizations or if we can provide enough context for a security analyst to appropriately act on the alerts as part of their incident response workflows are top of mind when assessing the overall relevance. Relevance is a key factor that indirectly reflects both robustness and significance, but more importantly, it indicates whether a particular security threat is significant to most adopters and, consequently, beneficial to detect.\n\nPossible criteria:\n\n- C",
                    "rendered": {
                      "text": "ity, cyber defense, and real-world production settings for accurate assessment. Questions such as whether these threats are a priority for most organizations or if we can provide enough context for a security analyst to appropriately act on the alerts as part of their incident response workflows are top of mind when assessing the overall relevance. Relevance is a key factor that indirectly reflects both robustness and significance, but more importantly, it indicates whether a particular security threat is significant to most adopters and, consequently, beneficial to detect.\n\nPossible criteria:\n\n- C",
                      "markdown": "`ity, cyber defense, and real-world production settings for accurate assessment. Questions such as whether these threats are a priority for most organizations or if we can provide enough context for a security analyst to appropriately act on the alerts as part of their incident response workflows are top of mind when assessing the overall relevance. Relevance is a key factor that indirectly reflects both robustness and significance, but more importantly, it indicates whether a particular security threat is significant to most adopters and, consequently, beneficial to detect.\n\nPossible criteria:\n\n- C`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/proposals/20230605-rules-adoption-management-maturity-framework.md"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 376,
                  "endLine": 102,
                  "endColumn": 382,
                  "snippet": {
                    "text": "\n*Robustness*\n\nTo enhance the effectiveness of detection, priority is given to behavioral detections, as opposed to simple string matching on process command arguments or other fields. This preference is based on the ease with which the latter can be circumvented. The same principle applies when selecting the most robust system call for detecting a specific threat at a particular point in time or attack scenario. For concrete examples of more robust rules, please refer to Appendix 1.\n\n\n*Relevance*\n",
                    "rendered": {
                      "text": "\n*Robustness*\n\nTo enhance the effectiveness of detection, priority is given to behavioral detections, as opposed to simple string matching on process command arguments or other fields. This preference is based on the ease with which the latter can be circumvented. The same principle applies when selecting the most robust system call for detecting a specific threat at a particular point in time or attack scenario. For concrete examples of more robust rules, please refer to Appendix 1.\n\n\n*Relevance*\n",
                      "markdown": "`\n*Robustness*\n\nTo enhance the effectiveness of detection, priority is given to behavioral detections, as opposed to simple string matching on process command arguments or other fields. This preference is based on the ease with which the latter can be circumvented. The same principle applies when selecting the most robust system call for detecting a specific threat at a particular point in time or attack scenario. For concrete examples of more robust rules, please refer to Appendix 1.\n\n\n*Relevance*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/proposals/20230605-rules-adoption-management-maturity-framework.md"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 195,
                  "endLine": 23,
                  "endColumn": 203,
                  "snippet": {
                    "text": "github.com/falcosecurity/rules/blob/main/rules/falco_rules.yaml)) based on syscall and container events.\n  - [application_rules.yaml](https://github.com/falcosecurity/rules/blob/main/rules/application_rules.yaml) also contains rules based on network-related syscalls, which may seem misleading if you expect those rules to be present in the regular \"falco_rules.yaml\" file.\n  - Plugins rules are based on third-party data sources that Falco hooks into, in addition to or instead of kernel tracing, e.g. [k8s_audit_rules.yaml](https://github.com/falcosecurity/plugins/blob/master/plugins/k8saudit/rules/k8s_au",
                    "rendered": {
                      "text": "github.com/falcosecurity/rules/blob/main/rules/falco_rules.yaml)) based on syscall and container events.\n  - [application_rules.yaml](https://github.com/falcosecurity/rules/blob/main/rules/application_rules.yaml) also contains rules based on network-related syscalls, which may seem misleading if you expect those rules to be present in the regular \"falco_rules.yaml\" file.\n  - Plugins rules are based on third-party data sources that Falco hooks into, in addition to or instead of kernel tracing, e.g. [k8s_audit_rules.yaml](https://github.com/falcosecurity/plugins/blob/master/plugins/k8saudit/rules/k8s_au",
                      "markdown": "`github.com/falcosecurity/rules/blob/main/rules/falco_rules.yaml)) based on syscall and container events.\n  - [application_rules.yaml](https://github.com/falcosecurity/rules/blob/main/rules/application_rules.yaml) also contains rules based on network-related syscalls, which may seem misleading if you expect those rules to be present in the regular \"falco_rules.yaml\" file.\n  - Plugins rules are based on third-party data sources that Falco hooks into, in addition to or instead of kernel tracing, e.g. [k8s_audit_rules.yaml](https://github.com/falcosecurity/plugins/blob/master/plugins/k8saudit/rules/k8s_au`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/falco_mitre_attack_checker/tests/resources/falco_rules_test.yaml"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 102,
                  "endLine": 58,
                  "endColumn": 110,
                  "snippet": {
                    "text": "\n- rule: wrong mitre rule multiple techniques and missing one tactic\n  desc: >\n    Read sensitive file untrusted - an attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information). Exceptions are made for known trusted programs.\n  condition: >\n    sensitive_files and open_read\n",
                    "rendered": {
                      "text": "\n- rule: wrong mitre rule multiple techniques and missing one tactic\n  desc: >\n    Read sensitive file untrusted - an attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information). Exceptions are made for known trusted programs.\n  condition: >\n    sensitive_files and open_read\n",
                      "markdown": "`\n- rule: wrong mitre rule multiple techniques and missing one tactic\n  desc: >\n    Read sensitive file untrusted - an attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information). Exceptions are made for known trusted programs.\n  condition: >\n    sensitive_files and open_read\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/falco_mitre_attack_checker/tests/resources/falco_rules_test.yaml"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 108,
                  "endLine": 47,
                  "endColumn": 112,
                  "snippet": {
                    "text": "ies like /etc are typically accessed via absolute paths. Access patterns outside of this (here path traversal) can be regarded as suspicious.\n    This rule includes failed file open attempts.\n  condition: (open_read or open_file_failed) and (etc_dir or user_ssh_directory or fd.name startswith /root/.ssh or fd.name contains \"id_rsa\") and directory_traversal and not proc.pname in (shell_binaries)\n  enabled: true\n  output: >\n    Read monitored file via directory traversal (username=%user.name useruid=%user.uid user_loginuid=%user.loginuid program=%proc.name exe=%proc.exepath\n    command=%proc.cmdline",
                    "rendered": {
                      "text": "ies like /etc are typically accessed via absolute paths. Access patterns outside of this (here path traversal) can be regarded as suspicious.\n    This rule includes failed file open attempts.\n  condition: (open_read or open_file_failed) and (etc_dir or user_ssh_directory or fd.name startswith /root/.ssh or fd.name contains \"id_rsa\") and directory_traversal and not proc.pname in (shell_binaries)\n  enabled: true\n  output: >\n    Read monitored file via directory traversal (username=%user.name useruid=%user.uid user_loginuid=%user.loginuid program=%proc.name exe=%proc.exepath\n    command=%proc.cmdline",
                      "markdown": "`ies like /etc are typically accessed via absolute paths. Access patterns outside of this (here path traversal) can be regarded as suspicious.\n    This rule includes failed file open attempts.\n  condition: (open_read or open_file_failed) and (etc_dir or user_ssh_directory or fd.name startswith /root/.ssh or fd.name contains \"id_rsa\") and directory_traversal and not proc.pname in (shell_binaries)\n  enabled: true\n  output: >\n    Read monitored file via directory traversal (username=%user.name useruid=%user.uid user_loginuid=%user.loginuid program=%proc.name exe=%proc.exepath\n    command=%proc.cmdline`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/falco_mitre_attack_checker/tests/resources/falco_rules_test.yaml"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 108,
                  "endLine": 33,
                  "endColumn": 112,
                  "snippet": {
                    "text": "ies like /etc are typically accessed via absolute paths. Access patterns outside of this (here path traversal) can be regarded as suspicious.\n    This rule includes failed file open attempts.\n  condition: (open_read or open_file_failed) and (etc_dir or user_ssh_directory or fd.name startswith /root/.ssh or fd.name contains \"id_rsa\") and directory_traversal and not proc.pname in (shell_binaries)\n  enabled: true\n  output: >\n    Read monitored file via directory traversal (username=%user.name useruid=%user.uid user_loginuid=%user.loginuid program=%proc.name exe=%proc.exepath\n    command=%proc.cmdline",
                    "rendered": {
                      "text": "ies like /etc are typically accessed via absolute paths. Access patterns outside of this (here path traversal) can be regarded as suspicious.\n    This rule includes failed file open attempts.\n  condition: (open_read or open_file_failed) and (etc_dir or user_ssh_directory or fd.name startswith /root/.ssh or fd.name contains \"id_rsa\") and directory_traversal and not proc.pname in (shell_binaries)\n  enabled: true\n  output: >\n    Read monitored file via directory traversal (username=%user.name useruid=%user.uid user_loginuid=%user.loginuid program=%proc.name exe=%proc.exepath\n    command=%proc.cmdline",
                      "markdown": "`ies like /etc are typically accessed via absolute paths. Access patterns outside of this (here path traversal) can be regarded as suspicious.\n    This rule includes failed file open attempts.\n  condition: (open_read or open_file_failed) and (etc_dir or user_ssh_directory or fd.name startswith /root/.ssh or fd.name contains \"id_rsa\") and directory_traversal and not proc.pname in (shell_binaries)\n  enabled: true\n  output: >\n    Read monitored file via directory traversal (username=%user.name useruid=%user.uid user_loginuid=%user.loginuid program=%proc.name exe=%proc.exepath\n    command=%proc.cmdline`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/falco_mitre_attack_checker/parsers/mitre_stix.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 28,
                  "endLine": 28,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        \"\"\"\n        self.mitre_domain = mitre_domain\n        self.mitre_domain_version = mitre_domain_version\n        stix_json = requests.get(\n            f\"https://raw.githubusercontent.com/mitre/cti/ATT%26CK-v{mitre_domain_version}/{mitre_domain}/{mitre_domain}.json\").json()\n        self.src = MemoryStore(stix_data=stix_json[\"objects\"])\n\n",
                    "rendered": {
                      "text": "        \"\"\"\n        self.mitre_domain = mitre_domain\n        self.mitre_domain_version = mitre_domain_version\n        stix_json = requests.get(\n            f\"https://raw.githubusercontent.com/mitre/cti/ATT%26CK-v{mitre_domain_version}/{mitre_domain}/{mitre_domain}.json\").json()\n        self.src = MemoryStore(stix_data=stix_json[\"objects\"])\n\n",
                      "markdown": "`        \"\"\"\n        self.mitre_domain = mitre_domain\n        self.mitre_domain_version = mitre_domain_version\n        stix_json = requests.get(\n            f\"https://raw.githubusercontent.com/mitre/cti/ATT%26CK-v{mitre_domain_version}/{mitre_domain}/{mitre_domain}.json\").json()\n        self.src = MemoryStore(stix_data=stix_json[\"objects\"])\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/falco_mitre_attack_checker/parsers/mitre_stix.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 63,
                  "endLine": 38,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        :param external_id: ID of the MITRE ATT&CK technique\n        :return: the technique definition in STIX2 data format\n        \"\"\"\n        # by default, a List is returned for STIX2 refs, but we expect only one technique per ID\n        try:\n            technique = self.src.query([\n                Filter('external_references.external_id', '=', external_id),\n",
                    "rendered": {
                      "text": "        :param external_id: ID of the MITRE ATT&CK technique\n        :return: the technique definition in STIX2 data format\n        \"\"\"\n        # by default, a List is returned for STIX2 refs, but we expect only one technique per ID\n        try:\n            technique = self.src.query([\n                Filter('external_references.external_id', '=', external_id),\n",
                      "markdown": "`        :param external_id: ID of the MITRE ATT&CK technique\n        :return: the technique definition in STIX2 data format\n        \"\"\"\n        # by default, a List is returned for STIX2 refs, but we expect only one technique per ID\n        try:\n            technique = self.src.query([\n                Filter('external_references.external_id', '=', external_id),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/workflows/rules.yaml"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 9,
                  "endLine": 186,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            fi\n          done\n          echo Uploading PR info...\n          cat ./pr/COMMENT\n          echo \"\"\n\n      - name: Upload PR info as artifact\n",
                    "rendered": {
                      "text": "            fi\n          done\n          echo Uploading PR info...\n          cat ./pr/COMMENT\n          echo \"\"\n\n      - name: Upload PR info as artifact\n",
                      "markdown": "`            fi\n          done\n          echo Uploading PR info...\n          cat ./pr/COMMENT\n          echo \"\"\n\n      - name: Upload PR info as artifact\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/workflows/rules.yaml"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 18,
                  "snippet": {
                    "text": "          files=$(find ./tmp-artifacts/)\n          for file in $files; do\n            if [[ \"$file\" =~ \"COMMENT\" ]]; then\n              cat \"$file\" >> ./pr/COMMENT\n            fi\n          done\n          echo Uploading PR info...\n",
                    "rendered": {
                      "text": "          files=$(find ./tmp-artifacts/)\n          for file in $files; do\n            if [[ \"$file\" =~ \"COMMENT\" ]]; then\n              cat \"$file\" >> ./pr/COMMENT\n            fi\n          done\n          echo Uploading PR info...\n",
                      "markdown": "`          files=$(find ./tmp-artifacts/)\n          for file in $files; do\n            if [[ \"$file\" =~ \"COMMENT\" ]]; then\n              cat \"$file\" >> ./pr/COMMENT\n            fi\n          done\n          echo Uploading PR info...\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/workflows/rules.yaml"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 9,
                  "endLine": 148,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        if: steps.compare.outputs.comment_file != ''\n        run: |\n          mkdir -p ./pr\n          cp ${{ steps.compare.outputs.comment_file }} ./pr/COMMENT-${{ strategy.job-index }}\n\n      - name: Upload PR info as artifact\n        uses: actions/upload-artifact@v4\n",
                    "rendered": {
                      "text": "        if: steps.compare.outputs.comment_file != ''\n        run: |\n          mkdir -p ./pr\n          cp ${{ steps.compare.outputs.comment_file }} ./pr/COMMENT-${{ strategy.job-index }}\n\n      - name: Upload PR info as artifact\n        uses: actions/upload-artifact@v4\n",
                      "markdown": "`        if: steps.compare.outputs.comment_file != ''\n        run: |\n          mkdir -p ./pr\n          cp ${{ steps.compare.outputs.comment_file }} ./pr/COMMENT-${{ strategy.job-index }}\n\n      - name: Upload PR info as artifact\n        uses: actions/upload-artifact@v4\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/workflows/rules.yaml"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 12,
                  "endLine": 115,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        uses: actions/checkout@v4\n\n      - name: Get all git tags\n        run: git fetch --tags origin\n\n      - name: Get changed files\n        uses: Ana06/get-changed-files@v2.3.0\n",
                    "rendered": {
                      "text": "        uses: actions/checkout@v4\n\n      - name: Get all git tags\n        run: git fetch --tags origin\n\n      - name: Get changed files\n        uses: Ana06/get-changed-files@v2.3.0\n",
                      "markdown": "`        uses: actions/checkout@v4\n\n      - name: Get all git tags\n        run: git fetch --tags origin\n\n      - name: Get changed files\n        uses: Ana06/get-changed-files@v2.3.0\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/workflows/rules.yaml"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 21,
                  "endLine": 114,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      - name: Checkout rules\n        uses: actions/checkout@v4\n\n      - name: Get all git tags\n        run: git fetch --tags origin\n\n      - name: Get changed files\n",
                    "rendered": {
                      "text": "      - name: Checkout rules\n        uses: actions/checkout@v4\n\n      - name: Get all git tags\n        run: git fetch --tags origin\n\n      - name: Get changed files\n",
                      "markdown": "`      - name: Checkout rules\n        uses: actions/checkout@v4\n\n      - name: Get all git tags\n        run: git fetch --tags origin\n\n      - name: Get changed files\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/workflows/rules.yaml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 11,
                  "endLine": 34,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      - name: Find changed rules files\n        id: set-changed-files\n        run: |\n          # Find any changed file located under the /rules folder that matches the naming convention <ruleset>_rules.yaml.\n          # See https://github.com/falcosecurity/rules/blob/main/README.md#naming-convention for details.\n          # Additionally, if we skip changed-files because we're not in a pull request,\n          # then we consider all the rules contained in the repository.\n",
                    "rendered": {
                      "text": "      - name: Find changed rules files\n        id: set-changed-files\n        run: |\n          # Find any changed file located under the /rules folder that matches the naming convention <ruleset>_rules.yaml.\n          # See https://github.com/falcosecurity/rules/blob/main/README.md#naming-convention for details.\n          # Additionally, if we skip changed-files because we're not in a pull request,\n          # then we consider all the rules contained in the repository.\n",
                      "markdown": "`      - name: Find changed rules files\n        id: set-changed-files\n        run: |\n          # Find any changed file located under the /rules folder that matches the naming convention <ruleset>_rules.yaml.\n          # See https://github.com/falcosecurity/rules/blob/main/README.md#naming-convention for details.\n          # Additionally, if we skip changed-files because we're not in a pull request,\n          # then we consider all the rules contained in the repository.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/workflows/rules.yaml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 13,
                  "endLine": 31,
                  "endColumn": 19,
                  "snippet": {
                    "text": "          format: space-delimited\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Find changed rules files\n        id: set-changed-files\n        run: |\n          # Find any changed file located under the /rules folder that matches the naming convention <ruleset>_rules.yaml.\n",
                    "rendered": {
                      "text": "          format: space-delimited\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Find changed rules files\n        id: set-changed-files\n        run: |\n          # Find any changed file located under the /rules folder that matches the naming convention <ruleset>_rules.yaml.\n",
                      "markdown": "`          format: space-delimited\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Find changed rules files\n        id: set-changed-files\n        run: |\n          # Find any changed file located under the /rules folder that matches the naming convention <ruleset>_rules.yaml.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/scripts/rules_overview_generator.py"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 309,
                  "endLine": 99,
                  "endColumn": 313,
                  "snippet": {
                    "text": "('The Falco Project manages a total of {} [rules](https://github.com/falcosecurity/rules/blob/main/rules/), of which {} rules are included in the Falco release package and labeled with [maturity_stable](https://github.com/falcosecurity/rules/blob/main/CONTRIBUTING.md#rules-maturity-framework). Rules at the remaining maturity levels require explicit installation and may need extra customization to ensure effective adoption. Lastly, certain rules are intentionally disabled by default, irrespective of their maturity level.\\n'.format(n_rules, len(df_stable)))\n    print('This document provides an exten",
                    "rendered": {
                      "text": "('The Falco Project manages a total of {} [rules](https://github.com/falcosecurity/rules/blob/main/rules/), of which {} rules are included in the Falco release package and labeled with [maturity_stable](https://github.com/falcosecurity/rules/blob/main/CONTRIBUTING.md#rules-maturity-framework). Rules at the remaining maturity levels require explicit installation and may need extra customization to ensure effective adoption. Lastly, certain rules are intentionally disabled by default, irrespective of their maturity level.\\n'.format(n_rules, len(df_stable)))\n    print('This document provides an exten",
                      "markdown": "`('The Falco Project manages a total of {} [rules](https://github.com/falcosecurity/rules/blob/main/rules/), of which {} rules are included in the Falco release package and labeled with [maturity_stable](https://github.com/falcosecurity/rules/blob/main/CONTRIBUTING.md#rules-maturity-framework). Rules at the remaining maturity levels require explicit installation and may need extra customization to ensure effective adoption. Lastly, certain rules are intentionally disabled by default, irrespective of their maturity level.\\n'.format(n_rules, len(df_stable)))\n    print('This document provides an exten`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/scripts/rules_overview_generator.py"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 6,
                  "endLine": 11,
                  "endColumn": 4,
                  "snippet": {
                    "text": "import re\n\n\"\"\"\nUsage:\npip install -r .github/scripts/requirements.txt\npython .github/scripts/rules_overview_generator.py --rules_dir=rules > docs/index.md\n\"\"\"\n\n",
                    "rendered": {
                      "text": "import re\n\n\"\"\"\nUsage:\npip install -r .github/scripts/requirements.txt\npython .github/scripts/rules_overview_generator.py --rules_dir=rules > docs/index.md\n\"\"\"\n\n",
                      "markdown": "`import re\n\n\"\"\"\nUsage:\npip install -r .github/scripts/requirements.txt\npython .github/scripts/rules_overview_generator.py --rules_dir=rules > docs/index.md\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/compare-rule-files.sh"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 84,
                  "endLine": 60,
                  "endColumn": 90,
                  "snippet": {
                    "text": "echo \"\" >> $RESULT_FILE\n\nif $(git branch --show-current | grep -q \"release/\"); then\n    if $(cat $RESULT_FILE | grep -q \"\\*\\*Minor\\*\\* changes\") || $(cat $RESULT_FILE | grep -q \"\\*\\*Major\\*\\* changes\"); then\n        echo \"**Notes**:\" >> $RESULT_FILE\n        echo \"\" >> $RESULT_FILE\n        echo \"This PR proposes merging major or minor changes into a release branch. Please make sure this is intentional. cc @falcosecurity/rules-maintainers\" >> $RESULT_FILE\n",
                    "rendered": {
                      "text": "echo \"\" >> $RESULT_FILE\n\nif $(git branch --show-current | grep -q \"release/\"); then\n    if $(cat $RESULT_FILE | grep -q \"\\*\\*Minor\\*\\* changes\") || $(cat $RESULT_FILE | grep -q \"\\*\\*Major\\*\\* changes\"); then\n        echo \"**Notes**:\" >> $RESULT_FILE\n        echo \"\" >> $RESULT_FILE\n        echo \"This PR proposes merging major or minor changes into a release branch. Please make sure this is intentional. cc @falcosecurity/rules-maintainers\" >> $RESULT_FILE\n",
                      "markdown": "`echo \"\" >> $RESULT_FILE\n\nif $(git branch --show-current | grep -q \"release/\"); then\n    if $(cat $RESULT_FILE | grep -q \"\\*\\*Minor\\*\\* changes\") || $(cat $RESULT_FILE | grep -q \"\\*\\*Major\\*\\* changes\"); then\n        echo \"**Notes**:\" >> $RESULT_FILE\n        echo \"\" >> $RESULT_FILE\n        echo \"This PR proposes merging major or minor changes into a release branch. Please make sure this is intentional. cc @falcosecurity/rules-maintainers\" >> $RESULT_FILE\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/compare-rule-files.sh"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 27,
                  "endLine": 60,
                  "endColumn": 33,
                  "snippet": {
                    "text": "echo \"\" >> $RESULT_FILE\n\nif $(git branch --show-current | grep -q \"release/\"); then\n    if $(cat $RESULT_FILE | grep -q \"\\*\\*Minor\\*\\* changes\") || $(cat $RESULT_FILE | grep -q \"\\*\\*Major\\*\\* changes\"); then\n        echo \"**Notes**:\" >> $RESULT_FILE\n        echo \"\" >> $RESULT_FILE\n        echo \"This PR proposes merging major or minor changes into a release branch. Please make sure this is intentional. cc @falcosecurity/rules-maintainers\" >> $RESULT_FILE\n",
                    "rendered": {
                      "text": "echo \"\" >> $RESULT_FILE\n\nif $(git branch --show-current | grep -q \"release/\"); then\n    if $(cat $RESULT_FILE | grep -q \"\\*\\*Minor\\*\\* changes\") || $(cat $RESULT_FILE | grep -q \"\\*\\*Major\\*\\* changes\"); then\n        echo \"**Notes**:\" >> $RESULT_FILE\n        echo \"\" >> $RESULT_FILE\n        echo \"This PR proposes merging major or minor changes into a release branch. Please make sure this is intentional. cc @falcosecurity/rules-maintainers\" >> $RESULT_FILE\n",
                      "markdown": "`echo \"\" >> $RESULT_FILE\n\nif $(git branch --show-current | grep -q \"release/\"); then\n    if $(cat $RESULT_FILE | grep -q \"\\*\\*Minor\\*\\* changes\") || $(cat $RESULT_FILE | grep -q \"\\*\\*Major\\*\\* changes\"); then\n        echo \"**Notes**:\" >> $RESULT_FILE\n        echo \"\" >> $RESULT_FILE\n        echo \"This PR proposes merging major or minor changes into a release branch. Please make sure this is intentional. cc @falcosecurity/rules-maintainers\" >> $RESULT_FILE\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/compare-rule-files.sh"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 32,
                  "endLine": 59,
                  "endColumn": 38,
                  "snippet": {
                    "text": "fi\necho \"\" >> $RESULT_FILE\n\nif $(git branch --show-current | grep -q \"release/\"); then\n    if $(cat $RESULT_FILE | grep -q \"\\*\\*Minor\\*\\* changes\") || $(cat $RESULT_FILE | grep -q \"\\*\\*Major\\*\\* changes\"); then\n        echo \"**Notes**:\" >> $RESULT_FILE\n        echo \"\" >> $RESULT_FILE\n",
                    "rendered": {
                      "text": "fi\necho \"\" >> $RESULT_FILE\n\nif $(git branch --show-current | grep -q \"release/\"); then\n    if $(cat $RESULT_FILE | grep -q \"\\*\\*Minor\\*\\* changes\") || $(cat $RESULT_FILE | grep -q \"\\*\\*Major\\*\\* changes\"); then\n        echo \"**Notes**:\" >> $RESULT_FILE\n        echo \"\" >> $RESULT_FILE\n",
                      "markdown": "`fi\necho \"\" >> $RESULT_FILE\n\nif $(git branch --show-current | grep -q \"release/\"); then\n    if $(cat $RESULT_FILE | grep -q \"\\*\\*Minor\\*\\* changes\") || $(cat $RESULT_FILE | grep -q \"\\*\\*Major\\*\\* changes\"); then\n        echo \"**Notes**:\" >> $RESULT_FILE\n        echo \"\" >> $RESULT_FILE\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/compare-rule-files.sh"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 3,
                  "endLine": 53,
                  "endColumn": 8,
                  "snippet": {
                    "text": "echo \"\" >> $RESULT_FILE\nif [ -s tmp_res.txt ]\nthen\n    cat tmp_res.txt >> $RESULT_FILE\nelse\n    echo \"No changes detected\" >> $RESULT_FILE\nfi\n",
                    "rendered": {
                      "text": "echo \"\" >> $RESULT_FILE\nif [ -s tmp_res.txt ]\nthen\n    cat tmp_res.txt >> $RESULT_FILE\nelse\n    echo \"No changes detected\" >> $RESULT_FILE\nfi\n",
                      "markdown": "`echo \"\" >> $RESULT_FILE\nif [ -s tmp_res.txt ]\nthen\n    cat tmp_res.txt >> $RESULT_FILE\nelse\n    echo \"No changes detected\" >> $RESULT_FILE\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/compare-rule-files.sh"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 13,
                  "endLine": 46,
                  "endColumn": 4,
                  "snippet": {
                    "text": "    --falco-image=$FALCO_DOCKER_IMAGE \\\n    -l $RULES_FILE \\\n    -r tmp_rule_file.yaml \\\n1>tmp_res.txt\ngit switch --detach $cur_branch\n\necho '##' $(basename $RULES_FILE) >> $RESULT_FILE\necho Comparing \\`$cur_branch\\` with latest tag \\`$latest_tag\\` >> $RESULT_FILE\n",
                    "rendered": {
                      "text": "    --falco-image=$FALCO_DOCKER_IMAGE \\\n    -l $RULES_FILE \\\n    -r tmp_rule_file.yaml \\\n1>tmp_res.txt\ngit switch --detach $cur_branch\n\necho '##' $(basename $RULES_FILE) >> $RESULT_FILE\necho Comparing \\`$cur_branch\\` with latest tag \\`$latest_tag\\` >> $RESULT_FILE\n",
                      "markdown": "`    --falco-image=$FALCO_DOCKER_IMAGE \\\n    -l $RULES_FILE \\\n    -r tmp_rule_file.yaml \\\n1>tmp_res.txt\ngit switch --detach $cur_branch\n\necho '##' $(basename $RULES_FILE) >> $RESULT_FILE\necho Comparing \\`$cur_branch\\` with latest tag \\`$latest_tag\\` >> $RESULT_FILE\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/compare-rule-files.sh"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 29,
                  "endLine": 39,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    echo Most recent tag found is \\\"$latest_tag\\\"\nfi\n\ngit checkout tags/$latest_tag\nchmod +x $CHECKER_TOOL\n$CHECKER_TOOL \\\n    compare \\\n    --falco-image=$FALCO_DOCKER_IMAGE \\\n",
                    "rendered": {
                      "text": "    echo Most recent tag found is \\\"$latest_tag\\\"\nfi\n\ngit checkout tags/$latest_tag\nchmod +x $CHECKER_TOOL\n$CHECKER_TOOL \\\n    compare \\\n    --falco-image=$FALCO_DOCKER_IMAGE \\\n",
                      "markdown": "`    echo Most recent tag found is \\\"$latest_tag\\\"\nfi\n\ngit checkout tags/$latest_tag\nchmod +x $CHECKER_TOOL\n$CHECKER_TOOL \\\n    compare \\\n    --falco-image=$FALCO_DOCKER_IMAGE \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/compare-rule-files.sh"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 38,
                  "endColumn": 4,
                  "snippet": {
                    "text": "else\n    echo Most recent tag found is \\\"$latest_tag\\\"\nfi\n\ngit checkout tags/$latest_tag\nchmod +x $CHECKER_TOOL\n$CHECKER_TOOL \\\n    compare \\\n",
                    "rendered": {
                      "text": "else\n    echo Most recent tag found is \\\"$latest_tag\\\"\nfi\n\ngit checkout tags/$latest_tag\nchmod +x $CHECKER_TOOL\n$CHECKER_TOOL \\\n    compare \\\n",
                      "markdown": "`else\n    echo Most recent tag found is \\\"$latest_tag\\\"\nfi\n\ngit checkout tags/$latest_tag\nchmod +x $CHECKER_TOOL\n$CHECKER_TOOL \\\n    compare \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/compare-rule-files.sh"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 30,
                  "endLine": 18,
                  "endColumn": 35,
                  "snippet": {
                    "text": "echo Checking version for rules file \\\"$RULES_FILE\\\"...\ncp $RULES_FILE tmp_rule_file.yaml\n\nrules_name=`echo $RULES_FILE | sed -re 's/rules\\/(.*)_rules\\.yaml/\\1/'`\necho Searching tag with prefix prefix \\\"$rules_name-rules-\\\"...\ngit_rev=`git rev-list --tags=\"$rules_name-rules-*.*.*\" --max-count=1`\n\n",
                    "rendered": {
                      "text": "echo Checking version for rules file \\\"$RULES_FILE\\\"...\ncp $RULES_FILE tmp_rule_file.yaml\n\nrules_name=`echo $RULES_FILE | sed -re 's/rules\\/(.*)_rules\\.yaml/\\1/'`\necho Searching tag with prefix prefix \\\"$rules_name-rules-\\\"...\ngit_rev=`git rev-list --tags=\"$rules_name-rules-*.*.*\" --max-count=1`\n\n",
                      "markdown": "`echo Checking version for rules file \\\"$RULES_FILE\\\"...\ncp $RULES_FILE tmp_rule_file.yaml\n\nrules_name=`echo $RULES_FILE | sed -re 's/rules\\/(.*)_rules\\.yaml/\\1/'`\necho Searching tag with prefix prefix \\\"$rules_name-rules-\\\"...\ngit_rev=`git rev-list --tags=\"$rules_name-rules-*.*.*\" --max-count=1`\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/compare-rule-files.sh"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 55,
                  "endLine": 16,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\ncur_branch=`git rev-parse HEAD`\necho Current branch is \\\"$cur_branch\\\"\necho Checking version for rules file \\\"$RULES_FILE\\\"...\ncp $RULES_FILE tmp_rule_file.yaml\n\nrules_name=`echo $RULES_FILE | sed -re 's/rules\\/(.*)_rules\\.yaml/\\1/'`\necho Searching tag with prefix prefix \\\"$rules_name-rules-\\\"...\n",
                    "rendered": {
                      "text": "\ncur_branch=`git rev-parse HEAD`\necho Current branch is \\\"$cur_branch\\\"\necho Checking version for rules file \\\"$RULES_FILE\\\"...\ncp $RULES_FILE tmp_rule_file.yaml\n\nrules_name=`echo $RULES_FILE | sed -re 's/rules\\/(.*)_rules\\.yaml/\\1/'`\necho Searching tag with prefix prefix \\\"$rules_name-rules-\\\"...\n",
                      "markdown": "`\ncur_branch=`git rev-parse HEAD`\necho Current branch is \\\"$cur_branch\\\"\necho Checking version for rules file \\\"$RULES_FILE\\\"...\ncp $RULES_FILE tmp_rule_file.yaml\n\nrules_name=`echo $RULES_FILE | sed -re 's/rules\\/(.*)_rules\\.yaml/\\1/'`\necho Searching tag with prefix prefix \\\"$rules_name-rules-\\\"...\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-deprecated_rules.yaml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 20,
                  "endLine": 37,
                  "endColumn": 28,
                  "snippet": {
                    "text": "# to true and does nothing, the perfect empty template for `logical` cases as opposed to list templates.\n# When tuning the rule you can override the macro with something useful, e.g.\n# - macro: allowed_ssh_hosts\n#   condition: (evt.hostname contains xyz)\n- macro: never_true\n  condition: (evt.num=0)\n\n",
                    "rendered": {
                      "text": "# to true and does nothing, the perfect empty template for `logical` cases as opposed to list templates.\n# When tuning the rule you can override the macro with something useful, e.g.\n# - macro: allowed_ssh_hosts\n#   condition: (evt.hostname contains xyz)\n- macro: never_true\n  condition: (evt.num=0)\n\n",
                      "markdown": "`# to true and does nothing, the perfect empty template for `logical` cases as opposed to list templates.\n# When tuning the rule you can override the macro with something useful, e.g.\n# - macro: allowed_ssh_hosts\n#   condition: (evt.hostname contains xyz)\n- macro: never_true\n  condition: (evt.num=0)\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-deprecated_rules.yaml"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 46,
                  "endLine": 184,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n- rule: Outbound Connection to C2 Servers\n  desc: > \n    Detect outbound connections to command and control servers using a list of IP addresses and fully qualified domain names (FQDNs).\n    This rule absolutely requires profiling your environment beforehand and also necessitates adjusting the template lists. The current \n    expression logic will never evaluate to true unless the lists are populated. Network-based rules are extremely crucial in any \n    security program, as they can often provide the only definitive evidence. However, effectively operationalizing them can be challenging \n",
                    "rendered": {
                      "text": "\n- rule: Outbound Connection to C2 Servers\n  desc: > \n    Detect outbound connections to command and control servers using a list of IP addresses and fully qualified domain names (FQDNs).\n    This rule absolutely requires profiling your environment beforehand and also necessitates adjusting the template lists. The current \n    expression logic will never evaluate to true unless the lists are populated. Network-based rules are extremely crucial in any \n    security program, as they can often provide the only definitive evidence. However, effectively operationalizing them can be challenging \n",
                      "markdown": "`\n- rule: Outbound Connection to C2 Servers\n  desc: > \n    Detect outbound connections to command and control servers using a list of IP addresses and fully qualified domain names (FQDNs).\n    This rule absolutely requires profiling your environment beforehand and also necessitates adjusting the template lists. The current \n    expression logic will never evaluate to true unless the lists are populated. Network-based rules are extremely crucial in any \n    security program, as they can often provide the only definitive evidence. However, effectively operationalizing them can be challenging \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-deprecated_rules.yaml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 38,
                  "endLine": 9,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-deprecated_rules.yaml"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 78,
                  "endLine": 184,
                  "endColumn": 82,
                  "snippet": {
                    "text": "\n- rule: Outbound Connection to C2 Servers\n  desc: > \n    Detect outbound connections to command and control servers using a list of IP addresses and fully qualified domain names (FQDNs).\n    This rule absolutely requires profiling your environment beforehand and also necessitates adjusting the template lists. The current \n    expression logic will never evaluate to true unless the lists are populated. Network-based rules are extremely crucial in any \n    security program, as they can often provide the only definitive evidence. However, effectively operationalizing them can be challenging \n",
                    "rendered": {
                      "text": "\n- rule: Outbound Connection to C2 Servers\n  desc: > \n    Detect outbound connections to command and control servers using a list of IP addresses and fully qualified domain names (FQDNs).\n    This rule absolutely requires profiling your environment beforehand and also necessitates adjusting the template lists. The current \n    expression logic will never evaluate to true unless the lists are populated. Network-based rules are extremely crucial in any \n    security program, as they can often provide the only definitive evidence. However, effectively operationalizing them can be challenging \n",
                      "markdown": "`\n- rule: Outbound Connection to C2 Servers\n  desc: > \n    Detect outbound connections to command and control servers using a list of IP addresses and fully qualified domain names (FQDNs).\n    This rule absolutely requires profiling your environment beforehand and also necessitates adjusting the template lists. The current \n    expression logic will never evaluate to true unless the lists are populated. Network-based rules are extremely crucial in any \n    security program, as they can often provide the only definitive evidence. However, effectively operationalizing them can be challenging \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-deprecated_rules.yaml"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 19,
                  "endLine": 154,
                  "endColumn": 28,
                  "snippet": {
                    "text": "# # On general K8s:\n# kubectl get services\n# kubectl cluster-info\n# # Visit the Nginx service and port, should not fire.\n# # Change rule to different port, then different process name, and test again that it fires.\n\n- rule: Outbound or Inbound Traffic not to Authorized Server Process and Port\n",
                    "rendered": {
                      "text": "# # On general K8s:\n# kubectl get services\n# kubectl cluster-info\n# # Visit the Nginx service and port, should not fire.\n# # Change rule to different port, then different process name, and test again that it fires.\n\n- rule: Outbound or Inbound Traffic not to Authorized Server Process and Port\n",
                      "markdown": "`# # On general K8s:\n# kubectl get services\n# kubectl cluster-info\n# # Visit the Nginx service and port, should not fire.\n# # Change rule to different port, then different process name, and test again that it fires.\n\n- rule: Outbound or Inbound Traffic not to Authorized Server Process and Port\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-deprecated_rules.yaml"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 10,
                  "endLine": 150,
                  "endColumn": 19,
                  "snippet": {
                    "text": "# kubectl run --image=nginx nginx-app --port=80 --env=\"DOMAIN=cluster\"\n# kubectl expose deployment nginx-app --port=80 --name=nginx-http --type=LoadBalancer\n# # On minikube:\n# minikube service nginx-http\n# # On general K8s:\n# kubectl get services\n# kubectl cluster-info\n",
                    "rendered": {
                      "text": "# kubectl run --image=nginx nginx-app --port=80 --env=\"DOMAIN=cluster\"\n# kubectl expose deployment nginx-app --port=80 --name=nginx-http --type=LoadBalancer\n# # On minikube:\n# minikube service nginx-http\n# # On general K8s:\n# kubectl get services\n# kubectl cluster-info\n",
                      "markdown": "`# kubectl run --image=nginx nginx-app --port=80 --env=\"DOMAIN=cluster\"\n# kubectl expose deployment nginx-app --port=80 --name=nginx-http --type=LoadBalancer\n# # On minikube:\n# minikube service nginx-http\n# # On general K8s:\n# kubectl get services\n# kubectl cluster-info\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-deprecated_rules.yaml"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 20,
                  "endLine": 90,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    and ssh_port \n    and not allowed_ssh_hosts\n  enabled: false\n  output: Disallowed SSH Connection (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_deprecated, host, container, network, mitre_lateral_movement, T1021.004]\n\n",
                    "rendered": {
                      "text": "    and ssh_port \n    and not allowed_ssh_hosts\n  enabled: false\n  output: Disallowed SSH Connection (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_deprecated, host, container, network, mitre_lateral_movement, T1021.004]\n\n",
                      "markdown": "`    and ssh_port \n    and not allowed_ssh_hosts\n  enabled: false\n  output: Disallowed SSH Connection (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_deprecated, host, container, network, mitre_lateral_movement, T1021.004]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-deprecated_rules.yaml"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 18,
                  "endLine": 81,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n- rule: Disallowed SSH Connection\n  desc: > \n    Detect any new SSH connection on port 22 to a host other than those in an allowed list of hosts. \n    This rule absolutely requires profiling your environment beforehand. Network-based rules are extremely \n    crucial in any security program, as they can often provide the only definitive evidence. However, \n    effectively operationalizing them can be challenging due to the potential for noise.\n",
                    "rendered": {
                      "text": "\n- rule: Disallowed SSH Connection\n  desc: > \n    Detect any new SSH connection on port 22 to a host other than those in an allowed list of hosts. \n    This rule absolutely requires profiling your environment beforehand. Network-based rules are extremely \n    crucial in any security program, as they can often provide the only definitive evidence. However, \n    effectively operationalizing them can be challenging due to the potential for noise.\n",
                      "markdown": "`\n- rule: Disallowed SSH Connection\n  desc: > \n    Detect any new SSH connection on port 22 to a host other than those in an allowed list of hosts. \n    This rule absolutely requires profiling your environment beforehand. Network-based rules are extremely \n    crucial in any security program, as they can often provide the only definitive evidence. However, \n    effectively operationalizing them can be challenging due to the potential for noise.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-deprecated_rules.yaml"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 18,
                  "endLine": 79,
                  "endColumn": 23,
                  "snippet": {
                    "text": "- macro: allowed_ssh_hosts\n  condition: (never_true)\n\n- rule: Disallowed SSH Connection\n  desc: > \n    Detect any new SSH connection on port 22 to a host other than those in an allowed list of hosts. \n    This rule absolutely requires profiling your environment beforehand. Network-based rules are extremely \n",
                    "rendered": {
                      "text": "- macro: allowed_ssh_hosts\n  condition: (never_true)\n\n- rule: Disallowed SSH Connection\n  desc: > \n    Detect any new SSH connection on port 22 to a host other than those in an allowed list of hosts. \n    This rule absolutely requires profiling your environment beforehand. Network-based rules are extremely \n",
                      "markdown": "`- macro: allowed_ssh_hosts\n  condition: (never_true)\n\n- rule: Disallowed SSH Connection\n  desc: > \n    Detect any new SSH connection on port 22 to a host other than those in an allowed list of hosts. \n    This rule absolutely requires profiling your environment beforehand. Network-based rules are extremely \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-deprecated_rules.yaml"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 44,
                  "endLine": 73,
                  "endColumn": 49,
                  "snippet": {
                    "text": "#\n# In the main falco rules file, there isn't any way to know the\n# specific hosts for which ssh access is allowed, so this macro just\n# repeats ssh_port, which effectively allows ssh from all hosts. In\n# the overridden macro, the condition would look something like\n# \"fd.sip=\"a.b.c.d\" or fd.sip=\"e.f.g.h\" or ...\"\n- macro: allowed_ssh_hosts\n",
                    "rendered": {
                      "text": "#\n# In the main falco rules file, there isn't any way to know the\n# specific hosts for which ssh access is allowed, so this macro just\n# repeats ssh_port, which effectively allows ssh from all hosts. In\n# the overridden macro, the condition would look something like\n# \"fd.sip=\"a.b.c.d\" or fd.sip=\"e.f.g.h\" or ...\"\n- macro: allowed_ssh_hosts\n",
                      "markdown": "`#\n# In the main falco rules file, there isn't any way to know the\n# specific hosts for which ssh access is allowed, so this macro just\n# repeats ssh_port, which effectively allows ssh from all hosts. In\n# the overridden macro, the condition would look something like\n# \"fd.sip=\"a.b.c.d\" or fd.sip=\"e.f.g.h\" or ...\"\n- macro: allowed_ssh_hosts\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-deprecated_rules.yaml"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 26,
                  "endLine": 72,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# are allowed.\n#\n# In the main falco rules file, there isn't any way to know the\n# specific hosts for which ssh access is allowed, so this macro just\n# repeats ssh_port, which effectively allows ssh from all hosts. In\n# the overridden macro, the condition would look something like\n# \"fd.sip=\"a.b.c.d\" or fd.sip=\"e.f.g.h\" or ...\"\n",
                    "rendered": {
                      "text": "# are allowed.\n#\n# In the main falco rules file, there isn't any way to know the\n# specific hosts for which ssh access is allowed, so this macro just\n# repeats ssh_port, which effectively allows ssh from all hosts. In\n# the overridden macro, the condition would look something like\n# \"fd.sip=\"a.b.c.d\" or fd.sip=\"e.f.g.h\" or ...\"\n",
                      "markdown": "`# are allowed.\n#\n# In the main falco rules file, there isn't any way to know the\n# specific hosts for which ssh access is allowed, so this macro just\n# repeats ssh_port, which effectively allows ssh from all hosts. In\n# the overridden macro, the condition would look something like\n# \"fd.sip=\"a.b.c.d\" or fd.sip=\"e.f.g.h\" or ...\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-deprecated_rules.yaml"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 54,
                  "endLine": 68,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\n# In a local/user rules file, you could override this macro to\n# enumerate the servers for which ssh connections are allowed. For\n# example, you might have a ssh gateway host for which ssh connections\n# are allowed.\n#\n# In the main falco rules file, there isn't any way to know the\n",
                    "rendered": {
                      "text": "\n# In a local/user rules file, you could override this macro to\n# enumerate the servers for which ssh connections are allowed. For\n# example, you might have a ssh gateway host for which ssh connections\n# are allowed.\n#\n# In the main falco rules file, there isn't any way to know the\n",
                      "markdown": "`\n# In a local/user rules file, you could override this macro to\n# enumerate the servers for which ssh connections are allowed. For\n# example, you might have a ssh gateway host for which ssh connections\n# are allowed.\n#\n# In the main falco rules file, there isn't any way to know the\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-deprecated_rules.yaml"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 27,
                  "endLine": 68,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n# In a local/user rules file, you could override this macro to\n# enumerate the servers for which ssh connections are allowed. For\n# example, you might have a ssh gateway host for which ssh connections\n# are allowed.\n#\n# In the main falco rules file, there isn't any way to know the\n",
                    "rendered": {
                      "text": "\n# In a local/user rules file, you could override this macro to\n# enumerate the servers for which ssh connections are allowed. For\n# example, you might have a ssh gateway host for which ssh connections\n# are allowed.\n#\n# In the main falco rules file, there isn't any way to know the\n",
                      "markdown": "`\n# In a local/user rules file, you could override this macro to\n# enumerate the servers for which ssh connections are allowed. For\n# example, you might have a ssh gateway host for which ssh connections\n# are allowed.\n#\n# In the main falco rules file, there isn't any way to know the\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-deprecated_rules.yaml"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 33,
                  "endLine": 67,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  condition: (fd.sport=22)\n\n# In a local/user rules file, you could override this macro to\n# enumerate the servers for which ssh connections are allowed. For\n# example, you might have a ssh gateway host for which ssh connections\n# are allowed.\n#\n",
                    "rendered": {
                      "text": "  condition: (fd.sport=22)\n\n# In a local/user rules file, you could override this macro to\n# enumerate the servers for which ssh connections are allowed. For\n# example, you might have a ssh gateway host for which ssh connections\n# are allowed.\n#\n",
                      "markdown": "`  condition: (fd.sport=22)\n\n# In a local/user rules file, you could override this macro to\n# enumerate the servers for which ssh connections are allowed. For\n# example, you might have a ssh gateway host for which ssh connections\n# are allowed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/falco_mitre_attack_checker/utils/logger.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 30,
                  "endLine": 26,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    }\n\n    def format(self, record):\n        log_fmt = self.FORMATS.get(record.levelno)\n        formatter = logging.Formatter(log_fmt)\n        return formatter.format(record)\n\n",
                    "rendered": {
                      "text": "    }\n\n    def format(self, record):\n        log_fmt = self.FORMATS.get(record.levelno)\n        formatter = logging.Formatter(log_fmt)\n        return formatter.format(record)\n\n",
                      "markdown": "`    }\n\n    def format(self, record):\n        log_fmt = self.FORMATS.get(record.levelno)\n        formatter = logging.Formatter(log_fmt)\n        return formatter.format(record)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/falco_mitre_attack_checker/utils/logger.py"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 22,
                  "endLine": 22,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        logging.INFO: green + tag + reset + message,\n        logging.WARNING: yellow + tag + reset + message + file,\n        logging.ERROR: red + tag + reset + message + file,\n        logging.FATAL: red + tag + reset + message + file\n    }\n\n    def format(self, record):\n",
                    "rendered": {
                      "text": "        logging.INFO: green + tag + reset + message,\n        logging.WARNING: yellow + tag + reset + message + file,\n        logging.ERROR: red + tag + reset + message + file,\n        logging.FATAL: red + tag + reset + message + file\n    }\n\n    def format(self, record):\n",
                      "markdown": "`        logging.INFO: green + tag + reset + message,\n        logging.WARNING: yellow + tag + reset + message + file,\n        logging.ERROR: red + tag + reset + message + file,\n        logging.FATAL: red + tag + reset + message + file\n    }\n\n    def format(self, record):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/falco_mitre_attack_checker/utils/logger.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 22,
                  "endLine": 21,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        logging.DEBUG: cyan + tag + reset + message,\n        logging.INFO: green + tag + reset + message,\n        logging.WARNING: yellow + tag + reset + message + file,\n        logging.ERROR: red + tag + reset + message + file,\n        logging.FATAL: red + tag + reset + message + file\n    }\n\n",
                    "rendered": {
                      "text": "        logging.DEBUG: cyan + tag + reset + message,\n        logging.INFO: green + tag + reset + message,\n        logging.WARNING: yellow + tag + reset + message + file,\n        logging.ERROR: red + tag + reset + message + file,\n        logging.FATAL: red + tag + reset + message + file\n    }\n\n",
                      "markdown": "`        logging.DEBUG: cyan + tag + reset + message,\n        logging.INFO: green + tag + reset + message,\n        logging.WARNING: yellow + tag + reset + message + file,\n        logging.ERROR: red + tag + reset + message + file,\n        logging.FATAL: red + tag + reset + message + file\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/falco_mitre_attack_checker/utils/logger.py"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 3,
                  "endLine": 11,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    green = \"\\x1b[92;21m\"\n    cyan = \"\\x1b[96;21m\"\n    yellow = \"\\x1b[93;21m\"\n    red = \"\\x1b[91;21m\"\n    reset = \"\\x1b[0m\"\n    tag = \"[%(levelname)s]\"\n    message = \" %(message)s\"\n",
                    "rendered": {
                      "text": "    green = \"\\x1b[92;21m\"\n    cyan = \"\\x1b[96;21m\"\n    yellow = \"\\x1b[93;21m\"\n    red = \"\\x1b[91;21m\"\n    reset = \"\\x1b[0m\"\n    tag = \"[%(levelname)s]\"\n    message = \" %(message)s\"\n",
                      "markdown": "`    green = \"\\x1b[92;21m\"\n    cyan = \"\\x1b[96;21m\"\n    yellow = \"\\x1b[93;21m\"\n    red = \"\\x1b[91;21m\"\n    reset = \"\\x1b[0m\"\n    tag = \"[%(levelname)s]\"\n    message = \" %(message)s\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 188,
                  "endLine": 86,
                  "endColumn": 192,
                  "snippet": {
                    "text": "- Each rule conforms to the [Style Guide of Falco Rules](https://falco.org/docs/rules/style-guide/).\n- In particular, the [Rules Maturity Framework](#rules-maturity-framework) is honored.\n\n> Note: Any rule that would require using the `-A` flag (enabling high-volume syscalls) cannot be accepted beyond `maturity_sandbox` and `enabled: false` due to performance impact reasons. At the moment, we discourage upstream rules based on high-volume syscalls. However, this assessment may change as Falco evolves.\n\n*Correctness*\n\n",
                    "rendered": {
                      "text": "- Each rule conforms to the [Style Guide of Falco Rules](https://falco.org/docs/rules/style-guide/).\n- In particular, the [Rules Maturity Framework](#rules-maturity-framework) is honored.\n\n> Note: Any rule that would require using the `-A` flag (enabling high-volume syscalls) cannot be accepted beyond `maturity_sandbox` and `enabled: false` due to performance impact reasons. At the moment, we discourage upstream rules based on high-volume syscalls. However, this assessment may change as Falco evolves.\n\n*Correctness*\n\n",
                      "markdown": "`- Each rule conforms to the [Style Guide of Falco Rules](https://falco.org/docs/rules/style-guide/).\n- In particular, the [Rules Maturity Framework](#rules-maturity-framework) is honored.\n\n> Note: Any rule that would require using the `-A` flag (enabling high-volume syscalls) cannot be accepted beyond `maturity_sandbox` and `enabled: false` due to performance impact reasons. At the moment, we discourage upstream rules based on high-volume syscalls. However, this assessment may change as Falco evolves.\n\n*Correctness*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 151,
                  "endLine": 30,
                  "endColumn": 155,
                  "snippet": {
                    "text": "ically starts as `maturity_sandbox` and, in some cases, as `maturity_incubating`. However, it cannot immediately be at the `maturity_stable` level.\n\nOnly rules at the `maturity_stable` level are distributed with the Falco release package and live in the established `falco_rules.yaml` file. All rules at the remaining maturity levels can be found in the Falco rules file according to their respective levels, and they need to be installed separately. They are made available to the adopter through the same means as the `falco_rules.yaml` file, either by directly retrieving them from this repository or ",
                    "rendered": {
                      "text": "ically starts as `maturity_sandbox` and, in some cases, as `maturity_incubating`. However, it cannot immediately be at the `maturity_stable` level.\n\nOnly rules at the `maturity_stable` level are distributed with the Falco release package and live in the established `falco_rules.yaml` file. All rules at the remaining maturity levels can be found in the Falco rules file according to their respective levels, and they need to be installed separately. They are made available to the adopter through the same means as the `falco_rules.yaml` file, either by directly retrieving them from this repository or ",
                      "markdown": "`ically starts as `maturity_sandbox` and, in some cases, as `maturity_incubating`. However, it cannot immediately be at the `maturity_stable` level.\n\nOnly rules at the `maturity_stable` level are distributed with the Falco release package and live in the established `falco_rules.yaml` file. All rules at the remaining maturity levels can be found in the Falco rules file according to their respective levels, and they need to be installed separately. They are made available to the adopter through the same means as the `falco_rules.yaml` file, either by directly retrieving them from this repository or `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 10,
                  "endLine": 30,
                  "endColumn": 14,
                  "snippet": {
                    "text": "org/docs/rules/style-guide/#tags), every rule upstreamed to The Falco Project must include a maturity level as its first tag.\n\nA new rule typically starts as `maturity_sandbox` and, in some cases, as `maturity_incubating`. However, it cannot immediately be at the `maturity_stable` level.\n\nOnly rules at the `maturity_stable` level are distributed with the Falco release package and live in the established `falco_rules.yaml` file. All rules at the remaining maturity levels can be found in the Falco rules file according to their respective levels, and they need to be installed separately. They are mad",
                    "rendered": {
                      "text": "org/docs/rules/style-guide/#tags), every rule upstreamed to The Falco Project must include a maturity level as its first tag.\n\nA new rule typically starts as `maturity_sandbox` and, in some cases, as `maturity_incubating`. However, it cannot immediately be at the `maturity_stable` level.\n\nOnly rules at the `maturity_stable` level are distributed with the Falco release package and live in the established `falco_rules.yaml` file. All rules at the remaining maturity levels can be found in the Falco rules file according to their respective levels, and they need to be installed separately. They are mad",
                      "markdown": "`org/docs/rules/style-guide/#tags), every rule upstreamed to The Falco Project must include a maturity level as its first tag.\n\nA new rule typically starts as `maturity_sandbox` and, in some cases, as `maturity_incubating`. However, it cannot immediately be at the `maturity_stable` level.\n\nOnly rules at the `maturity_stable` level are distributed with the Falco release package and live in the established `falco_rules.yaml` file. All rules at the remaining maturity levels can be found in the Falco rules file according to their respective levels, and they need to be installed separately. They are mad`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 129,
                  "endLine": 28,
                  "endColumn": 133,
                  "snippet": {
                    "text": " [Style Guide of Falco Rules](https://falco.org/docs/rules/style-guide/#tags), every rule upstreamed to The Falco Project must include a maturity level as its first tag.\n\nA new rule typically starts as `maturity_sandbox` and, in some cases, as `maturity_incubating`. However, it cannot immediately be at the `maturity_stable` level.\n\nOnly rules at the `maturity_stable` level are distributed with the Falco release package and live in the established `falco_rules.yaml` file. All rules at the remaining maturity levels can be found in the Falco rules file according to their respective levels, and they n",
                    "rendered": {
                      "text": " [Style Guide of Falco Rules](https://falco.org/docs/rules/style-guide/#tags), every rule upstreamed to The Falco Project must include a maturity level as its first tag.\n\nA new rule typically starts as `maturity_sandbox` and, in some cases, as `maturity_incubating`. However, it cannot immediately be at the `maturity_stable` level.\n\nOnly rules at the `maturity_stable` level are distributed with the Falco release package and live in the established `falco_rules.yaml` file. All rules at the remaining maturity levels can be found in the Falco rules file according to their respective levels, and they n",
                      "markdown": "` [Style Guide of Falco Rules](https://falco.org/docs/rules/style-guide/#tags), every rule upstreamed to The Falco Project must include a maturity level as its first tag.\n\nA new rule typically starts as `maturity_sandbox` and, in some cases, as `maturity_incubating`. However, it cannot immediately be at the `maturity_stable` level.\n\nOnly rules at the `maturity_stable` level are distributed with the Falco release package and live in the established `falco_rules.yaml` file. All rules at the remaining maturity levels can be found in the Falco rules file according to their respective levels, and they n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 20,
                  "endColumn": 3,
                  "snippet": {
                    "text": "of Contents**\n\n* [Rules Maturity Framework](#rules-maturity-framework)\n* [Rules Acceptance Criteria](#rules-acceptance-criteria)\n\n\n# Rules Maturity Framework\n\nThe rules maturity framework was established following this [proposal](proposals/20230605-rules-adoption-management-maturity-framework.md). \n\nAt a high level, The Falco Project maintains community-contributed syscall and container event-based [rules](https://github.com/falcosecurity/rules/blob/main/rules/), with `maturity_stable` tagged rules being included in the Falco release package. Other maturity-level rules are released separately, req",
                    "rendered": {
                      "text": "of Contents**\n\n* [Rules Maturity Framework](#rules-maturity-framework)\n* [Rules Acceptance Criteria](#rules-acceptance-criteria)\n\n\n# Rules Maturity Framework\n\nThe rules maturity framework was established following this [proposal](proposals/20230605-rules-adoption-management-maturity-framework.md). \n\nAt a high level, The Falco Project maintains community-contributed syscall and container event-based [rules](https://github.com/falcosecurity/rules/blob/main/rules/), with `maturity_stable` tagged rules being included in the Falco release package. Other maturity-level rules are released separately, req",
                      "markdown": "`of Contents**\n\n* [Rules Maturity Framework](#rules-maturity-framework)\n* [Rules Acceptance Criteria](#rules-acceptance-criteria)\n\n\n# Rules Maturity Framework\n\nThe rules maturity framework was established following this [proposal](proposals/20230605-rules-adoption-management-maturity-framework.md). \n\nAt a high level, The Falco Project maintains community-contributed syscall and container event-based [rules](https://github.com/falcosecurity/rules/blob/main/rules/), with `maturity_stable` tagged rules being included in the Falco release package. Other maturity-level rules are released separately, req`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 405,
                  "endLine": 102,
                  "endColumn": 410,
                  "snippet": {
                    "text": "ity, cyber defense, and real-world production settings for accurate assessment. Questions such as whether these threats are a priority for most organizations or if we can provide enough context for a security analyst to appropriately act on the alerts as part of their incident response workflows are top of mind when assessing the overall relevance. Relevance is a key factor that indirectly reflects both robustness and significance, but more importantly, it indicates whether a particular security threat is significant to most adopters and, consequently, beneficial to broadly detect.\n\nHere are some a",
                    "rendered": {
                      "text": "ity, cyber defense, and real-world production settings for accurate assessment. Questions such as whether these threats are a priority for most organizations or if we can provide enough context for a security analyst to appropriately act on the alerts as part of their incident response workflows are top of mind when assessing the overall relevance. Relevance is a key factor that indirectly reflects both robustness and significance, but more importantly, it indicates whether a particular security threat is significant to most adopters and, consequently, beneficial to broadly detect.\n\nHere are some a",
                      "markdown": "`ity, cyber defense, and real-world production settings for accurate assessment. Questions such as whether these threats are a priority for most organizations or if we can provide enough context for a security analyst to appropriately act on the alerts as part of their incident response workflows are top of mind when assessing the overall relevance. Relevance is a key factor that indirectly reflects both robustness and significance, but more importantly, it indicates whether a particular security threat is significant to most adopters and, consequently, beneficial to broadly detect.\n\nHere are some a`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 52,
                  "endLine": 60,
                  "endColumn": 58,
                  "snippet": {
                    "text": " for specific use cases. A smooth adoption process is defined by making it easy for adopters to understand each rule and also gain an understanding of not just what the rule is doing, but also how beneficial it can be under various circumstances. \nAdditionally, due to this framework, adopters should find themselves with a clearer understanding of which rules can likely be adopted as-is versus which rules may require significant engineering efforts to evaluate and adopt.\n\nThe rules maturity framework aligns with the [status](https://github.com/falcosecurity/evolution/blob/main/REPOSITORIES.md#status)",
                    "rendered": {
                      "text": " for specific use cases. A smooth adoption process is defined by making it easy for adopters to understand each rule and also gain an understanding of not just what the rule is doing, but also how beneficial it can be under various circumstances. \nAdditionally, due to this framework, adopters should find themselves with a clearer understanding of which rules can likely be adopted as-is versus which rules may require significant engineering efforts to evaluate and adopt.\n\nThe rules maturity framework aligns with the [status](https://github.com/falcosecurity/evolution/blob/main/REPOSITORIES.md#status)",
                      "markdown": "` for specific use cases. A smooth adoption process is defined by making it easy for adopters to understand each rule and also gain an understanding of not just what the rule is doing, but also how beneficial it can be under various circumstances. \nAdditionally, due to this framework, adopters should find themselves with a clearer understanding of which rules can likely be adopted as-is versus which rules may require significant engineering efforts to evaluate and adopt.\n\nThe rules maturity framework aligns with the [status](https://github.com/falcosecurity/evolution/blob/main/REPOSITORIES.md#status)`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/build.sh"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 6,
                  "endLine": 31,
                  "endColumn": 14,
                  "snippet": {
                    "text": "echo \"\"\necho \"Update dependencies\"\npoetry check\npoetry update --without dev\npoetry install --without dev --sync\n\necho \"Build Falco Mitre Checker module\"\n",
                    "rendered": {
                      "text": "echo \"\"\necho \"Update dependencies\"\npoetry check\npoetry update --without dev\npoetry install --without dev --sync\n\necho \"Build Falco Mitre Checker module\"\n",
                      "markdown": "`echo \"\"\necho \"Update dependencies\"\npoetry check\npoetry update --without dev\npoetry install --without dev --sync\n\necho \"Build Falco Mitre Checker module\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/build.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nSCRIPT_PATH=\"$(realpath \"$0\")\"\nMODULE_DIR=\"$(dirname \"${SCRIPT_PATH:?}\")\"\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nSCRIPT_PATH=\"$(realpath \"$0\")\"\nMODULE_DIR=\"$(dirname \"${SCRIPT_PATH:?}\")\"\n\n",
                      "markdown": "`#!/usr/bin/env bash\n\nSCRIPT_PATH=\"$(realpath \"$0\")\"\nMODULE_DIR=\"$(dirname \"${SCRIPT_PATH:?}\")\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/build.sh"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 6,
                  "endLine": 26,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\ncd \"${MODULE_DIR}\" || exit\necho \"Build environment :\"\npoetry env info\n\necho \"\"\necho \"Update dependencies\"\n",
                    "rendered": {
                      "text": "\ncd \"${MODULE_DIR}\" || exit\necho \"Build environment :\"\npoetry env info\n\necho \"\"\necho \"Update dependencies\"\n",
                      "markdown": "`\ncd \"${MODULE_DIR}\" || exit\necho \"Build environment :\"\npoetry env info\n\necho \"\"\necho \"Update dependencies\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/build.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nSCRIPT_PATH=\"$(realpath \"$0\")\"\nMODULE_DIR=\"$(dirname \"${SCRIPT_PATH:?}\")\"\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nSCRIPT_PATH=\"$(realpath \"$0\")\"\nMODULE_DIR=\"$(dirname \"${SCRIPT_PATH:?}\")\"\n\n",
                      "markdown": "`#!/usr/bin/env bash\n\nSCRIPT_PATH=\"$(realpath \"$0\")\"\nMODULE_DIR=\"$(dirname \"${SCRIPT_PATH:?}\")\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/poetry.lock"
                },
                "region": {
                  "startLine": 823,
                  "startColumn": 15,
                  "endLine": 823,
                  "endColumn": 81,
                  "snippet": {
                    "text": "[metadata]\nlock-version = \"2.0\"\npython-versions = \"^3.10\"\ncontent-hash = \"adbf41d469cd7b6a5e736194fa484063e644a43ffb2426173931336e3ae0bf64\"\n",
                    "rendered": {
                      "text": "[metadata]\nlock-version = \"2.0\"\npython-versions = \"^3.10\"\ncontent-hash = \"adbf41d469cd7b6a5e736194fa484063e644a43ffb2426173931336e3ae0bf64\"\n",
                      "markdown": "`[metadata]\nlock-version = \"2.0\"\npython-versions = \"^3.10\"\ncontent-hash = \"adbf41d469cd7b6a5e736194fa484063e644a43ffb2426173931336e3ae0bf64\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/README.md"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 6,
                  "endLine": 125,
                  "snippet": {
                    "text": "You should run a vulnerability scanner every time you add a new dependency in projects :\n\n```sh\npoetry update\npoetry run python -m safety check\n```\n\n```\n",
                    "rendered": {
                      "text": "You should run a vulnerability scanner every time you add a new dependency in projects :\n\n```sh\npoetry update\npoetry run python -m safety check\n```\n\n```\n",
                      "markdown": "`You should run a vulnerability scanner every time you add a new dependency in projects :\n\n```sh\npoetry update\npoetry run python -m safety check\n```\n\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/README.md"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 6,
                  "endLine": 82,
                  "snippet": {
                    "text": "With coverage :\n\n```sh\npoetry update\npoetry run python -m pytest --cov=falco_mitre_attack_checker\n```\n\n```\n",
                    "rendered": {
                      "text": "With coverage :\n\n```sh\npoetry update\npoetry run python -m pytest --cov=falco_mitre_attack_checker\n```\n\n```\n",
                      "markdown": "`With coverage :\n\n```sh\npoetry update\npoetry run python -m pytest --cov=falco_mitre_attack_checker\n```\n\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/README.md"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 6,
                  "endLine": 73,
                  "snippet": {
                    "text": "\n```sh\npoetry check\npoetry update\npoetry install --sync\n```\n\n### Testing\n",
                    "rendered": {
                      "text": "\n```sh\npoetry check\npoetry update\npoetry install --sync\n```\n\n### Testing\n",
                      "markdown": "`\n```sh\npoetry check\npoetry update\npoetry install --sync\n```\n\n### Testing\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/README.md"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 44,
                  "endLine": 121,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n### Security\n\nYou should run a vulnerability scanner every time you add a new dependency in projects :\n\n```sh\npoetry update\n",
                    "rendered": {
                      "text": "\n### Security\n\nYou should run a vulnerability scanner every time you add a new dependency in projects :\n\n```sh\npoetry update\n",
                      "markdown": "`\n### Security\n\nYou should run a vulnerability scanner every time you add a new dependency in projects :\n\n```sh\npoetry update\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/README.md"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 5,
                  "endLine": 48,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nOr manualy using `pip` :\n\n```sh\npip install dist/falco_mitre_attack_checker-0.1.0-py3-none-any.whl\n```\n\n## Usage\n",
                    "rendered": {
                      "text": "\nOr manualy using `pip` :\n\n```sh\npip install dist/falco_mitre_attack_checker-0.1.0-py3-none-any.whl\n```\n\n## Usage\n",
                      "markdown": "`\nOr manualy using `pip` :\n\n```sh\npip install dist/falco_mitre_attack_checker-0.1.0-py3-none-any.whl\n```\n\n## Usage\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/README.md"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 36,
                  "endLine": 21,
                  "snippet": {
                    "text": "The choice of a module is motivated by the packaging of a python code to integrate it into wider Falco\nimplementations. More precisely, the module can be used :\n\n- by the rules_overview_generator.py script\n- by Falco users and experts to check their Falco rules files\n- by other Falco components that need to check the validity of rules files\n\n## Build\n",
                    "rendered": {
                      "text": "The choice of a module is motivated by the packaging of a python code to integrate it into wider Falco\nimplementations. More precisely, the module can be used :\n\n- by the rules_overview_generator.py script\n- by Falco users and experts to check their Falco rules files\n- by other Falco components that need to check the validity of rules files\n\n## Build\n",
                      "markdown": "`The choice of a module is motivated by the packaging of a python code to integrate it into wider Falco\nimplementations. More precisely, the module can be used :\n\n- by the rules_overview_generator.py script\n- by Falco users and experts to check their Falco rules files\n- by other Falco components that need to check the validity of rules files\n\n## Build\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/install.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nSCRIPT_PATH=\"$(realpath \"$0\")\"\nMODULE_DIR=\"$(dirname \"${SCRIPT_PATH:?}\")\"\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nSCRIPT_PATH=\"$(realpath \"$0\")\"\nMODULE_DIR=\"$(dirname \"${SCRIPT_PATH:?}\")\"\n\n",
                      "markdown": "`#!/usr/bin/env bash\n\nSCRIPT_PATH=\"$(realpath \"$0\")\"\nMODULE_DIR=\"$(dirname \"${SCRIPT_PATH:?}\")\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/install.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 9,
                  "endLine": 28,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\necho \"\"\nwheel=\"$(find \"./dist/\" -type f -name \"*.whl\")\"\npython -m pip install \"${wheel}\" --force-reinstall --no-cache-dir\n\necho \"\"\necho \"OK\"\n",
                    "rendered": {
                      "text": "\necho \"\"\nwheel=\"$(find \"./dist/\" -type f -name \"*.whl\")\"\npython -m pip install \"${wheel}\" --force-reinstall --no-cache-dir\n\necho \"\"\necho \"OK\"\n",
                      "markdown": "`\necho \"\"\nwheel=\"$(find \"./dist/\" -type f -name \"*.whl\")\"\npython -m pip install \"${wheel}\" --force-reinstall --no-cache-dir\n\necho \"\"\necho \"OK\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/mitre_attack_checker/install.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nSCRIPT_PATH=\"$(realpath \"$0\")\"\nMODULE_DIR=\"$(dirname \"${SCRIPT_PATH:?}\")\"\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nSCRIPT_PATH=\"$(realpath \"$0\")\"\nMODULE_DIR=\"$(dirname \"${SCRIPT_PATH:?}\")\"\n\n",
                      "markdown": "`#!/usr/bin/env bash\n\nSCRIPT_PATH=\"$(realpath \"$0\")\"\nMODULE_DIR=\"$(dirname \"${SCRIPT_PATH:?}\")\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare_test.go"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 7,
                  "endLine": 19,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"encoding/json\"\n\t\"testing\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"encoding/json\"\n\t\"testing\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"encoding/json\"\n\t\"testing\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 38,
                  "endLine": 402,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t}\n\n\t\tif len(leftRules) == 0 || len(rightRules) == 0 {\n\t\t\treturn fmt.Errorf(\"you must specify at least one rules file for both the left-hand and right-hand sides of comparison\")\n\t\t}\n\n\t\tfalcoImage, err := cmd.Flags().GetString(\"falco-image\")\n",
                    "rendered": {
                      "text": "\t\t}\n\n\t\tif len(leftRules) == 0 || len(rightRules) == 0 {\n\t\t\treturn fmt.Errorf(\"you must specify at least one rules file for both the left-hand and right-hand sides of comparison\")\n\t\t}\n\n\t\tfalcoImage, err := cmd.Flags().GetString(\"falco-image\")\n",
                      "markdown": "`\t\t}\n\n\t\tif len(leftRules) == 0 || len(rightRules) == 0 {\n\t\t\treturn fmt.Errorf(\"you must specify at least one rules file for both the left-hand and right-hand sides of comparison\")\n\t\t}\n\n\t\tfalcoImage, err := cmd.Flags().GetString(\"falco-image\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 63,
                  "endLine": 351,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n\t\t\t\t// Disabling at default one or more rules that used to be enabled\n\t\t\t\tif l.Info.Enabled && !r.Info.Enabled {\n\t\t\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been disabled at default\", l.Info.Name))\n\t\t\t\t}\n\n\t\t\t\t// Matching less events in a rule condition\n",
                    "rendered": {
                      "text": "\n\t\t\t\t// Disabling at default one or more rules that used to be enabled\n\t\t\t\tif l.Info.Enabled && !r.Info.Enabled {\n\t\t\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been disabled at default\", l.Info.Name))\n\t\t\t\t}\n\n\t\t\t\t// Matching less events in a rule condition\n",
                      "markdown": "`\n\t\t\t\t// Disabling at default one or more rules that used to be enabled\n\t\t\t\tif l.Info.Enabled && !r.Info.Enabled {\n\t\t\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been disabled at default\", l.Info.Name))\n\t\t\t\t}\n\n\t\t\t\t// Matching less events in a rule condition\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 62,
                  "endLine": 193,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\t\t\tif l.Info.Name == r.Info.Name {\n\t\t\t\t// Enabling at default one or more rules that used to be disabled\n\t\t\t\tif !l.Info.Enabled && r.Info.Enabled {\n\t\t\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been enabled at default\", l.Info.Name))\n\t\t\t\t}\n\n\t\t\t\t// Matching more events in a rule condition\n",
                    "rendered": {
                      "text": "\t\t\tif l.Info.Name == r.Info.Name {\n\t\t\t\t// Enabling at default one or more rules that used to be disabled\n\t\t\t\tif !l.Info.Enabled && r.Info.Enabled {\n\t\t\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been enabled at default\", l.Info.Name))\n\t\t\t\t}\n\n\t\t\t\t// Matching more events in a rule condition\n",
                      "markdown": "`\t\t\tif l.Info.Name == r.Info.Name {\n\t\t\t\t// Enabling at default one or more rules that used to be disabled\n\t\t\t\tif !l.Info.Enabled && r.Info.Enabled {\n\t\t\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been enabled at default\", l.Info.Name))\n\t\t\t\t}\n\n\t\t\t\t// Matching more events in a rule condition\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 7,
                  "endLine": 19,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 20,
                  "endLine": 451,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\t\tdiff = compareRulesPatch(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Patch** changes:\")\n\t\t\tfor _, s := range diff {\n\t\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"* \"+s)\n\t\t\t}\n\t\t\tfmt.Fprintln(cmd.OutOrStdout())\n",
                    "rendered": {
                      "text": "\t\tdiff = compareRulesPatch(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Patch** changes:\")\n\t\t\tfor _, s := range diff {\n\t\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"* \"+s)\n\t\t\t}\n\t\t\tfmt.Fprintln(cmd.OutOrStdout())\n",
                      "markdown": "`\t\tdiff = compareRulesPatch(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Patch** changes:\")\n\t\t\tfor _, s := range diff {\n\t\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"* \"+s)\n\t\t\t}\n\t\t\tfmt.Fprintln(cmd.OutOrStdout())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 448,
                  "startColumn": 1,
                  "endLine": 448,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\t\tfmt.Fprintln(cmd.OutOrStdout())\n\t\t}\n\n\t\tdiff = compareRulesPatch(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Patch** changes:\")\n\t\t\tfor _, s := range diff {\n",
                    "rendered": {
                      "text": "\t\t\tfmt.Fprintln(cmd.OutOrStdout())\n\t\t}\n\n\t\tdiff = compareRulesPatch(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Patch** changes:\")\n\t\t\tfor _, s := range diff {\n",
                      "markdown": "`\t\t\tfmt.Fprintln(cmd.OutOrStdout())\n\t\t}\n\n\t\tdiff = compareRulesPatch(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Patch** changes:\")\n\t\t\tfor _, s := range diff {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 20,
                  "endLine": 442,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\t\tdiff = compareRulesMinor(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Minor** changes:\")\n\t\t\tfor _, s := range diff {\n\t\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"* \"+s)\n\t\t\t}\n\t\t\tfmt.Fprintln(cmd.OutOrStdout())\n",
                    "rendered": {
                      "text": "\t\tdiff = compareRulesMinor(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Minor** changes:\")\n\t\t\tfor _, s := range diff {\n\t\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"* \"+s)\n\t\t\t}\n\t\t\tfmt.Fprintln(cmd.OutOrStdout())\n",
                      "markdown": "`\t\tdiff = compareRulesMinor(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Minor** changes:\")\n\t\t\tfor _, s := range diff {\n\t\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"* \"+s)\n\t\t\t}\n\t\t\tfmt.Fprintln(cmd.OutOrStdout())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 1,
                  "endLine": 439,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\t\tfmt.Fprintln(cmd.OutOrStdout())\n\t\t}\n\n\t\tdiff = compareRulesMinor(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Minor** changes:\")\n\t\t\tfor _, s := range diff {\n",
                    "rendered": {
                      "text": "\t\t\tfmt.Fprintln(cmd.OutOrStdout())\n\t\t}\n\n\t\tdiff = compareRulesMinor(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Minor** changes:\")\n\t\t\tfor _, s := range diff {\n",
                      "markdown": "`\t\t\tfmt.Fprintln(cmd.OutOrStdout())\n\t\t}\n\n\t\tdiff = compareRulesMinor(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Minor** changes:\")\n\t\t\tfor _, s := range diff {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 433,
                  "startColumn": 20,
                  "endLine": 433,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\t\tdiff := compareRulesMajor(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Major** changes:\")\n\t\t\tfor _, s := range diff {\n\t\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"* \"+s)\n\t\t\t}\n\t\t\tfmt.Fprintln(cmd.OutOrStdout())\n",
                    "rendered": {
                      "text": "\t\tdiff := compareRulesMajor(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Major** changes:\")\n\t\t\tfor _, s := range diff {\n\t\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"* \"+s)\n\t\t\t}\n\t\t\tfmt.Fprintln(cmd.OutOrStdout())\n",
                      "markdown": "`\t\tdiff := compareRulesMajor(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Major** changes:\")\n\t\t\tfor _, s := range diff {\n\t\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"* \"+s)\n\t\t\t}\n\t\t\tfmt.Fprintln(cmd.OutOrStdout())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 1,
                  "endLine": 430,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\t\treturn err\n\t\t}\n\n\t\tdiff := compareRulesMajor(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Major** changes:\")\n\t\t\tfor _, s := range diff {\n",
                    "rendered": {
                      "text": "\t\t\treturn err\n\t\t}\n\n\t\tdiff := compareRulesMajor(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Major** changes:\")\n\t\t\tfor _, s := range diff {\n",
                      "markdown": "`\t\t\treturn err\n\t\t}\n\n\t\tdiff := compareRulesMajor(leftOutput, rightOutput)\n\t\tif len(diff) > 0 {\n\t\t\tfmt.Fprintln(cmd.OutOrStdout(), \"**Major** changes:\")\n\t\t\tfor _, s := range diff {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 16,
                  "endLine": 336,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\tdiff = diffStrSet(listNames(left), listNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"List `%s` has been removed\", v))\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t}\n\tdiff = diffStrSet(listNames(left), listNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"List `%s` has been removed\", v))\n\t\t}\n\t}\n",
                      "markdown": "`\t}\n\tdiff = diffStrSet(listNames(left), listNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"List `%s` has been removed\", v))\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 334,
                  "endLine": 334,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been removed\", v))\n\t\t}\n\t}\n\tdiff = diffStrSet(listNames(left), listNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"List `%s` has been removed\", v))\n",
                    "rendered": {
                      "text": "\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been removed\", v))\n\t\t}\n\t}\n\tdiff = diffStrSet(listNames(left), listNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"List `%s` has been removed\", v))\n",
                      "markdown": "`\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been removed\", v))\n\t\t}\n\t}\n\tdiff = diffStrSet(listNames(left), listNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"List `%s` has been removed\", v))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 16,
                  "endLine": 330,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\tdiff = diffStrSet(macroNames(left), macroNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been removed\", v))\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t}\n\tdiff = diffStrSet(macroNames(left), macroNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been removed\", v))\n\t\t}\n\t}\n",
                      "markdown": "`\t}\n\tdiff = diffStrSet(macroNames(left), macroNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been removed\", v))\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 328,
                  "endLine": 328,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been removed\", v))\n\t\t}\n\t}\n\tdiff = diffStrSet(macroNames(left), macroNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been removed\", v))\n",
                    "rendered": {
                      "text": "\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been removed\", v))\n\t\t}\n\t}\n\tdiff = diffStrSet(macroNames(left), macroNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been removed\", v))\n",
                      "markdown": "`\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been removed\", v))\n\t\t}\n\t}\n\tdiff = diffStrSet(macroNames(left), macroNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been removed\", v))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 16,
                  "endLine": 324,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t// Renaming or removing a list, macro, or rule\n\tdiff := diffStrSet(ruleNames(left), ruleNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been removed\", v))\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t// Renaming or removing a list, macro, or rule\n\tdiff := diffStrSet(ruleNames(left), ruleNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been removed\", v))\n\t\t}\n\t}\n",
                      "markdown": "`\t// Renaming or removing a list, macro, or rule\n\tdiff := diffStrSet(ruleNames(left), ruleNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been removed\", v))\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 322,
                  "endLine": 322,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t}\n\n\t// Renaming or removing a list, macro, or rule\n\tdiff := diffStrSet(ruleNames(left), ruleNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been removed\", v))\n",
                    "rendered": {
                      "text": "\t}\n\n\t// Renaming or removing a list, macro, or rule\n\tdiff := diffStrSet(ruleNames(left), ruleNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been removed\", v))\n",
                      "markdown": "`\t}\n\n\t// Renaming or removing a list, macro, or rule\n\tdiff := diffStrSet(ruleNames(left), ruleNames(right))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been removed\", v))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 16,
                  "endLine": 295,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\tdiff = diffStrSet(listNames(right), listNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"List `%s` has been added\", v))\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t}\n\tdiff = diffStrSet(listNames(right), listNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"List `%s` has been added\", v))\n\t\t}\n\t}\n",
                      "markdown": "`\t}\n\tdiff = diffStrSet(listNames(right), listNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"List `%s` has been added\", v))\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 293,
                  "endLine": 293,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been added\", v))\n\t\t}\n\t}\n\tdiff = diffStrSet(listNames(right), listNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"List `%s` has been added\", v))\n",
                    "rendered": {
                      "text": "\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been added\", v))\n\t\t}\n\t}\n\tdiff = diffStrSet(listNames(right), listNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"List `%s` has been added\", v))\n",
                      "markdown": "`\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been added\", v))\n\t\t}\n\t}\n\tdiff = diffStrSet(listNames(right), listNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"List `%s` has been added\", v))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 16,
                  "endLine": 289,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\tdiff = diffStrSet(macroNames(right), macroNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been added\", v))\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t}\n\tdiff = diffStrSet(macroNames(right), macroNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been added\", v))\n\t\t}\n\t}\n",
                      "markdown": "`\t}\n\tdiff = diffStrSet(macroNames(right), macroNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been added\", v))\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 287,
                  "endLine": 287,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been added\", v))\n\t\t}\n\t}\n\tdiff = diffStrSet(macroNames(right), macroNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been added\", v))\n",
                    "rendered": {
                      "text": "\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been added\", v))\n\t\t}\n\t}\n\tdiff = diffStrSet(macroNames(right), macroNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been added\", v))\n",
                      "markdown": "`\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been added\", v))\n\t\t}\n\t}\n\tdiff = diffStrSet(macroNames(right), macroNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Macro `%s` has been added\", v))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 16,
                  "endLine": 283,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t// Adding one or more lists, macros, or rules\n\tdiff := diffStrSet(ruleNames(right), ruleNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been added\", v))\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t// Adding one or more lists, macros, or rules\n\tdiff := diffStrSet(ruleNames(right), ruleNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been added\", v))\n\t\t}\n\t}\n",
                      "markdown": "`\t// Adding one or more lists, macros, or rules\n\tdiff := diffStrSet(ruleNames(right), ruleNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been added\", v))\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/compare.go"
                },
                "region": {
                  "startLine": 281,
                  "endLine": 281,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t}\n\n\t// Adding one or more lists, macros, or rules\n\tdiff := diffStrSet(ruleNames(right), ruleNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been added\", v))\n",
                    "rendered": {
                      "text": "\t}\n\n\t// Adding one or more lists, macros, or rules\n\tdiff := diffStrSet(ruleNames(right), ruleNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been added\", v))\n",
                      "markdown": "`\t}\n\n\t// Adding one or more lists, macros, or rules\n\tdiff := diffStrSet(ruleNames(right), ruleNames(left))\n\tif len(diff) > 0 {\n\t\tfor v := range diff {\n\t\t\tres = append(res, fmt.Sprintf(\"Rule `%s` has been added\", v))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/validate.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 38,
                  "endLine": 43,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t}\n\n\t\tif len(rulesFilesPaths) == 0 {\n\t\t\treturn fmt.Errorf(\"you must specify at least one rules file\")\n\t\t}\n\n\t\tvar ruleFiles []run.FileAccessor\n",
                    "rendered": {
                      "text": "\t\t}\n\n\t\tif len(rulesFilesPaths) == 0 {\n\t\t\treturn fmt.Errorf(\"you must specify at least one rules file\")\n\t\t}\n\n\t\tvar ruleFiles []run.FileAccessor\n",
                      "markdown": "`\t\t}\n\n\t\tif len(rulesFilesPaths) == 0 {\n\t\t\treturn fmt.Errorf(\"you must specify at least one rules file\")\n\t\t}\n\n\t\tvar ruleFiles []run.FileAccessor\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/validate.go"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 7,
                  "endLine": 19,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"fmt\"\n\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"fmt\"\n\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"fmt\"\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/common_test.go"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 7,
                  "endLine": 19,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"testing\"\n\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"testing\"\n\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"testing\"\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/common.go"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 7,
                  "endLine": 19,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"math\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"math\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"math\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/checker/cmd/root.go"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 7,
                  "endLine": 19,
                  "snippet": {
                    "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/sirupsen/logrus\"\n\t\"github.com/spf13/cobra\"\n",
                    "rendered": {
                      "text": "limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/sirupsen/logrus\"\n\t\"github.com/spf13/cobra\"\n",
                      "markdown": "`limitations under the License.\n*/\n\npackage cmd\n\nimport (\n\t\"github.com/sirupsen/logrus\"\n\t\"github.com/spf13/cobra\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/workflows/pages.yaml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 12,
                  "endLine": 37,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        run: |\n          sed -i '1s/^/---\\nhide:\\n- toc\\n---\\n\\n/' docs/index.md\n\n      - run: pip install mkdocs mkdocs-material\n\n      - run: mkdocs build\n\n",
                    "rendered": {
                      "text": "        run: |\n          sed -i '1s/^/---\\nhide:\\n- toc\\n---\\n\\n/' docs/index.md\n\n      - run: pip install mkdocs mkdocs-material\n\n      - run: mkdocs build\n\n",
                      "markdown": "`        run: |\n          sed -i '1s/^/---\\nhide:\\n- toc\\n---\\n\\n/' docs/index.md\n\n      - run: pip install mkdocs mkdocs-material\n\n      - run: mkdocs build\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/workflows/pages.yaml"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 9,
                  "endLine": 35,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n      - name: Disable Table Of Content for overview\n        run: |\n          sed -i '1s/^/---\\nhide:\\n- toc\\n---\\n\\n/' docs/index.md\n\n      - run: pip install mkdocs mkdocs-material\n\n",
                    "rendered": {
                      "text": "\n      - name: Disable Table Of Content for overview\n        run: |\n          sed -i '1s/^/---\\nhide:\\n- toc\\n---\\n\\n/' docs/index.md\n\n      - run: pip install mkdocs mkdocs-material\n\n",
                      "markdown": "`\n      - name: Disable Table Of Content for overview\n        run: |\n          sed -i '1s/^/---\\nhide:\\n- toc\\n---\\n\\n/' docs/index.md\n\n      - run: pip install mkdocs mkdocs-material\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/workflows/pages.yaml"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 9,
                  "endLine": 30,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n      - name: Generate updated inventory\n        run: |\n          pip install -r .github/scripts/requirements.txt\n          python .github/scripts/rules_overview_generator.py --rules_dir=rules > docs/index.md\n\n      - name: Disable Table Of Content for overview\n",
                    "rendered": {
                      "text": "\n      - name: Generate updated inventory\n        run: |\n          pip install -r .github/scripts/requirements.txt\n          python .github/scripts/rules_overview_generator.py --rules_dir=rules > docs/index.md\n\n      - name: Disable Table Of Content for overview\n",
                      "markdown": "`\n      - name: Generate updated inventory\n        run: |\n          pip install -r .github/scripts/requirements.txt\n          python .github/scripts/rules_overview_generator.py --rules_dir=rules > docs/index.md\n\n      - name: Disable Table Of Content for overview\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.github/workflows/release.yaml"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 84,
                  "endLine": 64,
                  "endColumn": 92,
                  "snippet": {
                    "text": "        uses: sigstore/cosign-installer@v3.7.0\n\n      - name: Login with cosign\n        run: cosign login $OCI_REGISTRY --username ${{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Sign the images with GitHub OIDC Token\n        run: cosign sign --yes ${{ steps.oci_build.outputs.ARTIFACT_REPO_DIGEST }}\n",
                    "rendered": {
                      "text": "        uses: sigstore/cosign-installer@v3.7.0\n\n      - name: Login with cosign\n        run: cosign login $OCI_REGISTRY --username ${{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Sign the images with GitHub OIDC Token\n        run: cosign sign --yes ${{ steps.oci_build.outputs.ARTIFACT_REPO_DIGEST }}\n",
                      "markdown": "`        uses: sigstore/cosign-installer@v3.7.0\n\n      - name: Login with cosign\n        run: cosign login $OCI_REGISTRY --username ${{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Sign the images with GitHub OIDC Token\n        run: cosign sign --yes ${{ steps.oci_build.outputs.ARTIFACT_REPO_DIGEST }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/archive/application_rules.yaml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 38,
                  "endLine": 9,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/archive/application_rules.yaml"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 39,
                  "endLine": 182,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# - rule: Mysql unexpected network inbound traffic\n#   desc: inbound network traffic to mysql on a port other than the standard ports\n#   condition: user.name = mysql and inbound and fd.sport != 3306\n#   output: \"Inbound network traffic to MySQL on unexpected port (connection=%fd.name)\"\n#   priority: WARNING\n\n# - rule: HTTP server unexpected network inbound traffic\n",
                    "rendered": {
                      "text": "# - rule: Mysql unexpected network inbound traffic\n#   desc: inbound network traffic to mysql on a port other than the standard ports\n#   condition: user.name = mysql and inbound and fd.sport != 3306\n#   output: \"Inbound network traffic to MySQL on unexpected port (connection=%fd.name)\"\n#   priority: WARNING\n\n# - rule: HTTP server unexpected network inbound traffic\n",
                      "markdown": "`# - rule: Mysql unexpected network inbound traffic\n#   desc: inbound network traffic to mysql on a port other than the standard ports\n#   condition: user.name = mysql and inbound and fd.sport != 3306\n#   output: \"Inbound network traffic to MySQL on unexpected port (connection=%fd.name)\"\n#   priority: WARNING\n\n# - rule: HTTP server unexpected network inbound traffic\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/archive/application_rules.yaml"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 26,
                  "endLine": 181,
                  "endColumn": 33,
                  "snippet": {
                    "text": "# MySQL ports\n# - rule: Mysql unexpected network inbound traffic\n#   desc: inbound network traffic to mysql on a port other than the standard ports\n#   condition: user.name = mysql and inbound and fd.sport != 3306\n#   output: \"Inbound network traffic to MySQL on unexpected port (connection=%fd.name)\"\n#   priority: WARNING\n\n",
                    "rendered": {
                      "text": "# MySQL ports\n# - rule: Mysql unexpected network inbound traffic\n#   desc: inbound network traffic to mysql on a port other than the standard ports\n#   condition: user.name = mysql and inbound and fd.sport != 3306\n#   output: \"Inbound network traffic to MySQL on unexpected port (connection=%fd.name)\"\n#   priority: WARNING\n\n",
                      "markdown": "`# MySQL ports\n# - rule: Mysql unexpected network inbound traffic\n#   desc: inbound network traffic to mysql on a port other than the standard ports\n#   condition: user.name = mysql and inbound and fd.sport != 3306\n#   output: \"Inbound network traffic to MySQL on unexpected port (connection=%fd.name)\"\n#   priority: WARNING\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/archive/application_rules.yaml"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 36,
                  "endLine": 180,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n# MySQL ports\n# - rule: Mysql unexpected network inbound traffic\n#   desc: inbound network traffic to mysql on a port other than the standard ports\n#   condition: user.name = mysql and inbound and fd.sport != 3306\n#   output: \"Inbound network traffic to MySQL on unexpected port (connection=%fd.name)\"\n#   priority: WARNING\n",
                    "rendered": {
                      "text": "\n# MySQL ports\n# - rule: Mysql unexpected network inbound traffic\n#   desc: inbound network traffic to mysql on a port other than the standard ports\n#   condition: user.name = mysql and inbound and fd.sport != 3306\n#   output: \"Inbound network traffic to MySQL on unexpected port (connection=%fd.name)\"\n#   priority: WARNING\n",
                      "markdown": "`\n# MySQL ports\n# - rule: Mysql unexpected network inbound traffic\n#   desc: inbound network traffic to mysql on a port other than the standard ports\n#   condition: user.name = mysql and inbound and fd.sport != 3306\n#   output: \"Inbound network traffic to MySQL on unexpected port (connection=%fd.name)\"\n#   priority: WARNING\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/archive/application_rules.yaml"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 9,
                  "endLine": 179,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#   priority: WARNING\n\n# MySQL ports\n# - rule: Mysql unexpected network inbound traffic\n#   desc: inbound network traffic to mysql on a port other than the standard ports\n#   condition: user.name = mysql and inbound and fd.sport != 3306\n#   output: \"Inbound network traffic to MySQL on unexpected port (connection=%fd.name)\"\n",
                    "rendered": {
                      "text": "#   priority: WARNING\n\n# MySQL ports\n# - rule: Mysql unexpected network inbound traffic\n#   desc: inbound network traffic to mysql on a port other than the standard ports\n#   condition: user.name = mysql and inbound and fd.sport != 3306\n#   output: \"Inbound network traffic to MySQL on unexpected port (connection=%fd.name)\"\n",
                      "markdown": "`#   priority: WARNING\n\n# MySQL ports\n# - rule: Mysql unexpected network inbound traffic\n#   desc: inbound network traffic to mysql on a port other than the standard ports\n#   condition: user.name = mysql and inbound and fd.sport != 3306\n#   output: \"Inbound network traffic to MySQL on unexpected port (connection=%fd.name)\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/archive/application_rules.yaml"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 1,
                  "endLine": 178,
                  "endColumn": 8,
                  "snippet": {
                    "text": "#   output: \"Inbound network traffic to MongoDB on unexpected port (connection=%fd.name)\"\n#   priority: WARNING\n\n# MySQL ports\n# - rule: Mysql unexpected network inbound traffic\n#   desc: inbound network traffic to mysql on a port other than the standard ports\n#   condition: user.name = mysql and inbound and fd.sport != 3306\n",
                    "rendered": {
                      "text": "#   output: \"Inbound network traffic to MongoDB on unexpected port (connection=%fd.name)\"\n#   priority: WARNING\n\n# MySQL ports\n# - rule: Mysql unexpected network inbound traffic\n#   desc: inbound network traffic to mysql on a port other than the standard ports\n#   condition: user.name = mysql and inbound and fd.sport != 3306\n",
                      "markdown": "`#   output: \"Inbound network traffic to MongoDB on unexpected port (connection=%fd.name)\"\n#   priority: WARNING\n\n# MySQL ports\n# - rule: Mysql unexpected network inbound traffic\n#   desc: inbound network traffic to mysql on a port other than the standard ports\n#   condition: user.name = mysql and inbound and fd.sport != 3306\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1255,
                  "startColumn": 29,
                  "endLine": 1255,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    and (user_ssh_directory or fd.name startswith /root/.ssh)\n    and fd.name endswith authorized_keys\n    and not proc.name in (ssh_binaries)\n  output: Adding ssh keys to authorized_keys (file=%fd.name evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty)\n  priority: WARNING\n  tags: [maturity_incubating, host, filesystem, mitre_persistence, T1098.004]\n\n",
                    "rendered": {
                      "text": "    and (user_ssh_directory or fd.name startswith /root/.ssh)\n    and fd.name endswith authorized_keys\n    and not proc.name in (ssh_binaries)\n  output: Adding ssh keys to authorized_keys (file=%fd.name evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty)\n  priority: WARNING\n  tags: [maturity_incubating, host, filesystem, mitre_persistence, T1098.004]\n\n",
                      "markdown": "`    and (user_ssh_directory or fd.name startswith /root/.ssh)\n    and fd.name endswith authorized_keys\n    and not proc.name in (ssh_binaries)\n  output: Adding ssh keys to authorized_keys (file=%fd.name evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty)\n  priority: WARNING\n  tags: [maturity_incubating, host, filesystem, mitre_persistence, T1098.004]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1253,
                  "startColumn": 25,
                  "endLine": 1253,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  condition: >\n    open_write\n    and (user_ssh_directory or fd.name startswith /root/.ssh)\n    and fd.name endswith authorized_keys\n    and not proc.name in (ssh_binaries)\n  output: Adding ssh keys to authorized_keys (file=%fd.name evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty)\n  priority: WARNING\n",
                    "rendered": {
                      "text": "  condition: >\n    open_write\n    and (user_ssh_directory or fd.name startswith /root/.ssh)\n    and fd.name endswith authorized_keys\n    and not proc.name in (ssh_binaries)\n  output: Adding ssh keys to authorized_keys (file=%fd.name evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty)\n  priority: WARNING\n",
                      "markdown": "`  condition: >\n    open_write\n    and (user_ssh_directory or fd.name startswith /root/.ssh)\n    and fd.name endswith authorized_keys\n    and not proc.name in (ssh_binaries)\n  output: Adding ssh keys to authorized_keys (file=%fd.name evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty)\n  priority: WARNING\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1252,
                  "startColumn": 56,
                  "endLine": 1252,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    by specifically detecting the writing of new, potentially attacker-provided keys.\n  condition: >\n    open_write\n    and (user_ssh_directory or fd.name startswith /root/.ssh)\n    and fd.name endswith authorized_keys\n    and not proc.name in (ssh_binaries)\n  output: Adding ssh keys to authorized_keys (file=%fd.name evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty)\n",
                    "rendered": {
                      "text": "    by specifically detecting the writing of new, potentially attacker-provided keys.\n  condition: >\n    open_write\n    and (user_ssh_directory or fd.name startswith /root/.ssh)\n    and fd.name endswith authorized_keys\n    and not proc.name in (ssh_binaries)\n  output: Adding ssh keys to authorized_keys (file=%fd.name evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty)\n",
                      "markdown": "`    by specifically detecting the writing of new, potentially attacker-provided keys.\n  condition: >\n    open_write\n    and (user_ssh_directory or fd.name startswith /root/.ssh)\n    and fd.name endswith authorized_keys\n    and not proc.name in (ssh_binaries)\n  output: Adding ssh keys to authorized_keys (file=%fd.name evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1247,
                  "startColumn": 113,
                  "endLine": 1247,
                  "endColumn": 117,
                  "snippet": {
                    "text": "es are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under the .ssh\n    directory in any user's home directory. This rule complements the more generic auditing rule \"Read ssh information\"\n    by specifically detecting the writing of new, potentially attacker-provided keys.\n  condition: >\n    open_write\n    and (user_ssh_directory or fd.name startswith /root/.ssh)\n ",
                    "rendered": {
                      "text": "es are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under the .ssh\n    directory in any user's home directory. This rule complements the more generic auditing rule \"Read ssh information\"\n    by specifically detecting the writing of new, potentially attacker-provided keys.\n  condition: >\n    open_write\n    and (user_ssh_directory or fd.name startswith /root/.ssh)\n ",
                      "markdown": "`es are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under the .ssh\n    directory in any user's home directory. This rule complements the more generic auditing rule \"Read ssh information\"\n    by specifically detecting the writing of new, potentially attacker-provided keys.\n  condition: >\n    open_write\n    and (user_ssh_directory or fd.name startswith /root/.ssh)\n `"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1247,
                  "startColumn": 57,
                  "endLine": 1247,
                  "endColumn": 72,
                  "snippet": {
                    "text": "sistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under the .ssh\n    directory in any user's home directory. This rule complements the more generic auditing rule \"Read ssh information\"\n    by specifically detecting the writing of new, potentially attacker-provided keys.\n  condition: >\n    open_write\n    and (user_ssh_",
                    "rendered": {
                      "text": "sistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under the .ssh\n    directory in any user's home directory. This rule complements the more generic auditing rule \"Read ssh information\"\n    by specifically detecting the writing of new, potentially attacker-provided keys.\n  condition: >\n    open_write\n    and (user_ssh_",
                      "markdown": "`sistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under the .ssh\n    directory in any user's home directory. This rule complements the more generic auditing rule \"Read ssh information\"\n    by specifically detecting the writing of new, potentially attacker-provided keys.\n  condition: >\n    open_write\n    and (user_ssh_`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1245,
                  "startColumn": 10,
                  "endLine": 1245,
                  "endColumn": 25,
                  "snippet": {
                    "text": ".tty %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, container, filesystem, mitre_exfiltration, TA0010]\n\n- rule: Adding ssh keys to authorized_keys\n  desc: >\n    After gaining access, attackers can modify the authorized_keys file to maintain persistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under ",
                    "rendered": {
                      "text": ".tty %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, container, filesystem, mitre_exfiltration, TA0010]\n\n- rule: Adding ssh keys to authorized_keys\n  desc: >\n    After gaining access, attackers can modify the authorized_keys file to maintain persistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under ",
                      "markdown": "`.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, container, filesystem, mitre_exfiltration, TA0010]\n\n- rule: Adding ssh keys to authorized_keys\n  desc: >\n    After gaining access, attackers can modify the authorized_keys file to maintain persistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under `"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1244,
                  "startColumn": 51,
                  "endLine": 1244,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n- rule: Adding ssh keys to authorized_keys\n  desc: >\n    After gaining access, attackers can modify the authorized_keys file to maintain persistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under the .ssh\n",
                    "rendered": {
                      "text": "\n- rule: Adding ssh keys to authorized_keys\n  desc: >\n    After gaining access, attackers can modify the authorized_keys file to maintain persistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under the .ssh\n",
                      "markdown": "`\n- rule: Adding ssh keys to authorized_keys\n  desc: >\n    After gaining access, attackers can modify the authorized_keys file to maintain persistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under the .ssh\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1242,
                  "startColumn": 27,
                  "endLine": 1242,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  priority: NOTICE\n  tags: [maturity_incubating, container, filesystem, mitre_exfiltration, TA0010]\n\n- rule: Adding ssh keys to authorized_keys\n  desc: >\n    After gaining access, attackers can modify the authorized_keys file to maintain persistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n",
                    "rendered": {
                      "text": "  priority: NOTICE\n  tags: [maturity_incubating, container, filesystem, mitre_exfiltration, TA0010]\n\n- rule: Adding ssh keys to authorized_keys\n  desc: >\n    After gaining access, attackers can modify the authorized_keys file to maintain persistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n",
                      "markdown": "`  priority: NOTICE\n  tags: [maturity_incubating, container, filesystem, mitre_exfiltration, TA0010]\n\n- rule: Adding ssh keys to authorized_keys\n  desc: >\n    After gaining access, attackers can modify the authorized_keys file to maintain persistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 814,
                  "startColumn": 59,
                  "endLine": 814,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n- rule: User mgmt binaries\n  desc: >\n    Detect activity by any programs that can manage users, passwords, or permissions (such as login, systemd, usermod, deluser, adduser, \n    chpasswd, and others). sudo and su are excluded. Activity in containers is also excluded -- some containers create custom users on \n    top of a base linux distribution at startup. Some innocuous command lines that don't actually change anything are excluded. You might \n    want to consider applying this rule to container actions as well.\n",
                    "rendered": {
                      "text": "\n- rule: User mgmt binaries\n  desc: >\n    Detect activity by any programs that can manage users, passwords, or permissions (such as login, systemd, usermod, deluser, adduser, \n    chpasswd, and others). sudo and su are excluded. Activity in containers is also excluded -- some containers create custom users on \n    top of a base linux distribution at startup. Some innocuous command lines that don't actually change anything are excluded. You might \n    want to consider applying this rule to container actions as well.\n",
                      "markdown": "`\n- rule: User mgmt binaries\n  desc: >\n    Detect activity by any programs that can manage users, passwords, or permissions (such as login, systemd, usermod, deluser, adduser, \n    chpasswd, and others). sudo and su are excluded. Activity in containers is also excluded -- some containers create custom users on \n    top of a base linux distribution at startup. Some innocuous command lines that don't actually change anything are excluded. You might \n    want to consider applying this rule to container actions as well.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 57,
                  "endLine": 377,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    limit it to interactive access only.\n  condition: >\n    (open_read or open_directory) \n     and (user_ssh_directory or fd.name startswith /root/.ssh)\n     and not user_known_read_ssh_information_activities \n     and not proc.name in (ssh_binaries)\n  output: ssh-related file/directory read by non-ssh program (file=%fd.name pcmdline=%proc.pcmdline evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n",
                    "rendered": {
                      "text": "    limit it to interactive access only.\n  condition: >\n    (open_read or open_directory) \n     and (user_ssh_directory or fd.name startswith /root/.ssh)\n     and not user_known_read_ssh_information_activities \n     and not proc.name in (ssh_binaries)\n  output: ssh-related file/directory read by non-ssh program (file=%fd.name pcmdline=%proc.pcmdline evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n",
                      "markdown": "`    limit it to interactive access only.\n  condition: >\n    (open_read or open_directory) \n     and (user_ssh_directory or fd.name startswith /root/.ssh)\n     and not user_known_read_ssh_information_activities \n     and not proc.name in (ssh_binaries)\n  output: ssh-related file/directory read by non-ssh program (file=%fd.name pcmdline=%proc.pcmdline evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 66,
                  "endLine": 360,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    and proc.pname in (dockerd, docker, dockerd-current, docker-current))\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n# The rule below is disabled by default as many system management tools\n# like ansible, etc can read these files/paths. Enable it using this macro.\n",
                    "rendered": {
                      "text": "    and proc.pname in (dockerd, docker, dockerd-current, docker-current))\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n# The rule below is disabled by default as many system management tools\n# like ansible, etc can read these files/paths. Enable it using this macro.\n",
                      "markdown": "`    and proc.pname in (dockerd, docker, dockerd-current, docker-current))\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n# The rule below is disabled by default as many system management tools\n# like ansible, etc can read these files/paths. Enable it using this macro.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 33,
                  "endLine": 360,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    and proc.pname in (dockerd, docker, dockerd-current, docker-current))\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n# The rule below is disabled by default as many system management tools\n# like ansible, etc can read these files/paths. Enable it using this macro.\n",
                    "rendered": {
                      "text": "    and proc.pname in (dockerd, docker, dockerd-current, docker-current))\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n# The rule below is disabled by default as many system management tools\n# like ansible, etc can read these files/paths. Enable it using this macro.\n",
                      "markdown": "`    and proc.pname in (dockerd, docker, dockerd-current, docker-current))\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n# The rule below is disabled by default as many system management tools\n# like ansible, etc can read these files/paths. Enable it using this macro.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1192,
                  "startColumn": 4,
                  "endLine": 1192,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  desc: > \n    An attempt to read process environment variables from /proc files. The consequences are akin to accessing traditional \n    sensitive files, as sensitive data, including secrets, might be stored in environment variables. Understanding your \n    environment, such as identifying critical namespaces, and incorporating extra filtering statements to alert exclusively \n    for those, can enhance the rule's effectiveness.\n  condition: >\n    open_read \n",
                    "rendered": {
                      "text": "  desc: > \n    An attempt to read process environment variables from /proc files. The consequences are akin to accessing traditional \n    sensitive files, as sensitive data, including secrets, might be stored in environment variables. Understanding your \n    environment, such as identifying critical namespaces, and incorporating extra filtering statements to alert exclusively \n    for those, can enhance the rule's effectiveness.\n  condition: >\n    open_read \n",
                      "markdown": "`  desc: > \n    An attempt to read process environment variables from /proc files. The consequences are akin to accessing traditional \n    sensitive files, as sensitive data, including secrets, might be stored in environment variables. Understanding your \n    environment, such as identifying critical namespaces, and incorporating extra filtering statements to alert exclusively \n    for those, can enhance the rule's effectiveness.\n  condition: >\n    open_read \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1190,
                  "startColumn": 31,
                  "endLine": 1190,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\n- rule: Read environment variable from /proc files\n  desc: > \n    An attempt to read process environment variables from /proc files. The consequences are akin to accessing traditional \n    sensitive files, as sensitive data, including secrets, might be stored in environment variables. Understanding your \n    environment, such as identifying critical namespaces, and incorporating extra filtering statements to alert exclusively \n    for those, can enhance the rule's effectiveness.\n",
                    "rendered": {
                      "text": "\n- rule: Read environment variable from /proc files\n  desc: > \n    An attempt to read process environment variables from /proc files. The consequences are akin to accessing traditional \n    sensitive files, as sensitive data, including secrets, might be stored in environment variables. Understanding your \n    environment, such as identifying critical namespaces, and incorporating extra filtering statements to alert exclusively \n    for those, can enhance the rule's effectiveness.\n",
                      "markdown": "`\n- rule: Read environment variable from /proc files\n  desc: > \n    An attempt to read process environment variables from /proc files. The consequences are akin to accessing traditional \n    sensitive files, as sensitive data, including secrets, might be stored in environment variables. Understanding your \n    environment, such as identifying critical namespaces, and incorporating extra filtering statements to alert exclusively \n    for those, can enhance the rule's effectiveness.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000703"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Username)",
            "id": "BD000703"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 34,
                  "endLine": 97,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  items: [\n    truncate, sha1sum, numfmt, fmt, fold, uniq, cut, who,\n    groups, csplit, sort, expand, printf, printenv, unlink, tee, chcon, stat,\n    basename, split, nice, \"yes\", whoami, sha224sum, hostid, users, stdbuf,\n    base64, unexpand, cksum, od, paste, nproc, pathchk, sha256sum, wc, test,\n    comm, arch, du, factor, sha512sum, md5sum, tr, runcon, env, dirname,\n    tsort, join, shuf, install, logname, pinky, nohup, expr, pr, tty, timeout,\n",
                    "rendered": {
                      "text": "  items: [\n    truncate, sha1sum, numfmt, fmt, fold, uniq, cut, who,\n    groups, csplit, sort, expand, printf, printenv, unlink, tee, chcon, stat,\n    basename, split, nice, \"yes\", whoami, sha224sum, hostid, users, stdbuf,\n    base64, unexpand, cksum, od, paste, nproc, pathchk, sha256sum, wc, test,\n    comm, arch, du, factor, sha512sum, md5sum, tr, runcon, env, dirname,\n    tsort, join, shuf, install, logname, pinky, nohup, expr, pr, tty, timeout,\n",
                      "markdown": "`  items: [\n    truncate, sha1sum, numfmt, fmt, fold, uniq, cut, who,\n    groups, csplit, sort, expand, printf, printenv, unlink, tee, chcon, stat,\n    basename, split, nice, \"yes\", whoami, sha224sum, hostid, users, stdbuf,\n    base64, unexpand, cksum, od, paste, nproc, pathchk, sha256sum, wc, test,\n    comm, arch, du, factor, sha512sum, md5sum, tr, runcon, env, dirname,\n    tsort, join, shuf, install, logname, pinky, nohup, expr, pr, tty, timeout,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 20,
                  "endLine": 46,
                  "endColumn": 28,
                  "snippet": {
                    "text": "# to true and does nothing, the perfect empty template for `logical` cases as opposed to list templates.\n# When tuning the rule you can override the macro with something useful, e.g.\n# - macro: allowed_ssh_hosts\n#   condition: (evt.hostname contains xyz)\n- macro: never_true\n  condition: (evt.num=0)\n\n",
                    "rendered": {
                      "text": "# to true and does nothing, the perfect empty template for `logical` cases as opposed to list templates.\n# When tuning the rule you can override the macro with something useful, e.g.\n# - macro: allowed_ssh_hosts\n#   condition: (evt.hostname contains xyz)\n- macro: never_true\n  condition: (evt.num=0)\n\n",
                      "markdown": "`# to true and does nothing, the perfect empty template for `logical` cases as opposed to list templates.\n# When tuning the rule you can override the macro with something useful, e.g.\n# - macro: allowed_ssh_hosts\n#   condition: (evt.hostname contains xyz)\n- macro: never_true\n  condition: (evt.num=0)\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 4,
                  "endLine": 98,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    truncate, sha1sum, numfmt, fmt, fold, uniq, cut, who,\n    groups, csplit, sort, expand, printf, printenv, unlink, tee, chcon, stat,\n    basename, split, nice, \"yes\", whoami, sha224sum, hostid, users, stdbuf,\n    base64, unexpand, cksum, od, paste, nproc, pathchk, sha256sum, wc, test,\n    comm, arch, du, factor, sha512sum, md5sum, tr, runcon, env, dirname,\n    tsort, join, shuf, install, logname, pinky, nohup, expr, pr, tty, timeout,\n    tail, \"[\", seq, sha384sum, nl, head, id, mkfifo, sum, dircolors, ptx, shred,\n",
                    "rendered": {
                      "text": "    truncate, sha1sum, numfmt, fmt, fold, uniq, cut, who,\n    groups, csplit, sort, expand, printf, printenv, unlink, tee, chcon, stat,\n    basename, split, nice, \"yes\", whoami, sha224sum, hostid, users, stdbuf,\n    base64, unexpand, cksum, od, paste, nproc, pathchk, sha256sum, wc, test,\n    comm, arch, du, factor, sha512sum, md5sum, tr, runcon, env, dirname,\n    tsort, join, shuf, install, logname, pinky, nohup, expr, pr, tty, timeout,\n    tail, \"[\", seq, sha384sum, nl, head, id, mkfifo, sum, dircolors, ptx, shred,\n",
                      "markdown": "`    truncate, sha1sum, numfmt, fmt, fold, uniq, cut, who,\n    groups, csplit, sort, expand, printf, printenv, unlink, tee, chcon, stat,\n    basename, split, nice, \"yes\", whoami, sha224sum, hostid, users, stdbuf,\n    base64, unexpand, cksum, od, paste, nproc, pathchk, sha256sum, wc, test,\n    comm, arch, du, factor, sha512sum, md5sum, tr, runcon, env, dirname,\n    tsort, join, shuf, install, logname, pinky, nohup, expr, pr, tty, timeout,\n    tail, \"[\", seq, sha384sum, nl, head, id, mkfifo, sum, dircolors, ptx, shred,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1247,
                  "startColumn": 19,
                  "endLine": 1247,
                  "endColumn": 23,
                  "snippet": {
                    "text": "e authorized_keys file to maintain persistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under the .ssh\n    directory in any user's home directory. This rule complements the more generic auditing rule \"Read ssh information\"\n    by specifically detecting the writing of new, potentially attacker-provided keys.",
                    "rendered": {
                      "text": "e authorized_keys file to maintain persistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under the .ssh\n    directory in any user's home directory. This rule complements the more generic auditing rule \"Read ssh information\"\n    by specifically detecting the writing of new, potentially attacker-provided keys.",
                      "markdown": "`e authorized_keys file to maintain persistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under the .ssh\n    directory in any user's home directory. This rule complements the more generic auditing rule \"Read ssh information\"\n    by specifically detecting the writing of new, potentially attacker-provided keys.`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1238,
                  "startColumn": 47,
                  "endLine": 1238,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    and container_entrypoint \n    and proc.tty=0 \n    and not system_level_side_effect_artifacts_kubectl_cp\n  output: Exfiltrating Artifacts via Kubernetes Control Plane (file=%fd.name evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, container, filesystem, mitre_exfiltration, TA0010]\n\n",
                    "rendered": {
                      "text": "    and container_entrypoint \n    and proc.tty=0 \n    and not system_level_side_effect_artifacts_kubectl_cp\n  output: Exfiltrating Artifacts via Kubernetes Control Plane (file=%fd.name evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, container, filesystem, mitre_exfiltration, TA0010]\n\n",
                      "markdown": "`    and container_entrypoint \n    and proc.tty=0 \n    and not system_level_side_effect_artifacts_kubectl_cp\n  output: Exfiltrating Artifacts via Kubernetes Control Plane (file=%fd.name evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, container, filesystem, mitre_exfiltration, TA0010]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1228,
                  "startColumn": 53,
                  "endLine": 1228,
                  "endColumn": 62,
                  "snippet": {
                    "text": "  desc: >\n    Detect the copying of artifacts from a container's file system using the Kubernetes control plane (kubectl cp). \n    This rule can identify potential exfiltration of application secrets from containers' file systems, potentially \n    revealing the outcomes of unauthorized access and control plane misuse via stolen identities (such as stolen \n    credentials like Kubernetes serviceaccount tokens). Can be customized by the adopter to only monitor specific \n    artifact paths, containers, or namespaces as needed.\n  condition: >\n",
                    "rendered": {
                      "text": "  desc: >\n    Detect the copying of artifacts from a container's file system using the Kubernetes control plane (kubectl cp). \n    This rule can identify potential exfiltration of application secrets from containers' file systems, potentially \n    revealing the outcomes of unauthorized access and control plane misuse via stolen identities (such as stolen \n    credentials like Kubernetes serviceaccount tokens). Can be customized by the adopter to only monitor specific \n    artifact paths, containers, or namespaces as needed.\n  condition: >\n",
                      "markdown": "`  desc: >\n    Detect the copying of artifacts from a container's file system using the Kubernetes control plane (kubectl cp). \n    This rule can identify potential exfiltration of application secrets from containers' file systems, potentially \n    revealing the outcomes of unauthorized access and control plane misuse via stolen identities (such as stolen \n    credentials like Kubernetes serviceaccount tokens). Can be customized by the adopter to only monitor specific \n    artifact paths, containers, or namespaces as needed.\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1226,
                  "startColumn": 87,
                  "endLine": 1226,
                  "endColumn": 96,
                  "snippet": {
                    "text": "\n- rule: Exfiltrating Artifacts via Kubernetes Control Plane\n  desc: >\n    Detect the copying of artifacts from a container's file system using the Kubernetes control plane (kubectl cp). \n    This rule can identify potential exfiltration of application secrets from containers' file systems, potentially \n    revealing the outcomes of unauthorized access and control plane misuse via stolen identities (such as stolen \n    credentials like Kubernetes serviceaccount tokens). Can be customized by the adopter to only monitor specific \n",
                    "rendered": {
                      "text": "\n- rule: Exfiltrating Artifacts via Kubernetes Control Plane\n  desc: >\n    Detect the copying of artifacts from a container's file system using the Kubernetes control plane (kubectl cp). \n    This rule can identify potential exfiltration of application secrets from containers' file systems, potentially \n    revealing the outcomes of unauthorized access and control plane misuse via stolen identities (such as stolen \n    credentials like Kubernetes serviceaccount tokens). Can be customized by the adopter to only monitor specific \n",
                      "markdown": "`\n- rule: Exfiltrating Artifacts via Kubernetes Control Plane\n  desc: >\n    Detect the copying of artifacts from a container's file system using the Kubernetes control plane (kubectl cp). \n    This rule can identify potential exfiltration of application secrets from containers' file systems, potentially \n    revealing the outcomes of unauthorized access and control plane misuse via stolen identities (such as stolen \n    credentials like Kubernetes serviceaccount tokens). Can be customized by the adopter to only monitor specific \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1224,
                  "startColumn": 45,
                  "endLine": 1224,
                  "endColumn": 54,
                  "snippet": {
                    "text": "              fd.name startswith /usr or \n              fd.name=\"/\")\n\n- rule: Exfiltrating Artifacts via Kubernetes Control Plane\n  desc: >\n    Detect the copying of artifacts from a container's file system using the Kubernetes control plane (kubectl cp). \n    This rule can identify potential exfiltration of application secrets from containers' file systems, potentially \n",
                    "rendered": {
                      "text": "              fd.name startswith /usr or \n              fd.name=\"/\")\n\n- rule: Exfiltrating Artifacts via Kubernetes Control Plane\n  desc: >\n    Detect the copying of artifacts from a container's file system using the Kubernetes control plane (kubectl cp). \n    This rule can identify potential exfiltration of application secrets from containers' file systems, potentially \n",
                      "markdown": "`              fd.name startswith /usr or \n              fd.name=\"/\")\n\n- rule: Exfiltrating Artifacts via Kubernetes Control Plane\n  desc: >\n    Detect the copying of artifacts from a container's file system using the Kubernetes control plane (kubectl cp). \n    This rule can identify potential exfiltration of application secrets from containers' file systems, potentially \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1209,
                  "startColumn": 9,
                  "endLine": 1209,
                  "endColumn": 13,
                  "snippet": {
                    "text": "# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n",
                    "rendered": {
                      "text": "# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n",
                      "markdown": "`# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1105,
                  "startColumn": 61,
                  "endLine": 1105,
                  "endColumn": 69,
                  "snippet": {
                    "text": "- rule: Network Connection outside Local Subnet\n  desc: > \n    Detect network traffic (inbound or outbound) from a container to a destination outside the local subnet. \n    To operationalize this rule, profile your environment and update the template macro namespace_scope_network_only_subnet. \n    Customizing network-related rules usually demands substantial engineering effort to ensure their functionality.\n  condition: >\n    inbound_outbound \n",
                    "rendered": {
                      "text": "- rule: Network Connection outside Local Subnet\n  desc: > \n    Detect network traffic (inbound or outbound) from a container to a destination outside the local subnet. \n    To operationalize this rule, profile your environment and update the template macro namespace_scope_network_only_subnet. \n    Customizing network-related rules usually demands substantial engineering effort to ensure their functionality.\n  condition: >\n    inbound_outbound \n",
                      "markdown": "`- rule: Network Connection outside Local Subnet\n  desc: > \n    Detect network traffic (inbound or outbound) from a container to a destination outside the local subnet. \n    To operationalize this rule, profile your environment and update the template macro namespace_scope_network_only_subnet. \n    Customizing network-related rules usually demands substantial engineering effort to ensure their functionality.\n  condition: >\n    inbound_outbound \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 853,
                  "startColumn": 34,
                  "endLine": 853,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  desc: > \n    Detect the creation of files under /dev except for authorized device management programs. This can reveal rootkits hiding \n    files in /dev. Additionally, consider the \"Execution from /dev/shm\" rule. The upstream rule already covers some tuning \n    scenarios that you can further expand upon.\n  condition: >\n    (evt.type = creat or (evt.type in (open,openat,openat2)))\n    and evt.arg.flags contains O_CREAT\n",
                    "rendered": {
                      "text": "  desc: > \n    Detect the creation of files under /dev except for authorized device management programs. This can reveal rootkits hiding \n    files in /dev. Additionally, consider the \"Execution from /dev/shm\" rule. The upstream rule already covers some tuning \n    scenarios that you can further expand upon.\n  condition: >\n    (evt.type = creat or (evt.type in (open,openat,openat2)))\n    and evt.arg.flags contains O_CREAT\n",
                      "markdown": "`  desc: > \n    Detect the creation of files under /dev except for authorized device management programs. This can reveal rootkits hiding \n    files in /dev. Additionally, consider the \"Execution from /dev/shm\" rule. The upstream rule already covers some tuning \n    scenarios that you can further expand upon.\n  condition: >\n    (evt.type = creat or (evt.type in (open,openat,openat2)))\n    and evt.arg.flags contains O_CREAT\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 816,
                  "startColumn": 36,
                  "endLine": 816,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  desc: >\n    Detect activity by any programs that can manage users, passwords, or permissions (such as login, systemd, usermod, deluser, adduser, \n    chpasswd, and others). sudo and su are excluded. Activity in containers is also excluded -- some containers create custom users on \n    top of a base linux distribution at startup. Some innocuous command lines that don't actually change anything are excluded. You might \n    want to consider applying this rule to container actions as well.\n  condition: >\n    spawned_process \n",
                    "rendered": {
                      "text": "  desc: >\n    Detect activity by any programs that can manage users, passwords, or permissions (such as login, systemd, usermod, deluser, adduser, \n    chpasswd, and others). sudo and su are excluded. Activity in containers is also excluded -- some containers create custom users on \n    top of a base linux distribution at startup. Some innocuous command lines that don't actually change anything are excluded. You might \n    want to consider applying this rule to container actions as well.\n  condition: >\n    spawned_process \n",
                      "markdown": "`  desc: >\n    Detect activity by any programs that can manage users, passwords, or permissions (such as login, systemd, usermod, deluser, adduser, \n    chpasswd, and others). sudo and su are excluded. Activity in containers is also excluded -- some containers create custom users on \n    top of a base linux distribution at startup. Some innocuous command lines that don't actually change anything are excluded. You might \n    want to consider applying this rule to container actions as well.\n  condition: >\n    spawned_process \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 21,
                  "endLine": 310,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  items: [anacron, cron, crond, crontab]\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n  condition: >\n",
                    "rendered": {
                      "text": "  items: [anacron, cron, crond, crontab]\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n  condition: >\n",
                      "markdown": "`  items: [anacron, cron, crond, crontab]\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 54,
                  "endLine": 309,
                  "endColumn": 58,
                  "snippet": {
                    "text": "- list: cron_binaries\n  items: [anacron, cron, crond, crontab]\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n",
                    "rendered": {
                      "text": "- list: cron_binaries\n  items: [anacron, cron, crond, crontab]\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n",
                      "markdown": "`- list: cron_binaries\n  items: [anacron, cron, crond, crontab]\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 72,
                  "endLine": 256,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\n- rule: Modify Shell Configuration File\n  desc: > \n    Detect attempts to modify shell configuration files, primarily aimed at establishing persistence by automatically inserting \n    commands into scripts executed by shells. The upstream rule excludes shell processes because they often create unnecessary noise.\n    However, this might lead to missed detections. To customize the rule for your situation, you can fine-tune it using enhanced profiling. \n    For example, you might want to only consider interactive shell processes (where proc.tty != 0).\n",
                    "rendered": {
                      "text": "\n- rule: Modify Shell Configuration File\n  desc: > \n    Detect attempts to modify shell configuration files, primarily aimed at establishing persistence by automatically inserting \n    commands into scripts executed by shells. The upstream rule excludes shell processes because they often create unnecessary noise.\n    However, this might lead to missed detections. To customize the rule for your situation, you can fine-tune it using enhanced profiling. \n    For example, you might want to only consider interactive shell processes (where proc.tty != 0).\n",
                      "markdown": "`\n- rule: Modify Shell Configuration File\n  desc: > \n    Detect attempts to modify shell configuration files, primarily aimed at establishing persistence by automatically inserting \n    commands into scripts executed by shells. The upstream rule excludes shell processes because they often create unnecessary noise.\n    However, this might lead to missed detections. To customize the rule for your situation, you can fine-tune it using enhanced profiling. \n    For example, you might want to only consider interactive shell processes (where proc.tty != 0).\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 11,
                  "endLine": 160,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  items: [pip, pip3, conda]\n\n# The truncated dpkg-preconfigu is intentional, process names are\n# truncated at the falcosecurity-libs level.\n- list: package_mgmt_binaries\n  items: [rpm_binaries, deb_binaries, update-alternat, gem, npm, python_package_managers, sane-utils.post, alternatives, chef-client, apk, snapd]\n\n",
                    "rendered": {
                      "text": "  items: [pip, pip3, conda]\n\n# The truncated dpkg-preconfigu is intentional, process names are\n# truncated at the falcosecurity-libs level.\n- list: package_mgmt_binaries\n  items: [rpm_binaries, deb_binaries, update-alternat, gem, npm, python_package_managers, sane-utils.post, alternatives, chef-client, apk, snapd]\n\n",
                      "markdown": "`  items: [pip, pip3, conda]\n\n# The truncated dpkg-preconfigu is intentional, process names are\n# truncated at the falcosecurity-libs level.\n- list: package_mgmt_binaries\n  items: [rpm_binaries, deb_binaries, update-alternat, gem, npm, python_package_managers, sane-utils.post, alternatives, chef-client, apk, snapd]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 38,
                  "endLine": 9,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1279,
                  "startColumn": 70,
                  "endLine": 1279,
                  "endColumn": 75,
                  "snippet": {
                    "text": "  tags: [maturity_incubating, host, container, users, mitre_privilege_escalation, TA0004]\n\n- rule: Backdoored library loaded into SSHD (CVE-2024-3094)\n  desc: This rule detects possible CVE-2024-3094 exploitation when the SSH daemon process loads a vulnerable version of the liblzma library. An attacker could exploit this to interfere with authentication in sshd via systemd, potentially compromising sensitive data or escalating their privileges.\n  condition: > \n    open_read and \n    proc.name=sshd and \n",
                    "rendered": {
                      "text": "  tags: [maturity_incubating, host, container, users, mitre_privilege_escalation, TA0004]\n\n- rule: Backdoored library loaded into SSHD (CVE-2024-3094)\n  desc: This rule detects possible CVE-2024-3094 exploitation when the SSH daemon process loads a vulnerable version of the liblzma library. An attacker could exploit this to interfere with authentication in sshd via systemd, potentially compromising sensitive data or escalating their privileges.\n  condition: > \n    open_read and \n    proc.name=sshd and \n",
                      "markdown": "`  tags: [maturity_incubating, host, container, users, mitre_privilege_escalation, TA0004]\n\n- rule: Backdoored library loaded into SSHD (CVE-2024-3094)\n  desc: This rule detects possible CVE-2024-3094 exploitation when the SSH daemon process loads a vulnerable version of the liblzma library. An attacker could exploit this to interfere with authentication in sshd via systemd, potentially compromising sensitive data or escalating their privileges.\n  condition: > \n    open_read and \n    proc.name=sshd and \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1255,
                  "startColumn": 16,
                  "endLine": 1255,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    and (user_ssh_directory or fd.name startswith /root/.ssh)\n    and fd.name endswith authorized_keys\n    and not proc.name in (ssh_binaries)\n  output: Adding ssh keys to authorized_keys (file=%fd.name evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty)\n  priority: WARNING\n  tags: [maturity_incubating, host, filesystem, mitre_persistence, T1098.004]\n\n",
                    "rendered": {
                      "text": "    and (user_ssh_directory or fd.name startswith /root/.ssh)\n    and fd.name endswith authorized_keys\n    and not proc.name in (ssh_binaries)\n  output: Adding ssh keys to authorized_keys (file=%fd.name evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty)\n  priority: WARNING\n  tags: [maturity_incubating, host, filesystem, mitre_persistence, T1098.004]\n\n",
                      "markdown": "`    and (user_ssh_directory or fd.name startswith /root/.ssh)\n    and fd.name endswith authorized_keys\n    and not proc.name in (ssh_binaries)\n  output: Adding ssh keys to authorized_keys (file=%fd.name evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty)\n  priority: WARNING\n  tags: [maturity_incubating, host, filesystem, mitre_persistence, T1098.004]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1248,
                  "startColumn": 102,
                  "endLine": 1248,
                  "endColumn": 107,
                  "snippet": {
                    "text": "    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under the .ssh\n    directory in any user's home directory. This rule complements the more generic auditing rule \"Read ssh information\"\n    by specifically detecting the writing of new, potentially attacker-provided keys.\n  condition: >\n    open_write\n",
                    "rendered": {
                      "text": "    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under the .ssh\n    directory in any user's home directory. This rule complements the more generic auditing rule \"Read ssh information\"\n    by specifically detecting the writing of new, potentially attacker-provided keys.\n  condition: >\n    open_write\n",
                      "markdown": "`    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n    privilege escalation on the target virtual machine if they add a key to a higher-privileged user.\n    This rules aims at detecting any modification to the authorized_keys file, that is usually located under the .ssh\n    directory in any user's home directory. This rule complements the more generic auditing rule \"Read ssh information\"\n    by specifically detecting the writing of new, potentially attacker-provided keys.\n  condition: >\n    open_write\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1242,
                  "startColumn": 14,
                  "endLine": 1242,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  priority: NOTICE\n  tags: [maturity_incubating, container, filesystem, mitre_exfiltration, TA0010]\n\n- rule: Adding ssh keys to authorized_keys\n  desc: >\n    After gaining access, attackers can modify the authorized_keys file to maintain persistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n",
                    "rendered": {
                      "text": "  priority: NOTICE\n  tags: [maturity_incubating, container, filesystem, mitre_exfiltration, TA0010]\n\n- rule: Adding ssh keys to authorized_keys\n  desc: >\n    After gaining access, attackers can modify the authorized_keys file to maintain persistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n",
                      "markdown": "`  priority: NOTICE\n  tags: [maturity_incubating, container, filesystem, mitre_exfiltration, TA0010]\n\n- rule: Adding ssh keys to authorized_keys\n  desc: >\n    After gaining access, attackers can modify the authorized_keys file to maintain persistence on a victim host.\n    Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1209,
                  "startColumn": 16,
                  "endLine": 1209,
                  "endColumn": 22,
                  "snippet": {
                    "text": "# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n",
                    "rendered": {
                      "text": "# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n",
                      "markdown": "`# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1170,
                  "startColumn": 50,
                  "endLine": 1170,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n- rule: Launch Ingress Remote File Copy Tools in Container\n  desc: > \n    Detect ingress remote file copy tools (such as curl or wget) launched inside containers. This rule can be \n    considered a valuable auditing tool, but it has the potential to generate notable noise and requires careful \n    profiling before full operationalization.\n  condition: >\n",
                    "rendered": {
                      "text": "\n- rule: Launch Ingress Remote File Copy Tools in Container\n  desc: > \n    Detect ingress remote file copy tools (such as curl or wget) launched inside containers. This rule can be \n    considered a valuable auditing tool, but it has the potential to generate notable noise and requires careful \n    profiling before full operationalization.\n  condition: >\n",
                      "markdown": "`\n- rule: Launch Ingress Remote File Copy Tools in Container\n  desc: > \n    Detect ingress remote file copy tools (such as curl or wget) launched inside containers. This rule can be \n    considered a valuable auditing tool, but it has the potential to generate notable noise and requires careful \n    profiling before full operationalization.\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1162,
                  "startColumn": 25,
                  "endLine": 1162,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  condition: (never_true)\n\n- macro: curl_download\n  condition: (proc.name = curl and\n              (proc.cmdline contains \" -o \" or\n              proc.cmdline contains \" --output \" or\n              proc.cmdline contains \" -O \" or\n",
                    "rendered": {
                      "text": "  condition: (never_true)\n\n- macro: curl_download\n  condition: (proc.name = curl and\n              (proc.cmdline contains \" -o \" or\n              proc.cmdline contains \" --output \" or\n              proc.cmdline contains \" -O \" or\n",
                      "markdown": "`  condition: (never_true)\n\n- macro: curl_download\n  condition: (proc.name = curl and\n              (proc.cmdline contains \" -o \" or\n              proc.cmdline contains \" --output \" or\n              proc.cmdline contains \" -O \" or\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1146,
                  "startColumn": 9,
                  "endLine": 1146,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    and not known_gke_mount_in_privileged_containers\n    and not known_aks_mount_in_privileged_containers\n    and not user_known_mount_in_privileged_containers\n  output: Mount was executed inside a privileged container (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority: WARNING\n  tags: [maturity_incubating, container, cis, filesystem, mitre_privilege_escalation, T1611]\n\n",
                    "rendered": {
                      "text": "    and not known_gke_mount_in_privileged_containers\n    and not known_aks_mount_in_privileged_containers\n    and not user_known_mount_in_privileged_containers\n  output: Mount was executed inside a privileged container (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority: WARNING\n  tags: [maturity_incubating, container, cis, filesystem, mitre_privilege_escalation, T1611]\n\n",
                      "markdown": "`    and not known_gke_mount_in_privileged_containers\n    and not known_aks_mount_in_privileged_containers\n    and not user_known_mount_in_privileged_containers\n  output: Mount was executed inside a privileged container (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority: WARNING\n  tags: [maturity_incubating, container, cis, filesystem, mitre_privilege_escalation, T1611]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1134,
                  "startColumn": 39,
                  "endLine": 1134,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n- rule: Mount Launched in Privileged Container\n  desc: > \n    Detect filesystem mounts (using the mount binary) within a privileged container. Due to the elevated privileges, \n    this action could be one of the TTPs used in an attempt to escape from a container to the host. This type of action \n    is often preceded by reconnaissance activities, for which you can also create custom rules.\n  condition: >\n",
                    "rendered": {
                      "text": "\n- rule: Mount Launched in Privileged Container\n  desc: > \n    Detect filesystem mounts (using the mount binary) within a privileged container. Due to the elevated privileges, \n    this action could be one of the TTPs used in an attempt to escape from a container to the host. This type of action \n    is often preceded by reconnaissance activities, for which you can also create custom rules.\n  condition: >\n",
                      "markdown": "`\n- rule: Mount Launched in Privileged Container\n  desc: > \n    Detect filesystem mounts (using the mount binary) within a privileged container. Due to the elevated privileges, \n    this action could be one of the TTPs used in an attempt to escape from a container to the host. This type of action \n    is often preceded by reconnaissance activities, for which you can also create custom rules.\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1132,
                  "startColumn": 7,
                  "endLine": 1132,
                  "endColumn": 14,
                  "snippet": {
                    "text": "- macro: user_known_mount_in_privileged_containers\n  condition: (never_true)\n\n- rule: Mount Launched in Privileged Container\n  desc: > \n    Detect filesystem mounts (using the mount binary) within a privileged container. Due to the elevated privileges, \n    this action could be one of the TTPs used in an attempt to escape from a container to the host. This type of action \n",
                    "rendered": {
                      "text": "- macro: user_known_mount_in_privileged_containers\n  condition: (never_true)\n\n- rule: Mount Launched in Privileged Container\n  desc: > \n    Detect filesystem mounts (using the mount binary) within a privileged container. Due to the elevated privileges, \n    this action could be one of the TTPs used in an attempt to escape from a container to the host. This type of action \n",
                      "markdown": "`- macro: user_known_mount_in_privileged_containers\n  condition: (never_true)\n\n- rule: Mount Launched in Privileged Container\n  desc: > \n    Detect filesystem mounts (using the mount binary) within a privileged container. Due to the elevated privileges, \n    this action could be one of the TTPs used in an attempt to escape from a container to the host. This type of action \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1100,
                  "startColumn": 88,
                  "endLine": 1100,
                  "endColumn": 94,
                  "snippet": {
                    "text": "# # How to test:\n# # Add 'default' to namespace_scope_network_only_subnet\n# # Run:\n# kubectl run --generator=run-pod/v1 -n default -i --tty busybox --image=busybox --rm -- wget google.com -O /var/google.html\n# # Check logs running\n- rule: Network Connection outside Local Subnet\n  desc: > \n",
                    "rendered": {
                      "text": "# # How to test:\n# # Add 'default' to namespace_scope_network_only_subnet\n# # Run:\n# kubectl run --generator=run-pod/v1 -n default -i --tty busybox --image=busybox --rm -- wget google.com -O /var/google.html\n# # Check logs running\n- rule: Network Connection outside Local Subnet\n  desc: > \n",
                      "markdown": "`# # How to test:\n# # Add 'default' to namespace_scope_network_only_subnet\n# # Run:\n# kubectl run --generator=run-pod/v1 -n default -i --tty busybox --image=busybox --rm -- wget google.com -O /var/google.html\n# # Check logs running\n- rule: Network Connection outside Local Subnet\n  desc: > \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1100,
                  "startColumn": 56,
                  "endLine": 1100,
                  "endColumn": 65,
                  "snippet": {
                    "text": "# # How to test:\n# # Add 'default' to namespace_scope_network_only_subnet\n# # Run:\n# kubectl run --generator=run-pod/v1 -n default -i --tty busybox --image=busybox --rm -- wget google.com -O /var/google.html\n# # Check logs running\n- rule: Network Connection outside Local Subnet\n  desc: > \n",
                    "rendered": {
                      "text": "# # How to test:\n# # Add 'default' to namespace_scope_network_only_subnet\n# # Run:\n# kubectl run --generator=run-pod/v1 -n default -i --tty busybox --image=busybox --rm -- wget google.com -O /var/google.html\n# # Check logs running\n- rule: Network Connection outside Local Subnet\n  desc: > \n",
                      "markdown": "`# # How to test:\n# # Add 'default' to namespace_scope_network_only_subnet\n# # Run:\n# kubectl run --generator=run-pod/v1 -n default -i --tty busybox --image=busybox --rm -- wget google.com -O /var/google.html\n# # Check logs running\n- rule: Network Connection outside Local Subnet\n  desc: > \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1057,
                  "startColumn": 41,
                  "endLine": 1057,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    and not proc.name in (user_known_chmod_applications)\n    and not exe_running_docker_save\n    and not user_known_set_setuid_or_setgid_bit_conditions\n  output: Setuid or setgid bit is set via chmod (fd=%evt.arg.fd filename=%evt.arg.filename mode=%evt.arg.mode evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority:\n    NOTICE\n  tags: [maturity_incubating, host, container, process, users, mitre_privilege_escalation, T1548.001]\n",
                    "rendered": {
                      "text": "    and not proc.name in (user_known_chmod_applications)\n    and not exe_running_docker_save\n    and not user_known_set_setuid_or_setgid_bit_conditions\n  output: Setuid or setgid bit is set via chmod (fd=%evt.arg.fd filename=%evt.arg.filename mode=%evt.arg.mode evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority:\n    NOTICE\n  tags: [maturity_incubating, host, container, process, users, mitre_privilege_escalation, T1548.001]\n",
                      "markdown": "`    and not proc.name in (user_known_chmod_applications)\n    and not exe_running_docker_save\n    and not user_known_set_setuid_or_setgid_bit_conditions\n  output: Setuid or setgid bit is set via chmod (fd=%evt.arg.fd filename=%evt.arg.filename mode=%evt.arg.mode evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority:\n    NOTICE\n  tags: [maturity_incubating, host, container, process, users, mitre_privilege_escalation, T1548.001]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 1052,
                  "startColumn": 3,
                  "endLine": 1052,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    an attacker could run code in a different user's context, possibly with elevated privileges. However, there's a trade-off \n    with noise, given that numerous applications legitimately run chmod. This rule is related to the \"Non sudo setuid\" rule.\n  condition: >\n    chmod \n    and (evt.arg.mode contains \"S_ISUID\" or evt.arg.mode contains \"S_ISGID\")\n    and not proc.name in (user_known_chmod_applications)\n    and not exe_running_docker_save\n",
                    "rendered": {
                      "text": "    an attacker could run code in a different user's context, possibly with elevated privileges. However, there's a trade-off \n    with noise, given that numerous applications legitimately run chmod. This rule is related to the \"Non sudo setuid\" rule.\n  condition: >\n    chmod \n    and (evt.arg.mode contains \"S_ISUID\" or evt.arg.mode contains \"S_ISGID\")\n    and not proc.name in (user_known_chmod_applications)\n    and not exe_running_docker_save\n",
                      "markdown": "`    an attacker could run code in a different user's context, possibly with elevated privileges. However, there's a trade-off \n    with noise, given that numerous applications legitimately run chmod. This rule is related to the \"Non sudo setuid\" rule.\n  condition: >\n    chmod \n    and (evt.arg.mode contains \"S_ISUID\" or evt.arg.mode contains \"S_ISGID\")\n    and not proc.name in (user_known_chmod_applications)\n    and not exe_running_docker_save\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 910,
                  "startColumn": 56,
                  "endLine": 910,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    and fd.sip=\"169.254.169.254\" \n    and not user_known_metadata_access\n  enabled: true\n  output: Outbound connection to cloud instance metadata service (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, network, container, mitre_discovery, T1565]\n\n",
                    "rendered": {
                      "text": "    and fd.sip=\"169.254.169.254\" \n    and not user_known_metadata_access\n  enabled: true\n  output: Outbound connection to cloud instance metadata service (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, network, container, mitre_discovery, T1565]\n\n",
                      "markdown": "`    and fd.sip=\"169.254.169.254\" \n    and not user_known_metadata_access\n  enabled: true\n  output: Outbound connection to cloud instance metadata service (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, network, container, mitre_discovery, T1565]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 902,
                  "startColumn": 68,
                  "endLine": 902,
                  "endColumn": 77,
                  "snippet": {
                    "text": "# metadata about the instance. The metadata could be used to get credentials by attackers.\n- rule: Contact cloud metadata service from container\n  desc: > \n    Detects attempts to communicate with the Cloud Instance Metadata Service from a container. This detection is narrowly focused \n    and might not apply to your environment. In addition, it could generate noise and require fine-tuning.\n  condition: > \n    outbound \n",
                    "rendered": {
                      "text": "# metadata about the instance. The metadata could be used to get credentials by attackers.\n- rule: Contact cloud metadata service from container\n  desc: > \n    Detects attempts to communicate with the Cloud Instance Metadata Service from a container. This detection is narrowly focused \n    and might not apply to your environment. In addition, it could generate noise and require fine-tuning.\n  condition: > \n    outbound \n",
                      "markdown": "`# metadata about the instance. The metadata could be used to get credentials by attackers.\n- rule: Contact cloud metadata service from container\n  desc: > \n    Detects attempts to communicate with the Cloud Instance Metadata Service from a container. This detection is narrowly focused \n    and might not apply to your environment. In addition, it could generate noise and require fine-tuning.\n  condition: > \n    outbound \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 900,
                  "startColumn": 30,
                  "endLine": 900,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n# On GCP, AWS and Azure, 169.254.169.254 is a special IP used to fetch\n# metadata about the instance. The metadata could be used to get credentials by attackers.\n- rule: Contact cloud metadata service from container\n  desc: > \n    Detects attempts to communicate with the Cloud Instance Metadata Service from a container. This detection is narrowly focused \n    and might not apply to your environment. In addition, it could generate noise and require fine-tuning.\n",
                    "rendered": {
                      "text": "\n# On GCP, AWS and Azure, 169.254.169.254 is a special IP used to fetch\n# metadata about the instance. The metadata could be used to get credentials by attackers.\n- rule: Contact cloud metadata service from container\n  desc: > \n    Detects attempts to communicate with the Cloud Instance Metadata Service from a container. This detection is narrowly focused \n    and might not apply to your environment. In addition, it could generate noise and require fine-tuning.\n",
                      "markdown": "`\n# On GCP, AWS and Azure, 169.254.169.254 is a special IP used to fetch\n# metadata about the instance. The metadata could be used to get credentials by attackers.\n- rule: Contact cloud metadata service from container\n  desc: > \n    Detects attempts to communicate with the Cloud Instance Metadata Service from a container. This detection is narrowly focused \n    and might not apply to your environment. In addition, it could generate noise and require fine-tuning.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 898,
                  "startColumn": 53,
                  "endLine": 898,
                  "endColumn": 57,
                  "snippet": {
                    "text": "- macro: user_known_metadata_access\n  condition: (k8s.ns.name = \"kube-system\")\n\n# On GCP, AWS and Azure, 169.254.169.254 is a special IP used to fetch\n# metadata about the instance. The metadata could be used to get credentials by attackers.\n- rule: Contact cloud metadata service from container\n  desc: > \n",
                    "rendered": {
                      "text": "- macro: user_known_metadata_access\n  condition: (k8s.ns.name = \"kube-system\")\n\n# On GCP, AWS and Azure, 169.254.169.254 is a special IP used to fetch\n# metadata about the instance. The metadata could be used to get credentials by attackers.\n- rule: Contact cloud metadata service from container\n  desc: > \n",
                      "markdown": "`- macro: user_known_metadata_access\n  condition: (k8s.ns.name = \"kube-system\")\n\n# On GCP, AWS and Azure, 169.254.169.254 is a special IP used to fetch\n# metadata about the instance. The metadata could be used to get credentials by attackers.\n- rule: Contact cloud metadata service from container\n  desc: > \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 54,
                  "endLine": 889,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    and container\n    and fd.sip=\"169.254.169.254\" \n    and not ec2_metadata_containers\n  output: Outbound connection to EC2 instance metadata service (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, network, aws, container, mitre_credential_access, T1552.005]\n\n",
                    "rendered": {
                      "text": "    and container\n    and fd.sip=\"169.254.169.254\" \n    and not ec2_metadata_containers\n  output: Outbound connection to EC2 instance metadata service (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, network, aws, container, mitre_credential_access, T1552.005]\n\n",
                      "markdown": "`    and container\n    and fd.sip=\"169.254.169.254\" \n    and not ec2_metadata_containers\n  output: Outbound connection to EC2 instance metadata service (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, network, aws, container, mitre_credential_access, T1552.005]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 882,
                  "startColumn": 66,
                  "endLine": 882,
                  "endColumn": 75,
                  "snippet": {
                    "text": "# to this IP from containers.\n- rule: Contact EC2 Instance Metadata Service From Container\n  desc: > \n    Detects attempts to communicate with the EC2 Instance Metadata Service from a container. This detection is narrowly focused \n    and might not apply to your environment. In addition, it could generate noise and require fine-tuning.\n  condition: > \n    outbound \n",
                    "rendered": {
                      "text": "# to this IP from containers.\n- rule: Contact EC2 Instance Metadata Service From Container\n  desc: > \n    Detects attempts to communicate with the EC2 Instance Metadata Service from a container. This detection is narrowly focused \n    and might not apply to your environment. In addition, it could generate noise and require fine-tuning.\n  condition: > \n    outbound \n",
                      "markdown": "`# to this IP from containers.\n- rule: Contact EC2 Instance Metadata Service From Container\n  desc: > \n    Detects attempts to communicate with the EC2 Instance Metadata Service from a container. This detection is narrowly focused \n    and might not apply to your environment. In addition, it could generate noise and require fine-tuning.\n  condition: > \n    outbound \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 880,
                  "startColumn": 37,
                  "endLine": 880,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# On EC2 instances, 169.254.169.254 is a special IP used to fetch\n# metadata about the instance. It may be desirable to prevent access\n# to this IP from containers.\n- rule: Contact EC2 Instance Metadata Service From Container\n  desc: > \n    Detects attempts to communicate with the EC2 Instance Metadata Service from a container. This detection is narrowly focused \n    and might not apply to your environment. In addition, it could generate noise and require fine-tuning.\n",
                    "rendered": {
                      "text": "# On EC2 instances, 169.254.169.254 is a special IP used to fetch\n# metadata about the instance. It may be desirable to prevent access\n# to this IP from containers.\n- rule: Contact EC2 Instance Metadata Service From Container\n  desc: > \n    Detects attempts to communicate with the EC2 Instance Metadata Service from a container. This detection is narrowly focused \n    and might not apply to your environment. In addition, it could generate noise and require fine-tuning.\n",
                      "markdown": "`# On EC2 instances, 169.254.169.254 is a special IP used to fetch\n# metadata about the instance. It may be desirable to prevent access\n# to this IP from containers.\n- rule: Contact EC2 Instance Metadata Service From Container\n  desc: > \n    Detects attempts to communicate with the EC2 Instance Metadata Service from a container. This detection is narrowly focused \n    and might not apply to your environment. In addition, it could generate noise and require fine-tuning.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 879,
                  "startColumn": 9,
                  "endLine": 879,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n# On EC2 instances, 169.254.169.254 is a special IP used to fetch\n# metadata about the instance. It may be desirable to prevent access\n# to this IP from containers.\n- rule: Contact EC2 Instance Metadata Service From Container\n  desc: > \n    Detects attempts to communicate with the EC2 Instance Metadata Service from a container. This detection is narrowly focused \n",
                    "rendered": {
                      "text": "\n# On EC2 instances, 169.254.169.254 is a special IP used to fetch\n# metadata about the instance. It may be desirable to prevent access\n# to this IP from containers.\n- rule: Contact EC2 Instance Metadata Service From Container\n  desc: > \n    Detects attempts to communicate with the EC2 Instance Metadata Service from a container. This detection is narrowly focused \n",
                      "markdown": "`\n# On EC2 instances, 169.254.169.254 is a special IP used to fetch\n# metadata about the instance. It may be desirable to prevent access\n# to this IP from containers.\n- rule: Contact EC2 Instance Metadata Service From Container\n  desc: > \n    Detects attempts to communicate with the EC2 Instance Metadata Service from a container. This detection is narrowly focused \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 877,
                  "startColumn": 48,
                  "endLine": 877,
                  "endColumn": 52,
                  "snippet": {
                    "text": "- macro: ec2_metadata_containers\n  condition: (never_true)\n\n# On EC2 instances, 169.254.169.254 is a special IP used to fetch\n# metadata about the instance. It may be desirable to prevent access\n# to this IP from containers.\n- rule: Contact EC2 Instance Metadata Service From Container\n",
                    "rendered": {
                      "text": "- macro: ec2_metadata_containers\n  condition: (never_true)\n\n# On EC2 instances, 169.254.169.254 is a special IP used to fetch\n# metadata about the instance. It may be desirable to prevent access\n# to this IP from containers.\n- rule: Contact EC2 Instance Metadata Service From Container\n",
                      "markdown": "`- macro: ec2_metadata_containers\n  condition: (never_true)\n\n# On EC2 instances, 169.254.169.254 is a special IP used to fetch\n# metadata about the instance. It may be desirable to prevent access\n# to this IP from containers.\n- rule: Contact EC2 Instance Metadata Service From Container\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 853,
                  "startColumn": 34,
                  "endLine": 853,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  desc: > \n    Detect the creation of files under /dev except for authorized device management programs. This can reveal rootkits hiding \n    files in /dev. Additionally, consider the \"Execution from /dev/shm\" rule. The upstream rule already covers some tuning \n    scenarios that you can further expand upon.\n  condition: >\n    (evt.type = creat or (evt.type in (open,openat,openat2)))\n    and evt.arg.flags contains O_CREAT\n",
                    "rendered": {
                      "text": "  desc: > \n    Detect the creation of files under /dev except for authorized device management programs. This can reveal rootkits hiding \n    files in /dev. Additionally, consider the \"Execution from /dev/shm\" rule. The upstream rule already covers some tuning \n    scenarios that you can further expand upon.\n  condition: >\n    (evt.type = creat or (evt.type in (open,openat,openat2)))\n    and evt.arg.flags contains O_CREAT\n",
                      "markdown": "`  desc: > \n    Detect the creation of files under /dev except for authorized device management programs. This can reveal rootkits hiding \n    files in /dev. Additionally, consider the \"Execution from /dev/shm\" rule. The upstream rule already covers some tuning \n    scenarios that you can further expand upon.\n  condition: >\n    (evt.type = creat or (evt.type in (open,openat,openat2)))\n    and evt.arg.flags contains O_CREAT\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 816,
                  "startColumn": 3,
                  "endLine": 816,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  desc: >\n    Detect activity by any programs that can manage users, passwords, or permissions (such as login, systemd, usermod, deluser, adduser, \n    chpasswd, and others). sudo and su are excluded. Activity in containers is also excluded -- some containers create custom users on \n    top of a base linux distribution at startup. Some innocuous command lines that don't actually change anything are excluded. You might \n    want to consider applying this rule to container actions as well.\n  condition: >\n    spawned_process \n",
                    "rendered": {
                      "text": "  desc: >\n    Detect activity by any programs that can manage users, passwords, or permissions (such as login, systemd, usermod, deluser, adduser, \n    chpasswd, and others). sudo and su are excluded. Activity in containers is also excluded -- some containers create custom users on \n    top of a base linux distribution at startup. Some innocuous command lines that don't actually change anything are excluded. You might \n    want to consider applying this rule to container actions as well.\n  condition: >\n    spawned_process \n",
                      "markdown": "`  desc: >\n    Detect activity by any programs that can manage users, passwords, or permissions (such as login, systemd, usermod, deluser, adduser, \n    chpasswd, and others). sudo and su are excluded. Activity in containers is also excluded -- some containers create custom users on \n    top of a base linux distribution at startup. Some innocuous command lines that don't actually change anything are excluded. You might \n    want to consider applying this rule to container actions as well.\n  condition: >\n    spawned_process \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 783,
                  "startColumn": 7,
                  "endLine": 783,
                  "endColumn": 13,
                  "snippet": {
                    "text": "- macro: user_known_non_sudo_setuid_conditions\n  condition: (user.name=root)\n\n# sshd, mail programs attempt to setuid to root even when running as non-root. Excluding here to avoid meaningless FPs\n- rule: Non sudo setuid\n  desc: >\n    Detect attempts to change users through the use of setuid, with exceptions for sudo/su. \n",
                    "rendered": {
                      "text": "- macro: user_known_non_sudo_setuid_conditions\n  condition: (user.name=root)\n\n# sshd, mail programs attempt to setuid to root even when running as non-root. Excluding here to avoid meaningless FPs\n- rule: Non sudo setuid\n  desc: >\n    Detect attempts to change users through the use of setuid, with exceptions for sudo/su. \n",
                      "markdown": "`- macro: user_known_non_sudo_setuid_conditions\n  condition: (user.name=root)\n\n# sshd, mail programs attempt to setuid to root even when running as non-root. Excluding here to avoid meaningless FPs\n- rule: Non sudo setuid\n  desc: >\n    Detect attempts to change users through the use of setuid, with exceptions for sudo/su. \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 710,
                  "startColumn": 17,
                  "endLine": 710,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    and http_proxy_procs \n    and proc.env icontains HTTP_PROXY\n    and not allowed_ssh_proxy_env \n  output: Curl or wget run with disallowed HTTP_PROXY environment variable (env=%proc.env evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, host, container, users, mitre_execution, T1204]\n\n",
                    "rendered": {
                      "text": "    and http_proxy_procs \n    and proc.env icontains HTTP_PROXY\n    and not allowed_ssh_proxy_env \n  output: Curl or wget run with disallowed HTTP_PROXY environment variable (env=%proc.env evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, host, container, users, mitre_execution, T1204]\n\n",
                      "markdown": "`    and http_proxy_procs \n    and proc.env icontains HTTP_PROXY\n    and not allowed_ssh_proxy_env \n  output: Curl or wget run with disallowed HTTP_PROXY environment variable (env=%proc.env evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, host, container, users, mitre_execution, T1204]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 710,
                  "startColumn": 9,
                  "endLine": 710,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    and http_proxy_procs \n    and proc.env icontains HTTP_PROXY\n    and not allowed_ssh_proxy_env \n  output: Curl or wget run with disallowed HTTP_PROXY environment variable (env=%proc.env evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, host, container, users, mitre_execution, T1204]\n\n",
                    "rendered": {
                      "text": "    and http_proxy_procs \n    and proc.env icontains HTTP_PROXY\n    and not allowed_ssh_proxy_env \n  output: Curl or wget run with disallowed HTTP_PROXY environment variable (env=%proc.env evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, host, container, users, mitre_execution, T1204]\n\n",
                      "markdown": "`    and http_proxy_procs \n    and proc.env icontains HTTP_PROXY\n    and not allowed_ssh_proxy_env \n  output: Curl or wget run with disallowed HTTP_PROXY environment variable (env=%proc.env evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, host, container, users, mitre_execution, T1204]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 702,
                  "startColumn": 18,
                  "endLine": 702,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n- rule: Program run with disallowed http proxy env\n  desc: >\n    Detect curl or wget usage with HTTP_PROXY environment variable. Attackers can manipulate the HTTP_PROXY variable's \n    value to redirect application's internal HTTP requests. This could expose sensitive information like authentication \n    keys and private data.\n  condition: >\n",
                    "rendered": {
                      "text": "\n- rule: Program run with disallowed http proxy env\n  desc: >\n    Detect curl or wget usage with HTTP_PROXY environment variable. Attackers can manipulate the HTTP_PROXY variable's \n    value to redirect application's internal HTTP requests. This could expose sensitive information like authentication \n    keys and private data.\n  condition: >\n",
                      "markdown": "`\n- rule: Program run with disallowed http proxy env\n  desc: >\n    Detect curl or wget usage with HTTP_PROXY environment variable. Attackers can manipulate the HTTP_PROXY variable's \n    value to redirect application's internal HTTP requests. This could expose sensitive information like authentication \n    keys and private data.\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 702,
                  "startColumn": 10,
                  "endLine": 702,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n- rule: Program run with disallowed http proxy env\n  desc: >\n    Detect curl or wget usage with HTTP_PROXY environment variable. Attackers can manipulate the HTTP_PROXY variable's \n    value to redirect application's internal HTTP requests. This could expose sensitive information like authentication \n    keys and private data.\n  condition: >\n",
                    "rendered": {
                      "text": "\n- rule: Program run with disallowed http proxy env\n  desc: >\n    Detect curl or wget usage with HTTP_PROXY environment variable. Attackers can manipulate the HTTP_PROXY variable's \n    value to redirect application's internal HTTP requests. This could expose sensitive information like authentication \n    keys and private data.\n  condition: >\n",
                      "markdown": "`\n- rule: Program run with disallowed http proxy env\n  desc: >\n    Detect curl or wget usage with HTTP_PROXY environment variable. Attackers can manipulate the HTTP_PROXY variable's \n    value to redirect application's internal HTTP requests. This could expose sensitive information like authentication \n    keys and private data.\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 700,
                  "startColumn": 46,
                  "endLine": 701,
                  "snippet": {
                    "text": "- macro: http_proxy_procs\n  condition: (proc.name in (http_proxy_binaries))\n\n- rule: Program run with disallowed http proxy env\n  desc: >\n    Detect curl or wget usage with HTTP_PROXY environment variable. Attackers can manipulate the HTTP_PROXY variable's \n    value to redirect application's internal HTTP requests. This could expose sensitive information like authentication \n    keys and private data.\n",
                    "rendered": {
                      "text": "- macro: http_proxy_procs\n  condition: (proc.name in (http_proxy_binaries))\n\n- rule: Program run with disallowed http proxy env\n  desc: >\n    Detect curl or wget usage with HTTP_PROXY environment variable. Attackers can manipulate the HTTP_PROXY variable's \n    value to redirect application's internal HTTP requests. This could expose sensitive information like authentication \n    keys and private data.\n",
                      "markdown": "`- macro: http_proxy_procs\n  condition: (proc.name in (http_proxy_binaries))\n\n- rule: Program run with disallowed http proxy env\n  desc: >\n    Detect curl or wget usage with HTTP_PROXY environment variable. Attackers can manipulate the HTTP_PROXY variable's \n    value to redirect application's internal HTTP requests. This could expose sensitive information like authentication \n    keys and private data.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 666,
                  "startColumn": 23,
                  "endLine": 666,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    adduser, chpasswd, and others). This serves as a valuable baseline detection for network-related activities.\n  condition: >\n    inbound_outbound\n    and fd.sockfamily = ip \n    and (system_procs or proc.name in (shell_binaries))\n    and not proc.name in (known_system_procs_network_activity_binaries)\n    and not login_doing_dns_lookup\n",
                    "rendered": {
                      "text": "    adduser, chpasswd, and others). This serves as a valuable baseline detection for network-related activities.\n  condition: >\n    inbound_outbound\n    and fd.sockfamily = ip \n    and (system_procs or proc.name in (shell_binaries))\n    and not proc.name in (known_system_procs_network_activity_binaries)\n    and not login_doing_dns_lookup\n",
                      "markdown": "`    adduser, chpasswd, and others). This serves as a valuable baseline detection for network-related activities.\n  condition: >\n    inbound_outbound\n    and fd.sockfamily = ip \n    and (system_procs or proc.name in (shell_binaries))\n    and not proc.name in (known_system_procs_network_activity_binaries)\n    and not login_doing_dns_lookup\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 657,
                  "startColumn": 12,
                  "endLine": 657,
                  "endColumn": 16,
                  "snippet": {
                    "text": "- macro: login_doing_dns_lookup\n  condition: (proc.name=login and fd.l4proto=udp and fd.sport=53)\n\n# sockfamily ip is to exclude certain processes (like 'groups') that communicate on unix-domain sockets\n# systemd can listen on ports to launch things like sshd on demand\n- rule: System procs network activity\n  desc: >\n",
                    "rendered": {
                      "text": "- macro: login_doing_dns_lookup\n  condition: (proc.name=login and fd.l4proto=udp and fd.sport=53)\n\n# sockfamily ip is to exclude certain processes (like 'groups') that communicate on unix-domain sockets\n# systemd can listen on ports to launch things like sshd on demand\n- rule: System procs network activity\n  desc: >\n",
                      "markdown": "`- macro: login_doing_dns_lookup\n  condition: (proc.name=login and fd.l4proto=udp and fd.sport=53)\n\n# sockfamily ip is to exclude certain processes (like 'groups') that communicate on unix-domain sockets\n# systemd can listen on ports to launch things like sshd on demand\n- rule: System procs network activity\n  desc: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 63,
                  "endLine": 520,
                  "snippet": {
                    "text": "    (container.image.repository endswith \".amazonaws.com/amazon-k8s-cni\" or\n     container.image.repository endswith \".amazonaws.com/eks/kube-proxy\"))\n\n# These images are allowed both to run with --privileged and to mount\n# sensitive paths from the host filesystem.\n#\n# NOTE: This list is only provided for backwards compatibility with\n# older local falco rules files that may have been appending to\n",
                    "rendered": {
                      "text": "    (container.image.repository endswith \".amazonaws.com/amazon-k8s-cni\" or\n     container.image.repository endswith \".amazonaws.com/eks/kube-proxy\"))\n\n# These images are allowed both to run with --privileged and to mount\n# sensitive paths from the host filesystem.\n#\n# NOTE: This list is only provided for backwards compatibility with\n# older local falco rules files that may have been appending to\n",
                      "markdown": "`    (container.image.repository endswith \".amazonaws.com/amazon-k8s-cni\" or\n     container.image.repository endswith \".amazonaws.com/eks/kube-proxy\"))\n\n# These images are allowed both to run with --privileged and to mount\n# sensitive paths from the host filesystem.\n#\n# NOTE: This list is only provided for backwards compatibility with\n# older local falco rules files that may have been appending to\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 41,
                  "endLine": 459,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    evt.type=unshare and evt.dir=< \n    and container \n    and not thread.cap_permitted contains CAP_SYS_ADMIN\n  output: Change namespace privileges via unshare (res=%evt.res evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, container, mitre_privilege_escalation, T1611]\n\n",
                    "rendered": {
                      "text": "    evt.type=unshare and evt.dir=< \n    and container \n    and not thread.cap_permitted contains CAP_SYS_ADMIN\n  output: Change namespace privileges via unshare (res=%evt.res evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, container, mitre_privilege_escalation, T1611]\n\n",
                      "markdown": "`    evt.type=unshare and evt.dir=< \n    and container \n    and not thread.cap_permitted contains CAP_SYS_ADMIN\n  output: Change namespace privileges via unshare (res=%evt.res evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_incubating, container, mitre_privilege_escalation, T1611]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 42,
                  "endLine": 454,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    Unprivileged users in containers may not have CAP_SYS_ADMIN or other elevated privileges. However, they can  \n    use the unshare system call with CLONE_NEWNS or CLONE_NEWUSER to create or clone a namespace or user with the \n    necessary privileges to conduct further attacks. It is best practice to block the unshare system call via \n    seccomp if it is not needed. Misuse of unshare can be related to misconfigured Kubernetes clusters, for example.\n  condition: >\n    evt.type=unshare and evt.dir=< \n    and container \n",
                    "rendered": {
                      "text": "    Unprivileged users in containers may not have CAP_SYS_ADMIN or other elevated privileges. However, they can  \n    use the unshare system call with CLONE_NEWNS or CLONE_NEWUSER to create or clone a namespace or user with the \n    necessary privileges to conduct further attacks. It is best practice to block the unshare system call via \n    seccomp if it is not needed. Misuse of unshare can be related to misconfigured Kubernetes clusters, for example.\n  condition: >\n    evt.type=unshare and evt.dir=< \n    and container \n",
                      "markdown": "`    Unprivileged users in containers may not have CAP_SYS_ADMIN or other elevated privileges. However, they can  \n    use the unshare system call with CLONE_NEWNS or CLONE_NEWUSER to create or clone a namespace or user with the \n    necessary privileges to conduct further attacks. It is best practice to block the unshare system call via \n    seccomp if it is not needed. Misuse of unshare can be related to misconfigured Kubernetes clusters, for example.\n  condition: >\n    evt.type=unshare and evt.dir=< \n    and container \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 453,
                  "startColumn": 85,
                  "endLine": 453,
                  "endColumn": 94,
                  "snippet": {
                    "text": "  desc: > \n    Unprivileged users in containers may not have CAP_SYS_ADMIN or other elevated privileges. However, they can  \n    use the unshare system call with CLONE_NEWNS or CLONE_NEWUSER to create or clone a namespace or user with the \n    necessary privileges to conduct further attacks. It is best practice to block the unshare system call via \n    seccomp if it is not needed. Misuse of unshare can be related to misconfigured Kubernetes clusters, for example.\n  condition: >\n    evt.type=unshare and evt.dir=< \n",
                    "rendered": {
                      "text": "  desc: > \n    Unprivileged users in containers may not have CAP_SYS_ADMIN or other elevated privileges. However, they can  \n    use the unshare system call with CLONE_NEWNS or CLONE_NEWUSER to create or clone a namespace or user with the \n    necessary privileges to conduct further attacks. It is best practice to block the unshare system call via \n    seccomp if it is not needed. Misuse of unshare can be related to misconfigured Kubernetes clusters, for example.\n  condition: >\n    evt.type=unshare and evt.dir=< \n",
                      "markdown": "`  desc: > \n    Unprivileged users in containers may not have CAP_SYS_ADMIN or other elevated privileges. However, they can  \n    use the unshare system call with CLONE_NEWNS or CLONE_NEWUSER to create or clone a namespace or user with the \n    necessary privileges to conduct further attacks. It is best practice to block the unshare system call via \n    seccomp if it is not needed. Misuse of unshare can be related to misconfigured Kubernetes clusters, for example.\n  condition: >\n    evt.type=unshare and evt.dir=< \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 11,
                  "endLine": 452,
                  "endColumn": 20,
                  "snippet": {
                    "text": "- rule: Change namespace privileges via unshare\n  desc: > \n    Unprivileged users in containers may not have CAP_SYS_ADMIN or other elevated privileges. However, they can  \n    use the unshare system call with CLONE_NEWNS or CLONE_NEWUSER to create or clone a namespace or user with the \n    necessary privileges to conduct further attacks. It is best practice to block the unshare system call via \n    seccomp if it is not needed. Misuse of unshare can be related to misconfigured Kubernetes clusters, for example.\n  condition: >\n",
                    "rendered": {
                      "text": "- rule: Change namespace privileges via unshare\n  desc: > \n    Unprivileged users in containers may not have CAP_SYS_ADMIN or other elevated privileges. However, they can  \n    use the unshare system call with CLONE_NEWNS or CLONE_NEWUSER to create or clone a namespace or user with the \n    necessary privileges to conduct further attacks. It is best practice to block the unshare system call via \n    seccomp if it is not needed. Misuse of unshare can be related to misconfigured Kubernetes clusters, for example.\n  condition: >\n",
                      "markdown": "`- rule: Change namespace privileges via unshare\n  desc: > \n    Unprivileged users in containers may not have CAP_SYS_ADMIN or other elevated privileges. However, they can  \n    use the unshare system call with CLONE_NEWNS or CLONE_NEWUSER to create or clone a namespace or user with the \n    necessary privileges to conduct further attacks. It is best practice to block the unshare system call via \n    seccomp if it is not needed. Misuse of unshare can be related to misconfigured Kubernetes clusters, for example.\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 39,
                  "endLine": 450,
                  "snippet": {
                    "text": "  priority: NOTICE\n  tags: [maturity_incubating, host, container, process, mitre_privilege_escalation, T1611]\n\n- rule: Change namespace privileges via unshare\n  desc: > \n    Unprivileged users in containers may not have CAP_SYS_ADMIN or other elevated privileges. However, they can  \n    use the unshare system call with CLONE_NEWNS or CLONE_NEWUSER to create or clone a namespace or user with the \n    necessary privileges to conduct further attacks. It is best practice to block the unshare system call via \n",
                    "rendered": {
                      "text": "  priority: NOTICE\n  tags: [maturity_incubating, host, container, process, mitre_privilege_escalation, T1611]\n\n- rule: Change namespace privileges via unshare\n  desc: > \n    Unprivileged users in containers may not have CAP_SYS_ADMIN or other elevated privileges. However, they can  \n    use the unshare system call with CLONE_NEWNS or CLONE_NEWUSER to create or clone a namespace or user with the \n    necessary privileges to conduct further attacks. It is best practice to block the unshare system call via \n",
                      "markdown": "`  priority: NOTICE\n  tags: [maturity_incubating, host, container, process, mitre_privilege_escalation, T1611]\n\n- rule: Change namespace privileges via unshare\n  desc: > \n    Unprivileged users in containers may not have CAP_SYS_ADMIN or other elevated privileges. However, they can  \n    use the unshare system call with CLONE_NEWNS or CLONE_NEWUSER to create or clone a namespace or user with the \n    necessary privileges to conduct further attacks. It is best practice to block the unshare system call via \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 54,
                  "endLine": 369,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\n- rule: Read ssh information\n  desc: > \n    This rule identifies attempts to read files within ssh directories using programs that are not related to ssh. It's a simple and \n    versatile detection method that works well alongside more specific rules focused on sensitive file access. You have a couple of \n    options for using this rule effectively: you can adjust the specialized rules to cover all the important scenarios and ensure \n    precedence in rule smatching for those, or you can analyze the combined view of ssh-related file access across various rules on \n",
                    "rendered": {
                      "text": "\n- rule: Read ssh information\n  desc: > \n    This rule identifies attempts to read files within ssh directories using programs that are not related to ssh. It's a simple and \n    versatile detection method that works well alongside more specific rules focused on sensitive file access. You have a couple of \n    options for using this rule effectively: you can adjust the specialized rules to cover all the important scenarios and ensure \n    precedence in rule smatching for those, or you can analyze the combined view of ssh-related file access across various rules on \n",
                      "markdown": "`\n- rule: Read ssh information\n  desc: > \n    This rule identifies attempts to read files within ssh directories using programs that are not related to ssh. It's a simple and \n    versatile detection method that works well alongside more specific rules focused on sensitive file access. You have a couple of \n    options for using this rule effectively: you can adjust the specialized rules to cover all the important scenarios and ensure \n    precedence in rule smatching for those, or you can analyze the combined view of ssh-related file access across various rules on \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 12,
                  "endLine": 367,
                  "endColumn": 17,
                  "snippet": {
                    "text": "- macro: user_known_read_ssh_information_activities\n  condition: (never_true)\n\n- rule: Read ssh information\n  desc: > \n    This rule identifies attempts to read files within ssh directories using programs that are not related to ssh. It's a simple and \n    versatile detection method that works well alongside more specific rules focused on sensitive file access. You have a couple of \n",
                    "rendered": {
                      "text": "- macro: user_known_read_ssh_information_activities\n  condition: (never_true)\n\n- rule: Read ssh information\n  desc: > \n    This rule identifies attempts to read files within ssh directories using programs that are not related to ssh. It's a simple and \n    versatile detection method that works well alongside more specific rules focused on sensitive file access. You have a couple of \n",
                      "markdown": "`- macro: user_known_read_ssh_information_activities\n  condition: (never_true)\n\n- rule: Read ssh information\n  desc: > \n    This rule identifies attempts to read files within ssh directories using programs that are not related to ssh. It's a simple and \n    versatile detection method that works well alongside more specific rules focused on sensitive file access. You have a couple of \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 13,
                  "endLine": 232,
                  "endColumn": 18,
                  "snippet": {
                    "text": "- list: bash_config_files\n  items: [/etc/profile, /etc/bashrc]\n\n# Covers both csh and tcsh\n- list: csh_config_filenames\n  items: [.cshrc, .login, .logout, .history, .tcshrc, .cshdirs]\n\n",
                    "rendered": {
                      "text": "- list: bash_config_files\n  items: [/etc/profile, /etc/bashrc]\n\n# Covers both csh and tcsh\n- list: csh_config_filenames\n  items: [.cshrc, .login, .logout, .history, .tcshrc, .cshdirs]\n\n",
                      "markdown": "`- list: bash_config_files\n  items: [/etc/profile, /etc/bashrc]\n\n# Covers both csh and tcsh\n- list: csh_config_filenames\n  items: [.cshrc, .login, .logout, .history, .tcshrc, .cshdirs]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 24,
                  "endLine": 124,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n",
                    "rendered": {
                      "text": "    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n",
                      "markdown": "`    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 5,
                  "endLine": 124,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n",
                    "rendered": {
                      "text": "    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n",
                      "markdown": "`    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 55,
                  "endLine": 123,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                    "rendered": {
                      "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                      "markdown": "`    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 40,
                  "endLine": 123,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                    "rendered": {
                      "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                      "markdown": "`    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 29,
                  "endLine": 123,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                    "rendered": {
                      "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                      "markdown": "`    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 78,
                  "endLine": 114,
                  "endColumn": 85,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 59,
                  "endLine": 114,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 44,
                  "endLine": 114,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 29,
                  "endLine": 114,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 18,
                  "endLine": 114,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 1,
                  "endLine": 114,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 77,
                  "endLine": 107,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 58,
                  "endLine": 107,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 43,
                  "endLine": 107,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 28,
                  "endLine": 107,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 17,
                  "endLine": 107,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 1,
                  "endLine": 107,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`    readlink, sleep, stty, mkdir, df, dir, rmdir, touch\n    ]\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-incubating_rules.yaml"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 8,
                  "endLine": 81,
                  "snippet": {
                    "text": "- macro: spawned_process\n  condition: (evt.type in (execve, execveat) and evt.dir=<)\n\n- macro: chmod\n  condition: (evt.type in (chmod, fchmod, fchmodat) and evt.dir=<)\n\n- list: shell_binaries\n  items: [ash, bash, csh, ksh, sh, tcsh, zsh, dash]\n",
                    "rendered": {
                      "text": "- macro: spawned_process\n  condition: (evt.type in (execve, execveat) and evt.dir=<)\n\n- macro: chmod\n  condition: (evt.type in (chmod, fchmod, fchmodat) and evt.dir=<)\n\n- list: shell_binaries\n  items: [ash, bash, csh, ksh, sh, tcsh, zsh, dash]\n",
                      "markdown": "`- macro: spawned_process\n  condition: (evt.type in (execve, execveat) and evt.dir=<)\n\n- macro: chmod\n  condition: (evt.type in (chmod, fchmod, fchmodat) and evt.dir=<)\n\n- list: shell_binaries\n  items: [ash, bash, csh, ksh, sh, tcsh, zsh, dash]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/registry.yaml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 38,
                  "endLine": 9,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/README.md"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 91,
                  "endLine": 125,
                  "endColumn": 95,
                  "snippet": {
                    "text": "alco-sandbox-rules:2}\" --set \"falco.rules_file={/etc/falco/k8s_audit_rules.yaml,/etc/falco/rules.d,/etc/falco/falco_rules.yaml,/etc/falco/falco-incubating_rules.yaml,/etc/falco/falco-sandbox_rules.yaml}\"\n```\n\nWhere the option `falcoctl.config.artifact.install.refs` governs which rules are downloaded at startup, `falcoctl.config.artifact.follow.refs` identifies which rules are automatically updated and `falco.rules_file` indicates which rules are loaded by the engine.\n\n### Host installation\n\nIf you are managing your Falco installation you should be aware of which directories contain the rules. Thos",
                    "rendered": {
                      "text": "alco-sandbox-rules:2}\" --set \"falco.rules_file={/etc/falco/k8s_audit_rules.yaml,/etc/falco/rules.d,/etc/falco/falco_rules.yaml,/etc/falco/falco-incubating_rules.yaml,/etc/falco/falco-sandbox_rules.yaml}\"\n```\n\nWhere the option `falcoctl.config.artifact.install.refs` governs which rules are downloaded at startup, `falcoctl.config.artifact.follow.refs` identifies which rules are automatically updated and `falco.rules_file` indicates which rules are loaded by the engine.\n\n### Host installation\n\nIf you are managing your Falco installation you should be aware of which directories contain the rules. Thos",
                      "markdown": "`alco-sandbox-rules:2}\" --set \"falco.rules_file={/etc/falco/k8s_audit_rules.yaml,/etc/falco/rules.d,/etc/falco/falco_rules.yaml,/etc/falco/falco-incubating_rules.yaml,/etc/falco/falco-sandbox_rules.yaml}\"\n```\n\nWhere the option `falcoctl.config.artifact.install.refs` governs which rules are downloaded at startup, `falcoctl.config.artifact.follow.refs` identifies which rules are automatically updated and `falco.rules_file` indicates which rules are loaded by the engine.\n\n### Host installation\n\nIf you are managing your Falco installation you should be aware of which directories contain the rules. Thos`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/README.md"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 102,
                  "endLine": 119,
                  "endColumn": 110,
                  "snippet": {
                    "text": "in your [falcoctl](https://github.com/falcosecurity/charts/blob/f1062000e2e61332b3a8ea892a1765e4f4a60ec6/falco/values.yaml#L406) config and by enabling them in the corresponding `falco.yaml` file.\n\nFor instance, in order to install the Helm chart and load all the available Falco rules with automatic update on all of them, you can run\n\n```\nhelm install falco falcosecurity/falco --set \"falcoctl.config.artifact.install.refs={falco-rules:2,falco-incubating-rules:2,falco-sandbox-rules:2}\" --set \"falcoctl.config.artifact.follow.refs={falco-rules:2,falco-incubating-rules:2,falco-sandbox-rules:2}\" --set \"falc",
                    "rendered": {
                      "text": "in your [falcoctl](https://github.com/falcosecurity/charts/blob/f1062000e2e61332b3a8ea892a1765e4f4a60ec6/falco/values.yaml#L406) config and by enabling them in the corresponding `falco.yaml` file.\n\nFor instance, in order to install the Helm chart and load all the available Falco rules with automatic update on all of them, you can run\n\n```\nhelm install falco falcosecurity/falco --set \"falcoctl.config.artifact.install.refs={falco-rules:2,falco-incubating-rules:2,falco-sandbox-rules:2}\" --set \"falcoctl.config.artifact.follow.refs={falco-rules:2,falco-incubating-rules:2,falco-sandbox-rules:2}\" --set \"falc",
                      "markdown": "`in your [falcoctl](https://github.com/falcosecurity/charts/blob/f1062000e2e61332b3a8ea892a1765e4f4a60ec6/falco/values.yaml#L406) config and by enabling them in the corresponding `falco.yaml` file.\n\nFor instance, in order to install the Helm chart and load all the available Falco rules with automatic update on all of them, you can run\n\n```\nhelm install falco falcosecurity/falco --set \"falcoctl.config.artifact.install.refs={falco-rules:2,falco-incubating-rules:2,falco-sandbox-rules:2}\" --set \"falcoctl.config.artifact.follow.refs={falco-rules:2,falco-incubating-rules:2,falco-sandbox-rules:2}\" --set \"falc`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/README.md"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 737,
                  "endLine": 36,
                  "endColumn": 746,
                  "snippet": {
                    "text": "omization of rules. Since Falco 0.36.0, you can use the <a href=\"https://github.com/falcosecurity/falco/blob/master/falco.yaml\">rule_matching</a> config to resolve issues with rules overlapping, which is caused by the default \"first match wins\" principle. Starting from Falco 0.35.0, you have precise control over the syscalls that are being monitored, see <a href=\"https://github.com/falcosecurity/falco/blob/master/falco.yaml\">base_syscalls</a>. Lastly, keep in mind that the <a href=\"CONTRIBUTING.md#rules-maturity-framework\">Rules Maturity Framework</a> is a best effort on the part of the community, and ",
                    "rendered": {
                      "text": "omization of rules. Since Falco 0.36.0, you can use the <a href=\"https://github.com/falcosecurity/falco/blob/master/falco.yaml\">rule_matching</a> config to resolve issues with rules overlapping, which is caused by the default \"first match wins\" principle. Starting from Falco 0.35.0, you have precise control over the syscalls that are being monitored, see <a href=\"https://github.com/falcosecurity/falco/blob/master/falco.yaml\">base_syscalls</a>. Lastly, keep in mind that the <a href=\"CONTRIBUTING.md#rules-maturity-framework\">Rules Maturity Framework</a> is a best effort on the part of the community, and ",
                      "markdown": "`omization of rules. Since Falco 0.36.0, you can use the <a href=\"https://github.com/falcosecurity/falco/blob/master/falco.yaml\">rule_matching</a> config to resolve issues with rules overlapping, which is caused by the default \"first match wins\" principle. Starting from Falco 0.35.0, you have precise control over the syscalls that are being monitored, see <a href=\"https://github.com/falcosecurity/falco/blob/master/falco.yaml\">base_syscalls</a>. Lastly, keep in mind that the <a href=\"CONTRIBUTING.md#rules-maturity-framework\">Rules Maturity Framework</a> is a best effort on the part of the community, and `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/README.md"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 36,
                  "endLine": 136,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n## Contributing\n\nIf you are interested in helping and wish to contribute, we kindly request that you review our general [Contribution Guidelines](https://github.com/falcosecurity/.github/blob/master/CONTRIBUTING.md) and, more specifically, the dedicated [Rules Contributing](CONTRIBUTING.md) guide hosted in this repository. Please be aware that our reviewers will ensure compliance with the rules' acceptance criteria.\n\n## License\n\n",
                    "rendered": {
                      "text": "\n## Contributing\n\nIf you are interested in helping and wish to contribute, we kindly request that you review our general [Contribution Guidelines](https://github.com/falcosecurity/.github/blob/master/CONTRIBUTING.md) and, more specifically, the dedicated [Rules Contributing](CONTRIBUTING.md) guide hosted in this repository. Please be aware that our reviewers will ensure compliance with the rules' acceptance criteria.\n\n## License\n\n",
                      "markdown": "`\n## Contributing\n\nIf you are interested in helping and wish to contribute, we kindly request that you review our general [Contribution Guidelines](https://github.com/falcosecurity/.github/blob/master/CONTRIBUTING.md) and, more specifically, the dedicated [Rules Contributing](CONTRIBUTING.md) guide hosted in this repository. Please be aware that our reviewers will ensure compliance with the rules' acceptance criteria.\n\n## License\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/README.md"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 7,
                  "endLine": 97,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  url: https://github.com/falcosecurity/rules/blob/main/rules/falco_rules.yaml\n```\n\nYou can find the full registry specification here: *(coming soon...)*\n\n### Registered Rules\n\n",
                    "rendered": {
                      "text": "  url: https://github.com/falcosecurity/rules/blob/main/rules/falco_rules.yaml\n```\n\nYou can find the full registry specification here: *(coming soon...)*\n\n### Registered Rules\n\n",
                      "markdown": "`  url: https://github.com/falcosecurity/rules/blob/main/rules/falco_rules.yaml\n```\n\nYou can find the full registry specification here: *(coming soon...)*\n\n### Registered Rules\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/README.md"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 42,
                  "endLine": 63,
                  "endColumn": 47,
                  "snippet": {
                    "text": "this repository and are named according to the following convention: `<ruleset>_rules.yaml`.\n\nThe `<ruleset>` portion represents the _ruleset_ name, which must be an alphanumeric string, separated by `-`, entirely in lowercase, and beginning with a letter.\n\nRule files are subsequently released using Git tags. The tag name should follow the pattern `<ruleset>-rules-<version>`, where `<version>` adheres to [Semantic Versioning](https://semver.org/). See [RELEASE](RELEASE.md) document for more details about our release process.\n\nFor instance, the _falco_ ruleset is stored under [/rules/falco_rules.yam",
                    "rendered": {
                      "text": "this repository and are named according to the following convention: `<ruleset>_rules.yaml`.\n\nThe `<ruleset>` portion represents the _ruleset_ name, which must be an alphanumeric string, separated by `-`, entirely in lowercase, and beginning with a letter.\n\nRule files are subsequently released using Git tags. The tag name should follow the pattern `<ruleset>-rules-<version>`, where `<version>` adheres to [Semantic Versioning](https://semver.org/). See [RELEASE](RELEASE.md) document for more details about our release process.\n\nFor instance, the _falco_ ruleset is stored under [/rules/falco_rules.yam",
                      "markdown": "`this repository and are named according to the following convention: `<ruleset>_rules.yaml`.\n\nThe `<ruleset>` portion represents the _ruleset_ name, which must be an alphanumeric string, separated by `-`, entirely in lowercase, and beginning with a letter.\n\nRule files are subsequently released using Git tags. The tag name should follow the pattern `<ruleset>-rules-<version>`, where `<version>` adheres to [Semantic Versioning](https://semver.org/). See [RELEASE](RELEASE.md) document for more details about our release process.\n\nFor instance, the _falco_ ruleset is stored under [/rules/falco_rules.yam`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/registry/cmd.go"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 3,
                  "endLine": 210,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t} else {\n\t\tcred = &auth.Credential{\n\t\t\tUsername: user,\n\t\t\tPassword: token,\n\t\t}\n\t}\n\tociClient := authn.NewClient(authn.WithCredentials(cred))\n",
                    "rendered": {
                      "text": "\t} else {\n\t\tcred = &auth.Credential{\n\t\t\tUsername: user,\n\t\t\tPassword: token,\n\t\t}\n\t}\n\tociClient := authn.NewClient(authn.WithCredentials(cred))\n",
                      "markdown": "`\t} else {\n\t\tcred = &auth.Credential{\n\t\t\tUsername: user,\n\t\t\tPassword: token,\n\t\t}\n\t}\n\tociClient := authn.NewClient(authn.WithCredentials(cred))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/registry/cmd.go"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 2,
                  "endLine": 140,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n\tcred := &auth.Credential{\n\t\tUsername: user,\n\t\tPassword: token,\n\t}\n\n\tclient := authn.NewClient(authn.WithCredentials(cred))\n",
                    "rendered": {
                      "text": "\n\tcred := &auth.Credential{\n\t\tUsername: user,\n\t\tPassword: token,\n\t}\n\n\tclient := authn.NewClient(authn.WithCredentials(cred))\n",
                      "markdown": "`\n\tcred := &auth.Credential{\n\t\tUsername: user,\n\t\tPassword: token,\n\t}\n\n\tclient := authn.NewClient(authn.WithCredentials(cred))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/registry/cmd.go"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 100,
                  "endLine": 283,
                  "endColumn": 105,
                  "snippet": {
                    "text": "\n\tpushToOCI := &cobra.Command{\n\t\tUse:                   \"push-to-oci <registryFilename> <gitTag>\",\n\t\tShort:                 \"Push the rulesfile identified by the tag to the OCI repo identified by the env variable OCI_REPO_PREFIX, authenticating via REGISTRY_USER/REGISTRY_TOKEN and linking to the sources via GITHUB_REPO_URL\",\n\t\tArgs:                  cobra.ExactArgs(2),\n\t\tDisableFlagsInUseLine: true,\n\t\tRunE: func(c *cobra.Command, args []string) error {\n",
                    "rendered": {
                      "text": "\n\tpushToOCI := &cobra.Command{\n\t\tUse:                   \"push-to-oci <registryFilename> <gitTag>\",\n\t\tShort:                 \"Push the rulesfile identified by the tag to the OCI repo identified by the env variable OCI_REPO_PREFIX, authenticating via REGISTRY_USER/REGISTRY_TOKEN and linking to the sources via GITHUB_REPO_URL\",\n\t\tArgs:                  cobra.ExactArgs(2),\n\t\tDisableFlagsInUseLine: true,\n\t\tRunE: func(c *cobra.Command, args []string) error {\n",
                      "markdown": "`\n\tpushToOCI := &cobra.Command{\n\t\tUse:                   \"push-to-oci <registryFilename> <gitTag>\",\n\t\tShort:                 \"Push the rulesfile identified by the tag to the OCI repo identified by the env variable OCI_REPO_PREFIX, authenticating via REGISTRY_USER/REGISTRY_TOKEN and linking to the sources via GITHUB_REPO_URL\",\n\t\tArgs:                  cobra.ExactArgs(2),\n\t\tDisableFlagsInUseLine: true,\n\t\tRunE: func(c *cobra.Command, args []string) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/registry/cmd.go"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 35,
                  "endLine": 153,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n\trulesfileInfo := reg.RulesfileByName(pt.Name)\n\tif rulesfileInfo == nil {\n\t\treturn nil, fmt.Errorf(\"could not find rulesfile %s in the registry (reserved or archived are ignored)\", pt.Name)\n\t}\n\n\t// Create the repository object for the ref.\n",
                    "rendered": {
                      "text": "\n\trulesfileInfo := reg.RulesfileByName(pt.Name)\n\tif rulesfileInfo == nil {\n\t\treturn nil, fmt.Errorf(\"could not find rulesfile %s in the registry (reserved or archived are ignored)\", pt.Name)\n\t}\n\n\t// Create the repository object for the ref.\n",
                      "markdown": "`\n\trulesfileInfo := reg.RulesfileByName(pt.Name)\n\tif rulesfileInfo == nil {\n\t\treturn nil, fmt.Errorf(\"could not find rulesfile %s in the registry (reserved or archived are ignored)\", pt.Name)\n\t}\n\n\t// Create the repository object for the ref.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/build/registry/cmd.go"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 30,
                  "endLine": 90,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n\trulesfileInfo := reg.RulesfileByName(pt.Name)\n\tif rulesfileInfo == nil {\n\t\treturn fmt.Errorf(\"could not find rulesfile %s in the registry (reserved or archived are ignored)\", pt.Name)\n\t}\n\n\ttmpDir, err := os.MkdirTemp(\"\", \"falco-artifacts-to-upload\")\n",
                    "rendered": {
                      "text": "\n\trulesfileInfo := reg.RulesfileByName(pt.Name)\n\tif rulesfileInfo == nil {\n\t\treturn fmt.Errorf(\"could not find rulesfile %s in the registry (reserved or archived are ignored)\", pt.Name)\n\t}\n\n\ttmpDir, err := os.MkdirTemp(\"\", \"falco-artifacts-to-upload\")\n",
                      "markdown": "`\n\trulesfileInfo := reg.RulesfileByName(pt.Name)\n\tif rulesfileInfo == nil {\n\t\treturn fmt.Errorf(\"could not find rulesfile %s in the registry (reserved or archived are ignored)\", pt.Name)\n\t}\n\n\ttmpDir, err := os.MkdirTemp(\"\", \"falco-artifacts-to-upload\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000300"
          },
          "message": {
            "text": "Backdoor: Reverse Shell",
            "id": "BD000300"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1741,
                  "startColumn": 12,
                  "endLine": 1741,
                  "endColumn": 25,
                  "snippet": {
                    "text": "ic Interactive Reconnaissance\n  desc: >\n    This rule detects basic interactive reconnaissance commands that are typically run by unsophisticated attackers or used \n    in internal Red Team exercises. Interactive is defined as a terminal being present (proc.tty != 0). This could be any \n    form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the terminal and not run as a result of a script. This rule \n    is a basic auditing or template rule. You can expand the list of rec",
                    "rendered": {
                      "text": "ic Interactive Reconnaissance\n  desc: >\n    This rule detects basic interactive reconnaissance commands that are typically run by unsophisticated attackers or used \n    in internal Red Team exercises. Interactive is defined as a terminal being present (proc.tty != 0). This could be any \n    form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the terminal and not run as a result of a script. This rule \n    is a basic auditing or template rule. You can expand the list of rec",
                      "markdown": "`ic Interactive Reconnaissance\n  desc: >\n    This rule detects basic interactive reconnaissance commands that are typically run by unsophisticated attackers or used \n    in internal Red Team exercises. Interactive is defined as a terminal being present (proc.tty != 0). This could be any \n    form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the terminal and not run as a result of a script. This rule \n    is a basic auditing or template rule. You can expand the list of rec`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 996,
                  "startColumn": 41,
                  "endLine": 996,
                  "endColumn": 45,
                  "snippet": {
                    "text": "          /root/.node_repl_history, /root/.mongorc.js, /root/.dbshell, /root/.augeas/history, /root/.rnd, /root/.wget-hsts, /health, /exec.fifo]\n\n- list: known_root_directories\n  items: [/root/.oracle_jre_usage, /root/.ssh, /root/.subversion, /root/.nami]\n\n- macro: known_root_conditions\n  condition: (fd.name startswith /root/orcexec.\n",
                    "rendered": {
                      "text": "          /root/.node_repl_history, /root/.mongorc.js, /root/.dbshell, /root/.augeas/history, /root/.rnd, /root/.wget-hsts, /health, /exec.fifo]\n\n- list: known_root_directories\n  items: [/root/.oracle_jre_usage, /root/.ssh, /root/.subversion, /root/.nami]\n\n- macro: known_root_conditions\n  condition: (fd.name startswith /root/orcexec.\n",
                      "markdown": "`          /root/.node_repl_history, /root/.mongorc.js, /root/.dbshell, /root/.augeas/history, /root/.rnd, /root/.wget-hsts, /health, /exec.fifo]\n\n- list: known_root_directories\n  items: [/root/.oracle_jre_usage, /root/.ssh, /root/.subversion, /root/.nami]\n\n- macro: known_root_conditions\n  condition: (fd.name startswith /root/orcexec.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 991,
                  "startColumn": 37,
                  "endLine": 991,
                  "endColumn": 47,
                  "snippet": {
                    "text": "  tags: [maturity_sandbox, host, container, filesystem, mitre_persistence, T1098]\n\n- list: known_root_files\n  items: [/root/.monit.state, /root/.auth_tokens, /root/.bash_history, /root/.ash_history, /root/.aws/credentials,\n          /root/.viminfo.tmp, /root/.lesshst, /root/.bzr.log, /root/.gitconfig.lock, /root/.babel.json, /root/.localstack,\n          /root/.node_repl_history, /root/.mongorc.js, /root/.dbshell, /root/.augeas/history, /root/.rnd, /root/.wget-hsts, /health, /exec.fifo]\n\n",
                    "rendered": {
                      "text": "  tags: [maturity_sandbox, host, container, filesystem, mitre_persistence, T1098]\n\n- list: known_root_files\n  items: [/root/.monit.state, /root/.auth_tokens, /root/.bash_history, /root/.ash_history, /root/.aws/credentials,\n          /root/.viminfo.tmp, /root/.lesshst, /root/.bzr.log, /root/.gitconfig.lock, /root/.babel.json, /root/.localstack,\n          /root/.node_repl_history, /root/.mongorc.js, /root/.dbshell, /root/.augeas/history, /root/.rnd, /root/.wget-hsts, /health, /exec.fifo]\n\n",
                      "markdown": "`  tags: [maturity_sandbox, host, container, filesystem, mitre_persistence, T1098]\n\n- list: known_root_files\n  items: [/root/.monit.state, /root/.auth_tokens, /root/.bash_history, /root/.ash_history, /root/.aws/credentials,\n          /root/.viminfo.tmp, /root/.lesshst, /root/.bzr.log, /root/.gitconfig.lock, /root/.babel.json, /root/.localstack,\n          /root/.node_repl_history, /root/.mongorc.js, /root/.dbshell, /root/.augeas/history, /root/.rnd, /root/.wget-hsts, /health, /exec.fifo]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 913,
                  "startColumn": 12,
                  "endLine": 913,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    and not parent_supervise_running_multilog\n    and not supervise_writing_status\n    and not pki_realm_writing_realms\n    and not htpasswd_writing_passwd\n    and not lvprogs_writing_conf\n    and not ovsdb_writing_openvswitch\n    and not datadog_writing_conf\n",
                    "rendered": {
                      "text": "    and not parent_supervise_running_multilog\n    and not supervise_writing_status\n    and not pki_realm_writing_realms\n    and not htpasswd_writing_passwd\n    and not lvprogs_writing_conf\n    and not ovsdb_writing_openvswitch\n    and not datadog_writing_conf\n",
                      "markdown": "`    and not parent_supervise_running_multilog\n    and not supervise_writing_status\n    and not pki_realm_writing_realms\n    and not htpasswd_writing_passwd\n    and not lvprogs_writing_conf\n    and not ovsdb_writing_openvswitch\n    and not datadog_writing_conf\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 66,
                  "endLine": 640,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  items: [/boot, /lib, /lib64, /usr/lib, /usr/local/lib, /usr/local/sbin, /usr/local/bin, /root/.ssh]\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n# google_accounts_(daemon)\n- macro: google_accounts_daemon_writing_ssh\n",
                    "rendered": {
                      "text": "  items: [/boot, /lib, /lib64, /usr/lib, /usr/local/lib, /usr/local/sbin, /usr/local/bin, /root/.ssh]\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n# google_accounts_(daemon)\n- macro: google_accounts_daemon_writing_ssh\n",
                      "markdown": "`  items: [/boot, /lib, /lib64, /usr/lib, /usr/local/lib, /usr/local/sbin, /usr/local/bin, /root/.ssh]\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n# google_accounts_(daemon)\n- macro: google_accounts_daemon_writing_ssh\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 33,
                  "endLine": 640,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  items: [/boot, /lib, /lib64, /usr/lib, /usr/local/lib, /usr/local/sbin, /usr/local/bin, /root/.ssh]\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n# google_accounts_(daemon)\n- macro: google_accounts_daemon_writing_ssh\n",
                    "rendered": {
                      "text": "  items: [/boot, /lib, /lib64, /usr/lib, /usr/local/lib, /usr/local/sbin, /usr/local/bin, /root/.ssh]\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n# google_accounts_(daemon)\n- macro: google_accounts_daemon_writing_ssh\n",
                      "markdown": "`  items: [/boot, /lib, /lib64, /usr/lib, /usr/local/lib, /usr/local/sbin, /usr/local/bin, /root/.ssh]\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n# google_accounts_(daemon)\n- macro: google_accounts_daemon_writing_ssh\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 637,
                  "startColumn": 96,
                  "endLine": 637,
                  "endColumn": 100,
                  "snippet": {
                    "text": "# of the ones covered by the rule Write below binary dir, you can use\n# the following rule and lists.\n- list: monitored_directories\n  items: [/boot, /lib, /lib64, /usr/lib, /usr/local/lib, /usr/local/sbin, /usr/local/bin, /root/.ssh]\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n",
                    "rendered": {
                      "text": "# of the ones covered by the rule Write below binary dir, you can use\n# the following rule and lists.\n- list: monitored_directories\n  items: [/boot, /lib, /lib64, /usr/lib, /usr/local/lib, /usr/local/sbin, /usr/local/bin, /root/.ssh]\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n",
                      "markdown": "`# of the ones covered by the rule Write below binary dir, you can use\n# the following rule and lists.\n- list: monitored_directories\n  items: [/boot, /lib, /lib64, /usr/lib, /usr/local/lib, /usr/local/sbin, /usr/local/bin, /root/.ssh]\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 57,
                  "endLine": 385,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  condition: (proc.cmdline startswith \"bash /usr/local/lib/pki/pki-realm\" and fd.name startswith /etc/pki/realms)\n\n- macro: htpasswd_writing_passwd\n  condition: (proc.name=htpasswd and fd.name=/etc/nginx/.htpasswd)\n\n- macro: lvprogs_writing_conf\n  condition: >\n",
                    "rendered": {
                      "text": "  condition: (proc.cmdline startswith \"bash /usr/local/lib/pki/pki-realm\" and fd.name startswith /etc/pki/realms)\n\n- macro: htpasswd_writing_passwd\n  condition: (proc.name=htpasswd and fd.name=/etc/nginx/.htpasswd)\n\n- macro: lvprogs_writing_conf\n  condition: >\n",
                      "markdown": "`  condition: (proc.cmdline startswith \"bash /usr/local/lib/pki/pki-realm\" and fd.name startswith /etc/pki/realms)\n\n- macro: htpasswd_writing_passwd\n  condition: (proc.name=htpasswd and fd.name=/etc/nginx/.htpasswd)\n\n- macro: lvprogs_writing_conf\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 24,
                  "endLine": 385,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  condition: (proc.cmdline startswith \"bash /usr/local/lib/pki/pki-realm\" and fd.name startswith /etc/pki/realms)\n\n- macro: htpasswd_writing_passwd\n  condition: (proc.name=htpasswd and fd.name=/etc/nginx/.htpasswd)\n\n- macro: lvprogs_writing_conf\n  condition: >\n",
                    "rendered": {
                      "text": "  condition: (proc.cmdline startswith \"bash /usr/local/lib/pki/pki-realm\" and fd.name startswith /etc/pki/realms)\n\n- macro: htpasswd_writing_passwd\n  condition: (proc.name=htpasswd and fd.name=/etc/nginx/.htpasswd)\n\n- macro: lvprogs_writing_conf\n  condition: >\n",
                      "markdown": "`  condition: (proc.cmdline startswith \"bash /usr/local/lib/pki/pki-realm\" and fd.name startswith /etc/pki/realms)\n\n- macro: htpasswd_writing_passwd\n  condition: (proc.name=htpasswd and fd.name=/etc/nginx/.htpasswd)\n\n- macro: lvprogs_writing_conf\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 9,
                  "endLine": 384,
                  "endColumn": 17,
                  "snippet": {
                    "text": "- macro: pki_realm_writing_realms\n  condition: (proc.cmdline startswith \"bash /usr/local/lib/pki/pki-realm\" and fd.name startswith /etc/pki/realms)\n\n- macro: htpasswd_writing_passwd\n  condition: (proc.name=htpasswd and fd.name=/etc/nginx/.htpasswd)\n\n- macro: lvprogs_writing_conf\n",
                    "rendered": {
                      "text": "- macro: pki_realm_writing_realms\n  condition: (proc.cmdline startswith \"bash /usr/local/lib/pki/pki-realm\" and fd.name startswith /etc/pki/realms)\n\n- macro: htpasswd_writing_passwd\n  condition: (proc.name=htpasswd and fd.name=/etc/nginx/.htpasswd)\n\n- macro: lvprogs_writing_conf\n",
                      "markdown": "`- macro: pki_realm_writing_realms\n  condition: (proc.cmdline startswith \"bash /usr/local/lib/pki/pki-realm\" and fd.name startswith /etc/pki/realms)\n\n- macro: htpasswd_writing_passwd\n  condition: (proc.name=htpasswd and fd.name=/etc/nginx/.htpasswd)\n\n- macro: lvprogs_writing_conf\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 74,
                  "endLine": 198,
                  "endColumn": 78,
                  "snippet": {
                    "text": "             proc.aname[4] in (package_mgmt_binaries))\n\n- macro: coreos_write_ssh_dir\n  condition: (proc.name=update-ssh-keys and fd.name startswith /home/core/.ssh)\n\n- list: ssl_mgmt_binaries\n  items: [ca-certificates]\n",
                    "rendered": {
                      "text": "             proc.aname[4] in (package_mgmt_binaries))\n\n- macro: coreos_write_ssh_dir\n  condition: (proc.name=update-ssh-keys and fd.name startswith /home/core/.ssh)\n\n- list: ssl_mgmt_binaries\n  items: [ca-certificates]\n",
                      "markdown": "`             proc.aname[4] in (package_mgmt_binaries))\n\n- macro: coreos_write_ssh_dir\n  condition: (proc.name=update-ssh-keys and fd.name startswith /home/core/.ssh)\n\n- list: ssl_mgmt_binaries\n  items: [ca-certificates]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000703"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Username)",
            "id": "BD000703"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1732,
                  "startColumn": 13,
                  "endLine": 1732,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  priority: INFO\n  tags: [maturity_sandbox, container, process, mitre_command_and_control, T1132] \n- list: recon_binaries\n  items: [w, whoami, id, who, uname]\n\n- condition: (proc.name in (recon_binaries))\n  macro: recon_binaries_procs\n",
                    "rendered": {
                      "text": "  priority: INFO\n  tags: [maturity_sandbox, container, process, mitre_command_and_control, T1132] \n- list: recon_binaries\n  items: [w, whoami, id, who, uname]\n\n- condition: (proc.name in (recon_binaries))\n  macro: recon_binaries_procs\n",
                      "markdown": "`  priority: INFO\n  tags: [maturity_sandbox, container, process, mitre_command_and_control, T1132] \n- list: recon_binaries\n  items: [w, whoami, id, who, uname]\n\n- condition: (proc.name in (recon_binaries))\n  macro: recon_binaries_procs\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 20,
                  "endLine": 51,
                  "endColumn": 28,
                  "snippet": {
                    "text": "# to true and does nothing, the perfect empty template for `logical` cases as opposed to list templates.\n# When tuning the rule you can override the macro with something useful, e.g.\n# - macro: allowed_ssh_hosts\n#   condition: (evt.hostname contains xyz)\n- macro: never_true\n  condition: (evt.num=0)\n\n",
                    "rendered": {
                      "text": "# to true and does nothing, the perfect empty template for `logical` cases as opposed to list templates.\n# When tuning the rule you can override the macro with something useful, e.g.\n# - macro: allowed_ssh_hosts\n#   condition: (evt.hostname contains xyz)\n- macro: never_true\n  condition: (evt.num=0)\n\n",
                      "markdown": "`# to true and does nothing, the perfect empty template for `logical` cases as opposed to list templates.\n# When tuning the rule you can override the macro with something useful, e.g.\n# - macro: allowed_ssh_hosts\n#   condition: (evt.hostname contains xyz)\n- macro: never_true\n  condition: (evt.num=0)\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1722,
                  "startColumn": 21,
                  "endLine": 1722,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    sophisticated adversaries may {base64}-decode their payloads not only to obfuscate them, but also to ensure that the payload remains \n    intact when the application processes it. Note that injecting commands into an application's input often results in the application \n    processing passed strings like \"sh -c\". In these cases, you may be lucky and the encoded blob will also be logged. Otherwise, all you \n    will see is the {base64} decoding command, as the encoded blob was already interpreted by the shell. \n  condition: >\n    spawned_process \n    and container \n",
                    "rendered": {
                      "text": "    sophisticated adversaries may {base64}-decode their payloads not only to obfuscate them, but also to ensure that the payload remains \n    intact when the application processes it. Note that injecting commands into an application's input often results in the application \n    processing passed strings like \"sh -c\". In these cases, you may be lucky and the encoded blob will also be logged. Otherwise, all you \n    will see is the {base64} decoding command, as the encoded blob was already interpreted by the shell. \n  condition: >\n    spawned_process \n    and container \n",
                      "markdown": "`    sophisticated adversaries may {base64}-decode their payloads not only to obfuscate them, but also to ensure that the payload remains \n    intact when the application processes it. Note that injecting commands into an application's input often results in the application \n    processing passed strings like \"sh -c\". In these cases, you may be lucky and the encoded blob will also be logged. Otherwise, all you \n    will see is the {base64} decoding command, as the encoded blob was already interpreted by the shell. \n  condition: >\n    spawned_process \n    and container \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1719,
                  "startColumn": 77,
                  "endLine": 1719,
                  "endColumn": 86,
                  "snippet": {
                    "text": " a container. Legitimate applications may decode encoded payloads. The template list \n    known_decode_payload_containers can be used for simple tuning and customization, or you can adopt custom, more refined tuning. Less \n    sophisticated adversaries may {base64}-decode their payloads not only to obfuscate them, but also to ensure that the payload remains \n    intact when the application processes it. Note that injecting commands into an application's input often results in the application \n    processing passed strings like \"sh -c\". In these cases, you may be lucky and the encoded blob will also be ",
                    "rendered": {
                      "text": " a container. Legitimate applications may decode encoded payloads. The template list \n    known_decode_payload_containers can be used for simple tuning and customization, or you can adopt custom, more refined tuning. Less \n    sophisticated adversaries may {base64}-decode their payloads not only to obfuscate them, but also to ensure that the payload remains \n    intact when the application processes it. Note that injecting commands into an application's input often results in the application \n    processing passed strings like \"sh -c\". In these cases, you may be lucky and the encoded blob will also be ",
                      "markdown": "` a container. Legitimate applications may decode encoded payloads. The template list \n    known_decode_payload_containers can be used for simple tuning and customization, or you can adopt custom, more refined tuning. Less \n    sophisticated adversaries may {base64}-decode their payloads not only to obfuscate them, but also to ensure that the payload remains \n    intact when the application processes it. Note that injecting commands into an application's input often results in the application \n    processing passed strings like \"sh -c\". In these cases, you may be lucky and the encoded blob will also be `"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1719,
                  "startColumn": 35,
                  "endLine": 1719,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    Detect any use of {base64} decoding in a container. Legitimate applications may decode encoded payloads. The template list \n    known_decode_payload_containers can be used for simple tuning and customization, or you can adopt custom, more refined tuning. Less \n    sophisticated adversaries may {base64}-decode their payloads not only to obfuscate them, but also to ensure that the payload remains \n    intact when the application processes it. Note that injecting commands into an application's input often results in the application \n    processing passed strings like \"sh -c\". In these cases, you ma",
                    "rendered": {
                      "text": "    Detect any use of {base64} decoding in a container. Legitimate applications may decode encoded payloads. The template list \n    known_decode_payload_containers can be used for simple tuning and customization, or you can adopt custom, more refined tuning. Less \n    sophisticated adversaries may {base64}-decode their payloads not only to obfuscate them, but also to ensure that the payload remains \n    intact when the application processes it. Note that injecting commands into an application's input often results in the application \n    processing passed strings like \"sh -c\". In these cases, you ma",
                      "markdown": "`    Detect any use of {base64} decoding in a container. Legitimate applications may decode encoded payloads. The template list \n    known_decode_payload_containers can be used for simple tuning and customization, or you can adopt custom, more refined tuning. Less \n    sophisticated adversaries may {base64}-decode their payloads not only to obfuscate them, but also to ensure that the payload remains \n    intact when the application processes it. Note that injecting commands into an application's input often results in the application \n    processing passed strings like \"sh -c\". In these cases, you ma`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1717,
                  "startColumn": 23,
                  "endLine": 1717,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n- rule: Decoding Payload in Container\n  desc: > \n    Detect any use of {base64} decoding in a container. Legitimate applications may decode encoded payloads. The template list \n    known_decode_payload_containers can be used for simple tuning and customization, or you can adopt custom, more refined tuning. Less \n    sophisticated adversaries may {base64}-decode their payloads not only to obfuscate them, but also to ensure that the payload remains \n    intact when the application processes it. Note that injecting commands into an application's input often results in the application \n",
                    "rendered": {
                      "text": "\n- rule: Decoding Payload in Container\n  desc: > \n    Detect any use of {base64} decoding in a container. Legitimate applications may decode encoded payloads. The template list \n    known_decode_payload_containers can be used for simple tuning and customization, or you can adopt custom, more refined tuning. Less \n    sophisticated adversaries may {base64}-decode their payloads not only to obfuscate them, but also to ensure that the payload remains \n    intact when the application processes it. Note that injecting commands into an application's input often results in the application \n",
                      "markdown": "`\n- rule: Decoding Payload in Container\n  desc: > \n    Detect any use of {base64} decoding in a container. Legitimate applications may decode encoded payloads. The template list \n    known_decode_payload_containers can be used for simple tuning and customization, or you can adopt custom, more refined tuning. Less \n    sophisticated adversaries may {base64}-decode their payloads not only to obfuscate them, but also to ensure that the payload remains \n    intact when the application processes it. Note that injecting commands into an application's input often results in the application \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1713,
                  "startColumn": 37,
                  "endLine": 1713,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  items: []\n\n- macro: base64_decoding\n  condition: (proc.cmdline contains \"base64\" and (proc.cmdline contains \"--decode\" or proc.cmdline contains \"-d\"))\n\n- rule: Decoding Payload in Container\n  desc: > \n",
                    "rendered": {
                      "text": "  items: []\n\n- macro: base64_decoding\n  condition: (proc.cmdline contains \"base64\" and (proc.cmdline contains \"--decode\" or proc.cmdline contains \"-d\"))\n\n- rule: Decoding Payload in Container\n  desc: > \n",
                      "markdown": "`  items: []\n\n- macro: base64_decoding\n  condition: (proc.cmdline contains \"base64\" and (proc.cmdline contains \"--decode\" or proc.cmdline contains \"-d\"))\n\n- rule: Decoding Payload in Container\n  desc: > \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1743,
                  "startColumn": 49,
                  "endLine": 1743,
                  "endColumn": 57,
                  "snippet": {
                    "text": "  form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the terminal and not run as a result of a script. This rule \n    is a basic auditing or template rule. You can expand the list of reconnaissance commands, such as by adding \"ls\". Common \n    anti-patterns are SRE activity or debugging, but it is still worth capturing this generically. Typically, you would expect \n    other rules to fire as well in relation to this activity.\n  condition: >\n    spawned_process \n    a",
                    "rendered": {
                      "text": "  form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the terminal and not run as a result of a script. This rule \n    is a basic auditing or template rule. You can expand the list of reconnaissance commands, such as by adding \"ls\". Common \n    anti-patterns are SRE activity or debugging, but it is still worth capturing this generically. Typically, you would expect \n    other rules to fire as well in relation to this activity.\n  condition: >\n    spawned_process \n    a",
                      "markdown": "`  form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the terminal and not run as a result of a script. This rule \n    is a basic auditing or template rule. You can expand the list of reconnaissance commands, such as by adding \"ls\". Common \n    anti-patterns are SRE activity or debugging, but it is still worth capturing this generically. Typically, you would expect \n    other rules to fire as well in relation to this activity.\n  condition: >\n    spawned_process \n    a`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 594,
                  "startColumn": 7,
                  "endLine": 594,
                  "endColumn": 15,
                  "snippet": {
                    "text": "# the filtercheck and others will always return <NA>. In this specific\n# rule, 'open_write' events don't have a `%evt.arg.newpath` argument for example so\n# we will always return `<NA>`.\n- rule: Update Package Repository\n  desc: > \n    This rule generically detects updates to package repositories and can be seen as an auditing measure. \n    Recommend evaluating its relevance for your specific environment.\n",
                    "rendered": {
                      "text": "# the filtercheck and others will always return <NA>. In this specific\n# rule, 'open_write' events don't have a `%evt.arg.newpath` argument for example so\n# we will always return `<NA>`.\n- rule: Update Package Repository\n  desc: > \n    This rule generically detects updates to package repositories and can be seen as an auditing measure. \n    Recommend evaluating its relevance for your specific environment.\n",
                      "markdown": "`# the filtercheck and others will always return <NA>. In this specific\n# rule, 'open_write' events don't have a `%evt.arg.newpath` argument for example so\n# we will always return `<NA>`.\n- rule: Update Package Repository\n  desc: > \n    This rule generically detects updates to package repositories and can be seen as an auditing measure. \n    Recommend evaluating its relevance for your specific environment.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 11,
                  "endLine": 184,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  items: [pip, pip3, conda]\n\n# The truncated dpkg-preconfigu is intentional, process names are\n# truncated at the falcosecurity-libs level.\n- list: package_mgmt_binaries\n  items: [rpm_binaries, deb_binaries, update-alternat, gem, npm, python_package_managers, sane-utils.post, alternatives, chef-client, apk, snapd]\n\n",
                    "rendered": {
                      "text": "  items: [pip, pip3, conda]\n\n# The truncated dpkg-preconfigu is intentional, process names are\n# truncated at the falcosecurity-libs level.\n- list: package_mgmt_binaries\n  items: [rpm_binaries, deb_binaries, update-alternat, gem, npm, python_package_managers, sane-utils.post, alternatives, chef-client, apk, snapd]\n\n",
                      "markdown": "`  items: [pip, pip3, conda]\n\n# The truncated dpkg-preconfigu is intentional, process names are\n# truncated at the falcosecurity-libs level.\n- list: package_mgmt_binaries\n  items: [rpm_binaries, deb_binaries, update-alternat, gem, npm, python_package_managers, sane-utils.post, alternatives, chef-client, apk, snapd]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 38,
                  "endLine": 9,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1744,
                  "startColumn": 119,
                  "endLine": 1744,
                  "endColumn": 127,
                  "snippet": {
                    "text": "    form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the terminal and not run as a result of a script. This rule \n    is a basic auditing or template rule. You can expand the list of reconnaissance commands, such as by adding \"ls\". Common \n    anti-patterns are SRE activity or debugging, but it is still worth capturing this generically. Typically, you would expect \n    other rules to fire as well in relation to this activity.\n  condition: >\n    spawned_process \n",
                    "rendered": {
                      "text": "    form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the terminal and not run as a result of a script. This rule \n    is a basic auditing or template rule. You can expand the list of reconnaissance commands, such as by adding \"ls\". Common \n    anti-patterns are SRE activity or debugging, but it is still worth capturing this generically. Typically, you would expect \n    other rules to fire as well in relation to this activity.\n  condition: >\n    spawned_process \n",
                      "markdown": "`    form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the terminal and not run as a result of a script. This rule \n    is a basic auditing or template rule. You can expand the list of reconnaissance commands, such as by adding \"ls\". Common \n    anti-patterns are SRE activity or debugging, but it is still worth capturing this generically. Typically, you would expect \n    other rules to fire as well in relation to this activity.\n  condition: >\n    spawned_process \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1743,
                  "startColumn": 49,
                  "endLine": 1743,
                  "endColumn": 57,
                  "snippet": {
                    "text": "  form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the terminal and not run as a result of a script. This rule \n    is a basic auditing or template rule. You can expand the list of reconnaissance commands, such as by adding \"ls\". Common \n    anti-patterns are SRE activity or debugging, but it is still worth capturing this generically. Typically, you would expect \n    other rules to fire as well in relation to this activity.\n  condition: >\n    spawned_process \n    a",
                    "rendered": {
                      "text": "  form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the terminal and not run as a result of a script. This rule \n    is a basic auditing or template rule. You can expand the list of reconnaissance commands, such as by adding \"ls\". Common \n    anti-patterns are SRE activity or debugging, but it is still worth capturing this generically. Typically, you would expect \n    other rules to fire as well in relation to this activity.\n  condition: >\n    spawned_process \n    a",
                      "markdown": "`  form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the terminal and not run as a result of a script. This rule \n    is a basic auditing or template rule. You can expand the list of reconnaissance commands, such as by adding \"ls\". Common \n    anti-patterns are SRE activity or debugging, but it is still worth capturing this generically. Typically, you would expect \n    other rules to fire as well in relation to this activity.\n  condition: >\n    spawned_process \n    a`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1741,
                  "startColumn": 53,
                  "endLine": 1741,
                  "endColumn": 58,
                  "snippet": {
                    "text": "   This rule detects basic interactive reconnaissance commands that are typically run by unsophisticated attackers or used \n    in internal Red Team exercises. Interactive is defined as a terminal being present (proc.tty != 0). This could be any \n    form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the terminal and not run as a result of a script. This rule \n    is a basic auditing or template rule. You can expand the list of reconnaissance commands, such as by ",
                    "rendered": {
                      "text": "   This rule detects basic interactive reconnaissance commands that are typically run by unsophisticated attackers or used \n    in internal Red Team exercises. Interactive is defined as a terminal being present (proc.tty != 0). This could be any \n    form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the terminal and not run as a result of a script. This rule \n    is a basic auditing or template rule. You can expand the list of reconnaissance commands, such as by ",
                      "markdown": "`   This rule detects basic interactive reconnaissance commands that are typically run by unsophisticated attackers or used \n    in internal Red Team exercises. Interactive is defined as a terminal being present (proc.tty != 0). This could be any \n    form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the terminal and not run as a result of a script. This rule \n    is a basic auditing or template rule. You can expand the list of reconnaissance commands, such as by `"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1740,
                  "startColumn": 15,
                  "endLine": 1740,
                  "endColumn": 20,
                  "snippet": {
                    "text": "ms: [w, whoami, id, who, uname]\n\n- condition: (proc.name in (recon_binaries))\n  macro: recon_binaries_procs\n\n- rule: Basic Interactive Reconnaissance\n  desc: >\n    This rule detects basic interactive reconnaissance commands that are typically run by unsophisticated attackers or used \n    in internal Red Team exercises. Interactive is defined as a terminal being present (proc.tty != 0). This could be any \n    form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the t",
                    "rendered": {
                      "text": "ms: [w, whoami, id, who, uname]\n\n- condition: (proc.name in (recon_binaries))\n  macro: recon_binaries_procs\n\n- rule: Basic Interactive Reconnaissance\n  desc: >\n    This rule detects basic interactive reconnaissance commands that are typically run by unsophisticated attackers or used \n    in internal Red Team exercises. Interactive is defined as a terminal being present (proc.tty != 0). This could be any \n    form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the t",
                      "markdown": "`ms: [w, whoami, id, who, uname]\n\n- condition: (proc.name in (recon_binaries))\n  macro: recon_binaries_procs\n\n- rule: Basic Interactive Reconnaissance\n  desc: >\n    This rule detects basic interactive reconnaissance commands that are typically run by unsophisticated attackers or used \n    in internal Red Team exercises. Interactive is defined as a terminal being present (proc.tty != 0). This could be any \n    form of reverse shell or usage of kubectl exec or ssh etc. In addition, filtering for the process being the process group  \n    leader indicates that the command was \"directly\" typed into the t`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1564,
                  "startColumn": 3,
                  "endLine": 1564,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    provides more precise detection of this TTP using unambiguous kernel signals. It is recommended to use the new rule. However, this \n    rule might be more relevant for auditing if applicable in your environment, such as when chmod is used on files within the /tmp folder.\n  condition: >\n    chmod \n    and container \n    and evt.rawres>=0 \n    and ((evt.arg.mode contains \"S_IXUSR\") or\n",
                    "rendered": {
                      "text": "    provides more precise detection of this TTP using unambiguous kernel signals. It is recommended to use the new rule. However, this \n    rule might be more relevant for auditing if applicable in your environment, such as when chmod is used on files within the /tmp folder.\n  condition: >\n    chmod \n    and container \n    and evt.rawres>=0 \n    and ((evt.arg.mode contains \"S_IXUSR\") or\n",
                      "markdown": "`    provides more precise detection of this TTP using unambiguous kernel signals. It is recommended to use the new rule. However, this \n    rule might be more relevant for auditing if applicable in your environment, such as when chmod is used on files within the /tmp folder.\n  condition: >\n    chmod \n    and container \n    and evt.rawres>=0 \n    and ((evt.arg.mode contains \"S_IXUSR\") or\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1562,
                  "startColumn": 92,
                  "endLine": 1562,
                  "endColumn": 99,
                  "snippet": {
                    "text": "    Detect new executables created within a container as a result of chmod. While this detection can generate significant noise, chmod \n    usage is frequently linked to dropping and executing malicious implants. The newer rule \"Drop and execute new binary in container\" \n    provides more precise detection of this TTP using unambiguous kernel signals. It is recommended to use the new rule. However, this \n    rule might be more relevant for auditing if applicable in your environment, such as when chmod is used on files within the /tmp folder.\n  condition: >\n    chmod \n    and container \n",
                    "rendered": {
                      "text": "    Detect new executables created within a container as a result of chmod. While this detection can generate significant noise, chmod \n    usage is frequently linked to dropping and executing malicious implants. The newer rule \"Drop and execute new binary in container\" \n    provides more precise detection of this TTP using unambiguous kernel signals. It is recommended to use the new rule. However, this \n    rule might be more relevant for auditing if applicable in your environment, such as when chmod is used on files within the /tmp folder.\n  condition: >\n    chmod \n    and container \n",
                      "markdown": "`    Detect new executables created within a container as a result of chmod. While this detection can generate significant noise, chmod \n    usage is frequently linked to dropping and executing malicious implants. The newer rule \"Drop and execute new binary in container\" \n    provides more precise detection of this TTP using unambiguous kernel signals. It is recommended to use the new rule. However, this \n    rule might be more relevant for auditing if applicable in your environment, such as when chmod is used on files within the /tmp folder.\n  condition: >\n    chmod \n    and container \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1559,
                  "startColumn": 128,
                  "endLine": 1559,
                  "endColumn": 135,
                  "snippet": {
                    "text": "\n- rule: Container Drift Detected (chmod)\n  desc: > \n    Detect new executables created within a container as a result of chmod. While this detection can generate significant noise, chmod \n    usage is frequently linked to dropping and executing malicious implants. The newer rule \"Drop and execute new binary in container\" \n    provides more precise detection of this TTP using unambiguous kernel signals. It is recommended to use the new rule. However, this \n    rule might be more relevant for auditing if applicable in your environment, such as when chmod is used on files within the /tmp folder.\n",
                    "rendered": {
                      "text": "\n- rule: Container Drift Detected (chmod)\n  desc: > \n    Detect new executables created within a container as a result of chmod. While this detection can generate significant noise, chmod \n    usage is frequently linked to dropping and executing malicious implants. The newer rule \"Drop and execute new binary in container\" \n    provides more precise detection of this TTP using unambiguous kernel signals. It is recommended to use the new rule. However, this \n    rule might be more relevant for auditing if applicable in your environment, such as when chmod is used on files within the /tmp folder.\n",
                      "markdown": "`\n- rule: Container Drift Detected (chmod)\n  desc: > \n    Detect new executables created within a container as a result of chmod. While this detection can generate significant noise, chmod \n    usage is frequently linked to dropping and executing malicious implants. The newer rule \"Drop and execute new binary in container\" \n    provides more precise detection of this TTP using unambiguous kernel signals. It is recommended to use the new rule. However, this \n    rule might be more relevant for auditing if applicable in your environment, such as when chmod is used on files within the /tmp folder.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1552,
                  "startColumn": 84,
                  "endLine": 1552,
                  "endColumn": 92,
                  "snippet": {
                    "text": "# an activity that might be malicious or non-compliant.\n# Two things to pay attention to:\n#   1) In most cases, 'docker cp' will not be identified, but the assumption is that if an attacker gained access to the container runtime daemon, they are already privileged\n#   2) Drift rules will be noisy in environments in which containers are built (e.g. docker build)\n# These two rules are not enabled by default.\n- macro: user_known_container_drift_activities\n  condition: (never_true)\n",
                    "rendered": {
                      "text": "# an activity that might be malicious or non-compliant.\n# Two things to pay attention to:\n#   1) In most cases, 'docker cp' will not be identified, but the assumption is that if an attacker gained access to the container runtime daemon, they are already privileged\n#   2) Drift rules will be noisy in environments in which containers are built (e.g. docker build)\n# These two rules are not enabled by default.\n- macro: user_known_container_drift_activities\n  condition: (never_true)\n",
                      "markdown": "`# an activity that might be malicious or non-compliant.\n# Two things to pay attention to:\n#   1) In most cases, 'docker cp' will not be identified, but the assumption is that if an attacker gained access to the container runtime daemon, they are already privileged\n#   2) Drift rules will be noisy in environments in which containers are built (e.g. docker build)\n# These two rules are not enabled by default.\n- macro: user_known_container_drift_activities\n  condition: (never_true)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1547,
                  "startColumn": 44,
                  "endLine": 1547,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n# The two Container Drift rules below will fire when a new executable is created in a container.\n# There are two ways to create executables - file is created with execution permissions or permissions change of existing file.\n# We will use a new filter, is_open_exec, to find all files creations with execution permission, and will trace all chmods in a container.\n# The use case we are targeting here is an attempt to execute code that was not shipped as part of a container (drift) -\n# an activity that might be malicious or non-compliant.\n# Two things to pay attention to:\n",
                    "rendered": {
                      "text": "\n# The two Container Drift rules below will fire when a new executable is created in a container.\n# There are two ways to create executables - file is created with execution permissions or permissions change of existing file.\n# We will use a new filter, is_open_exec, to find all files creations with execution permission, and will trace all chmods in a container.\n# The use case we are targeting here is an attempt to execute code that was not shipped as part of a container (drift) -\n# an activity that might be malicious or non-compliant.\n# Two things to pay attention to:\n",
                      "markdown": "`\n# The two Container Drift rules below will fire when a new executable is created in a container.\n# There are two ways to create executables - file is created with execution permissions or permissions change of existing file.\n# We will use a new filter, is_open_exec, to find all files creations with execution permission, and will trace all chmods in a container.\n# The use case we are targeting here is an attempt to execute code that was not shipped as part of a container (drift) -\n# an activity that might be malicious or non-compliant.\n# Two things to pay attention to:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1522,
                  "startColumn": 21,
                  "endLine": 1522,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    mcr.microsoft.com/aks/hcp/hcp-tunnel-front\n  ]\n\n# Whitelist for known docker client binaries run inside container\n# - registry.k8s.io/fluentd-gcp-scaler in GCP/GKE\n- macro: user_known_k8s_client_container\n  condition: >\n",
                    "rendered": {
                      "text": "    mcr.microsoft.com/aks/hcp/hcp-tunnel-front\n  ]\n\n# Whitelist for known docker client binaries run inside container\n# - registry.k8s.io/fluentd-gcp-scaler in GCP/GKE\n- macro: user_known_k8s_client_container\n  condition: >\n",
                      "markdown": "`    mcr.microsoft.com/aks/hcp/hcp-tunnel-front\n  ]\n\n# Whitelist for known docker client binaries run inside container\n# - registry.k8s.io/fluentd-gcp-scaler in GCP/GKE\n- macro: user_known_k8s_client_container\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1323,
                  "startColumn": 66,
                  "endLine": 1323,
                  "endColumn": 72,
                  "snippet": {
                    "text": "- rule: Interpreted procs outbound network activity\n  desc: > \n    Any outbound network activity performed by any interpreted program (perl, python, ruby, etc.). While it offers broad coverage and behavioral \n    insights, operationalizing it effectively requires significant time and might result in a moderate level of noise. Suggesting customizing \n    this rule to be more specific. For example, you could set it up to alert only for important namespaces after studying their usual behavior.\n  condition: >\n    outbound \n",
                    "rendered": {
                      "text": "- rule: Interpreted procs outbound network activity\n  desc: > \n    Any outbound network activity performed by any interpreted program (perl, python, ruby, etc.). While it offers broad coverage and behavioral \n    insights, operationalizing it effectively requires significant time and might result in a moderate level of noise. Suggesting customizing \n    this rule to be more specific. For example, you could set it up to alert only for important namespaces after studying their usual behavior.\n  condition: >\n    outbound \n",
                      "markdown": "`- rule: Interpreted procs outbound network activity\n  desc: > \n    Any outbound network activity performed by any interpreted program (perl, python, ruby, etc.). While it offers broad coverage and behavioral \n    insights, operationalizing it effectively requires significant time and might result in a moderate level of noise. Suggesting customizing \n    this rule to be more specific. For example, you could set it up to alert only for important namespaces after studying their usual behavior.\n  condition: >\n    outbound \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1310,
                  "startColumn": 66,
                  "endLine": 1310,
                  "endColumn": 72,
                  "snippet": {
                    "text": "- rule: Interpreted procs inbound network activity\n  desc: > \n    Any inbound network activity performed by any interpreted program (perl, python, ruby, etc.). While it offers broad coverage and behavioral \n    insights, operationalizing it effectively requires significant time and might result in a moderate level of noise. Suggesting customizing \n    this rule to be more specific. For example, you could set it up to alert only for important namespaces after studying their usual behavior.\n  condition: >\n    inbound \n",
                    "rendered": {
                      "text": "- rule: Interpreted procs inbound network activity\n  desc: > \n    Any inbound network activity performed by any interpreted program (perl, python, ruby, etc.). While it offers broad coverage and behavioral \n    insights, operationalizing it effectively requires significant time and might result in a moderate level of noise. Suggesting customizing \n    this rule to be more specific. For example, you could set it up to alert only for important namespaces after studying their usual behavior.\n  condition: >\n    inbound \n",
                      "markdown": "`- rule: Interpreted procs inbound network activity\n  desc: > \n    Any inbound network activity performed by any interpreted program (perl, python, ruby, etc.). While it offers broad coverage and behavioral \n    insights, operationalizing it effectively requires significant time and might result in a moderate level of noise. Suggesting customizing \n    this rule to be more specific. For example, you could set it up to alert only for important namespaces after studying their usual behavior.\n  condition: >\n    inbound \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1274,
                  "startColumn": 34,
                  "endLine": 1274,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    and sensitive_mount\n    and not falco_sensitive_mount_containers\n    and not user_sensitive_mount_containers\n  output: Container with sensitive mount started (mounts=%container.mounts evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: INFO\n  tags: [maturity_sandbox, container, cis, mitre_execution, T1610]\n\n",
                    "rendered": {
                      "text": "    and sensitive_mount\n    and not falco_sensitive_mount_containers\n    and not user_sensitive_mount_containers\n  output: Container with sensitive mount started (mounts=%container.mounts evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: INFO\n  tags: [maturity_sandbox, container, cis, mitre_execution, T1610]\n\n",
                      "markdown": "`    and sensitive_mount\n    and not falco_sensitive_mount_containers\n    and not user_sensitive_mount_containers\n  output: Container with sensitive mount started (mounts=%container.mounts evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: INFO\n  tags: [maturity_sandbox, container, cis, mitre_execution, T1610]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1265,
                  "startColumn": 69,
                  "endLine": 1265,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\n- rule: Launch Sensitive Mount Container\n  desc: >\n    Detect the initial process launched within a container that has a mount from a sensitive host directory (e.g. /proc). \n    Exceptions are made for known trusted images. This rule holds value for generic auditing; however, its noisiness \n    varies based on your environment.\n  condition: >\n",
                    "rendered": {
                      "text": "\n- rule: Launch Sensitive Mount Container\n  desc: >\n    Detect the initial process launched within a container that has a mount from a sensitive host directory (e.g. /proc). \n    Exceptions are made for known trusted images. This rule holds value for generic auditing; however, its noisiness \n    varies based on your environment.\n  condition: >\n",
                      "markdown": "`\n- rule: Launch Sensitive Mount Container\n  desc: >\n    Detect the initial process launched within a container that has a mount from a sensitive host directory (e.g. /proc). \n    Exceptions are made for known trusted images. This rule holds value for generic auditing; however, its noisiness \n    varies based on your environment.\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1263,
                  "startColumn": 24,
                  "endLine": 1263,
                  "endColumn": 31,
                  "snippet": {
                    "text": "              not container.mount.dest[/etc/kubernetes/manifests] in (\"<NA>\",\"N/A\") or\n              not container.mount.dest[/root*] in (\"<NA>\",\"N/A\"))\n\n- rule: Launch Sensitive Mount Container\n  desc: >\n    Detect the initial process launched within a container that has a mount from a sensitive host directory (e.g. /proc). \n    Exceptions are made for known trusted images. This rule holds value for generic auditing; however, its noisiness \n",
                    "rendered": {
                      "text": "              not container.mount.dest[/etc/kubernetes/manifests] in (\"<NA>\",\"N/A\") or\n              not container.mount.dest[/root*] in (\"<NA>\",\"N/A\"))\n\n- rule: Launch Sensitive Mount Container\n  desc: >\n    Detect the initial process launched within a container that has a mount from a sensitive host directory (e.g. /proc). \n    Exceptions are made for known trusted images. This rule holds value for generic auditing; however, its noisiness \n",
                      "markdown": "`              not container.mount.dest[/etc/kubernetes/manifests] in (\"<NA>\",\"N/A\") or\n              not container.mount.dest[/root*] in (\"<NA>\",\"N/A\"))\n\n- rule: Launch Sensitive Mount Container\n  desc: >\n    Detect the initial process launched within a container that has a mount from a sensitive host directory (e.g. /proc). \n    Exceptions are made for known trusted images. This rule holds value for generic auditing; however, its noisiness \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1245,
                  "startColumn": 34,
                  "endLine": 1245,
                  "endColumn": 41,
                  "snippet": {
                    "text": "- macro: user_sensitive_mount_containers\n  condition: (never_true)\n\n# For now, only considering a full mount of /etc as\n# sensitive. Ideally, this would also consider all subdirectories\n# below /etc as well, but the globbing mechanism\n# doesn't allow exclusions of a full pattern, only single characters.\n",
                    "rendered": {
                      "text": "- macro: user_sensitive_mount_containers\n  condition: (never_true)\n\n# For now, only considering a full mount of /etc as\n# sensitive. Ideally, this would also consider all subdirectories\n# below /etc as well, but the globbing mechanism\n# doesn't allow exclusions of a full pattern, only single characters.\n",
                      "markdown": "`- macro: user_sensitive_mount_containers\n  condition: (never_true)\n\n# For now, only considering a full mount of /etc as\n# sensitive. Ideally, this would also consider all subdirectories\n# below /etc as well, but the globbing mechanism\n# doesn't allow exclusions of a full pattern, only single characters.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1214,
                  "startColumn": 39,
                  "endLine": 1214,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    - docker.io/falcosecurity/falco-no-driver\n    - public.ecr.aws/falcosecurity/falco-no-driver\n\n# These container images are allowed to mount sensitive paths from the\n# host filesystem.\n- list: falco_sensitive_mount_images\n  items: [\n",
                    "rendered": {
                      "text": "    - docker.io/falcosecurity/falco-no-driver\n    - public.ecr.aws/falcosecurity/falco-no-driver\n\n# These container images are allowed to mount sensitive paths from the\n# host filesystem.\n- list: falco_sensitive_mount_images\n  items: [\n",
                      "markdown": "`    - docker.io/falcosecurity/falco-no-driver\n    - public.ecr.aws/falcosecurity/falco-no-driver\n\n# These container images are allowed to mount sensitive paths from the\n# host filesystem.\n- list: falco_sensitive_mount_images\n  items: [\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1178,
                  "startColumn": 63,
                  "endLine": 1179,
                  "snippet": {
                    "text": "  condition: >\n    (allowed_aws_ecr_registry_root_for_eks and container.image.repository endswith \".amazonaws.com/amazon-k8s-cni\")\n\n# These images are allowed both to run with --privileged and to mount\n# sensitive paths from the host filesystem.\n#\n# NOTE: This list is only provided for backwards compatibility with\n# older local falco rules files that may have been appending to\n",
                    "rendered": {
                      "text": "  condition: >\n    (allowed_aws_ecr_registry_root_for_eks and container.image.repository endswith \".amazonaws.com/amazon-k8s-cni\")\n\n# These images are allowed both to run with --privileged and to mount\n# sensitive paths from the host filesystem.\n#\n# NOTE: This list is only provided for backwards compatibility with\n# older local falco rules files that may have been appending to\n",
                      "markdown": "`  condition: >\n    (allowed_aws_ecr_registry_root_for_eks and container.image.repository endswith \".amazonaws.com/amazon-k8s-cni\")\n\n# These images are allowed both to run with --privileged and to mount\n# sensitive paths from the host filesystem.\n#\n# NOTE: This list is only provided for backwards compatibility with\n# older local falco rules files that may have been appending to\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1118,
                  "startColumn": 9,
                  "endLine": 1118,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    and not exe_running_docker_save\n    and not amazon_linux_running_python_yum\n    and not user_known_write_rpm_database_activities\n  output: rpm database opened for writing by a non-rpm program (file=%fd.name pcmdline=%proc.pcmdline evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: ERROR\n  tags: [maturity_sandbox, host, container, filesystem, software_mgmt, mitre_persistence, T1072]\n\n",
                    "rendered": {
                      "text": "    and not exe_running_docker_save\n    and not amazon_linux_running_python_yum\n    and not user_known_write_rpm_database_activities\n  output: rpm database opened for writing by a non-rpm program (file=%fd.name pcmdline=%proc.pcmdline evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: ERROR\n  tags: [maturity_sandbox, host, container, filesystem, software_mgmt, mitre_persistence, T1072]\n\n",
                      "markdown": "`    and not exe_running_docker_save\n    and not amazon_linux_running_python_yum\n    and not user_known_write_rpm_database_activities\n  output: rpm database opened for writing by a non-rpm program (file=%fd.name pcmdline=%proc.pcmdline evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: ERROR\n  tags: [maturity_sandbox, host, container, filesystem, software_mgmt, mitre_persistence, T1072]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1105,
                  "startColumn": 26,
                  "endLine": 1105,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# Only let rpm-related programs write to the rpm database\n- rule: Write below rpm database\n  desc: > \n    Trying to write to the rpm database by any non-rpm related program can serve as an auditing rule to track general system changes. \n    Such rules can be noisy and challenging to interpret, particularly if your system frequently undergoes updates. However, careful \n    profiling of your environment can transform this rule into an effective rule for detecting unusual behavior associated with system \n    changes, including compliance-related cases.\n",
                    "rendered": {
                      "text": "# Only let rpm-related programs write to the rpm database\n- rule: Write below rpm database\n  desc: > \n    Trying to write to the rpm database by any non-rpm related program can serve as an auditing rule to track general system changes. \n    Such rules can be noisy and challenging to interpret, particularly if your system frequently undergoes updates. However, careful \n    profiling of your environment can transform this rule into an effective rule for detecting unusual behavior associated with system \n    changes, including compliance-related cases.\n",
                      "markdown": "`# Only let rpm-related programs write to the rpm database\n- rule: Write below rpm database\n  desc: > \n    Trying to write to the rpm database by any non-rpm related program can serve as an auditing rule to track general system changes. \n    Such rules can be noisy and challenging to interpret, particularly if your system frequently undergoes updates. However, careful \n    profiling of your environment can transform this rule into an effective rule for detecting unusual behavior associated with system \n    changes, including compliance-related cases.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1103,
                  "startColumn": 19,
                  "endLine": 1103,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  condition: (never_true)\n\n# Only let rpm-related programs write to the rpm database\n- rule: Write below rpm database\n  desc: > \n    Trying to write to the rpm database by any non-rpm related program can serve as an auditing rule to track general system changes. \n    Such rules can be noisy and challenging to interpret, particularly if your system frequently undergoes updates. However, careful \n",
                    "rendered": {
                      "text": "  condition: (never_true)\n\n# Only let rpm-related programs write to the rpm database\n- rule: Write below rpm database\n  desc: > \n    Trying to write to the rpm database by any non-rpm related program can serve as an auditing rule to track general system changes. \n    Such rules can be noisy and challenging to interpret, particularly if your system frequently undergoes updates. However, careful \n",
                      "markdown": "`  condition: (never_true)\n\n# Only let rpm-related programs write to the rpm database\n- rule: Write below rpm database\n  desc: > \n    Trying to write to the rpm database by any non-rpm related program can serve as an auditing rule to track general system changes. \n    Such rules can be noisy and challenging to interpret, particularly if your system frequently undergoes updates. However, careful \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 1102,
                  "startColumn": 44,
                  "endLine": 1102,
                  "endColumn": 49,
                  "snippet": {
                    "text": "- macro: user_known_write_rpm_database_activities\n  condition: (never_true)\n\n# Only let rpm-related programs write to the rpm database\n- rule: Write below rpm database\n  desc: > \n    Trying to write to the rpm database by any non-rpm related program can serve as an auditing rule to track general system changes. \n",
                    "rendered": {
                      "text": "- macro: user_known_write_rpm_database_activities\n  condition: (never_true)\n\n# Only let rpm-related programs write to the rpm database\n- rule: Write below rpm database\n  desc: > \n    Trying to write to the rpm database by any non-rpm related program can serve as an auditing rule to track general system changes. \n",
                      "markdown": "`- macro: user_known_write_rpm_database_activities\n  condition: (never_true)\n\n# Only let rpm-related programs write to the rpm database\n- rule: Write below rpm database\n  desc: > \n    Trying to write to the rpm database by any non-rpm related program can serve as an auditing rule to track general system changes. \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 633,
                  "startColumn": 66,
                  "endLine": 634,
                  "snippet": {
                    "text": "  priority: ERROR\n  tags: [maturity_sandbox, host, container, filesystem, mitre_persistence, T1543]\n\n# If you'd like to generally monitor a wider set of directories on top\n# of the ones covered by the rule Write below binary dir, you can use\n# the following rule and lists.\n- list: monitored_directories\n  items: [/boot, /lib, /lib64, /usr/lib, /usr/local/lib, /usr/local/sbin, /usr/local/bin, /root/.ssh]\n",
                    "rendered": {
                      "text": "  priority: ERROR\n  tags: [maturity_sandbox, host, container, filesystem, mitre_persistence, T1543]\n\n# If you'd like to generally monitor a wider set of directories on top\n# of the ones covered by the rule Write below binary dir, you can use\n# the following rule and lists.\n- list: monitored_directories\n  items: [/boot, /lib, /lib64, /usr/lib, /usr/local/lib, /usr/local/sbin, /usr/local/bin, /root/.ssh]\n",
                      "markdown": "`  priority: ERROR\n  tags: [maturity_sandbox, host, container, filesystem, mitre_persistence, T1543]\n\n# If you'd like to generally monitor a wider set of directories on top\n# of the ones covered by the rule Write below binary dir, you can use\n# the following rule and lists.\n- list: monitored_directories\n  items: [/boot, /lib, /lib64, /usr/lib, /usr/local/lib, /usr/local/sbin, /usr/local/bin, /root/.ssh]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 13,
                  "endLine": 282,
                  "endColumn": 18,
                  "snippet": {
                    "text": "- list: bash_config_files\n  items: [/etc/profile, /etc/bashrc]\n\n# Covers both csh and tcsh\n- list: csh_config_filenames\n  items: [.cshrc, .login, .logout, .history, .tcshrc, .cshdirs]\n\n",
                    "rendered": {
                      "text": "- list: bash_config_files\n  items: [/etc/profile, /etc/bashrc]\n\n# Covers both csh and tcsh\n- list: csh_config_filenames\n  items: [.cshrc, .login, .logout, .history, .tcshrc, .cshdirs]\n\n",
                      "markdown": "`- list: bash_config_files\n  items: [/etc/profile, /etc/bashrc]\n\n# Covers both csh and tcsh\n- list: csh_config_filenames\n  items: [.cshrc, .login, .logout, .history, .tcshrc, .cshdirs]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 24,
                  "endLine": 144,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n",
                    "rendered": {
                      "text": "    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n",
                      "markdown": "`    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 5,
                  "endLine": 144,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n",
                    "rendered": {
                      "text": "    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n",
                      "markdown": "`    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 55,
                  "endLine": 143,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                    "rendered": {
                      "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                      "markdown": "`    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 40,
                  "endLine": 143,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                    "rendered": {
                      "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                      "markdown": "`    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 29,
                  "endLine": 143,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                    "rendered": {
                      "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                      "markdown": "`    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 78,
                  "endLine": 134,
                  "endColumn": 85,
                  "snippet": {
                    "text": "- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 59,
                  "endLine": 134,
                  "endColumn": 64,
                  "snippet": {
                    "text": "- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 44,
                  "endLine": 134,
                  "endColumn": 50,
                  "snippet": {
                    "text": "- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 29,
                  "endLine": 134,
                  "endColumn": 36,
                  "snippet": {
                    "text": "- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 18,
                  "endLine": 134,
                  "endColumn": 24,
                  "snippet": {
                    "text": "- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 1,
                  "endLine": 134,
                  "endColumn": 7,
                  "snippet": {
                    "text": "- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`- list: shell_mgmt_binaries\n  items: [add-shell, remove-shell]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco-sandbox_rules.yaml"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 8,
                  "endLine": 89,
                  "snippet": {
                    "text": "- macro: spawned_process\n  condition: (evt.type in (execve, execveat) and evt.dir=<)\n\n- macro: chmod\n  condition: (evt.type in (chmod, fchmod, fchmodat) and evt.dir=<)\n\n# File categories\n- macro: bin_dir\n",
                    "rendered": {
                      "text": "- macro: spawned_process\n  condition: (evt.type in (execve, execveat) and evt.dir=<)\n\n- macro: chmod\n  condition: (evt.type in (chmod, fchmod, fchmodat) and evt.dir=<)\n\n# File categories\n- macro: bin_dir\n",
                      "markdown": "`- macro: spawned_process\n  condition: (evt.type in (execve, execveat) and evt.dir=<)\n\n- macro: chmod\n  condition: (evt.type in (chmod, fchmod, fchmodat) and evt.dir=<)\n\n# File categories\n- macro: bin_dir\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000300"
          },
          "message": {
            "text": "Backdoor: Reverse Shell",
            "id": "BD000300"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1022,
                  "startColumn": 42,
                  "endLine": 1022,
                  "endColumn": 55,
                  "snippet": {
                    "text": "- rule: Redirect STDOUT/STDIN to Network Connection in Container\n  desc: >\n    Detect redirection of stdout/stdin to a network connection within a container, achieved by utilizing a \n    variant of the dup syscall (potential reverse shell or remote code execution \n    https://github.com/swisskyrepo/PayloadsAllTheThings/). This detection is behavior-based and may generate \n    noise in the system, and can be adjusted using the user_known_stand_streams_redirect_activities template \n    macro. Tuning can be performed similarly to existing detections based on process lineage or container images, \n",
                    "rendered": {
                      "text": "- rule: Redirect STDOUT/STDIN to Network Connection in Container\n  desc: >\n    Detect redirection of stdout/stdin to a network connection within a container, achieved by utilizing a \n    variant of the dup syscall (potential reverse shell or remote code execution \n    https://github.com/swisskyrepo/PayloadsAllTheThings/). This detection is behavior-based and may generate \n    noise in the system, and can be adjusted using the user_known_stand_streams_redirect_activities template \n    macro. Tuning can be performed similarly to existing detections based on process lineage or container images, \n",
                      "markdown": "`- rule: Redirect STDOUT/STDIN to Network Connection in Container\n  desc: >\n    Detect redirection of stdout/stdin to a network connection within a container, achieved by utilizing a \n    variant of the dup syscall (potential reverse shell or remote code execution \n    https://github.com/swisskyrepo/PayloadsAllTheThings/). This detection is behavior-based and may generate \n    noise in the system, and can be adjusted using the user_known_stand_streams_redirect_activities template \n    macro. Tuning can be performed similarly to existing detections based on process lineage or container images, \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000300"
          },
          "message": {
            "text": "Backdoor: Reverse Shell",
            "id": "BD000300"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 841,
                  "startColumn": 30,
                  "endLine": 841,
                  "endColumn": 43,
                  "snippet": {
                    "text": "- rule: Netcat Remote Code Execution in Container\n  desc: > \n    Netcat Program runs inside container that allows remote code execution and may be utilized \n    as a part of a variety of reverse shell payload https://github.com/swisskyrepo/PayloadsAllTheThings/.\n    These programs are of higher relevance as they are commonly installed on UNIX-like operating systems.\n    Can fire in combination with the \"Redirect STDOUT/STDIN to Network Connection in Container\" \n    rule as it utilizes a different evt.type.\n",
                    "rendered": {
                      "text": "- rule: Netcat Remote Code Execution in Container\n  desc: > \n    Netcat Program runs inside container that allows remote code execution and may be utilized \n    as a part of a variety of reverse shell payload https://github.com/swisskyrepo/PayloadsAllTheThings/.\n    These programs are of higher relevance as they are commonly installed on UNIX-like operating systems.\n    Can fire in combination with the \"Redirect STDOUT/STDIN to Network Connection in Container\" \n    rule as it utilizes a different evt.type.\n",
                      "markdown": "`- rule: Netcat Remote Code Execution in Container\n  desc: > \n    Netcat Program runs inside container that allows remote code execution and may be utilized \n    as a part of a variety of reverse shell payload https://github.com/swisskyrepo/PayloadsAllTheThings/.\n    These programs are of higher relevance as they are commonly installed on UNIX-like operating systems.\n    Can fire in combination with the \"Redirect STDOUT/STDIN to Network Connection in Container\" \n    rule as it utilizes a different evt.type.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1140,
                  "startColumn": 124,
                  "endLine": 1140,
                  "endColumn": 132,
                  "snippet": {
                    "text": "    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n    and ((grep_commands and private_aws_credentials) or\n",
                    "rendered": {
                      "text": "    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n    and ((grep_commands and private_aws_credentials) or\n",
                      "markdown": "`    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n    and ((grep_commands and private_aws_credentials) or\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1137,
                  "startColumn": 50,
                  "endLine": 1137,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n",
                    "rendered": {
                      "text": "\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n",
                      "markdown": "`\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 896,
                  "startColumn": 31,
                  "endLine": 896,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                                  proc.args contains \"id_ecdsa\"\n          )\n        ))\n  output: Grep private keys or passwords activities found (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority:\n    WARNING\n  tags: [maturity_stable, host, container, process, filesystem, mitre_credential_access, T1552.001]\n",
                    "rendered": {
                      "text": "                                  proc.args contains \"id_ecdsa\"\n          )\n        ))\n  output: Grep private keys or passwords activities found (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority:\n    WARNING\n  tags: [maturity_stable, host, container, process, filesystem, mitre_credential_access, T1552.001]\n",
                      "markdown": "`                                  proc.args contains \"id_ecdsa\"\n          )\n        ))\n  output: Grep private keys or passwords activities found (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority:\n    WARNING\n  tags: [maturity_stable, host, container, process, filesystem, mitre_credential_access, T1552.001]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 43,
                  "endLine": 889,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    an acceptable noise level.\n  condition: >\n    spawned_process \n    and ((grep_commands and private_key_or_password) or\n         (proc.name = \"find\" and (proc.args contains \"id_rsa\" or \n                                  proc.args contains \"id_dsa\" or \n                                  proc.args contains \"id_ed25519\" or \n",
                    "rendered": {
                      "text": "    an acceptable noise level.\n  condition: >\n    spawned_process \n    and ((grep_commands and private_key_or_password) or\n         (proc.name = \"find\" and (proc.args contains \"id_rsa\" or \n                                  proc.args contains \"id_dsa\" or \n                                  proc.args contains \"id_ed25519\" or \n",
                      "markdown": "`    an acceptable noise level.\n  condition: >\n    spawned_process \n    and ((grep_commands and private_key_or_password) or\n         (proc.name = \"find\" and (proc.args contains \"id_rsa\" or \n                                  proc.args contains \"id_dsa\" or \n                                  proc.args contains \"id_ed25519\" or \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 28,
                  "endLine": 889,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    an acceptable noise level.\n  condition: >\n    spawned_process \n    and ((grep_commands and private_key_or_password) or\n         (proc.name = \"find\" and (proc.args contains \"id_rsa\" or \n                                  proc.args contains \"id_dsa\" or \n                                  proc.args contains \"id_ed25519\" or \n",
                    "rendered": {
                      "text": "    an acceptable noise level.\n  condition: >\n    spawned_process \n    and ((grep_commands and private_key_or_password) or\n         (proc.name = \"find\" and (proc.args contains \"id_rsa\" or \n                                  proc.args contains \"id_dsa\" or \n                                  proc.args contains \"id_ed25519\" or \n",
                      "markdown": "`    an acceptable noise level.\n  condition: >\n    spawned_process \n    and ((grep_commands and private_key_or_password) or\n         (proc.name = \"find\" and (proc.args contains \"id_rsa\" or \n                                  proc.args contains \"id_dsa\" or \n                                  proc.args contains \"id_ed25519\" or \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 883,
                  "startColumn": 50,
                  "endLine": 883,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n",
                    "rendered": {
                      "text": "\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n",
                      "markdown": "`\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 881,
                  "startColumn": 31,
                  "endLine": 881,
                  "endColumn": 39,
                  "snippet": {
                    "text": "       proc.args icontains \" user \"))\n    )\n\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n",
                    "rendered": {
                      "text": "       proc.args icontains \" user \"))\n    )\n\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n",
                      "markdown": "`       proc.args icontains \" user \"))\n    )\n\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 868,
                  "startColumn": 24,
                  "endLine": 868,
                  "endColumn": 32,
                  "snippet": {
                    "text": "- macro: grep_more\n  condition: (never_true)\n\n- macro: private_key_or_password\n  condition: >\n    (proc.args icontains \"BEGIN PRIVATE\" or\n     proc.args icontains \"BEGIN OPENSSH PRIVATE\" or\n",
                    "rendered": {
                      "text": "- macro: grep_more\n  condition: (never_true)\n\n- macro: private_key_or_password\n  condition: >\n    (proc.args icontains \"BEGIN PRIVATE\" or\n     proc.args icontains \"BEGIN OPENSSH PRIVATE\" or\n",
                      "markdown": "`- macro: grep_more\n  condition: (never_true)\n\n- macro: private_key_or_password\n  condition: >\n    (proc.args icontains \"BEGIN PRIVATE\" or\n     proc.args icontains \"BEGIN OPENSSH PRIVATE\" or\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 868,
                  "startColumn": 9,
                  "endLine": 868,
                  "endColumn": 20,
                  "snippet": {
                    "text": "- macro: grep_more\n  condition: (never_true)\n\n- macro: private_key_or_password\n  condition: >\n    (proc.args icontains \"BEGIN PRIVATE\" or\n     proc.args icontains \"BEGIN OPENSSH PRIVATE\" or\n",
                    "rendered": {
                      "text": "- macro: grep_more\n  condition: (never_true)\n\n- macro: private_key_or_password\n  condition: >\n    (proc.args icontains \"BEGIN PRIVATE\" or\n     proc.args icontains \"BEGIN OPENSSH PRIVATE\" or\n",
                      "markdown": "`- macro: grep_more\n  condition: (never_true)\n\n- macro: private_key_or_password\n  condition: >\n    (proc.args icontains \"BEGIN PRIVATE\" or\n     proc.args icontains \"BEGIN OPENSSH PRIVATE\" or\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 864,
                  "startColumn": 53,
                  "endLine": 864,
                  "endColumn": 61,
                  "snippet": {
                    "text": "- macro: grep_commands\n  condition: (proc.name in (grep_binaries))\n\n# a less restrictive search for things that might be passwords/ssh/user etc.\n- macro: grep_more\n  condition: (never_true)\n\n",
                    "rendered": {
                      "text": "- macro: grep_commands\n  condition: (proc.name in (grep_binaries))\n\n# a less restrictive search for things that might be passwords/ssh/user etc.\n- macro: grep_more\n  condition: (never_true)\n\n",
                      "markdown": "`- macro: grep_commands\n  condition: (proc.name in (grep_binaries))\n\n# a less restrictive search for things that might be passwords/ssh/user etc.\n- macro: grep_more\n  condition: (never_true)\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 70,
                  "endLine": 400,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n- rule: Read sensitive file untrusted\n  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information). Exceptions are made for known trusted programs. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n",
                    "rendered": {
                      "text": "\n- rule: Read sensitive file untrusted\n  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information). Exceptions are made for known trusted programs. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n",
                      "markdown": "`\n- rule: Read sensitive file untrusted\n  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information). Exceptions are made for known trusted programs. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 70,
                  "endLine": 345,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n- rule: Read sensitive file trusted after startup\n  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information) by a trusted program after startup. Trusted programs might read these files\n    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n",
                    "rendered": {
                      "text": "\n- rule: Read sensitive file trusted after startup\n  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information) by a trusted program after startup. Trusted programs might read these files\n    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n",
                      "markdown": "`\n- rule: Read sensitive file trusted after startup\n  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information) by a trusted program after startup. Trusted programs might read these files\n    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 34,
                  "endLine": 328,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  condition: > \n    (open_read or open_file_failed) \n    and (etc_dir or user_ssh_directory or \n         fd.name startswith /root/.ssh or \n         fd.name contains \"id_rsa\") \n    and directory_traversal \n    and not proc.pname in (shell_binaries)\n",
                    "rendered": {
                      "text": "  condition: > \n    (open_read or open_file_failed) \n    and (etc_dir or user_ssh_directory or \n         fd.name startswith /root/.ssh or \n         fd.name contains \"id_rsa\") \n    and directory_traversal \n    and not proc.pname in (shell_binaries)\n",
                      "markdown": "`  condition: > \n    (open_read or open_file_failed) \n    and (etc_dir or user_ssh_directory or \n         fd.name startswith /root/.ssh or \n         fd.name contains \"id_rsa\") \n    and directory_traversal \n    and not proc.pname in (shell_binaries)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 66,
                  "endLine": 312,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  condition: (proc.cmdline startswith \"perl /opt/VRTSsfmh/bin/mh_driver.pl\")\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n- macro: directory_traversal\n  condition: (fd.nameraw contains '../' and fd.nameraw glob '*../*../*')\n",
                    "rendered": {
                      "text": "  condition: (proc.cmdline startswith \"perl /opt/VRTSsfmh/bin/mh_driver.pl\")\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n- macro: directory_traversal\n  condition: (fd.nameraw contains '../' and fd.nameraw glob '*../*../*')\n",
                      "markdown": "`  condition: (proc.cmdline startswith \"perl /opt/VRTSsfmh/bin/mh_driver.pl\")\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n- macro: directory_traversal\n  condition: (fd.nameraw contains '../' and fd.nameraw glob '*../*../*')\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 33,
                  "endLine": 312,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  condition: (proc.cmdline startswith \"perl /opt/VRTSsfmh/bin/mh_driver.pl\")\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n- macro: directory_traversal\n  condition: (fd.nameraw contains '../' and fd.nameraw glob '*../*../*')\n",
                    "rendered": {
                      "text": "  condition: (proc.cmdline startswith \"perl /opt/VRTSsfmh/bin/mh_driver.pl\")\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n- macro: directory_traversal\n  condition: (fd.nameraw contains '../' and fd.nameraw glob '*../*../*')\n",
                      "markdown": "`  condition: (proc.cmdline startswith \"perl /opt/VRTSsfmh/bin/mh_driver.pl\")\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n- macro: directory_traversal\n  condition: (fd.nameraw contains '../' and fd.nameraw glob '*../*../*')\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000703"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Username)",
            "id": "BD000703"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 758,
                  "startColumn": 12,
                  "endLine": 758,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n    '\"sh -c node_modules/.bin/bower-installer\"',\n    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n    '\"sh -c node_modules/.bin/bower-installer\"',\n    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n",
                      "markdown": "`    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n    '\"sh -c node_modules/.bin/bower-installer\"',\n    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 17,
                  "endLine": 760,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n    '\"sh -c node_modules/.bin/bower-installer\"',\n    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n    '\"sh -c  -t -i\"',\n    '\"sh -c openssl version\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n    '\"sh -c node_modules/.bin/bower-installer\"',\n    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n    '\"sh -c  -t -i\"',\n    '\"sh -c openssl version\"',\n",
                      "markdown": "`    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n    '\"sh -c node_modules/.bin/bower-installer\"',\n    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n    '\"sh -c  -t -i\"',\n    '\"sh -c openssl version\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 20,
                  "endLine": 58,
                  "endColumn": 28,
                  "snippet": {
                    "text": "# to true and does nothing, the perfect empty template for `logical` cases as opposed to list templates.\n# When tuning the rule you can override the macro with something useful, e.g.\n# - macro: allowed_ssh_hosts\n#   condition: (evt.hostname contains xyz)\n- macro: never_true\n  condition: (evt.num=0)\n\n",
                    "rendered": {
                      "text": "# to true and does nothing, the perfect empty template for `logical` cases as opposed to list templates.\n# When tuning the rule you can override the macro with something useful, e.g.\n# - macro: allowed_ssh_hosts\n#   condition: (evt.hostname contains xyz)\n- macro: never_true\n  condition: (evt.num=0)\n\n",
                      "markdown": "`# to true and does nothing, the perfect empty template for `logical` cases as opposed to list templates.\n# When tuning the rule you can override the macro with something useful, e.g.\n# - macro: allowed_ssh_hosts\n#   condition: (evt.hostname contains xyz)\n- macro: never_true\n  condition: (evt.num=0)\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1139,
                  "startColumn": 9,
                  "endLine": 1139,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n",
                    "rendered": {
                      "text": "  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n",
                      "markdown": "`  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1105,
                  "startColumn": 55,
                  "endLine": 1105,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    Detect an attempt to inject potentially malicious code into a process using PTRACE in order to evade \n    process-based defenses or elevate privileges. Common anti-patterns are debuggers. Additionally, profiling \n    your environment via the known_ptrace_procs template macro can reduce noise. \n    A successful ptrace syscall generates multiple logs at once.\n  condition: > \n    ptrace_attach_or_injection \n    and proc_name_exists \n",
                    "rendered": {
                      "text": "    Detect an attempt to inject potentially malicious code into a process using PTRACE in order to evade \n    process-based defenses or elevate privileges. Common anti-patterns are debuggers. Additionally, profiling \n    your environment via the known_ptrace_procs template macro can reduce noise. \n    A successful ptrace syscall generates multiple logs at once.\n  condition: > \n    ptrace_attach_or_injection \n    and proc_name_exists \n",
                      "markdown": "`    Detect an attempt to inject potentially malicious code into a process using PTRACE in order to evade \n    process-based defenses or elevate privileges. Common anti-patterns are debuggers. Additionally, profiling \n    your environment via the known_ptrace_procs template macro can reduce noise. \n    A successful ptrace syscall generates multiple logs at once.\n  condition: > \n    ptrace_attach_or_injection \n    and proc_name_exists \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 992,
                  "startColumn": 28,
                  "endLine": 992,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n- rule: Packet socket created in container\n  desc: > \n    Detect new packet socket at the device driver (OSI Layer 2) level in a container. Packet socket could be used for ARP Spoofing \n    and privilege escalation (CVE-2020-14386) by an attacker. Noise can be reduced by using the user_known_packet_socket_binaries\n    template list.\n  condition: > \n",
                    "rendered": {
                      "text": "\n- rule: Packet socket created in container\n  desc: > \n    Detect new packet socket at the device driver (OSI Layer 2) level in a container. Packet socket could be used for ARP Spoofing \n    and privilege escalation (CVE-2020-14386) by an attacker. Noise can be reduced by using the user_known_packet_socket_binaries\n    template list.\n  condition: > \n",
                      "markdown": "`\n- rule: Packet socket created in container\n  desc: > \n    Detect new packet socket at the device driver (OSI Layer 2) level in a container. Packet socket could be used for ARP Spoofing \n    and privilege escalation (CVE-2020-14386) by an attacker. Noise can be reduced by using the user_known_packet_socket_binaries\n    template list.\n  condition: > \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 884,
                  "startColumn": 75,
                  "endLine": 884,
                  "endColumn": 81,
                  "snippet": {
                    "text": "- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n  condition: >\n",
                    "rendered": {
                      "text": "- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n  condition: >\n",
                      "markdown": "`- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 826,
                  "startColumn": 36,
                  "endLine": 826,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    is of utmost importance. Audit your complete infrastructure and pinpoint any potential machines from which the API server \n    might be accessible based on your network layout. If Falco can't operate on all these machines, consider analyzing the \n    Kubernetes audit logs (typically drained from control nodes, and Falco offers a k8saudit plugin) as an additional data \n    source for detections within the control plane.\n  condition: >\n    evt.type=connect and evt.dir=< \n    and (fd.typechar=4 or fd.typechar=6) \n",
                    "rendered": {
                      "text": "    is of utmost importance. Audit your complete infrastructure and pinpoint any potential machines from which the API server \n    might be accessible based on your network layout. If Falco can't operate on all these machines, consider analyzing the \n    Kubernetes audit logs (typically drained from control nodes, and Falco offers a k8saudit plugin) as an additional data \n    source for detections within the control plane.\n  condition: >\n    evt.type=connect and evt.dir=< \n    and (fd.typechar=4 or fd.typechar=6) \n",
                      "markdown": "`    is of utmost importance. Audit your complete infrastructure and pinpoint any potential machines from which the API server \n    might be accessible based on your network layout. If Falco can't operate on all these machines, consider analyzing the \n    Kubernetes audit logs (typically drained from control nodes, and Falco offers a k8saudit plugin) as an additional data \n    source for detections within the control plane.\n  condition: >\n    evt.type=connect and evt.dir=< \n    and (fd.typechar=4 or fd.typechar=6) \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 825,
                  "startColumn": 49,
                  "endLine": 825,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    pivotal role in configuring the cluster management lifecycle. Detecting potential unauthorized access to the API server \n    is of utmost importance. Audit your complete infrastructure and pinpoint any potential machines from which the API server \n    might be accessible based on your network layout. If Falco can't operate on all these machines, consider analyzing the \n    Kubernetes audit logs (typically drained from control nodes, and Falco offers a k8saudit plugin) as an additional data \n    source for detections within the control plane.\n  condition: >\n    evt.type=connect and evt.dir=< \n",
                    "rendered": {
                      "text": "    pivotal role in configuring the cluster management lifecycle. Detecting potential unauthorized access to the API server \n    is of utmost importance. Audit your complete infrastructure and pinpoint any potential machines from which the API server \n    might be accessible based on your network layout. If Falco can't operate on all these machines, consider analyzing the \n    Kubernetes audit logs (typically drained from control nodes, and Falco offers a k8saudit plugin) as an additional data \n    source for detections within the control plane.\n  condition: >\n    evt.type=connect and evt.dir=< \n",
                      "markdown": "`    pivotal role in configuring the cluster management lifecycle. Detecting potential unauthorized access to the API server \n    is of utmost importance. Audit your complete infrastructure and pinpoint any potential machines from which the API server \n    might be accessible based on your network layout. If Falco can't operate on all these machines, consider analyzing the \n    Kubernetes audit logs (typically drained from control nodes, and Falco offers a k8saudit plugin) as an additional data \n    source for detections within the control plane.\n  condition: >\n    evt.type=connect and evt.dir=< \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 690,
                  "startColumn": 19,
                  "endLine": 690,
                  "endColumn": 23,
                  "snippet": {
                    "text": "ING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the \n    same process group, which, for example, is the case when subprocesses",
                    "rendered": {
                      "text": "ING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the \n    same process group, which, for example, is the case when subprocesses",
                      "markdown": "`ING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the \n    same process group, which, for example, is the case when subprocesses`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 672,
                  "startColumn": 9,
                  "endLine": 672,
                  "endColumn": 13,
                  "snippet": {
                    "text": "# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n",
                    "rendered": {
                      "text": "# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n",
                      "markdown": "`# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 38,
                  "endLine": 570,
                  "endColumn": 42,
                  "snippet": {
                    "text": "sier, as you can see in the exhaustive \n    existing tuning. However, given it is very behavior-driven and broad, it is universally relevant to catch \n    general Remote Code Execution (RCE). Allocate time to tune this rule for your use cases and reduce noise. \n    Tuning suggestions include looking at the duration of the parent process (proc.ppid.duration) to define your \n    long-running app processes. Checking for newer fields such as proc.vpgid.name and proc.vpgid.exe instead of the \n    direct parent process being a non-shell application could make the rule more robust.\n  condition: >\n    spa",
                    "rendered": {
                      "text": "sier, as you can see in the exhaustive \n    existing tuning. However, given it is very behavior-driven and broad, it is universally relevant to catch \n    general Remote Code Execution (RCE). Allocate time to tune this rule for your use cases and reduce noise. \n    Tuning suggestions include looking at the duration of the parent process (proc.ppid.duration) to define your \n    long-running app processes. Checking for newer fields such as proc.vpgid.name and proc.vpgid.exe instead of the \n    direct parent process being a non-shell application could make the rule more robust.\n  condition: >\n    spa",
                      "markdown": "`sier, as you can see in the exhaustive \n    existing tuning. However, given it is very behavior-driven and broad, it is universally relevant to catch \n    general Remote Code Execution (RCE). Allocate time to tune this rule for your use cases and reduce noise. \n    Tuning suggestions include looking at the duration of the parent process (proc.ppid.duration) to define your \n    long-running app processes. Checking for newer fields such as proc.vpgid.name and proc.vpgid.exe instead of the \n    direct parent process being a non-shell application could make the rule more robust.\n  condition: >\n    spa`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 3,
                  "endLine": 347,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information) by a trusted program after startup. Trusted programs might read these files\n    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n",
                    "rendered": {
                      "text": "  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information) by a trusted program after startup. Trusted programs might read these files\n    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n",
                      "markdown": "`  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information) by a trusted program after startup. Trusted programs might read these files\n    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 21,
                  "endLine": 254,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  condition: (proc.name in (python, pypy, python3) and proc.cmdline contains ansible)\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n  condition: >\n",
                    "rendered": {
                      "text": "  condition: (proc.name in (python, pypy, python3) and proc.cmdline contains ansible)\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n  condition: >\n",
                      "markdown": "`  condition: (proc.name in (python, pypy, python3) and proc.cmdline contains ansible)\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 54,
                  "endLine": 253,
                  "endColumn": 58,
                  "snippet": {
                    "text": "- macro: ansible_running_python\n  condition: (proc.name in (python, pypy, python3) and proc.cmdline contains ansible)\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n",
                    "rendered": {
                      "text": "- macro: ansible_running_python\n  condition: (proc.name in (python, pypy, python3) and proc.cmdline contains ansible)\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n",
                      "markdown": "`- macro: ansible_running_python\n  condition: (proc.name in (python, pypy, python3) and proc.cmdline contains ansible)\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 11,
                  "endLine": 165,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  items: [pip, pip3, conda]\n\n# The truncated dpkg-preconfigu is intentional, process names are\n# truncated at the falcosecurity-libs level.\n- list: package_mgmt_binaries\n  items: [rpm_binaries, deb_binaries, update-alternat, gem, npm, python_package_managers, sane-utils.post, alternatives, chef-client, apk, snapd]\n\n",
                    "rendered": {
                      "text": "  items: [pip, pip3, conda]\n\n# The truncated dpkg-preconfigu is intentional, process names are\n# truncated at the falcosecurity-libs level.\n- list: package_mgmt_binaries\n  items: [rpm_binaries, deb_binaries, update-alternat, gem, npm, python_package_managers, sane-utils.post, alternatives, chef-client, apk, snapd]\n\n",
                      "markdown": "`  items: [pip, pip3, conda]\n\n# The truncated dpkg-preconfigu is intentional, process names are\n# truncated at the falcosecurity-libs level.\n- list: package_mgmt_binaries\n  items: [rpm_binaries, deb_binaries, update-alternat, gem, npm, python_package_managers, sane-utils.post, alternatives, chef-client, apk, snapd]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 7,
                  "endLine": 77,
                  "endColumn": 11,
                  "snippet": {
                    "text": "# the process name may be missing. For some rules that really depend\n# on the identity of the process performing an action such as opening\n# a file, etc., we require that the process name be known.\n# TODO: At the moment we keep the `N/A` variant for compatibility with old scap-files\n- macro: proc_name_exists\n  condition: (not proc.name in (\"<NA>\",\"N/A\"))\n\n",
                    "rendered": {
                      "text": "# the process name may be missing. For some rules that really depend\n# on the identity of the process performing an action such as opening\n# a file, etc., we require that the process name be known.\n# TODO: At the moment we keep the `N/A` variant for compatibility with old scap-files\n- macro: proc_name_exists\n  condition: (not proc.name in (\"<NA>\",\"N/A\"))\n\n",
                      "markdown": "`# the process name may be missing. For some rules that really depend\n# on the identity of the process performing an action such as opening\n# a file, etc., we require that the process name be known.\n# TODO: At the moment we keep the `N/A` variant for compatibility with old scap-files\n- macro: proc_name_exists\n  condition: (not proc.name in (\"<NA>\",\"N/A\"))\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 38,
                  "endLine": 9,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1228,
                  "startColumn": 20,
                  "endLine": 1228,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed SSH Connection (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_stable, host, container, network, process, mitre_execution, T1059]\n\n",
                    "rendered": {
                      "text": "    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed SSH Connection (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_stable, host, container, network, process, mitre_execution, T1059]\n\n",
                      "markdown": "`    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed SSH Connection (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_stable, host, container, network, process, mitre_execution, T1059]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1225,
                  "startColumn": 25,
                  "endLine": 1225,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed SSH Connection (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n",
                    "rendered": {
                      "text": "    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed SSH Connection (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n",
                      "markdown": "`    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed SSH Connection (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1222,
                  "startColumn": 15,
                  "endLine": 1222,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporating ranges based on your environment's knowledge and custom SSH port \n    configurations. This rule can complement the \"Redirect STDOUT/STDIN to Network Connection in Container\" or \n    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n",
                    "rendered": {
                      "text": "    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporating ranges based on your environment's knowledge and custom SSH port \n    configurations. This rule can complement the \"Redirect STDOUT/STDIN to Network Connection in Container\" or \n    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n",
                      "markdown": "`    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporating ranges based on your environment's knowledge and custom SSH port \n    configurations. This rule can complement the \"Redirect STDOUT/STDIN to Network Connection in Container\" or \n    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1220,
                  "startColumn": 115,
                  "endLine": 1220,
                  "endColumn": 120,
                  "snippet": {
                    "text": "ed back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporating ranges based on your environment's knowledge and custom SSH port \n    configurations. This rule can complement the \"Redirect STDOUT/STDIN to Network Connection in Container\" or \n    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed",
                    "rendered": {
                      "text": "ed back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporating ranges based on your environment's knowledge and custom SSH port \n    configurations. This rule can complement the \"Redirect STDOUT/STDIN to Network Connection in Container\" or \n    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed",
                      "markdown": "`ed back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporating ranges based on your environment's knowledge and custom SSH port \n    configurations. This rule can complement the \"Redirect STDOUT/STDIN to Network Connection in Container\" or \n    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1218,
                  "startColumn": 7,
                  "endLine": 1218,
                  "endColumn": 12,
                  "snippet": {
                    "text": " Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n    the SSH connection to a shell's STDIN, and STDOUT of the shell piped back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporati",
                    "rendered": {
                      "text": " Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n    the SSH connection to a shell's STDIN, and STDOUT of the shell piped back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporati",
                      "markdown": "` Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n    the SSH connection to a shell's STDIN, and STDOUT of the shell piped back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporati`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1216,
                  "startColumn": 27,
                  "endLine": 1216,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n- rule: Disallowed SSH Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n    the SSH connection to a shell's STDIN, and STDOUT of the shell piped back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n",
                    "rendered": {
                      "text": "\n- rule: Disallowed SSH Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n    the SSH connection to a shell's STDIN, and STDOUT of the shell piped back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n",
                      "markdown": "`\n- rule: Disallowed SSH Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n    the SSH connection to a shell's STDIN, and STDOUT of the shell piped back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1214,
                  "startColumn": 18,
                  "endLine": 1214,
                  "endColumn": 23,
                  "snippet": {
                    "text": "- macro: ssh_non_standard_ports_network\n  condition: (fd.sport in (ssh_non_standard_ports))\n\n- rule: Disallowed SSH Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n",
                    "rendered": {
                      "text": "- macro: ssh_non_standard_ports_network\n  condition: (fd.sport in (ssh_non_standard_ports))\n\n- rule: Disallowed SSH Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n",
                      "markdown": "`- macro: ssh_non_standard_ports_network\n  condition: (fd.sport in (ssh_non_standard_ports))\n\n- rule: Disallowed SSH Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1179,
                  "startColumn": 99,
                  "endLine": 1179,
                  "endColumn": 106,
                  "snippet": {
                    "text": "\n    Detect if an executable not belonging to the base image of a container is being executed.\n    The drop and execute pattern can be observed very often after an attacker gained an initial foothold.\n    is_exe_upper_layer filter field only applies for container runtimes that use overlayfs as union mount filesystem.\n    Adopters can utilize the provided template list known_drop_and_execute_containers containing allowed container \n    images known to execute binaries not included in their base image. Alternatively, you could exclude non-production\n    namespaces in Kubernetes settings by adjusting th",
                    "rendered": {
                      "text": "\n    Detect if an executable not belonging to the base image of a container is being executed.\n    The drop and execute pattern can be observed very often after an attacker gained an initial foothold.\n    is_exe_upper_layer filter field only applies for container runtimes that use overlayfs as union mount filesystem.\n    Adopters can utilize the provided template list known_drop_and_execute_containers containing allowed container \n    images known to execute binaries not included in their base image. Alternatively, you could exclude non-production\n    namespaces in Kubernetes settings by adjusting th",
                      "markdown": "`\n    Detect if an executable not belonging to the base image of a container is being executed.\n    The drop and execute pattern can be observed very often after an attacker gained an initial foothold.\n    is_exe_upper_layer filter field only applies for container runtimes that use overlayfs as union mount filesystem.\n    Adopters can utilize the provided template list known_drop_and_execute_containers containing allowed container \n    images known to execute binaries not included in their base image. Alternatively, you could exclude non-production\n    namespaces in Kubernetes settings by adjusting th`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1139,
                  "startColumn": 9,
                  "endLine": 1139,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n",
                    "rendered": {
                      "text": "  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n",
                      "markdown": "`  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1137,
                  "startColumn": 77,
                  "endLine": 1137,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n",
                    "rendered": {
                      "text": "\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n",
                      "markdown": "`\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1137,
                  "startColumn": 69,
                  "endLine": 1137,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n",
                    "rendered": {
                      "text": "\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n",
                      "markdown": "`\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1135,
                  "startColumn": 7,
                  "endLine": 1135,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    proc.args icontains \"accesskeyid\" or\n    proc.args icontains \"secretaccesskey\")\n\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n",
                    "rendered": {
                      "text": "    proc.args icontains \"accesskeyid\" or\n    proc.args icontains \"secretaccesskey\")\n\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n",
                      "markdown": "`    proc.args icontains \"accesskeyid\" or\n    proc.args icontains \"secretaccesskey\")\n\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 992,
                  "startColumn": 117,
                  "endLine": 992,
                  "endColumn": 122,
                  "snippet": {
                    "text": "\n- rule: Packet socket created in container\n  desc: > \n    Detect new packet socket at the device driver (OSI Layer 2) level in a container. Packet socket could be used for ARP Spoofing \n    and privilege escalation (CVE-2020-14386) by an attacker. Noise can be reduced by using the user_known_packet_socket_binaries\n    template list.\n  condition: > \n",
                    "rendered": {
                      "text": "\n- rule: Packet socket created in container\n  desc: > \n    Detect new packet socket at the device driver (OSI Layer 2) level in a container. Packet socket could be used for ARP Spoofing \n    and privilege escalation (CVE-2020-14386) by an attacker. Noise can be reduced by using the user_known_packet_socket_binaries\n    template list.\n  condition: > \n",
                      "markdown": "`\n- rule: Packet socket created in container\n  desc: > \n    Detect new packet socket at the device driver (OSI Layer 2) level in a container. Packet socket could be used for ARP Spoofing \n    and privilege escalation (CVE-2020-14386) by an attacker. Noise can be reduced by using the user_known_packet_socket_binaries\n    template list.\n  condition: > \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 928,
                  "startColumn": 72,
                  "endLine": 928,
                  "endColumn": 78,
                  "snippet": {
                    "text": "  desc: > \n    Detect clearing of critical access log files, typically done to erase evidence that could be attributed to an adversary's \n    actions. To effectively customize and operationalize this detection, check for potentially missing log file destinations \n    relevant to your environment, and adjust the profiled containers you wish not to be alerted on.\n  condition: >\n    open_write \n    and access_log_files \n",
                    "rendered": {
                      "text": "  desc: > \n    Detect clearing of critical access log files, typically done to erase evidence that could be attributed to an adversary's \n    actions. To effectively customize and operationalize this detection, check for potentially missing log file destinations \n    relevant to your environment, and adjust the profiled containers you wish not to be alerted on.\n  condition: >\n    open_write \n    and access_log_files \n",
                      "markdown": "`  desc: > \n    Detect clearing of critical access log files, typically done to erase evidence that could be attributed to an adversary's \n    actions. To effectively customize and operationalize this detection, check for potentially missing log file destinations \n    relevant to your environment, and adjust the profiled containers you wish not to be alerted on.\n  condition: >\n    open_write \n    and access_log_files \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 896,
                  "startColumn": 9,
                  "endLine": 896,
                  "endColumn": 15,
                  "snippet": {
                    "text": "                                  proc.args contains \"id_ecdsa\"\n          )\n        ))\n  output: Grep private keys or passwords activities found (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority:\n    WARNING\n  tags: [maturity_stable, host, container, process, filesystem, mitre_credential_access, T1552.001]\n",
                    "rendered": {
                      "text": "                                  proc.args contains \"id_ecdsa\"\n          )\n        ))\n  output: Grep private keys or passwords activities found (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority:\n    WARNING\n  tags: [maturity_stable, host, container, process, filesystem, mitre_credential_access, T1552.001]\n",
                      "markdown": "`                                  proc.args contains \"id_ecdsa\"\n          )\n        ))\n  output: Grep private keys or passwords activities found (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority:\n    WARNING\n  tags: [maturity_stable, host, container, process, filesystem, mitre_credential_access, T1552.001]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 884,
                  "startColumn": 75,
                  "endLine": 884,
                  "endColumn": 81,
                  "snippet": {
                    "text": "- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n  condition: >\n",
                    "rendered": {
                      "text": "- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n  condition: >\n",
                      "markdown": "`- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 883,
                  "startColumn": 77,
                  "endLine": 883,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n",
                    "rendered": {
                      "text": "\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n",
                      "markdown": "`\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 883,
                  "startColumn": 69,
                  "endLine": 883,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n",
                    "rendered": {
                      "text": "\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n",
                      "markdown": "`\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 877,
                  "startColumn": 28,
                  "endLine": 877,
                  "endColumn": 33,
                  "snippet": {
                    "text": "     proc.args icontains \"BEGIN EC PRIVATE\" or\n     (grep_more and\n      (proc.args icontains \" pass \" or\n       proc.args icontains \" ssh \" or\n       proc.args icontains \" user \"))\n    )\n\n",
                    "rendered": {
                      "text": "     proc.args icontains \"BEGIN EC PRIVATE\" or\n     (grep_more and\n      (proc.args icontains \" pass \" or\n       proc.args icontains \" ssh \" or\n       proc.args icontains \" user \"))\n    )\n\n",
                      "markdown": "`     proc.args icontains \"BEGIN EC PRIVATE\" or\n     (grep_more and\n      (proc.args icontains \" pass \" or\n       proc.args icontains \" ssh \" or\n       proc.args icontains \" user \"))\n    )\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 763,
                  "startColumn": 11,
                  "endLine": 763,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n    '\"sh -c  -t -i\"',\n    '\"sh -c openssl version\"',\n    '\"bash -c id -Gn kafadmin\"',\n    '\"sh -c /bin/sh -c ''date +%%s''\"',\n    '\"sh -c /usr/share/lighttpd/create-mime.conf.pl\"'\n",
                    "rendered": {
                      "text": "    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n    '\"sh -c  -t -i\"',\n    '\"sh -c openssl version\"',\n    '\"bash -c id -Gn kafadmin\"',\n    '\"sh -c /bin/sh -c ''date +%%s''\"',\n    '\"sh -c /usr/share/lighttpd/create-mime.conf.pl\"'\n",
                      "markdown": "`    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n    '\"sh -c  -t -i\"',\n    '\"sh -c openssl version\"',\n    '\"bash -c id -Gn kafadmin\"',\n    '\"sh -c /bin/sh -c ''date +%%s''\"',\n    '\"sh -c /usr/share/lighttpd/create-mime.conf.pl\"'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 755,
                  "startColumn": 11,
                  "endLine": 755,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n",
                      "markdown": "`    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 754,
                  "startColumn": 11,
                  "endLine": 754,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n",
                      "markdown": "`    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 753,
                  "startColumn": 11,
                  "endLine": 753,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n",
                      "markdown": "`    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 752,
                  "startColumn": 11,
                  "endLine": 752,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n",
                      "markdown": "`    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 11,
                  "endLine": 751,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n",
                    "rendered": {
                      "text": "    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n",
                      "markdown": "`    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 11,
                  "endLine": 750,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n",
                      "markdown": "`    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 749,
                  "startColumn": 11,
                  "endLine": 749,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    '\"sh -c stty -a < /dev/tty\"',\n    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c stty -a < /dev/tty\"',\n    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n",
                      "markdown": "`    '\"sh -c stty -a < /dev/tty\"',\n    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 748,
                  "startColumn": 11,
                  "endLine": 748,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    '\"sh -c stty -a 2>/dev/null\"',\n    '\"sh -c stty -a < /dev/tty\"',\n    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c stty -a 2>/dev/null\"',\n    '\"sh -c stty -a < /dev/tty\"',\n    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n",
                      "markdown": "`    '\"sh -c stty -a 2>/dev/null\"',\n    '\"sh -c stty -a < /dev/tty\"',\n    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 739,
                  "startColumn": 11,
                  "endLine": 739,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    '\"sh -c uname -r 2>&1\"',\n    '\"sh -c uname -v 2>&1\"',\n    '\"sh -c uname -a 2>&1\"',\n    '\"sh -c ruby -v 2>&1\"',\n    '\"sh -c getconf CLK_TCK\"',\n    '\"sh -c getconf PAGESIZE\"',\n    '\"sh -c LC_ALL=C LANG=C /sbin/ldconfig -p 2>/dev/null\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c uname -r 2>&1\"',\n    '\"sh -c uname -v 2>&1\"',\n    '\"sh -c uname -a 2>&1\"',\n    '\"sh -c ruby -v 2>&1\"',\n    '\"sh -c getconf CLK_TCK\"',\n    '\"sh -c getconf PAGESIZE\"',\n    '\"sh -c LC_ALL=C LANG=C /sbin/ldconfig -p 2>/dev/null\"',\n",
                      "markdown": "`    '\"sh -c uname -r 2>&1\"',\n    '\"sh -c uname -v 2>&1\"',\n    '\"sh -c uname -a 2>&1\"',\n    '\"sh -c ruby -v 2>&1\"',\n    '\"sh -c getconf CLK_TCK\"',\n    '\"sh -c getconf PAGESIZE\"',\n    '\"sh -c LC_ALL=C LANG=C /sbin/ldconfig -p 2>/dev/null\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 52,
                  "endLine": 714,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  desc: >\n    A shell was used as the entrypoint/exec point into a container with an attached terminal. Parent process may have \n    legitimately already exited and be null (read container_entrypoint macro). Common when using \"kubectl exec\" in Kubernetes. \n    Correlate with k8saudit exec logs if possible to find user or serviceaccount token used (fuzzy correlation by namespace and pod name). \n    Rather than considering it a standalone rule, it may be best used as generic auditing rule while examining other triggered \n    rules in this container/tty.\n  condition: >\n",
                    "rendered": {
                      "text": "  desc: >\n    A shell was used as the entrypoint/exec point into a container with an attached terminal. Parent process may have \n    legitimately already exited and be null (read container_entrypoint macro). Common when using \"kubectl exec\" in Kubernetes. \n    Correlate with k8saudit exec logs if possible to find user or serviceaccount token used (fuzzy correlation by namespace and pod name). \n    Rather than considering it a standalone rule, it may be best used as generic auditing rule while examining other triggered \n    rules in this container/tty.\n  condition: >\n",
                      "markdown": "`  desc: >\n    A shell was used as the entrypoint/exec point into a container with an attached terminal. Parent process may have \n    legitimately already exited and be null (read container_entrypoint macro). Common when using \"kubectl exec\" in Kubernetes. \n    Correlate with k8saudit exec logs if possible to find user or serviceaccount token used (fuzzy correlation by namespace and pod name). \n    Rather than considering it a standalone rule, it may be best used as generic auditing rule while examining other triggered \n    rules in this container/tty.\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 66,
                  "endLine": 689,
                  "endColumn": 71,
                  "snippet": {
                    "text": "r.name %proc.name %evt.dir %evt.type %evt.args %fd.name)\"\n#  priority: WARNING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the ",
                    "rendered": {
                      "text": "r.name %proc.name %evt.dir %evt.type %evt.args %fd.name)\"\n#  priority: WARNING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the ",
                      "markdown": "`r.name %proc.name %evt.dir %evt.type %evt.args %fd.name)\"\n#  priority: WARNING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the `"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 688,
                  "startColumn": 72,
                  "endLine": 688,
                  "endColumn": 81,
                  "snippet": {
                    "text": "#  priority: WARNING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the \n",
                    "rendered": {
                      "text": "#  priority: WARNING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the \n",
                      "markdown": "`#  priority: WARNING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 672,
                  "startColumn": 16,
                  "endLine": 672,
                  "endColumn": 22,
                  "snippet": {
                    "text": "# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n",
                    "rendered": {
                      "text": "# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n",
                      "markdown": "`# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 607,
                  "startColumn": 63,
                  "endLine": 608,
                  "snippet": {
                    "text": "  priority: NOTICE\n  tags: [maturity_stable, host, container, process, shell, mitre_execution, T1059.004]\n\n# These images are allowed both to run with --privileged and to mount\n# sensitive paths from the host filesystem.\n#\n# NOTE: This list is only provided for backwards compatibility with\n# older local falco rules files that may have been appending to\n",
                    "rendered": {
                      "text": "  priority: NOTICE\n  tags: [maturity_stable, host, container, process, shell, mitre_execution, T1059.004]\n\n# These images are allowed both to run with --privileged and to mount\n# sensitive paths from the host filesystem.\n#\n# NOTE: This list is only provided for backwards compatibility with\n# older local falco rules files that may have been appending to\n",
                      "markdown": "`  priority: NOTICE\n  tags: [maturity_stable, host, container, process, shell, mitre_execution, T1059.004]\n\n# These images are allowed both to run with --privileged and to mount\n# sensitive paths from the host filesystem.\n#\n# NOTE: This list is only provided for backwards compatibility with\n# older local falco rules files that may have been appending to\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 49,
                  "endLine": 569,
                  "endColumn": 55,
                  "snippet": {
                    "text": "rocess name. Therefore, \n    rely more on proc.exe to define Java applications. This rule can be noisier, as you can see in the exhaustive \n    existing tuning. However, given it is very behavior-driven and broad, it is universally relevant to catch \n    general Remote Code Execution (RCE). Allocate time to tune this rule for your use cases and reduce noise. \n    Tuning suggestions include looking at the duration of the parent process (proc.ppid.duration) to define your \n    long-running app processes. Checking for newer fields such as proc.vpgid.name and proc.vpgid.exe instead of the \n    direct pa",
                    "rendered": {
                      "text": "rocess name. Therefore, \n    rely more on proc.exe to define Java applications. This rule can be noisier, as you can see in the exhaustive \n    existing tuning. However, given it is very behavior-driven and broad, it is universally relevant to catch \n    general Remote Code Execution (RCE). Allocate time to tune this rule for your use cases and reduce noise. \n    Tuning suggestions include looking at the duration of the parent process (proc.ppid.duration) to define your \n    long-running app processes. Checking for newer fields such as proc.vpgid.name and proc.vpgid.exe instead of the \n    direct pa",
                      "markdown": "`rocess name. Therefore, \n    rely more on proc.exe to define Java applications. This rule can be noisier, as you can see in the exhaustive \n    existing tuning. However, given it is very behavior-driven and broad, it is universally relevant to catch \n    general Remote Code Execution (RCE). Allocate time to tune this rule for your use cases and reduce noise. \n    Tuning suggestions include looking at the duration of the parent process (proc.ppid.duration) to define your \n    long-running app processes. Checking for newer fields such as proc.vpgid.name and proc.vpgid.exe instead of the \n    direct pa`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 56,
                  "endLine": 523,
                  "endColumn": 62,
                  "snippet": {
                    "text": "# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n# run in a container as a protected shell spawner, override the below\n# macro to remove the \"never_true\" clause, which allows it to take effect.\n- macro: possibly_node_in_container\n",
                    "rendered": {
                      "text": "# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n# run in a container as a protected shell spawner, override the below\n# macro to remove the \"never_true\" clause, which allows it to take effect.\n- macro: possibly_node_in_container\n",
                      "markdown": "`# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n# run in a container as a protected shell spawner, override the below\n# macro to remove the \"never_true\" clause, which allows it to take effect.\n- macro: possibly_node_in_container\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 54,
                  "endLine": 522,
                  "endColumn": 60,
                  "snippet": {
                    "text": "# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n# run in a container as a protected shell spawner, override the below\n# macro to remove the \"never_true\" clause, which allows it to take effect.\n",
                    "rendered": {
                      "text": "# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n# run in a container as a protected shell spawner, override the below\n# macro to remove the \"never_true\" clause, which allows it to take effect.\n",
                      "markdown": "`# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n# run in a container as a protected shell spawner, override the below\n# macro to remove the \"never_true\" clause, which allows it to take effect.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 24,
                  "endLine": 520,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n",
                    "rendered": {
                      "text": "# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n",
                      "markdown": "`# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 7,
                  "endLine": 518,
                  "endColumn": 13,
                  "snippet": {
                    "text": "# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n",
                    "rendered": {
                      "text": "# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n",
                      "markdown": "`# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 34,
                  "endLine": 517,
                  "endColumn": 40,
                  "snippet": {
                    "text": "# entrypoint of the container, and when the node app is a long-lived\n# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n",
                    "rendered": {
                      "text": "# entrypoint of the container, and when the node app is a long-lived\n# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n",
                      "markdown": "`# entrypoint of the container, and when the node app is a long-lived\n# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 514,
                  "startColumn": 43,
                  "endLine": 514,
                  "endColumn": 49,
                  "snippet": {
                    "text": "# In some cases, you may want to consider node processes run directly\n# in containers as protected shell spawners. Examples include using\n# pm2-docker or pm2 start some-app.js --no-daemon-mode as the direct\n# entrypoint of the container, and when the node app is a long-lived\n# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n",
                    "rendered": {
                      "text": "# In some cases, you may want to consider node processes run directly\n# in containers as protected shell spawners. Examples include using\n# pm2-docker or pm2 start some-app.js --no-daemon-mode as the direct\n# entrypoint of the container, and when the node app is a long-lived\n# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n",
                      "markdown": "`# In some cases, you may want to consider node processes run directly\n# in containers as protected shell spawners. Examples include using\n# pm2-docker or pm2 start some-app.js --no-daemon-mode as the direct\n# entrypoint of the container, and when the node app is a long-lived\n# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 511,
                  "startColumn": 41,
                  "endLine": 511,
                  "endColumn": 47,
                  "snippet": {
                    "text": "- macro: check_process_status\n  condition: (proc.cmdline startswith \"sh -c kill -0 \")\n\n# In some cases, you may want to consider node processes run directly\n# in containers as protected shell spawners. Examples include using\n# pm2-docker or pm2 start some-app.js --no-daemon-mode as the direct\n# entrypoint of the container, and when the node app is a long-lived\n",
                    "rendered": {
                      "text": "- macro: check_process_status\n  condition: (proc.cmdline startswith \"sh -c kill -0 \")\n\n# In some cases, you may want to consider node processes run directly\n# in containers as protected shell spawners. Examples include using\n# pm2-docker or pm2 start some-app.js --no-daemon-mode as the direct\n# entrypoint of the container, and when the node app is a long-lived\n",
                      "markdown": "`- macro: check_process_status\n  condition: (proc.cmdline startswith \"sh -c kill -0 \")\n\n# In some cases, you may want to consider node processes run directly\n# in containers as protected shell spawners. Examples include using\n# pm2-docker or pm2 start some-app.js --no-daemon-mode as the direct\n# entrypoint of the container, and when the node app is a long-lived\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 13,
                  "endLine": 404,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    information). Exceptions are made for known trusted programs. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n    program by crafting custom rules for critical application credentials unique to your environment.\n  condition: >\n    open_read\n",
                    "rendered": {
                      "text": "    information). Exceptions are made for known trusted programs. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n    program by crafting custom rules for critical application credentials unique to your environment.\n  condition: >\n    open_read\n",
                      "markdown": "`    information). Exceptions are made for known trusted programs. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n    program by crafting custom rules for critical application credentials unique to your environment.\n  condition: >\n    open_read\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 13,
                  "endLine": 350,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n    program by crafting custom rules for critical application credentials unique to your environment.\n  condition: > \n    open_read \n",
                    "rendered": {
                      "text": "    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n    program by crafting custom rules for critical application credentials unique to your environment.\n  condition: > \n    open_read \n",
                      "markdown": "`    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n    program by crafting custom rules for critical application credentials unique to your environment.\n  condition: > \n    open_read \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 1,
                  "endLine": 246,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  items: [10_etc_sudoers., 10_passwd_group]\n\n# System users that should never log into a system. Consider adding your own\n# service users (e.g. 'apache' or 'mysqld') here.\n- macro: system_users\n  condition: (user.name in (bin, daemon, games, lp, mail, nobody, sshd, sync, uucp, www-data))\n\n",
                    "rendered": {
                      "text": "  items: [10_etc_sudoers., 10_passwd_group]\n\n# System users that should never log into a system. Consider adding your own\n# service users (e.g. 'apache' or 'mysqld') here.\n- macro: system_users\n  condition: (user.name in (bin, daemon, games, lp, mail, nobody, sshd, sync, uucp, www-data))\n\n",
                      "markdown": "`  items: [10_etc_sudoers., 10_passwd_group]\n\n# System users that should never log into a system. Consider adding your own\n# service users (e.g. 'apache' or 'mysqld') here.\n- macro: system_users\n  condition: (user.name in (bin, daemon, games, lp, mail, nobody, sshd, sync, uucp, www-data))\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 61,
                  "endLine": 215,
                  "snippet": {
                    "text": "    (fd.name in (sensitive_file_names) or\n      fd.directory in (/etc/sudoers.d, /etc/pam.d))\n\n# Indicates that the process is new. Currently detected using time\n# since process was started, using a threshold of 5 seconds.\n- macro: proc_is_new\n  condition: (proc.duration <= 5000000000)\n\n",
                    "rendered": {
                      "text": "    (fd.name in (sensitive_file_names) or\n      fd.directory in (/etc/sudoers.d, /etc/pam.d))\n\n# Indicates that the process is new. Currently detected using time\n# since process was started, using a threshold of 5 seconds.\n- macro: proc_is_new\n  condition: (proc.duration <= 5000000000)\n\n",
                      "markdown": "`    (fd.name in (sensitive_file_names) or\n      fd.directory in (/etc/sudoers.d, /etc/pam.d))\n\n# Indicates that the process is new. Currently detected using time\n# since process was started, using a threshold of 5 seconds.\n- macro: proc_is_new\n  condition: (proc.duration <= 5000000000)\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 24,
                  "endLine": 123,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n",
                    "rendered": {
                      "text": "    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n",
                      "markdown": "`    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 5,
                  "endLine": 123,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n",
                    "rendered": {
                      "text": "    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n",
                      "markdown": "`    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 55,
                  "endLine": 122,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                    "rendered": {
                      "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                      "markdown": "`    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                    "rendered": {
                      "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                      "markdown": "`    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 29,
                  "endLine": 122,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                    "rendered": {
                      "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                      "markdown": "`    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 78,
                  "endLine": 113,
                  "endColumn": 85,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 59,
                  "endLine": 113,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 44,
                  "endLine": 113,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 29,
                  "endLine": 113,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 18,
                  "endLine": 113,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 1,
                  "endLine": 113,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 77,
                  "endLine": 106,
                  "endColumn": 84,
                  "snippet": {
                    "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 58,
                  "endLine": 106,
                  "endColumn": 63,
                  "snippet": {
                    "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 43,
                  "endLine": 106,
                  "endColumn": 49,
                  "snippet": {
                    "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 28,
                  "endLine": 106,
                  "endColumn": 35,
                  "snippet": {
                    "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 17,
                  "endLine": 106,
                  "endColumn": 23,
                  "snippet": {
                    "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/rules/falco_rules.yaml"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 1,
                  "endLine": 106,
                  "endColumn": 7,
                  "snippet": {
                    "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/RELEASE.md"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 15,
                  "endLine": 71,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    - Removing a plugin version requirement alternative (without removing the whole dependency) in `required_plugin_versions`\n    - Renaming or removing a list, macro, or rule\n    - Changing the event source of a rule\n    - Disabling at default one or more rules that used to be enabled\n    - Removing one or more tags from a rule\n    - Decreasing the priority of a rule\n    - Changing in any way the set of matched events matched by a macro\n",
                    "rendered": {
                      "text": "    - Removing a plugin version requirement alternative (without removing the whole dependency) in `required_plugin_versions`\n    - Renaming or removing a list, macro, or rule\n    - Changing the event source of a rule\n    - Disabling at default one or more rules that used to be enabled\n    - Removing one or more tags from a rule\n    - Decreasing the priority of a rule\n    - Changing in any way the set of matched events matched by a macro\n",
                      "markdown": "`    - Removing a plugin version requirement alternative (without removing the whole dependency) in `required_plugin_versions`\n    - Renaming or removing a list, macro, or rule\n    - Changing the event source of a rule\n    - Disabling at default one or more rules that used to be enabled\n    - Removing one or more tags from a rule\n    - Decreasing the priority of a rule\n    - Changing in any way the set of matched events matched by a macro\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/RELEASE.md"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 14,
                  "endLine": 54,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    - Decrementing plugin version requirement in `required_plugin_versions`\n    - Adding alternatives entries to an already-existing plugin version requirement in `required_plugin_versions`\n    - Removing a plugin version requirement with all its alternatives in `required_plugin_versions`\n    - Enabling at default one or more rules that used to be disabled\n    - Adding or removing items for one or more lists\n    - Adding one or more tags to a rule\n    - Increasing the priority of a rule\n",
                    "rendered": {
                      "text": "    - Decrementing plugin version requirement in `required_plugin_versions`\n    - Adding alternatives entries to an already-existing plugin version requirement in `required_plugin_versions`\n    - Removing a plugin version requirement with all its alternatives in `required_plugin_versions`\n    - Enabling at default one or more rules that used to be disabled\n    - Adding or removing items for one or more lists\n    - Adding one or more tags to a rule\n    - Increasing the priority of a rule\n",
                      "markdown": "`    - Decrementing plugin version requirement in `required_plugin_versions`\n    - Adding alternatives entries to an already-existing plugin version requirement in `required_plugin_versions`\n    - Removing a plugin version requirement with all its alternatives in `required_plugin_versions`\n    - Enabling at default one or more rules that used to be disabled\n    - Adding or removing items for one or more lists\n    - Adding one or more tags to a rule\n    - Increasing the priority of a rule\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/RELEASE.md"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 157,
                  "endLine": 49,
                  "endColumn": 165,
                  "snippet": {
                    "text": "uted by third parties. These are best practices that guarantee the correct behavior of Falco when updating a given ruleset to a new version.*\n\n- `z` _(patch number)_ is incremented when you make backward-compatible changes. In this case, the ruleset can be updated in a given Falco without needing to update Falco, its plugins, or its configuration. Examples:\n    - Decrementing `required_engine_version`\n    - Decrementing plugin version requirement in `required_plugin_versions`\n    - Adding alternatives entries to an already-existing plugin version requirement in `required_plugin_versions`\n    - Removin",
                    "rendered": {
                      "text": "uted by third parties. These are best practices that guarantee the correct behavior of Falco when updating a given ruleset to a new version.*\n\n- `z` _(patch number)_ is incremented when you make backward-compatible changes. In this case, the ruleset can be updated in a given Falco without needing to update Falco, its plugins, or its configuration. Examples:\n    - Decrementing `required_engine_version`\n    - Decrementing plugin version requirement in `required_plugin_versions`\n    - Adding alternatives entries to an already-existing plugin version requirement in `required_plugin_versions`\n    - Removin",
                      "markdown": "`uted by third parties. These are best practices that guarantee the correct behavior of Falco when updating a given ruleset to a new version.*\n\n- `z` _(patch number)_ is incremented when you make backward-compatible changes. In this case, the ruleset can be updated in a given Falco without needing to update Falco, its plugins, or its configuration. Examples:\n    - Decrementing `required_engine_version`\n    - Decrementing plugin version requirement in `required_plugin_versions`\n    - Adding alternatives entries to an already-existing plugin version requirement in `required_plugin_versions`\n    - Removin`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/RELEASE.md"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 58,
                  "endLine": 37,
                  "endColumn": 62,
                  "snippet": {
                    "text": " all the CI checks to pass.\n  b. Check the automatic versioning suggestions provided by the CI (see [an example](https://github.com/falcosecurity/rules/pull/74#issuecomment-1571867580)), and make sure that **only patch changes** are present.\n  c. Considering the automatic versioning suggestions, and at discretion of the domain knowledge of the repository maintainers, decide whether the PR should be merged or not.\n3. Bump the ruleset version **patch** number by 1 and create a new Git tag from the release branch (e.g. `falco-rules-0.1.1`).\n4. A GitHub action will validate the repository [registry](.",
                    "rendered": {
                      "text": " all the CI checks to pass.\n  b. Check the automatic versioning suggestions provided by the CI (see [an example](https://github.com/falcosecurity/rules/pull/74#issuecomment-1571867580)), and make sure that **only patch changes** are present.\n  c. Considering the automatic versioning suggestions, and at discretion of the domain knowledge of the repository maintainers, decide whether the PR should be merged or not.\n3. Bump the ruleset version **patch** number by 1 and create a new Git tag from the release branch (e.g. `falco-rules-0.1.1`).\n4. A GitHub action will validate the repository [registry](.",
                      "markdown": "` all the CI checks to pass.\n  b. Check the automatic versioning suggestions provided by the CI (see [an example](https://github.com/falcosecurity/rules/pull/74#issuecomment-1571867580)), and make sure that **only patch changes** are present.\n  c. Considering the automatic versioning suggestions, and at discretion of the domain knowledge of the repository maintainers, decide whether the PR should be merged or not.\n3. Bump the ruleset version **patch** number by 1 and create a new Git tag from the release branch (e.g. `falco-rules-0.1.1`).\n4. A GitHub action will validate the repository [registry](.`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/RELEASE.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 66,
                  "endLine": 38,
                  "endColumn": 71,
                  "snippet": {
                    "text": ")), and make sure that **only patch changes** are present.\n  c. Considering the automatic versioning suggestions, and at discretion of the domain knowledge of the repository maintainers, decide whether the PR should be merged or not.\n3. Bump the ruleset version **patch** number by 1 and create a new Git tag from the release branch (e.g. `falco-rules-0.1.1`).\n4. A GitHub action will validate the repository [registry](./registry.yaml) and release the new OCI artifact in the packages of this repository.\n\n## Versioning a ruleset\n\nThe version of the official Falco rulesets is compatible with [SemVer](ht",
                    "rendered": {
                      "text": ")), and make sure that **only patch changes** are present.\n  c. Considering the automatic versioning suggestions, and at discretion of the domain knowledge of the repository maintainers, decide whether the PR should be merged or not.\n3. Bump the ruleset version **patch** number by 1 and create a new Git tag from the release branch (e.g. `falco-rules-0.1.1`).\n4. A GitHub action will validate the repository [registry](./registry.yaml) and release the new OCI artifact in the packages of this repository.\n\n## Versioning a ruleset\n\nThe version of the official Falco rulesets is compatible with [SemVer](ht",
                      "markdown": "`)), and make sure that **only patch changes** are present.\n  c. Considering the automatic versioning suggestions, and at discretion of the domain knowledge of the repository maintainers, decide whether the PR should be merged or not.\n3. Bump the ruleset version **patch** number by 1 and create a new Git tag from the release branch (e.g. `falco-rules-0.1.1`).\n4. A GitHub action will validate the repository [registry](./registry.yaml) and release the new OCI artifact in the packages of this repository.\n\n## Versioning a ruleset\n\nThe version of the official Falco rulesets is compatible with [SemVer](ht`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/RELEASE.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 90,
                  "endLine": 18,
                  "endColumn": 95,
                  "snippet": {
                    "text": "\n## Patching a ruleset\n\nPatches on an already-released ruleset can anytime on a per-need basis. Assuming a release Git tag in the form of `*name*-rules-*version*`, with version being in the form of `X.Y.Z` (e.g. `falco-rules-0.1.0`), the process is as follows:\n\n1. If not already created, create a release branch starting from the first tag of the released ruleset.\n  a. Checkout the first ruleset release tag: e.g. `git checkout falco-rules-0.1.0`\n",
                    "rendered": {
                      "text": "\n## Patching a ruleset\n\nPatches on an already-released ruleset can anytime on a per-need basis. Assuming a release Git tag in the form of `*name*-rules-*version*`, with version being in the form of `X.Y.Z` (e.g. `falco-rules-0.1.0`), the process is as follows:\n\n1. If not already created, create a release branch starting from the first tag of the released ruleset.\n  a. Checkout the first ruleset release tag: e.g. `git checkout falco-rules-0.1.0`\n",
                      "markdown": "`\n## Patching a ruleset\n\nPatches on an already-released ruleset can anytime on a per-need basis. Assuming a release Git tag in the form of `*name*-rules-*version*`, with version being in the form of `X.Y.Z` (e.g. `falco-rules-0.1.0`), the process is as follows:\n\n1. If not already created, create a release branch starting from the first tag of the released ruleset.\n  a. Checkout the first ruleset release tag: e.g. `git checkout falco-rules-0.1.0`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/RELEASE.md"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 15,
                  "endLine": 13,
                  "endColumn": 20,
                  "snippet": {
                    "text": "a `master` version, which however needs to be patched with an additional commit [on the ruleset's release branch](#patching-a-ruleset) once the next stable Falco release gets published.\n2. Determine a new version for the given ruleset (see the [section below](#versioning-a-ruleset)).\n3. Create a new Git tag with the name convention `*name*-rules-*version*` (e.g. `falco-rules-0.1.0`, `application-rules-0.1.0`, ...). The naming convention is required due to this repository being a [monorepo](https://en.wikipedia.org/wiki/Monorepo) and in order to be machine-readable.\n4. A GitHub action will validate ",
                    "rendered": {
                      "text": "a `master` version, which however needs to be patched with an additional commit [on the ruleset's release branch](#patching-a-ruleset) once the next stable Falco release gets published.\n2. Determine a new version for the given ruleset (see the [section below](#versioning-a-ruleset)).\n3. Create a new Git tag with the name convention `*name*-rules-*version*` (e.g. `falco-rules-0.1.0`, `application-rules-0.1.0`, ...). The naming convention is required due to this repository being a [monorepo](https://en.wikipedia.org/wiki/Monorepo) and in order to be machine-readable.\n4. A GitHub action will validate ",
                      "markdown": "`a `master` version, which however needs to be patched with an additional commit [on the ruleset's release branch](#patching-a-ruleset) once the next stable Falco release gets published.\n2. Determine a new version for the given ruleset (see the [section below](#versioning-a-ruleset)).\n3. Create a new Git tag with the name convention `*name*-rules-*version*` (e.g. `falco-rules-0.1.0`, `application-rules-0.1.0`, ...). The naming convention is required due to this repository being a [monorepo](https://en.wikipedia.org/wiki/Monorepo) and in order to be machine-readable.\n4. A GitHub action will validate `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/RELEASE.md"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 92,
                  "endLine": 11,
                  "endColumn": 98,
                  "snippet": {
                    "text": "leasing a ruleset, the versions must be explicit stable Falco releases (e.g. not using `latest` or `master`), so that the new tag will provide an history of the Falco versions on which the ruleset was tested\n  - If the ruleset does not validate with a stable Falco release (it can happen close to the time of a Falco release), it's ok to use a `master` version, which however needs to be patched with an additional commit [on the ruleset's release branch](#patching-a-ruleset) once the next stable Falco release gets published.\n2. Determine a new version for the given ruleset (see the [section below](#ver",
                    "rendered": {
                      "text": "leasing a ruleset, the versions must be explicit stable Falco releases (e.g. not using `latest` or `master`), so that the new tag will provide an history of the Falco versions on which the ruleset was tested\n  - If the ruleset does not validate with a stable Falco release (it can happen close to the time of a Falco release), it's ok to use a `master` version, which however needs to be patched with an additional commit [on the ruleset's release branch](#patching-a-ruleset) once the next stable Falco release gets published.\n2. Determine a new version for the given ruleset (see the [section below](#ver",
                      "markdown": "`leasing a ruleset, the versions must be explicit stable Falco releases (e.g. not using `latest` or `master`), so that the new tag will provide an history of the Falco versions on which the ruleset was tested\n  - If the ruleset does not validate with a stable Falco release (it can happen close to the time of a Falco release), it's ok to use a `master` version, which however needs to be patched with an additional commit [on the ruleset's release branch](#patching-a-ruleset) once the next stable Falco release gets published.\n2. Determine a new version for the given ruleset (see the [section below](#ver`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/RELEASE.md"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 150,
                  "endLine": 3,
                  "endColumn": 155,
                  "snippet": {
                    "text": "# Release Process\n\nOfficial Falcosecurity rules releases are automated using GitHub Actions. Each ruleset is released individually and each version is tied to a specific git tag.\n\n## Releasing a ruleset\n\n",
                    "rendered": {
                      "text": "# Release Process\n\nOfficial Falcosecurity rules releases are automated using GitHub Actions. Each ruleset is released individually and each version is tied to a specific git tag.\n\n## Releasing a ruleset\n\n",
                      "markdown": "`# Release Process\n\nOfficial Falcosecurity rules releases are automated using GitHub Actions. Each ruleset is released individually and each version is tied to a specific git tag.\n\n## Releasing a ruleset\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.gitignore"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 41,
                  "endLine": 127,
                  "endColumn": 66,
                  "snippet": {
                    "text": "# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n",
                    "rendered": {
                      "text": "# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n",
                      "markdown": "`# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.gitignore"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 25,
                  "endLine": 125,
                  "endColumn": 58,
                  "snippet": {
                    "text": "# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n",
                    "rendered": {
                      "text": "# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n",
                      "markdown": "`# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.gitignore"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 11,
                  "endLine": 191,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n.idea/\n",
                    "rendered": {
                      "text": "\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n.idea/\n",
                      "markdown": "`\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n.idea/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/falco-rules.zip/.gitignore"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 46,
                  "endLine": 64,
                  "endColumn": 54,
                  "snippet": {
                    "text": "MANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n",
                    "rendered": {
                      "text": "MANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n",
                      "markdown": "`MANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}