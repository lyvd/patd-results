{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/helm/cert-exporter/templates/cert-manager/service.yaml"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 5,
                  "endLine": 3,
                  "snippet": {
                    "text": "apiVersion: v1\nkind: Service\nmetadata:\n  name: {{ include \"cert-exporter.fullname\" . }}\n  labels:\n    {{- include \"cert-exporter.certManagerLabels\" . | nindent 4 }}\n",
                    "rendered": {
                      "text": "apiVersion: v1\nkind: Service\nmetadata:\n  name: {{ include \"cert-exporter.fullname\" . }}\n  labels:\n    {{- include \"cert-exporter.certManagerLabels\" . | nindent 4 }}\n",
                      "markdown": "`apiVersion: v1\nkind: Service\nmetadata:\n  name: {{ include \"cert-exporter.fullname\" . }}\n  labels:\n    {{- include \"cert-exporter.certManagerLabels\" . | nindent 4 }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/genCerts.sh"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/genCerts.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 15,
                  "endLine": 45,
                  "endColumn": 8,
                  "snippet": {
                    "text": "# create bundle\ncat bundle_server.cert bundle_root.cert > bundle.crt\n\n# generate pfx \nopenssl pkcs12 -export -out bundle_pfx.crt -in bundle.crt -inkey bundle_root.key -passout pass:\n\npopd",
                    "rendered": {
                      "text": "# create bundle\ncat bundle_server.cert bundle_root.cert > bundle.crt\n\n# generate pfx \nopenssl pkcs12 -export -out bundle_pfx.crt -in bundle.crt -inkey bundle_root.key -passout pass:\n\npopd",
                      "markdown": "`# create bundle\ncat bundle_server.cert bundle_root.cert > bundle.crt\n\n# generate pfx \nopenssl pkcs12 -export -out bundle_pfx.crt -in bundle.crt -inkey bundle_root.key -passout pass:\n\npopd`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/genCerts.sh"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 15,
                  "endLine": 42,
                  "endColumn": 4,
                  "snippet": {
                    "text": "openssl x509 -req -in bundle_server.csr -CA bundle_root.cert -CAkey bundle_root.key -CAcreateserial -out bundle_server.cert -days $days -sha256\n\n\n# create bundle\ncat bundle_server.cert bundle_root.cert > bundle.crt\n\n# generate pfx \nopenssl pkcs12 -export -out bundle_pfx.crt -in bundle.crt -inkey bundle_root.key -passout pass:\n",
                    "rendered": {
                      "text": "openssl x509 -req -in bundle_server.csr -CA bundle_root.cert -CAkey bundle_root.key -CAcreateserial -out bundle_server.cert -days $days -sha256\n\n\n# create bundle\ncat bundle_server.cert bundle_root.cert > bundle.crt\n\n# generate pfx \nopenssl pkcs12 -export -out bundle_pfx.crt -in bundle.crt -inkey bundle_root.key -passout pass:\n",
                      "markdown": "`openssl x509 -req -in bundle_server.csr -CA bundle_root.cert -CAkey bundle_root.key -CAcreateserial -out bundle_server.cert -days $days -sha256\n\n\n# create bundle\ncat bundle_server.cert bundle_root.cert > bundle.crt\n\n# generate pfx \nopenssl pkcs12 -export -out bundle_pfx.crt -in bundle.crt -inkey bundle_root.key -passout pass:\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/genCerts.sh"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 113,
                  "endLine": 38,
                  "endColumn": 8,
                  "snippet": {
                    "text": "openssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\nopenssl x509 -req -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt -days $days -sha256\nopenssl x509 -req -in server.csr -CA root.crt -CAkey root.key -CAcreateserial -out server.crt -days $days -sha256\nopenssl x509 -req -in bundle_server.csr -CA bundle_root.cert -CAkey bundle_root.key -CAcreateserial -out bundle_server.cert -days $days -sha256\n\n\n# create bundle\n",
                    "rendered": {
                      "text": "openssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\nopenssl x509 -req -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt -days $days -sha256\nopenssl x509 -req -in server.csr -CA root.crt -CAkey root.key -CAcreateserial -out server.crt -days $days -sha256\nopenssl x509 -req -in bundle_server.csr -CA bundle_root.cert -CAkey bundle_root.key -CAcreateserial -out bundle_server.cert -days $days -sha256\n\n\n# create bundle\n",
                      "markdown": "`openssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\nopenssl x509 -req -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt -days $days -sha256\nopenssl x509 -req -in server.csr -CA root.crt -CAkey root.key -CAcreateserial -out server.crt -days $days -sha256\nopenssl x509 -req -in bundle_server.csr -CA bundle_root.cert -CAkey bundle_root.key -CAcreateserial -out bundle_server.cert -days $days -sha256\n\n\n# create bundle\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/genCerts.sh"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 113,
                  "endLine": 37,
                  "endColumn": 8,
                  "snippet": {
                    "text": "openssl req -new -sha256 -key server.key -subj \"/C=US/ST=KY/O=Org/CN=example.com\" -out server.csr\nopenssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\nopenssl x509 -req -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt -days $days -sha256\nopenssl x509 -req -in server.csr -CA root.crt -CAkey root.key -CAcreateserial -out server.crt -days $days -sha256\nopenssl x509 -req -in bundle_server.csr -CA bundle_root.cert -CAkey bundle_root.key -CAcreateserial -out bundle_server.cert -days $days -sha256\n\n\n",
                    "rendered": {
                      "text": "openssl req -new -sha256 -key server.key -subj \"/C=US/ST=KY/O=Org/CN=example.com\" -out server.csr\nopenssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\nopenssl x509 -req -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt -days $days -sha256\nopenssl x509 -req -in server.csr -CA root.crt -CAkey root.key -CAcreateserial -out server.crt -days $days -sha256\nopenssl x509 -req -in bundle_server.csr -CA bundle_root.cert -CAkey bundle_root.key -CAcreateserial -out bundle_server.cert -days $days -sha256\n\n\n",
                      "markdown": "`openssl req -new -sha256 -key server.key -subj \"/C=US/ST=KY/O=Org/CN=example.com\" -out server.csr\nopenssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\nopenssl x509 -req -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt -days $days -sha256\nopenssl x509 -req -in server.csr -CA root.crt -CAkey root.key -CAcreateserial -out server.crt -days $days -sha256\nopenssl x509 -req -in bundle_server.csr -CA bundle_root.cert -CAkey bundle_root.key -CAcreateserial -out bundle_server.cert -days $days -sha256\n\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/genCerts.sh"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 36,
                  "endColumn": 8,
                  "snippet": {
                    "text": "eq -new -sha256 -key client.key -subj \"/C=US/ST=KY/O=Org/CN=client\" -out client.csr\nopenssl req -new -sha256 -key server.key -subj \"/C=US/ST=KY/O=Org/CN=example.com\" -out server.csr\nopenssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\nopenssl x509 -req -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt -days $days -sha256\nopenssl x509 -req -in server.csr -CA root.crt -CAkey root.key -CAcreateserial -out server.crt -days $days -sha256\nopenssl x509 -req -in bundle_server.csr -CA bundle_root.cert -CAkey bundle_root.",
                    "rendered": {
                      "text": "eq -new -sha256 -key client.key -subj \"/C=US/ST=KY/O=Org/CN=client\" -out client.csr\nopenssl req -new -sha256 -key server.key -subj \"/C=US/ST=KY/O=Org/CN=example.com\" -out server.csr\nopenssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\nopenssl x509 -req -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt -days $days -sha256\nopenssl x509 -req -in server.csr -CA root.crt -CAkey root.key -CAcreateserial -out server.crt -days $days -sha256\nopenssl x509 -req -in bundle_server.csr -CA bundle_root.cert -CAkey bundle_root.",
                      "markdown": "`eq -new -sha256 -key client.key -subj \"/C=US/ST=KY/O=Org/CN=client\" -out client.csr\nopenssl req -new -sha256 -key server.key -subj \"/C=US/ST=KY/O=Org/CN=example.com\" -out server.csr\nopenssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\nopenssl x509 -req -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt -days $days -sha256\nopenssl x509 -req -in server.csr -CA root.crt -CAkey root.key -CAcreateserial -out server.crt -days $days -sha256\nopenssl x509 -req -in bundle_server.csr -CA bundle_root.cert -CAkey bundle_root.`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/genCerts.sh"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 97,
                  "endLine": 34,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n# csrs\nopenssl req -new -sha256 -key client.key -subj \"/C=US/ST=KY/O=Org/CN=client\" -out client.csr\nopenssl req -new -sha256 -key server.key -subj \"/C=US/ST=KY/O=Org/CN=example.com\" -out server.csr\nopenssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\nopenssl x509 -req -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt -days $days -sha256\nopenssl x509 -req -in server.csr -CA root.crt -CAkey root.key -CAcreateserial -out server.crt -days $days -sha256\n",
                    "rendered": {
                      "text": "\n# csrs\nopenssl req -new -sha256 -key client.key -subj \"/C=US/ST=KY/O=Org/CN=client\" -out client.csr\nopenssl req -new -sha256 -key server.key -subj \"/C=US/ST=KY/O=Org/CN=example.com\" -out server.csr\nopenssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\nopenssl x509 -req -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt -days $days -sha256\nopenssl x509 -req -in server.csr -CA root.crt -CAkey root.key -CAcreateserial -out server.crt -days $days -sha256\n",
                      "markdown": "`\n# csrs\nopenssl req -new -sha256 -key client.key -subj \"/C=US/ST=KY/O=Org/CN=client\" -out client.csr\nopenssl req -new -sha256 -key server.key -subj \"/C=US/ST=KY/O=Org/CN=example.com\" -out server.csr\nopenssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\nopenssl x509 -req -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt -days $days -sha256\nopenssl x509 -req -in server.csr -CA root.crt -CAkey root.key -CAcreateserial -out server.crt -days $days -sha256\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/genCerts.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 92,
                  "endLine": 33,
                  "endColumn": 8,
                  "snippet": {
                    "text": "openssl req -x509 -new -nodes -key bundle_root.key -subj \"/C=BE/ST=EF/O=Org/CN=bundle-root\" -sha256 -days $days -out bundle_root.cert\n\n# csrs\nopenssl req -new -sha256 -key client.key -subj \"/C=US/ST=KY/O=Org/CN=client\" -out client.csr\nopenssl req -new -sha256 -key server.key -subj \"/C=US/ST=KY/O=Org/CN=example.com\" -out server.csr\nopenssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\nopenssl x509 -req -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt -days $days -sha256\n",
                    "rendered": {
                      "text": "openssl req -x509 -new -nodes -key bundle_root.key -subj \"/C=BE/ST=EF/O=Org/CN=bundle-root\" -sha256 -days $days -out bundle_root.cert\n\n# csrs\nopenssl req -new -sha256 -key client.key -subj \"/C=US/ST=KY/O=Org/CN=client\" -out client.csr\nopenssl req -new -sha256 -key server.key -subj \"/C=US/ST=KY/O=Org/CN=example.com\" -out server.csr\nopenssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\nopenssl x509 -req -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt -days $days -sha256\n",
                      "markdown": "`openssl req -x509 -new -nodes -key bundle_root.key -subj \"/C=BE/ST=EF/O=Org/CN=bundle-root\" -sha256 -days $days -out bundle_root.cert\n\n# csrs\nopenssl req -new -sha256 -key client.key -subj \"/C=US/ST=KY/O=Org/CN=client\" -out client.csr\nopenssl req -new -sha256 -key server.key -subj \"/C=US/ST=KY/O=Org/CN=example.com\" -out server.csr\nopenssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\nopenssl x509 -req -in client.csr -CA root.crt -CAkey root.key -CAcreateserial -out client.crt -days $days -sha256\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/genCerts.sh"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 6,
                  "endLine": 32,
                  "endColumn": 8,
                  "snippet": {
                    "text": "openssl req -x509 -new -nodes -key root.key -subj \"/C=US/ST=KY/O=Org/CN=root\" -sha256 -days $days -out root.crt\nopenssl req -x509 -new -nodes -key bundle_root.key -subj \"/C=BE/ST=EF/O=Org/CN=bundle-root\" -sha256 -days $days -out bundle_root.cert\n\n# csrs\nopenssl req -new -sha256 -key client.key -subj \"/C=US/ST=KY/O=Org/CN=client\" -out client.csr\nopenssl req -new -sha256 -key server.key -subj \"/C=US/ST=KY/O=Org/CN=example.com\" -out server.csr\nopenssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\n",
                    "rendered": {
                      "text": "openssl req -x509 -new -nodes -key root.key -subj \"/C=US/ST=KY/O=Org/CN=root\" -sha256 -days $days -out root.crt\nopenssl req -x509 -new -nodes -key bundle_root.key -subj \"/C=BE/ST=EF/O=Org/CN=bundle-root\" -sha256 -days $days -out bundle_root.cert\n\n# csrs\nopenssl req -new -sha256 -key client.key -subj \"/C=US/ST=KY/O=Org/CN=client\" -out client.csr\nopenssl req -new -sha256 -key server.key -subj \"/C=US/ST=KY/O=Org/CN=example.com\" -out server.csr\nopenssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\n",
                      "markdown": "`openssl req -x509 -new -nodes -key root.key -subj \"/C=US/ST=KY/O=Org/CN=root\" -sha256 -days $days -out root.crt\nopenssl req -x509 -new -nodes -key bundle_root.key -subj \"/C=BE/ST=EF/O=Org/CN=bundle-root\" -sha256 -days $days -out bundle_root.cert\n\n# csrs\nopenssl req -new -sha256 -key client.key -subj \"/C=US/ST=KY/O=Org/CN=client\" -out client.csr\nopenssl req -new -sha256 -key server.key -subj \"/C=US/ST=KY/O=Org/CN=example.com\" -out server.csr\nopenssl req -new -sha256 -key bundle_server.key -subj \"/C=BE/ST=EF/O=Org/CN=example-bundle.be\" -out bundle_server.csr\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/genCerts.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 111,
                  "endLine": 29,
                  "endColumn": 8,
                  "snippet": {
                    "text": "openssl genrsa -out bundle_server.key\n\n# root cert & bundle root cert\nopenssl req -x509 -new -nodes -key root.key -subj \"/C=US/ST=KY/O=Org/CN=root\" -sha256 -days $days -out root.crt\nopenssl req -x509 -new -nodes -key bundle_root.key -subj \"/C=BE/ST=EF/O=Org/CN=bundle-root\" -sha256 -days $days -out bundle_root.cert\n\n# csrs\nopenssl req -new -sha256 -key client.key -subj \"/C=US/ST=KY/O=Org/CN=client\" -out client.csr\n",
                    "rendered": {
                      "text": "openssl genrsa -out bundle_server.key\n\n# root cert & bundle root cert\nopenssl req -x509 -new -nodes -key root.key -subj \"/C=US/ST=KY/O=Org/CN=root\" -sha256 -days $days -out root.crt\nopenssl req -x509 -new -nodes -key bundle_root.key -subj \"/C=BE/ST=EF/O=Org/CN=bundle-root\" -sha256 -days $days -out bundle_root.cert\n\n# csrs\nopenssl req -new -sha256 -key client.key -subj \"/C=US/ST=KY/O=Org/CN=client\" -out client.csr\n",
                      "markdown": "`openssl genrsa -out bundle_server.key\n\n# root cert & bundle root cert\nopenssl req -x509 -new -nodes -key root.key -subj \"/C=US/ST=KY/O=Org/CN=root\" -sha256 -days $days -out root.crt\nopenssl req -x509 -new -nodes -key bundle_root.key -subj \"/C=BE/ST=EF/O=Org/CN=bundle-root\" -sha256 -days $days -out bundle_root.cert\n\n# csrs\nopenssl req -new -sha256 -key client.key -subj \"/C=US/ST=KY/O=Org/CN=client\" -out client.csr\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/genCerts.sh"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 30,
                  "endLine": 28,
                  "endColumn": 8,
                  "snippet": {
                    "text": "openssl genrsa -out bundle_root.key\nopenssl genrsa -out bundle_server.key\n\n# root cert & bundle root cert\nopenssl req -x509 -new -nodes -key root.key -subj \"/C=US/ST=KY/O=Org/CN=root\" -sha256 -days $days -out root.crt\nopenssl req -x509 -new -nodes -key bundle_root.key -subj \"/C=BE/ST=EF/O=Org/CN=bundle-root\" -sha256 -days $days -out bundle_root.cert\n\n# csrs\n",
                    "rendered": {
                      "text": "openssl genrsa -out bundle_root.key\nopenssl genrsa -out bundle_server.key\n\n# root cert & bundle root cert\nopenssl req -x509 -new -nodes -key root.key -subj \"/C=US/ST=KY/O=Org/CN=root\" -sha256 -days $days -out root.crt\nopenssl req -x509 -new -nodes -key bundle_root.key -subj \"/C=BE/ST=EF/O=Org/CN=bundle-root\" -sha256 -days $days -out bundle_root.cert\n\n# csrs\n",
                      "markdown": "`openssl genrsa -out bundle_root.key\nopenssl genrsa -out bundle_server.key\n\n# root cert & bundle root cert\nopenssl req -x509 -new -nodes -key root.key -subj \"/C=US/ST=KY/O=Org/CN=root\" -sha256 -days $days -out root.crt\nopenssl req -x509 -new -nodes -key bundle_root.key -subj \"/C=BE/ST=EF/O=Org/CN=bundle-root\" -sha256 -days $days -out bundle_root.cert\n\n# csrs\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/genCerts.sh"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 35,
                  "endLine": 25,
                  "endColumn": 8,
                  "snippet": {
                    "text": "openssl genrsa -out root.key\nopenssl genrsa -out client.key\nopenssl genrsa -out server.key\nopenssl genrsa -out bundle_root.key\nopenssl genrsa -out bundle_server.key\n\n# root cert & bundle root cert\nopenssl req -x509 -new -nodes -key root.key -subj \"/C=US/ST=KY/O=Org/CN=root\" -sha256 -days $days -out root.crt\n",
                    "rendered": {
                      "text": "openssl genrsa -out root.key\nopenssl genrsa -out client.key\nopenssl genrsa -out server.key\nopenssl genrsa -out bundle_root.key\nopenssl genrsa -out bundle_server.key\n\n# root cert & bundle root cert\nopenssl req -x509 -new -nodes -key root.key -subj \"/C=US/ST=KY/O=Org/CN=root\" -sha256 -days $days -out root.crt\n",
                      "markdown": "`openssl genrsa -out root.key\nopenssl genrsa -out client.key\nopenssl genrsa -out server.key\nopenssl genrsa -out bundle_root.key\nopenssl genrsa -out bundle_server.key\n\n# root cert & bundle root cert\nopenssl req -x509 -new -nodes -key root.key -subj \"/C=US/ST=KY/O=Org/CN=root\" -sha256 -days $days -out root.crt\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/genCerts.sh"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 30,
                  "endLine": 24,
                  "endColumn": 8,
                  "snippet": {
                    "text": "# keys\nopenssl genrsa -out root.key\nopenssl genrsa -out client.key\nopenssl genrsa -out server.key\nopenssl genrsa -out bundle_root.key\nopenssl genrsa -out bundle_server.key\n\n# root cert & bundle root cert\n",
                    "rendered": {
                      "text": "# keys\nopenssl genrsa -out root.key\nopenssl genrsa -out client.key\nopenssl genrsa -out server.key\nopenssl genrsa -out bundle_root.key\nopenssl genrsa -out bundle_server.key\n\n# root cert & bundle root cert\n",
                      "markdown": "`# keys\nopenssl genrsa -out root.key\nopenssl genrsa -out client.key\nopenssl genrsa -out server.key\nopenssl genrsa -out bundle_root.key\nopenssl genrsa -out bundle_server.key\n\n# root cert & bundle root cert\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/genCerts.sh"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 30,
                  "endLine": 23,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n# keys\nopenssl genrsa -out root.key\nopenssl genrsa -out client.key\nopenssl genrsa -out server.key\nopenssl genrsa -out bundle_root.key\nopenssl genrsa -out bundle_server.key\n\n",
                    "rendered": {
                      "text": "\n# keys\nopenssl genrsa -out root.key\nopenssl genrsa -out client.key\nopenssl genrsa -out server.key\nopenssl genrsa -out bundle_root.key\nopenssl genrsa -out bundle_server.key\n\n",
                      "markdown": "`\n# keys\nopenssl genrsa -out root.key\nopenssl genrsa -out client.key\nopenssl genrsa -out server.key\nopenssl genrsa -out bundle_root.key\nopenssl genrsa -out bundle_server.key\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/genCerts.sh"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 28,
                  "endLine": 22,
                  "endColumn": 8,
                  "snippet": {
                    "text": "pushd $certFolder\n\n# keys\nopenssl genrsa -out root.key\nopenssl genrsa -out client.key\nopenssl genrsa -out server.key\nopenssl genrsa -out bundle_root.key\nopenssl genrsa -out bundle_server.key\n",
                    "rendered": {
                      "text": "pushd $certFolder\n\n# keys\nopenssl genrsa -out root.key\nopenssl genrsa -out client.key\nopenssl genrsa -out server.key\nopenssl genrsa -out bundle_root.key\nopenssl genrsa -out bundle_server.key\n",
                      "markdown": "`pushd $certFolder\n\n# keys\nopenssl genrsa -out root.key\nopenssl genrsa -out client.key\nopenssl genrsa -out server.key\nopenssl genrsa -out bundle_root.key\nopenssl genrsa -out bundle_server.key\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/genCerts.sh"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 6,
                  "endLine": 21,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\npushd $certFolder\n\n# keys\nopenssl genrsa -out root.key\nopenssl genrsa -out client.key\nopenssl genrsa -out server.key\nopenssl genrsa -out bundle_root.key\n",
                    "rendered": {
                      "text": "\npushd $certFolder\n\n# keys\nopenssl genrsa -out root.key\nopenssl genrsa -out client.key\nopenssl genrsa -out server.key\nopenssl genrsa -out bundle_root.key\n",
                      "markdown": "`\npushd $certFolder\n\n# keys\nopenssl genrsa -out root.key\nopenssl genrsa -out client.key\nopenssl genrsa -out server.key\nopenssl genrsa -out bundle_root.key\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/test.sh"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 42,
                  "endLine": 140,
                  "endColumn": 46,
                  "snippet": {
                    "text": "ng ../certsSibling >/dev/null 2>&1\n\n# run exporter\n$CERT_EXPORTER_PATH -include-cert-glob=certsSibling/*.crt  -include-kubeconfig-glob=kubeConfigSibling/kubeconfig &\n\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_after_timestamp{cn=\"client\",filename=\"certsSibling/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\nvalidateTimestampBefore 'cert_exporter_cert_not_after_timestamp{cn=\"root\",fil",
                    "rendered": {
                      "text": "ng ../certsSibling >/dev/null 2>&1\n\n# run exporter\n$CERT_EXPORTER_PATH -include-cert-glob=certsSibling/*.crt  -include-kubeconfig-glob=kubeConfigSibling/kubeconfig &\n\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_after_timestamp{cn=\"client\",filename=\"certsSibling/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\nvalidateTimestampBefore 'cert_exporter_cert_not_after_timestamp{cn=\"root\",fil",
                      "markdown": "`ng ../certsSibling >/dev/null 2>&1\n\n# run exporter\n$CERT_EXPORTER_PATH -include-cert-glob=certsSibling/*.crt  -include-kubeconfig-glob=kubeConfigSibling/kubeconfig &\n\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_after_timestamp{cn=\"client\",filename=\"certsSibling/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\nvalidateTimestampBefore 'cert_exporter_cert_not_after_timestamp{cn=\"root\",fil`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/test.sh"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 42,
                  "endLine": 92,
                  "endColumn": 46,
                  "snippet": {
                    "text": "ull 2>&1\n./genKubeConfig.sh certs ./ >/dev/null 2>&1\n\n\n# run exporter\n$CERT_EXPORTER_PATH -include-cert-glob=certs/*.crt  -include-kubeconfig-glob=certs/kubeconfig &\n\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_before_timestamp{cn=\"client\",filename=\"certs/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\nvalidateTimestampBefore 'cert_exporter_cert_not_before_timestamp{cn=\"root\",filename",
                    "rendered": {
                      "text": "ull 2>&1\n./genKubeConfig.sh certs ./ >/dev/null 2>&1\n\n\n# run exporter\n$CERT_EXPORTER_PATH -include-cert-glob=certs/*.crt  -include-kubeconfig-glob=certs/kubeconfig &\n\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_before_timestamp{cn=\"client\",filename=\"certs/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\nvalidateTimestampBefore 'cert_exporter_cert_not_before_timestamp{cn=\"root\",filename",
                      "markdown": "`ull 2>&1\n./genKubeConfig.sh certs ./ >/dev/null 2>&1\n\n\n# run exporter\n$CERT_EXPORTER_PATH -include-cert-glob=certs/*.crt  -include-kubeconfig-glob=certs/kubeconfig &\n\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_before_timestamp{cn=\"client\",filename=\"certs/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\nvalidateTimestampBefore 'cert_exporter_cert_not_before_timestamp{cn=\"root\",filename`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/test.sh"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 45,
                  "endLine": 173,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 1'\n\n# kill exporter\nkill $!\n",
                    "rendered": {
                      "text": "\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 1'\n\n# kill exporter\nkill $!\n",
                      "markdown": "`\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 1'\n\n# kill exporter\nkill $!\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/test.sh"
                },
                "region": {
                  "startLine": 172,
                  "endLine": 173,
                  "endColumn": 5,
                  "snippet": {
                    "text": "$CERT_EXPORTER_PATH -include-cert-glob=certs/client.crt &\n\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 1'\n\n# kill exporter\nkill $!\n",
                    "rendered": {
                      "text": "$CERT_EXPORTER_PATH -include-cert-glob=certs/client.crt &\n\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 1'\n\n# kill exporter\nkill $!\n",
                      "markdown": "`$CERT_EXPORTER_PATH -include-cert-glob=certs/client.crt &\n\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 1'\n\n# kill exporter\nkill $!\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/test.sh"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 45,
                  "endLine": 138,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_after_timestamp{cn=\"client\",filename=\"certsSibling/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\n",
                    "rendered": {
                      "text": "\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_after_timestamp{cn=\"client\",filename=\"certsSibling/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\n",
                      "markdown": "`\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_after_timestamp{cn=\"client\",filename=\"certsSibling/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/test.sh"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 138,
                  "endColumn": 5,
                  "snippet": {
                    "text": "$CERT_EXPORTER_PATH -include-cert-glob=certsSibling/*.crt  -include-kubeconfig-glob=kubeConfigSibling/kubeconfig &\n\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_after_timestamp{cn=\"client\",filename=\"certsSibling/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\n",
                    "rendered": {
                      "text": "$CERT_EXPORTER_PATH -include-cert-glob=certsSibling/*.crt  -include-kubeconfig-glob=kubeConfigSibling/kubeconfig &\n\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_after_timestamp{cn=\"client\",filename=\"certsSibling/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\n",
                      "markdown": "`$CERT_EXPORTER_PATH -include-cert-glob=certsSibling/*.crt  -include-kubeconfig-glob=kubeConfigSibling/kubeconfig &\n\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_after_timestamp{cn=\"client\",filename=\"certsSibling/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/test.sh"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 45,
                  "endLine": 90,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_before_timestamp{cn=\"client\",filename=\"certs/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\n",
                    "rendered": {
                      "text": "\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_before_timestamp{cn=\"client\",filename=\"certs/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\n",
                      "markdown": "`\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_before_timestamp{cn=\"client\",filename=\"certs/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/test.sh"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 90,
                  "endColumn": 5,
                  "snippet": {
                    "text": "$CERT_EXPORTER_PATH -include-cert-glob=certs/*.crt  -include-kubeconfig-glob=certs/kubeconfig &\n\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_before_timestamp{cn=\"client\",filename=\"certs/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\n",
                    "rendered": {
                      "text": "$CERT_EXPORTER_PATH -include-cert-glob=certs/*.crt  -include-kubeconfig-glob=certs/kubeconfig &\n\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_before_timestamp{cn=\"client\",filename=\"certs/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\n",
                      "markdown": "`$CERT_EXPORTER_PATH -include-cert-glob=certs/*.crt  -include-kubeconfig-glob=certs/kubeconfig &\n\nsleep 2\n\ncurl --silent http://localhost:8080/metrics | grep 'cert_exporter_error_total 0'\n\nactivation=$(date +%s) # this timestamp is at least 2 seconds off from the actual cert NotBefore attribute ...\nvalidateTimestampBefore 'cert_exporter_cert_not_before_timestamp{cn=\"client\",filename=\"certs/client.crt\",issuer=\"root\",nodename=\"master0\"}' $activation\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/test.sh"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 64,
                  "endLine": 71,
                  "endColumn": 69,
                  "snippet": {
                    "text": "# cleanup certs\n./testCleanup.sh\n\nCERT_EXPORTER_PATH=\"../../dist/cert-exporter_$(go env GOOS)_$(go env GOARCH)_v1/cert-exporter\"\n\ndays=${1:-100}\nexport NODE_NAME=\"master0\"\n",
                    "rendered": {
                      "text": "# cleanup certs\n./testCleanup.sh\n\nCERT_EXPORTER_PATH=\"../../dist/cert-exporter_$(go env GOOS)_$(go env GOARCH)_v1/cert-exporter\"\n\ndays=${1:-100}\nexport NODE_NAME=\"master0\"\n",
                      "markdown": "`# cleanup certs\n./testCleanup.sh\n\nCERT_EXPORTER_PATH=\"../../dist/cert-exporter_$(go env GOOS)_$(go env GOARCH)_v1/cert-exporter\"\n\ndays=${1:-100}\nexport NODE_NAME=\"master0\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/test.sh"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 49,
                  "endLine": 71,
                  "endColumn": 54,
                  "snippet": {
                    "text": "# cleanup certs\n./testCleanup.sh\n\nCERT_EXPORTER_PATH=\"../../dist/cert-exporter_$(go env GOOS)_$(go env GOARCH)_v1/cert-exporter\"\n\ndays=${1:-100}\nexport NODE_NAME=\"master0\"\n",
                    "rendered": {
                      "text": "# cleanup certs\n./testCleanup.sh\n\nCERT_EXPORTER_PATH=\"../../dist/cert-exporter_$(go env GOOS)_$(go env GOARCH)_v1/cert-exporter\"\n\ndays=${1:-100}\nexport NODE_NAME=\"master0\"\n",
                      "markdown": "`# cleanup certs\n./testCleanup.sh\n\nCERT_EXPORTER_PATH=\"../../dist/cert-exporter_$(go env GOOS)_$(go env GOARCH)_v1/cert-exporter\"\n\ndays=${1:-100}\nexport NODE_NAME=\"master0\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/test.sh"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 23,
                  "endLine": 50,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    if [ \"$raw\" == \"\" ]; then\n      echo \"TEST FAILURE: $metrics\" \n      echo \"  Unable to find metrics string\"\n      return 0\n    fi\n\n",
                    "rendered": {
                      "text": "\n    if [ \"$raw\" == \"\" ]; then\n      echo \"TEST FAILURE: $metrics\" \n      echo \"  Unable to find metrics string\"\n      return 0\n    fi\n\n",
                      "markdown": "`\n    if [ \"$raw\" == \"\" ]; then\n      echo \"TEST FAILURE: $metrics\" \n      echo \"  Unable to find metrics string\"\n      return 0\n    fi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/test.sh"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 55,
                  "endLine": 46,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    metrics=$1\n    expectedVal=$2\n\n    raw=$(curl --silent http://localhost:8080/metrics | grep \"$metrics\")\n\n    if [ \"$raw\" == \"\" ]; then\n      echo \"TEST FAILURE: $metrics\" \n",
                    "rendered": {
                      "text": "    metrics=$1\n    expectedVal=$2\n\n    raw=$(curl --silent http://localhost:8080/metrics | grep \"$metrics\")\n\n    if [ \"$raw\" == \"\" ]; then\n      echo \"TEST FAILURE: $metrics\" \n",
                      "markdown": "`    metrics=$1\n    expectedVal=$2\n\n    raw=$(curl --silent http://localhost:8080/metrics | grep \"$metrics\")\n\n    if [ \"$raw\" == \"\" ]; then\n      echo \"TEST FAILURE: $metrics\" \n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/test.sh"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 23,
                  "endLine": 27,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    if [ \"$got\" == \"\" ]; then\n      echo \"TEST FAILURE: $metrics\" \n      echo \"  Unable to find metrics string\"\n      return 0\n    fi\n\n",
                    "rendered": {
                      "text": "\n    if [ \"$got\" == \"\" ]; then\n      echo \"TEST FAILURE: $metrics\" \n      echo \"  Unable to find metrics string\"\n      return 0\n    fi\n\n",
                      "markdown": "`\n    if [ \"$got\" == \"\" ]; then\n      echo \"TEST FAILURE: $metrics\" \n      echo \"  Unable to find metrics string\"\n      return 0\n    fi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/test.sh"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 5,
                  "endLine": 14,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n    curl --silent http://localhost:8080/metrics \\\n    | grep -F \"$metrics\" \\\n    | awk '{ printf(\"%.0f\",$2) }'\n}\n\nvalidateTimestampBefore() {\n",
                    "rendered": {
                      "text": "\n    curl --silent http://localhost:8080/metrics \\\n    | grep -F \"$metrics\" \\\n    | awk '{ printf(\"%.0f\",$2) }'\n}\n\nvalidateTimestampBefore() {\n",
                      "markdown": "`\n    curl --silent http://localhost:8080/metrics \\\n    | grep -F \"$metrics\" \\\n    | awk '{ printf(\"%.0f\",$2) }'\n}\n\nvalidateTimestampBefore() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/test.sh"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 5,
                  "endLine": 13,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    metrics=\"$1\"\n\n    curl --silent http://localhost:8080/metrics \\\n    | grep -F \"$metrics\" \\\n    | awk '{ printf(\"%.0f\",$2) }'\n}\n\n",
                    "rendered": {
                      "text": "    metrics=\"$1\"\n\n    curl --silent http://localhost:8080/metrics \\\n    | grep -F \"$metrics\" \\\n    | awk '{ printf(\"%.0f\",$2) }'\n}\n\n",
                      "markdown": "`    metrics=\"$1\"\n\n    curl --silent http://localhost:8080/metrics \\\n    | grep -F \"$metrics\" \\\n    | awk '{ printf(\"%.0f\",$2) }'\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/files/test.sh"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 3,
                  "endLine": 12,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    local metrics\n    metrics=\"$1\"\n\n    curl --silent http://localhost:8080/metrics \\\n    | grep -F \"$metrics\" \\\n    | awk '{ printf(\"%.0f\",$2) }'\n}\n",
                    "rendered": {
                      "text": "    local metrics\n    metrics=\"$1\"\n\n    curl --silent http://localhost:8080/metrics \\\n    | grep -F \"$metrics\" \\\n    | awk '{ printf(\"%.0f\",$2) }'\n}\n",
                      "markdown": "`    local metrics\n    metrics=\"$1\"\n\n    curl --silent http://localhost:8080/metrics \\\n    | grep -F \"$metrics\" \\\n    | awk '{ printf(\"%.0f\",$2) }'\n}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/examples/custom-secrets/README.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 204,
                  "endLine": 25,
                  "endColumn": 212,
                  "snippet": {
                    "text": "\nThere could be a number of things wrong, but [this helpful flowchart](https://learnk8s.io/a/troubleshooting-kubernetes.pdf) will help to get you sorted.\n\nYou can also `exec` into a pod running in your cluster and try to curl the metrics endpoint of the `cert-exporter` by running `curl cert-exporter:8080/metrics` and see what you get back. (`cert-exporter` hostname assumes that is the name you have used in [service.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service.yaml))\n",
                    "rendered": {
                      "text": "\nThere could be a number of things wrong, but [this helpful flowchart](https://learnk8s.io/a/troubleshooting-kubernetes.pdf) will help to get you sorted.\n\nYou can also `exec` into a pod running in your cluster and try to curl the metrics endpoint of the `cert-exporter` by running `curl cert-exporter:8080/metrics` and see what you get back. (`cert-exporter` hostname assumes that is the name you have used in [service.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service.yaml))\n",
                      "markdown": "`\nThere could be a number of things wrong, but [this helpful flowchart](https://learnk8s.io/a/troubleshooting-kubernetes.pdf) will help to get you sorted.\n\nYou can also `exec` into a pod running in your cluster and try to curl the metrics endpoint of the `cert-exporter` by running `curl cert-exporter:8080/metrics` and see what you get back. (`cert-exporter` hostname assumes that is the name you have used in [service.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service.yaml))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/examples/custom-secrets/README.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 65,
                  "endLine": 25,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\nThere could be a number of things wrong, but [this helpful flowchart](https://learnk8s.io/a/troubleshooting-kubernetes.pdf) will help to get you sorted.\n\nYou can also `exec` into a pod running in your cluster and try to curl the metrics endpoint of the `cert-exporter` by running `curl cert-exporter:8080/metrics` and see what you get back. (`cert-exporter` hostname assumes that is the name you have used in [service.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service.yaml))\n",
                    "rendered": {
                      "text": "\nThere could be a number of things wrong, but [this helpful flowchart](https://learnk8s.io/a/troubleshooting-kubernetes.pdf) will help to get you sorted.\n\nYou can also `exec` into a pod running in your cluster and try to curl the metrics endpoint of the `cert-exporter` by running `curl cert-exporter:8080/metrics` and see what you get back. (`cert-exporter` hostname assumes that is the name you have used in [service.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service.yaml))\n",
                      "markdown": "`\nThere could be a number of things wrong, but [this helpful flowchart](https://learnk8s.io/a/troubleshooting-kubernetes.pdf) will help to get you sorted.\n\nYou can also `exec` into a pod running in your cluster and try to curl the metrics endpoint of the `cert-exporter` by running `curl cert-exporter:8080/metrics` and see what you get back. (`cert-exporter` hostname assumes that is the name you have used in [service.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service.yaml))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/examples/custom-secrets/README.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 172,
                  "endLine": 7,
                  "endColumn": 181,
                  "snippet": {
                    "text": "\n## Service Definition\n\nThere is a service defined in [service.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service.yaml) which is used by prometheus service monitor with the config in [service-monitor.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service-monitor.yaml).  The prometheus config assumes you are using the [prometheus-operator helm chart](https://github.com/helm/charts/tree/master/stable/prometheus-operator)\n\n## Secret Creation\n\n",
                    "rendered": {
                      "text": "\n## Service Definition\n\nThere is a service defined in [service.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service.yaml) which is used by prometheus service monitor with the config in [service-monitor.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service-monitor.yaml).  The prometheus config assumes you are using the [prometheus-operator helm chart](https://github.com/helm/charts/tree/master/stable/prometheus-operator)\n\n## Secret Creation\n\n",
                      "markdown": "`\n## Service Definition\n\nThere is a service defined in [service.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service.yaml) which is used by prometheus service monitor with the config in [service-monitor.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service-monitor.yaml).  The prometheus config assumes you are using the [prometheus-operator helm chart](https://github.com/helm/charts/tree/master/stable/prometheus-operator)\n\n## Secret Creation\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/examples/custom-secrets/README.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n## Service Definition\n\nThere is a service defined in [service.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service.yaml) which is used by prometheus service monitor with the config in [service-monitor.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service-monitor.yaml).  The prometheus config assumes you are using the [prometheus-operator helm chart](https://github.com/helm/charts/tree/master/stable/prometheus-operator)\n\n## Secret Creation\n\n",
                    "rendered": {
                      "text": "\n## Service Definition\n\nThere is a service defined in [service.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service.yaml) which is used by prometheus service monitor with the config in [service-monitor.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service-monitor.yaml).  The prometheus config assumes you are using the [prometheus-operator helm chart](https://github.com/helm/charts/tree/master/stable/prometheus-operator)\n\n## Secret Creation\n\n",
                      "markdown": "`\n## Service Definition\n\nThere is a service defined in [service.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service.yaml) which is used by prometheus service monitor with the config in [service-monitor.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service-monitor.yaml).  The prometheus config assumes you are using the [prometheus-operator helm chart](https://github.com/helm/charts/tree/master/stable/prometheus-operator)\n\n## Secret Creation\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/examples/custom-secrets/README.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 2,
                  "endLine": 5,
                  "endColumn": 11,
                  "snippet": {
                    "text": "# Custom Secrets Monitoring\n\nIf you have custom secrets you wish to monitor (you created them as k8s resources), the examples in this directory will help you achieve that.\n\n## Service Definition\n\nThere is a service defined in [service.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service.yaml) which is used by prometheus service monitor with the config in [service-monitor.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/",
                    "rendered": {
                      "text": "# Custom Secrets Monitoring\n\nIf you have custom secrets you wish to monitor (you created them as k8s resources), the examples in this directory will help you achieve that.\n\n## Service Definition\n\nThere is a service defined in [service.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service.yaml) which is used by prometheus service monitor with the config in [service-monitor.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/",
                      "markdown": "`# Custom Secrets Monitoring\n\nIf you have custom secrets you wish to monitor (you created them as k8s resources), the examples in this directory will help you achieve that.\n\n## Service Definition\n\nThere is a service defined in [service.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/docs/examples/custom-secrets/service.yaml) which is used by prometheus service monitor with the config in [service-monitor.yaml](https://github.com/joe-elliott/cert-exporter/blob/master/`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/examples/custom-secrets/README.md"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 30,
                  "endLine": 3,
                  "endColumn": 36,
                  "snippet": {
                    "text": "# Custom Secrets Monitoring\n\nIf you have custom secrets you wish to monitor (you created them as k8s resources), the examples in this directory will help you achieve that.\n\n## Service Definition\n\n",
                    "rendered": {
                      "text": "# Custom Secrets Monitoring\n\nIf you have custom secrets you wish to monitor (you created them as k8s resources), the examples in this directory will help you achieve that.\n\n## Service Definition\n\n",
                      "markdown": "`# Custom Secrets Monitoring\n\nIf you have custom secrets you wish to monitor (you created them as k8s resources), the examples in this directory will help you achieve that.\n\n## Service Definition\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/deploy.md"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 52,
                  "endLine": 31,
                  "endColumn": 61,
                  "snippet": {
                    "text": "`--secrets-annotation-selector=cert-manager.io/certificate-name`\n\n### flags\nThe following 15 flags are the most commonly used to control cert-exporter behavior.  They allow you to use file globs to include and exclude certs and kubeconfig files.\n\n```\n  -exclude-cert-glob value\n",
                    "rendered": {
                      "text": "`--secrets-annotation-selector=cert-manager.io/certificate-name`\n\n### flags\nThe following 15 flags are the most commonly used to control cert-exporter behavior.  They allow you to use file globs to include and exclude certs and kubeconfig files.\n\n```\n  -exclude-cert-glob value\n",
                      "markdown": "``--secrets-annotation-selector=cert-manager.io/certificate-name`\n\n### flags\nThe following 15 flags are the most commonly used to control cert-exporter behavior.  They allow you to use file globs to include and exclude certs and kubeconfig files.\n\n```\n  -exclude-cert-glob value\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/deploy.md"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 30,
                  "endLine": 71,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  -webhooks-label-selector\n        Label selector to find webhooks to publish as metrics.\n  -webhooks-annotation-selector\n        Annotation selector to find webhooks to publish as metrics.\n  -polling-period duration\n    \tPeriodic interval in which to check certs. (default 1h0m0s)\n```\n",
                    "rendered": {
                      "text": "  -webhooks-label-selector\n        Label selector to find webhooks to publish as metrics.\n  -webhooks-annotation-selector\n        Annotation selector to find webhooks to publish as metrics.\n  -polling-period duration\n    \tPeriodic interval in which to check certs. (default 1h0m0s)\n```\n",
                      "markdown": "`  -webhooks-label-selector\n        Label selector to find webhooks to publish as metrics.\n  -webhooks-annotation-selector\n        Annotation selector to find webhooks to publish as metrics.\n  -polling-period duration\n    \tPeriodic interval in which to check certs. (default 1h0m0s)\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/deploy.md"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 25,
                  "endLine": 69,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  -enable-webhook-cert-check bool\n        Enable webhook client config CABundle cert check (Default \"false\").\n  -webhooks-label-selector\n        Label selector to find webhooks to publish as metrics.\n  -webhooks-annotation-selector\n        Annotation selector to find webhooks to publish as metrics.\n  -polling-period duration\n",
                    "rendered": {
                      "text": "  -enable-webhook-cert-check bool\n        Enable webhook client config CABundle cert check (Default \"false\").\n  -webhooks-label-selector\n        Label selector to find webhooks to publish as metrics.\n  -webhooks-annotation-selector\n        Annotation selector to find webhooks to publish as metrics.\n  -polling-period duration\n",
                      "markdown": "`  -enable-webhook-cert-check bool\n        Enable webhook client config CABundle cert check (Default \"false\").\n  -webhooks-label-selector\n        Label selector to find webhooks to publish as metrics.\n  -webhooks-annotation-selector\n        Annotation selector to find webhooks to publish as metrics.\n  -polling-period duration\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/deploy.md"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 22,
                  "endLine": 61,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  -configmaps-include-glob value\n    \tGlobs to match against configmap data keys (Default \"*\").\n  -configmaps-label-selector value\n    \tLabel selector to find configmaps to publish as metrics.\n  -configmaps-namespace string # (Deprecated) Use `-configmaps-namespaces`.\n    \tKubernetes namespace to list configmaps.\n  -configmaps-namespaces\n",
                    "rendered": {
                      "text": "  -configmaps-include-glob value\n    \tGlobs to match against configmap data keys (Default \"*\").\n  -configmaps-label-selector value\n    \tLabel selector to find configmaps to publish as metrics.\n  -configmaps-namespace string # (Deprecated) Use `-configmaps-namespaces`.\n    \tKubernetes namespace to list configmaps.\n  -configmaps-namespaces\n",
                      "markdown": "`  -configmaps-include-glob value\n    \tGlobs to match against configmap data keys (Default \"*\").\n  -configmaps-label-selector value\n    \tLabel selector to find configmaps to publish as metrics.\n  -configmaps-namespace string # (Deprecated) Use `-configmaps-namespaces`.\n    \tKubernetes namespace to list configmaps.\n  -configmaps-namespaces\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/deploy.md"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 27,
                  "endLine": 55,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  -secrets-namespaces string\n        Kubernetes comma-delimited list of namespaces to search for secrets.\n  -configmaps-annotation-selector string\n    \tAnnotation selector to find configmaps to publish as metrics.\n  -configmaps-exclude-glob value\n    \tGlobs to match against configmap data keys.\n  -configmaps-include-glob value\n",
                    "rendered": {
                      "text": "  -secrets-namespaces string\n        Kubernetes comma-delimited list of namespaces to search for secrets.\n  -configmaps-annotation-selector string\n    \tAnnotation selector to find configmaps to publish as metrics.\n  -configmaps-exclude-glob value\n    \tGlobs to match against configmap data keys.\n  -configmaps-include-glob value\n",
                      "markdown": "`  -secrets-namespaces string\n        Kubernetes comma-delimited list of namespaces to search for secrets.\n  -configmaps-annotation-selector string\n    \tAnnotation selector to find configmaps to publish as metrics.\n  -configmaps-exclude-glob value\n    \tGlobs to match against configmap data keys.\n  -configmaps-include-glob value\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/deploy.md"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 22,
                  "endLine": 49,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  -secrets-include-glob value\n    \tGlobs to match against secret data keys (Default \"*\").\n  -secrets-label-selector value\n    \tLabel selector to find secrets to publish as metrics.\n  -secrets-namespace string # (Deprecated) Use `-secrets-namespaces`.\n    \tKubernetes namespace to list secrets.\n  -secrets-namespaces string\n",
                    "rendered": {
                      "text": "  -secrets-include-glob value\n    \tGlobs to match against secret data keys (Default \"*\").\n  -secrets-label-selector value\n    \tLabel selector to find secrets to publish as metrics.\n  -secrets-namespace string # (Deprecated) Use `-secrets-namespaces`.\n    \tKubernetes namespace to list secrets.\n  -secrets-namespaces string\n",
                      "markdown": "`  -secrets-include-glob value\n    \tGlobs to match against secret data keys (Default \"*\").\n  -secrets-label-selector value\n    \tLabel selector to find secrets to publish as metrics.\n  -secrets-namespace string # (Deprecated) Use `-secrets-namespaces`.\n    \tKubernetes namespace to list secrets.\n  -secrets-namespaces string\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/deploy.md"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 27,
                  "endLine": 43,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  -include-kubeconfig-glob value\n    \tFile globs to include when looking for kubeconfigs.\n  -secrets-annotation-selector string\n    \tAnnotation selector to find secrets to publish as metrics.\n  -secrets-exclude-glob value\n    \tGlobs to match against secret data keys.\n  -secrets-include-glob value\n",
                    "rendered": {
                      "text": "  -include-kubeconfig-glob value\n    \tFile globs to include when looking for kubeconfigs.\n  -secrets-annotation-selector string\n    \tAnnotation selector to find secrets to publish as metrics.\n  -secrets-exclude-glob value\n    \tGlobs to match against secret data keys.\n  -secrets-include-glob value\n",
                      "markdown": "`  -include-kubeconfig-glob value\n    \tFile globs to include when looking for kubeconfigs.\n  -secrets-annotation-selector string\n    \tAnnotation selector to find secrets to publish as metrics.\n  -secrets-exclude-glob value\n    \tGlobs to match against secret data keys.\n  -secrets-include-glob value\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/deploy.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 240,
                  "endLine": 25,
                  "endColumn": 246,
                  "snippet": {
                    "text": "\n### cert-manager\n\ncert-exporter also supports certificates stored in Kubernetes secrets and configmaps.  In this case it expects the secret/configmap to be in the PEM format.  See the [deployment yaml](./cert-manager.yaml) for an example deployment that will find and export all cert-manager certificates.  Note that it comes with the appropriate RBAC objects to allow the application to read certs.\n\n**cert-manager.io/v1**\n`--secrets-annotation-selector=cert-manager.io/certificate-name`\n",
                    "rendered": {
                      "text": "\n### cert-manager\n\ncert-exporter also supports certificates stored in Kubernetes secrets and configmaps.  In this case it expects the secret/configmap to be in the PEM format.  See the [deployment yaml](./cert-manager.yaml) for an example deployment that will find and export all cert-manager certificates.  Note that it comes with the appropriate RBAC objects to allow the application to read certs.\n\n**cert-manager.io/v1**\n`--secrets-annotation-selector=cert-manager.io/certificate-name`\n",
                      "markdown": "`\n### cert-manager\n\ncert-exporter also supports certificates stored in Kubernetes secrets and configmaps.  In this case it expects the secret/configmap to be in the PEM format.  See the [deployment yaml](./cert-manager.yaml) for an example deployment that will find and export all cert-manager certificates.  Note that it comes with the appropriate RBAC objects to allow the application to read certs.\n\n**cert-manager.io/v1**\n`--secrets-annotation-selector=cert-manager.io/certificate-name`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/deploy.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 164,
                  "endLine": 9,
                  "endColumn": 170,
                  "snippet": {
                    "text": "\n### kops\n\nWe use kops to manage our Kubernetes clusters and the following two daemonsets cover our nodes and masters.  We use two daemonsets because the certs on a master and node are very different.  These daemonset specs were built on a cluster built with kops 1.12.\n\nThe following configurations will not only export the certificates used to govern access between Kubernetes components, but etcd as well.\n\n",
                    "rendered": {
                      "text": "\n### kops\n\nWe use kops to manage our Kubernetes clusters and the following two daemonsets cover our nodes and masters.  We use two daemonsets because the certs on a master and node are very different.  These daemonset specs were built on a cluster built with kops 1.12.\n\nThe following configurations will not only export the certificates used to govern access between Kubernetes components, but etcd as well.\n\n",
                      "markdown": "`\n### kops\n\nWe use kops to manage our Kubernetes clusters and the following two daemonsets cover our nodes and masters.  We use two daemonsets because the certs on a master and node are very different.  These daemonset specs were built on a cluster built with kops 1.12.\n\nThe following configurations will not only export the certificates used to govern access between Kubernetes components, but etcd as well.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/deploy.md"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 261,
                  "endLine": 3,
                  "endColumn": 267,
                  "snippet": {
                    "text": "# Deployment\n\ncert-exporter can easily be deployed using [this container](https://hub.docker.com/r/joeelliott/cert-exporter) to a cluster to export cert expiry information to prometheus using a Daemonset.  A daemonset was chosen because cert information should exist on every node and master in your cluster.\n\n**WARNING** If you run this application in your cluster it will probably require elevated privileges of some kind.  Additionally you are exposing VERY sensitive information to it.  Review the source!\n\n",
                    "rendered": {
                      "text": "# Deployment\n\ncert-exporter can easily be deployed using [this container](https://hub.docker.com/r/joeelliott/cert-exporter) to a cluster to export cert expiry information to prometheus using a Daemonset.  A daemonset was chosen because cert information should exist on every node and master in your cluster.\n\n**WARNING** If you run this application in your cluster it will probably require elevated privileges of some kind.  Additionally you are exposing VERY sensitive information to it.  Review the source!\n\n",
                      "markdown": "`# Deployment\n\ncert-exporter can easily be deployed using [this container](https://hub.docker.com/r/joeelliott/cert-exporter) to a cluster to export cert expiry information to prometheus using a Daemonset.  A daemonset was chosen because cert information should exist on every node and master in your cluster.\n\n**WARNING** If you run this application in your cluster it will probably require elevated privileges of some kind.  Additionally you are exposing VERY sensitive information to it.  Review the source!\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/src/exporters/secretExporter.go"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 68,
                  "endLine": 13,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\n// ExportMetrics exports the provided PEM file\nfunc (c *SecretExporter) ExportMetrics(bytes []byte, keyName, secretName, secretNamespace, certPassword string) error {\n\tmetricCollection, err := secondsToExpiryFromCertAsBytes(bytes, certPassword)\n\tif err != nil {\n\t\treturn err\n\t}\n",
                    "rendered": {
                      "text": "\n// ExportMetrics exports the provided PEM file\nfunc (c *SecretExporter) ExportMetrics(bytes []byte, keyName, secretName, secretNamespace, certPassword string) error {\n\tmetricCollection, err := secondsToExpiryFromCertAsBytes(bytes, certPassword)\n\tif err != nil {\n\t\treturn err\n\t}\n",
                      "markdown": "`\n// ExportMetrics exports the provided PEM file\nfunc (c *SecretExporter) ExportMetrics(bytes []byte, keyName, secretName, secretNamespace, certPassword string) error {\n\tmetricCollection, err := secondsToExpiryFromCertAsBytes(bytes, certPassword)\n\tif err != nil {\n\t\treturn err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/src/exporters/secretExporter.go"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 95,
                  "endLine": 12,
                  "endColumn": 103,
                  "snippet": {
                    "text": "}\n\n// ExportMetrics exports the provided PEM file\nfunc (c *SecretExporter) ExportMetrics(bytes []byte, keyName, secretName, secretNamespace, certPassword string) error {\n\tmetricCollection, err := secondsToExpiryFromCertAsBytes(bytes, certPassword)\n\tif err != nil {\n\t\treturn err\n",
                    "rendered": {
                      "text": "}\n\n// ExportMetrics exports the provided PEM file\nfunc (c *SecretExporter) ExportMetrics(bytes []byte, keyName, secretName, secretNamespace, certPassword string) error {\n\tmetricCollection, err := secondsToExpiryFromCertAsBytes(bytes, certPassword)\n\tif err != nil {\n\t\treturn err\n",
                      "markdown": "`}\n\n// ExportMetrics exports the provided PEM file\nfunc (c *SecretExporter) ExportMetrics(bytes []byte, keyName, secretName, secretNamespace, certPassword string) error {\n\tmetricCollection, err := secondsToExpiryFromCertAsBytes(bytes, certPassword)\n\tif err != nil {\n\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/src/exporters/certHelpers.go"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 48,
                  "endLine": 70,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\tvar blocks []*pem.Block\n\tvar last_err error\n\n\tpfx_blocks, err := pkcs12.ToPEM(certBytes, certPassword)\n\tif err != nil {\n\t\treturn false, nil, err\n\t}\n",
                    "rendered": {
                      "text": "\tvar blocks []*pem.Block\n\tvar last_err error\n\n\tpfx_blocks, err := pkcs12.ToPEM(certBytes, certPassword)\n\tif err != nil {\n\t\treturn false, nil, err\n\t}\n",
                      "markdown": "`\tvar blocks []*pem.Block\n\tvar last_err error\n\n\tpfx_blocks, err := pkcs12.ToPEM(certBytes, certPassword)\n\tif err != nil {\n\t\treturn false, nil, err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/src/exporters/certHelpers.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 39,
                  "endLine": 65,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\treturn metric\n}\n\nfunc parseAsPKCS(certBytes []byte, certPassword string) (bool, []certMetric, error) {\n\tvar metrics []certMetric\n\tvar blocks []*pem.Block\n\tvar last_err error\n",
                    "rendered": {
                      "text": "\treturn metric\n}\n\nfunc parseAsPKCS(certBytes []byte, certPassword string) (bool, []certMetric, error) {\n\tvar metrics []certMetric\n\tvar blocks []*pem.Block\n\tvar last_err error\n",
                      "markdown": "`\treturn metric\n}\n\nfunc parseAsPKCS(certBytes []byte, certPassword string) (bool, []certMetric, error) {\n\tvar metrics []certMetric\n\tvar blocks []*pem.Block\n\tvar last_err error\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/src/exporters/certHelpers.go"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 51,
                  "endLine": 48,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\t\treturn metrics, err\n\t}\n\t// Parse as PKCS ?\n\tparsed, metrics, err = parseAsPKCS(certBytes, certPassword)\n\tif parsed {\n\t\treturn metrics, nil\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn metrics, err\n\t}\n\t// Parse as PKCS ?\n\tparsed, metrics, err = parseAsPKCS(certBytes, certPassword)\n\tif parsed {\n\t\treturn metrics, nil\n\t}\n",
                      "markdown": "`\t\treturn metrics, err\n\t}\n\t// Parse as PKCS ?\n\tparsed, metrics, err = parseAsPKCS(certBytes, certPassword)\n\tif parsed {\n\t\treturn metrics, nil\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/src/exporters/certHelpers.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 58,
                  "endLine": 40,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\treturn secondsToExpiryFromCertAsBytes(certBytes, \"\")\n}\n\nfunc secondsToExpiryFromCertAsBytes(certBytes []byte, certPassword string) ([]certMetric, error) {\n\tvar metrics []certMetric\n\n\tparsed, metrics, err := parseAsPEM(certBytes)\n",
                    "rendered": {
                      "text": "\treturn secondsToExpiryFromCertAsBytes(certBytes, \"\")\n}\n\nfunc secondsToExpiryFromCertAsBytes(certBytes []byte, certPassword string) ([]certMetric, error) {\n\tvar metrics []certMetric\n\n\tparsed, metrics, err := parseAsPEM(certBytes)\n",
                      "markdown": "`\treturn secondsToExpiryFromCertAsBytes(certBytes, \"\")\n}\n\nfunc secondsToExpiryFromCertAsBytes(certBytes []byte, certPassword string) ([]certMetric, error) {\n\tvar metrics []certMetric\n\n\tparsed, metrics, err := parseAsPEM(certBytes)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/src/exporters/certHelpers.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 19,
                  "endLine": 32,
                  "endColumn": 25,
                  "snippet": {
                    "text": "}\n\nfunc secondsToExpiryFromCertAsBase64String(s string) ([]certMetric, error) {\n\tcertBytes, err := base64.StdEncoding.DecodeString(s)\n\tif err != nil {\n\t\treturn []certMetric{}, err\n\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc secondsToExpiryFromCertAsBase64String(s string) ([]certMetric, error) {\n\tcertBytes, err := base64.StdEncoding.DecodeString(s)\n\tif err != nil {\n\t\treturn []certMetric{}, err\n\t}\n",
                      "markdown": "`}\n\nfunc secondsToExpiryFromCertAsBase64String(s string) ([]certMetric, error) {\n\tcertBytes, err := base64.StdEncoding.DecodeString(s)\n\tif err != nil {\n\t\treturn []certMetric{}, err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/src/exporters/certHelpers.go"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 11,
                  "endLine": 5,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nimport (\n\t\"crypto/x509\"\n\t\"encoding/base64\"\n\t\"encoding/pem\"\n\t\"fmt\"\n\t\"os\"\n",
                    "rendered": {
                      "text": "\nimport (\n\t\"crypto/x509\"\n\t\"encoding/base64\"\n\t\"encoding/pem\"\n\t\"fmt\"\n\t\"os\"\n",
                      "markdown": "`\nimport (\n\t\"crypto/x509\"\n\t\"encoding/base64\"\n\t\"encoding/pem\"\n\t\"fmt\"\n\t\"os\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 39,
                  "endLine": 47,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n",
                    "rendered": {
                      "text": "        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n",
                      "markdown": "`        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n",
                    "rendered": {
                      "text": "        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n",
                      "markdown": "`        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 28,
                  "endLine": 55,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        with:\n          images: joeelliott/cert-exporter\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v4\n        with:\n          context: .\n",
                    "rendered": {
                      "text": "        with:\n          images: joeelliott/cert-exporter\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v4\n        with:\n          context: .\n",
                      "markdown": "`        with:\n          images: joeelliott/cert-exporter\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v4\n        with:\n          context: .\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 49,
                  "endLine": 50,
                  "snippet": {
                    "text": "          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38\n        with:\n          images: joeelliott/cert-exporter\n",
                    "rendered": {
                      "text": "          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38\n        with:\n          images: joeelliott/cert-exporter\n",
                      "markdown": "`          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38\n        with:\n          images: joeelliott/cert-exporter\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 23,
                  "endLine": 43,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        env:\n          CR_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: Log in to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n",
                    "rendered": {
                      "text": "        env:\n          CR_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: Log in to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n",
                      "markdown": "`        env:\n          CR_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: Log in to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 9,
                  "endLine": 34,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      - name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      - name: Run chart-releaser\n        uses: helm/chart-releaser-action@v1.0.0\n",
                    "rendered": {
                      "text": "      - name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      - name: Run chart-releaser\n        uses: helm/chart-releaser-action@v1.0.0\n",
                      "markdown": "`      - name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      - name: Run chart-releaser\n        uses: helm/chart-releaser-action@v1.0.0\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 9,
                  "endLine": 33,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n      - name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      - name: Run chart-releaser\n",
                    "rendered": {
                      "text": "\n      - name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      - name: Run chart-releaser\n",
                      "markdown": "`\n      - name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      - name: Run chart-releaser\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 23,
                  "endLine": 32,
                  "snippet": {
                    "text": "        with:\n          go-version: ^1.19\n\n      - name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n",
                    "rendered": {
                      "text": "        with:\n          go-version: ^1.19\n\n      - name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n",
                      "markdown": "`        with:\n          go-version: ^1.19\n\n      - name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 20,
                  "endLine": 23,
                  "endColumn": 28,
                  "snippet": {
                    "text": "      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Set up Go ^1.19\n",
                    "rendered": {
                      "text": "      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Set up Go ^1.19\n",
                      "markdown": "`      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Set up Go ^1.19\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/Makefile"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 20,
                  "endLine": 1,
                  "endColumn": 25,
                  "snippet": {
                    "text": "GOPATH := $(shell go env GOPATH)\nGORELEASER := $(GOPATH)/bin/goreleaser\n\nall: build\n",
                    "rendered": {
                      "text": "GOPATH := $(shell go env GOPATH)\nGORELEASER := $(GOPATH)/bin/goreleaser\n\nall: build\n",
                      "markdown": "`GOPATH := $(shell go env GOPATH)\nGORELEASER := $(GOPATH)/bin/goreleaser\n\nall: build\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/daemonset-prom-operator.yaml"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 5,
                  "endLine": 74,
                  "snippet": {
                    "text": "          type: Directory\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: cert-exporter-metrics\n  namespace: monitoring\n  labels:\n",
                    "rendered": {
                      "text": "          type: Directory\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: cert-exporter-metrics\n  namespace: monitoring\n  labels:\n",
                      "markdown": "`          type: Directory\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: cert-exporter-metrics\n  namespace: monitoring\n  labels:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/readme.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 18,
                  "endLine": 18,
                  "endColumn": 26,
                  "snippet": {
                    "text": "- Certs stored in Kubernetes \n  - secrets \n    - direct support for [cert-manager](https://github.com/jetstack/cert-manager)\n    - support for password-protected certificates\n  - configmaps\n  - [admission webhooks](https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/)\n  - cert-manager [CertificateRequest] (https://cert-manager.io/docs/usage/certificaterequest/)\n",
                    "rendered": {
                      "text": "- Certs stored in Kubernetes \n  - secrets \n    - direct support for [cert-manager](https://github.com/jetstack/cert-manager)\n    - support for password-protected certificates\n  - configmaps\n  - [admission webhooks](https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/)\n  - cert-manager [CertificateRequest] (https://cert-manager.io/docs/usage/certificaterequest/)\n",
                      "markdown": "`- Certs stored in Kubernetes \n  - secrets \n    - direct support for [cert-manager](https://github.com/jetstack/cert-manager)\n    - support for password-protected certificates\n  - configmaps\n  - [admission webhooks](https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/)\n  - cert-manager [CertificateRequest] (https://cert-manager.io/docs/usage/certificaterequest/)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/readme.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 9,
                  "endLine": 39,
                  "snippet": {
                    "text": "\n```\nhelm repo add cert-exporter https://joe-elliott.github.io/cert-exporter/\nhelm repo update\nhelm upgrade --install cert-exporter cert-exporter/cert-exporter\n```\n\n### Dashboard\n",
                    "rendered": {
                      "text": "\n```\nhelm repo add cert-exporter https://joe-elliott.github.io/cert-exporter/\nhelm repo update\nhelm upgrade --install cert-exporter cert-exporter/cert-exporter\n```\n\n### Dashboard\n",
                      "markdown": "`\n```\nhelm repo add cert-exporter https://joe-elliott.github.io/cert-exporter/\nhelm repo update\nhelm upgrade --install cert-exporter cert-exporter/cert-exporter\n```\n\n### Dashboard\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/readme.md"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 169,
                  "endLine": 85,
                  "endColumn": 175,
                  "snippet": {
                    "text": "e `filename`, `issuer`, `cn`, and `nodename` label indicates the exported cert.\n\n**cert_exporter_kubeconfig_expires_in_seconds**  \nThe number of seconds until a certificate stored in a kubeconfig expires.  The `filename`, `type`, `name`, and `nodename` labels indicate the kubeconfig, cluster or user node and name of the node.  See details [here](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/).\n\n**cert_exporter_secret_expires_in_seconds**\nThe number of seconds until a certificate stored in a kubernetes secret expires.  The `key_name`, `issuer`, `cn`, `",
                    "rendered": {
                      "text": "e `filename`, `issuer`, `cn`, and `nodename` label indicates the exported cert.\n\n**cert_exporter_kubeconfig_expires_in_seconds**  \nThe number of seconds until a certificate stored in a kubeconfig expires.  The `filename`, `type`, `name`, and `nodename` labels indicate the kubeconfig, cluster or user node and name of the node.  See details [here](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/).\n\n**cert_exporter_secret_expires_in_seconds**\nThe number of seconds until a certificate stored in a kubernetes secret expires.  The `key_name`, `issuer`, `cn`, `",
                      "markdown": "`e `filename`, `issuer`, `cn`, and `nodename` label indicates the exported cert.\n\n**cert_exporter_kubeconfig_expires_in_seconds**  \nThe number of seconds until a certificate stored in a kubeconfig expires.  The `filename`, `type`, `name`, and `nodename` labels indicate the kubeconfig, cluster or user node and name of the node.  See details [here](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/).\n\n**cert_exporter_secret_expires_in_seconds**\nThe number of seconds until a certificate stored in a kubernetes secret expires.  The `key_name`, `issuer`, `cn`, ``"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/readme.md"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 85,
                  "endLine": 79,
                  "endColumn": 92,
                  "snippet": {
                    "text": "```\n\n**cert_exporter_error_total**  \nThe total number of unexpected errors encountered by cert-exporter.  A good metric to watch to feel comfortable certs are being exported properly.\n\n**cert_exporter_cert_expires_in_seconds**  \nThe number of seconds until a certificate stored in the PEM format is expired.  The `filename`, `issuer`, `cn`, and `nodename` label indicates the exported cert.\n",
                    "rendered": {
                      "text": "```\n\n**cert_exporter_error_total**  \nThe total number of unexpected errors encountered by cert-exporter.  A good metric to watch to feel comfortable certs are being exported properly.\n\n**cert_exporter_cert_expires_in_seconds**  \nThe number of seconds until a certificate stored in the PEM format is expired.  The `filename`, `issuer`, `cn`, and `nodename` label indicates the exported cert.\n",
                      "markdown": "````\n\n**cert_exporter_error_total**  \nThe total number of unexpected errors encountered by cert-exporter.  A good metric to watch to feel comfortable certs are being exported properly.\n\n**cert_exporter_cert_expires_in_seconds**  \nThe number of seconds until a certificate stored in the PEM format is expired.  The `filename`, `issuer`, `cn`, and `nodename` label indicates the exported cert.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/main.go"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 102,
                  "endLine": 99,
                  "endColumn": 108,
                  "snippet": {
                    "text": " \"enable-certrequests-check\", false, \"Enable certrequests check.\")\n\tflag.Var(&certRequestsLabelSelector, \"certrequests-label-selector\", \"Label selector to find certrequests to publish as metrics.\")\n\tflag.Var(&certRequestsAnnotationSelector, \"certrequests-annotation-selector\", \"Annotation selector to find certrequests to publish as metrics.\")\n\tflag.StringVar(&certRequestsNamespace, \"certrequests-namespace\", \"\", \"Kubernetes namespace to list certrequests.\")\n\tflag.StringVar(&certRequestsListOfNamespaces, \"certrequests-namespaces\", \"\", \"Kubernetes comma-delimited list of namespaces to search for certreq",
                    "rendered": {
                      "text": " \"enable-certrequests-check\", false, \"Enable certrequests check.\")\n\tflag.Var(&certRequestsLabelSelector, \"certrequests-label-selector\", \"Label selector to find certrequests to publish as metrics.\")\n\tflag.Var(&certRequestsAnnotationSelector, \"certrequests-annotation-selector\", \"Annotation selector to find certrequests to publish as metrics.\")\n\tflag.StringVar(&certRequestsNamespace, \"certrequests-namespace\", \"\", \"Kubernetes namespace to list certrequests.\")\n\tflag.StringVar(&certRequestsListOfNamespaces, \"certrequests-namespaces\", \"\", \"Kubernetes comma-delimited list of namespaces to search for certreq",
                      "markdown": "` \"enable-certrequests-check\", false, \"Enable certrequests check.\")\n\tflag.Var(&certRequestsLabelSelector, \"certrequests-label-selector\", \"Label selector to find certrequests to publish as metrics.\")\n\tflag.Var(&certRequestsAnnotationSelector, \"certrequests-annotation-selector\", \"Annotation selector to find certrequests to publish as metrics.\")\n\tflag.StringVar(&certRequestsNamespace, \"certrequests-namespace\", \"\", \"Kubernetes namespace to list certrequests.\")\n\tflag.StringVar(&certRequestsListOfNamespaces, \"certrequests-namespaces\", \"\", \"Kubernetes comma-delimited list of namespaces to search for certreq`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/main.go"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 87,
                  "endLine": 98,
                  "endColumn": 93,
                  "snippet": {
                    "text": "on\", \"\", \"AWS region to search for secrets in\")\n\tflag.Var(&awsSecrets, \"aws-secret\", \"AWS secrets to export\")\n\n\tflag.BoolVar(&certRequestsEnabled, \"enable-certrequests-check\", false, \"Enable certrequests check.\")\n\tflag.Var(&certRequestsLabelSelector, \"certrequests-label-selector\", \"Label selector to find certrequests to publish as metrics.\")\n\tflag.Var(&certRequestsAnnotationSelector, \"certrequests-annotation-selector\", \"Annotation selector to find certrequests to publish as metrics.\")\n\tflag.StringVar(&certRequestsNamespace, \"certrequests-namespace\", \"\", \"Kubernetes namespace to list certrequests.\")\n",
                    "rendered": {
                      "text": "on\", \"\", \"AWS region to search for secrets in\")\n\tflag.Var(&awsSecrets, \"aws-secret\", \"AWS secrets to export\")\n\n\tflag.BoolVar(&certRequestsEnabled, \"enable-certrequests-check\", false, \"Enable certrequests check.\")\n\tflag.Var(&certRequestsLabelSelector, \"certrequests-label-selector\", \"Label selector to find certrequests to publish as metrics.\")\n\tflag.Var(&certRequestsAnnotationSelector, \"certrequests-annotation-selector\", \"Annotation selector to find certrequests to publish as metrics.\")\n\tflag.StringVar(&certRequestsNamespace, \"certrequests-namespace\", \"\", \"Kubernetes namespace to list certrequests.\")\n",
                      "markdown": "`on\", \"\", \"AWS region to search for secrets in\")\n\tflag.Var(&awsSecrets, \"aws-secret\", \"AWS secrets to export\")\n\n\tflag.BoolVar(&certRequestsEnabled, \"enable-certrequests-check\", false, \"Enable certrequests check.\")\n\tflag.Var(&certRequestsLabelSelector, \"certrequests-label-selector\", \"Label selector to find certrequests to publish as metrics.\")\n\tflag.Var(&certRequestsAnnotationSelector, \"certrequests-annotation-selector\", \"Annotation selector to find certrequests to publish as metrics.\")\n\tflag.StringVar(&certRequestsNamespace, \"certrequests-namespace\", \"\", \"Kubernetes namespace to list certrequests.\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/main.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 94,
                  "endLine": 91,
                  "endColumn": 100,
                  "snippet": {
                    "text": "\n\tflag.BoolVar(&webhookCheckEnabled, \"enable-webhook-cert-check\", false, \"Enable webhook cert check.\")\n\tflag.Var(&webhooksLabelSelector, \"webhooks-label-selector\", \"Label selector to find webhooks to publish as metrics.\")\n\tflag.Var(&webhooksAnnotationSelector, \"webhooks-annotation-selector\", \"Annotation selector to find webhooks to publish as metrics.\")\n\n\tflag.StringVar(&awsAccount, \"aws-account\", \"\", \"AWS account to search for secrets in\")\n\tflag.StringVar(&awsRegion, \"aws-region\", \"\", \"AWS region to search for secrets in\")\n",
                    "rendered": {
                      "text": "\n\tflag.BoolVar(&webhookCheckEnabled, \"enable-webhook-cert-check\", false, \"Enable webhook cert check.\")\n\tflag.Var(&webhooksLabelSelector, \"webhooks-label-selector\", \"Label selector to find webhooks to publish as metrics.\")\n\tflag.Var(&webhooksAnnotationSelector, \"webhooks-annotation-selector\", \"Annotation selector to find webhooks to publish as metrics.\")\n\n\tflag.StringVar(&awsAccount, \"aws-account\", \"\", \"AWS account to search for secrets in\")\n\tflag.StringVar(&awsRegion, \"aws-region\", \"\", \"AWS region to search for secrets in\")\n",
                      "markdown": "`\n\tflag.BoolVar(&webhookCheckEnabled, \"enable-webhook-cert-check\", false, \"Enable webhook cert check.\")\n\tflag.Var(&webhooksLabelSelector, \"webhooks-label-selector\", \"Label selector to find webhooks to publish as metrics.\")\n\tflag.Var(&webhooksAnnotationSelector, \"webhooks-annotation-selector\", \"Annotation selector to find webhooks to publish as metrics.\")\n\n\tflag.StringVar(&awsAccount, \"aws-account\", \"\", \"AWS account to search for secrets in\")\n\tflag.StringVar(&awsRegion, \"aws-region\", \"\", \"AWS region to search for secrets in\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/main.go"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 79,
                  "endLine": 90,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\tflag.Var(&excludeConfigMapsDataGlobs, \"configmaps-exclude-glob\", \"Configmap globs to exclude when looking for configmap data keys.\")\n\n\tflag.BoolVar(&webhookCheckEnabled, \"enable-webhook-cert-check\", false, \"Enable webhook cert check.\")\n\tflag.Var(&webhooksLabelSelector, \"webhooks-label-selector\", \"Label selector to find webhooks to publish as metrics.\")\n\tflag.Var(&webhooksAnnotationSelector, \"webhooks-annotation-selector\", \"Annotation selector to find webhooks to publish as metrics.\")\n\n\tflag.StringVar(&awsAccount, \"aws-account\", \"\", \"AWS account to search for secrets in\")\n",
                    "rendered": {
                      "text": "\tflag.Var(&excludeConfigMapsDataGlobs, \"configmaps-exclude-glob\", \"Configmap globs to exclude when looking for configmap data keys.\")\n\n\tflag.BoolVar(&webhookCheckEnabled, \"enable-webhook-cert-check\", false, \"Enable webhook cert check.\")\n\tflag.Var(&webhooksLabelSelector, \"webhooks-label-selector\", \"Label selector to find webhooks to publish as metrics.\")\n\tflag.Var(&webhooksAnnotationSelector, \"webhooks-annotation-selector\", \"Annotation selector to find webhooks to publish as metrics.\")\n\n\tflag.StringVar(&awsAccount, \"aws-account\", \"\", \"AWS account to search for secrets in\")\n",
                      "markdown": "`\tflag.Var(&excludeConfigMapsDataGlobs, \"configmaps-exclude-glob\", \"Configmap globs to exclude when looking for configmap data keys.\")\n\n\tflag.BoolVar(&webhookCheckEnabled, \"enable-webhook-cert-check\", false, \"Enable webhook cert check.\")\n\tflag.Var(&webhooksLabelSelector, \"webhooks-label-selector\", \"Label selector to find webhooks to publish as metrics.\")\n\tflag.Var(&webhooksAnnotationSelector, \"webhooks-annotation-selector\", \"Annotation selector to find webhooks to publish as metrics.\")\n\n\tflag.StringVar(&awsAccount, \"aws-account\", \"\", \"AWS account to search for secrets in\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/main.go"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 98,
                  "endLine": 83,
                  "endColumn": 104,
                  "snippet": {
                    "text": "xclude-glob\", \"Secret globs to exclude when looking for secret data keys.\")\n\n\tflag.Var(&configMapsLabelSelector, \"configmaps-label-selector\", \"Label selector to find configmaps to publish as metrics.\")\n\tflag.Var(&configMapsAnnotationSelector, \"configmaps-annotation-selector\", \"Annotation selector to find configmaps to publish as metrics.\")\n\tflag.StringVar(&configMapsNamespace, \"configmaps-namespace\", \"\", \"Kubernetes namespace to list configmaps.\")\n\tflag.StringVar(&configMapsListOfNamespaces, \"configmaps-namespaces\", \"\", \"Kubernetes comma-delimited list of namespaces to search for configmaps.\")\n\tflag",
                    "rendered": {
                      "text": "xclude-glob\", \"Secret globs to exclude when looking for secret data keys.\")\n\n\tflag.Var(&configMapsLabelSelector, \"configmaps-label-selector\", \"Label selector to find configmaps to publish as metrics.\")\n\tflag.Var(&configMapsAnnotationSelector, \"configmaps-annotation-selector\", \"Annotation selector to find configmaps to publish as metrics.\")\n\tflag.StringVar(&configMapsNamespace, \"configmaps-namespace\", \"\", \"Kubernetes namespace to list configmaps.\")\n\tflag.StringVar(&configMapsListOfNamespaces, \"configmaps-namespaces\", \"\", \"Kubernetes comma-delimited list of namespaces to search for configmaps.\")\n\tflag",
                      "markdown": "`xclude-glob\", \"Secret globs to exclude when looking for secret data keys.\")\n\n\tflag.Var(&configMapsLabelSelector, \"configmaps-label-selector\", \"Label selector to find configmaps to publish as metrics.\")\n\tflag.Var(&configMapsAnnotationSelector, \"configmaps-annotation-selector\", \"Annotation selector to find configmaps to publish as metrics.\")\n\tflag.StringVar(&configMapsNamespace, \"configmaps-namespace\", \"\", \"Kubernetes namespace to list configmaps.\")\n\tflag.StringVar(&configMapsListOfNamespaces, \"configmaps-namespaces\", \"\", \"Kubernetes comma-delimited list of namespaces to search for configmaps.\")\n\tflag`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/main.go"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 83,
                  "endLine": 82,
                  "endColumn": 89,
                  "snippet": {
                    "text": "udeSecretsTypes, \"secret-include-types\", \"Select only specific a secret type (Default nil).\")\n\tflag.Var(&excludeSecretsDataGlobs, \"secrets-exclude-glob\", \"Secret globs to exclude when looking for secret data keys.\")\n\n\tflag.Var(&configMapsLabelSelector, \"configmaps-label-selector\", \"Label selector to find configmaps to publish as metrics.\")\n\tflag.Var(&configMapsAnnotationSelector, \"configmaps-annotation-selector\", \"Annotation selector to find configmaps to publish as metrics.\")\n\tflag.StringVar(&configMapsNamespace, \"configmaps-namespace\", \"\", \"Kubernetes namespace to list configmaps.\")\n\tflag.StringVa",
                    "rendered": {
                      "text": "udeSecretsTypes, \"secret-include-types\", \"Select only specific a secret type (Default nil).\")\n\tflag.Var(&excludeSecretsDataGlobs, \"secrets-exclude-glob\", \"Secret globs to exclude when looking for secret data keys.\")\n\n\tflag.Var(&configMapsLabelSelector, \"configmaps-label-selector\", \"Label selector to find configmaps to publish as metrics.\")\n\tflag.Var(&configMapsAnnotationSelector, \"configmaps-annotation-selector\", \"Annotation selector to find configmaps to publish as metrics.\")\n\tflag.StringVar(&configMapsNamespace, \"configmaps-namespace\", \"\", \"Kubernetes namespace to list configmaps.\")\n\tflag.StringVa",
                      "markdown": "`udeSecretsTypes, \"secret-include-types\", \"Select only specific a secret type (Default nil).\")\n\tflag.Var(&excludeSecretsDataGlobs, \"secrets-exclude-glob\", \"Secret globs to exclude when looking for secret data keys.\")\n\n\tflag.Var(&configMapsLabelSelector, \"configmaps-label-selector\", \"Label selector to find configmaps to publish as metrics.\")\n\tflag.Var(&configMapsAnnotationSelector, \"configmaps-annotation-selector\", \"Annotation selector to find configmaps to publish as metrics.\")\n\tflag.StringVar(&configMapsNamespace, \"configmaps-namespace\", \"\", \"Kubernetes namespace to list configmaps.\")\n\tflag.StringVa`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/main.go"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 92,
                  "endLine": 75,
                  "endColumn": 98,
                  "snippet": {
                    "text": "kubeconfigPath, \"kubeconfig\", \"\", \"Path to a kubeconfig. Only required if out-of-cluster.\")\n\tflag.Var(&secretsLabelSelector, \"secrets-label-selector\", \"Label selector to find secrets to publish as metrics.\")\n\tflag.Var(&secretsAnnotationSelector, \"secrets-annotation-selector\", \"Annotation selector to find secrets to publish as metrics.\")\n\tflag.StringVar(&secretsNamespace, \"secrets-namespace\", \"\", \"Kubernetes namespace to list secrets.\")\n\tflag.StringVar(&secretsListOfNamespaces, \"secrets-namespaces\", \"\", \"Kubernetes comma-delimited list of namespaces to search for secrets.\")\n\tflag.Var(&includeSecretsD",
                    "rendered": {
                      "text": "kubeconfigPath, \"kubeconfig\", \"\", \"Path to a kubeconfig. Only required if out-of-cluster.\")\n\tflag.Var(&secretsLabelSelector, \"secrets-label-selector\", \"Label selector to find secrets to publish as metrics.\")\n\tflag.Var(&secretsAnnotationSelector, \"secrets-annotation-selector\", \"Annotation selector to find secrets to publish as metrics.\")\n\tflag.StringVar(&secretsNamespace, \"secrets-namespace\", \"\", \"Kubernetes namespace to list secrets.\")\n\tflag.StringVar(&secretsListOfNamespaces, \"secrets-namespaces\", \"\", \"Kubernetes comma-delimited list of namespaces to search for secrets.\")\n\tflag.Var(&includeSecretsD",
                      "markdown": "`kubeconfigPath, \"kubeconfig\", \"\", \"Path to a kubeconfig. Only required if out-of-cluster.\")\n\tflag.Var(&secretsLabelSelector, \"secrets-label-selector\", \"Label selector to find secrets to publish as metrics.\")\n\tflag.Var(&secretsAnnotationSelector, \"secrets-annotation-selector\", \"Annotation selector to find secrets to publish as metrics.\")\n\tflag.StringVar(&secretsNamespace, \"secrets-namespace\", \"\", \"Kubernetes namespace to list secrets.\")\n\tflag.StringVar(&secretsListOfNamespaces, \"secrets-namespaces\", \"\", \"Kubernetes comma-delimited list of namespaces to search for secrets.\")\n\tflag.Var(&includeSecretsD`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/main.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 77,
                  "endLine": 74,
                  "endColumn": 83,
                  "snippet": {
                    "text": ".\")\n\tflag.DurationVar(&pollingPeriod, \"polling-period\", time.Hour, \"Periodic interval in which to check certs.\")\n\n\tflag.StringVar(&kubeconfigPath, \"kubeconfig\", \"\", \"Path to a kubeconfig. Only required if out-of-cluster.\")\n\tflag.Var(&secretsLabelSelector, \"secrets-label-selector\", \"Label selector to find secrets to publish as metrics.\")\n\tflag.Var(&secretsAnnotationSelector, \"secrets-annotation-selector\", \"Annotation selector to find secrets to publish as metrics.\")\n\tflag.StringVar(&secretsNamespace, \"secrets-namespace\", \"\", \"Kubernetes namespace to list secrets.\")\n\tflag.StringVar(&secretsListOfNames",
                    "rendered": {
                      "text": ".\")\n\tflag.DurationVar(&pollingPeriod, \"polling-period\", time.Hour, \"Periodic interval in which to check certs.\")\n\n\tflag.StringVar(&kubeconfigPath, \"kubeconfig\", \"\", \"Path to a kubeconfig. Only required if out-of-cluster.\")\n\tflag.Var(&secretsLabelSelector, \"secrets-label-selector\", \"Label selector to find secrets to publish as metrics.\")\n\tflag.Var(&secretsAnnotationSelector, \"secrets-annotation-selector\", \"Annotation selector to find secrets to publish as metrics.\")\n\tflag.StringVar(&secretsNamespace, \"secrets-namespace\", \"\", \"Kubernetes namespace to list secrets.\")\n\tflag.StringVar(&secretsListOfNames",
                      "markdown": "`.\")\n\tflag.DurationVar(&pollingPeriod, \"polling-period\", time.Hour, \"Periodic interval in which to check certs.\")\n\n\tflag.StringVar(&kubeconfigPath, \"kubeconfig\", \"\", \"Path to a kubeconfig. Only required if out-of-cluster.\")\n\tflag.Var(&secretsLabelSelector, \"secrets-label-selector\", \"Label selector to find secrets to publish as metrics.\")\n\tflag.Var(&secretsAnnotationSelector, \"secrets-annotation-selector\", \"Annotation selector to find secrets to publish as metrics.\")\n\tflag.StringVar(&secretsNamespace, \"secrets-namespace\", \"\", \"Kubernetes namespace to list secrets.\")\n\tflag.StringVar(&secretsListOfNames`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/Dockerfile"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 17,
                  "endColumn": 4,
                  "snippet": {
                    "text": "USER app\n\nCOPY --from=build /src/app .\n\nCMD [\"./app\"] \n",
                    "rendered": {
                      "text": "USER app\n\nCOPY --from=build /src/app .\n\nCMD [\"./app\"] \n",
                      "markdown": "`USER app\n\nCOPY --from=build /src/app .\n\nCMD [\"./app\"] \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/helm/cert-exporter/templates/_helpers.tpl"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 11,
                  "endLine": 11,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n{{/*\nCreate a default fully qualified app name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\n*/}}\n{{- define \"cert-exporter.fullname\" -}}\n",
                    "rendered": {
                      "text": "\n{{/*\nCreate a default fully qualified app name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\n*/}}\n{{- define \"cert-exporter.fullname\" -}}\n",
                      "markdown": "`\n{{/*\nCreate a default fully qualified app name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\n*/}}\n{{- define \"cert-exporter.fullname\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/helm/cert-exporter/templates/_helpers.tpl"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4,
                  "endLine": 3,
                  "endColumn": 7,
                  "snippet": {
                    "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"cert-exporter.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n",
                    "rendered": {
                      "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"cert-exporter.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n",
                      "markdown": "`{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"cert-exporter.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/helm/cert-exporter/templates/_helpers.tpl"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 22,
                  "endLine": 75,
                  "endColumn": 31,
                  "snippet": {
                    "text": "{{- end -}}\n\n{{/*\nCreate the name of the service account to use\n*/}}\n{{- define \"cert-exporter.serviceAccountName\" -}}\n{{- if .Values.rbac.serviceAccount.create -}}\n",
                    "rendered": {
                      "text": "{{- end -}}\n\n{{/*\nCreate the name of the service account to use\n*/}}\n{{- define \"cert-exporter.serviceAccountName\" -}}\n{{- if .Values.rbac.serviceAccount.create -}}\n",
                      "markdown": "`{{- end -}}\n\n{{/*\nCreate the name of the service account to use\n*/}}\n{{- define \"cert-exporter.serviceAccountName\" -}}\n{{- if .Values.rbac.serviceAccount.create -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/helm/cert-exporter/templates/_helpers.tpl"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 4,
                  "endLine": 3,
                  "endColumn": 7,
                  "snippet": {
                    "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"cert-exporter.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n",
                    "rendered": {
                      "text": "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"cert-exporter.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n",
                      "markdown": "`{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"cert-exporter.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/helm/cert-exporter/values.yaml"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 31,
                  "endLine": 125,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  clusterRole:\n    # New role to grant to the service account\n    create: true\n    # Annotations to add to the service account\n    annotations: {}\n    # Rules for the Role\n    rules:\n",
                    "rendered": {
                      "text": "  clusterRole:\n    # New role to grant to the service account\n    create: true\n    # Annotations to add to the service account\n    annotations: {}\n    # Rules for the Role\n    rules:\n",
                      "markdown": "`  clusterRole:\n    # New role to grant to the service account\n    create: true\n    # Annotations to add to the service account\n    annotations: {}\n    # Rules for the Role\n    rules:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/helm/cert-exporter/values.yaml"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 30,
                  "endLine": 123,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    name: cert-exporter\n\n  clusterRole:\n    # New role to grant to the service account\n    create: true\n    # Annotations to add to the service account\n    annotations: {}\n",
                    "rendered": {
                      "text": "    name: cert-exporter\n\n  clusterRole:\n    # New role to grant to the service account\n    create: true\n    # Annotations to add to the service account\n    annotations: {}\n",
                      "markdown": "`    name: cert-exporter\n\n  clusterRole:\n    # New role to grant to the service account\n    create: true\n    # Annotations to add to the service account\n    annotations: {}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/helm/cert-exporter/values.yaml"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 21,
                  "endLine": 118,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    create: true\n    # Annotations to add to the service account\n    annotations: {}\n    # The name of the service account to use.\n    # If not set and create is true, a name is generated using the fullname template\n    name: cert-exporter\n\n",
                    "rendered": {
                      "text": "    create: true\n    # Annotations to add to the service account\n    annotations: {}\n    # The name of the service account to use.\n    # If not set and create is true, a name is generated using the fullname template\n    name: cert-exporter\n\n",
                      "markdown": "`    create: true\n    # Annotations to add to the service account\n    annotations: {}\n    # The name of the service account to use.\n    # If not set and create is true, a name is generated using the fullname template\n    name: cert-exporter\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/helm/cert-exporter/values.yaml"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 31,
                  "endLine": 116,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  serviceAccount:\n    # Specifies whether a service account should be created\n    create: true\n    # Annotations to add to the service account\n    annotations: {}\n    # The name of the service account to use.\n    # If not set and create is true, a name is generated using the fullname template\n",
                    "rendered": {
                      "text": "  serviceAccount:\n    # Specifies whether a service account should be created\n    create: true\n    # Annotations to add to the service account\n    annotations: {}\n    # The name of the service account to use.\n    # If not set and create is true, a name is generated using the fullname template\n",
                      "markdown": "`  serviceAccount:\n    # Specifies whether a service account should be created\n    create: true\n    # Annotations to add to the service account\n    annotations: {}\n    # The name of the service account to use.\n    # If not set and create is true, a name is generated using the fullname template\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/helm/cert-exporter/values.yaml"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 25,
                  "endLine": 114,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nrbac:\n  serviceAccount:\n    # Specifies whether a service account should be created\n    create: true\n    # Annotations to add to the service account\n    annotations: {}\n",
                    "rendered": {
                      "text": "\nrbac:\n  serviceAccount:\n    # Specifies whether a service account should be created\n    create: true\n    # Annotations to add to the service account\n    annotations: {}\n",
                      "markdown": "`\nrbac:\n  serviceAccount:\n    # Specifies whether a service account should be created\n    create: true\n    # Annotations to add to the service account\n    annotations: {}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/helm/cert-exporter/values.yaml"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 29,
                  "endLine": 81,
                  "snippet": {
                    "text": "\n  portName: http-metrics\n\n  # Annotations to add to the service\n  annotations: {}\n\n  # Requires prometheus-operator to be installed\n  serviceMonitor:\n",
                    "rendered": {
                      "text": "\n  portName: http-metrics\n\n  # Annotations to add to the service\n  annotations: {}\n\n  # Requires prometheus-operator to be installed\n  serviceMonitor:\n",
                      "markdown": "`\n  portName: http-metrics\n\n  # Annotations to add to the service\n  annotations: {}\n\n  # Requires prometheus-operator to be installed\n  serviceMonitor:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/helm/cert-exporter/README.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 9,
                  "endLine": 10,
                  "snippet": {
                    "text": "\n```\nhelm repo add cert-exporter https://joe-elliott.github.io/cert-exporter/\nhelm repo update\nhelm install -n <my-namespace> my-cert-exporter-release  cert-exporter/cert-exporter -f <values>\n```\n\n# Configuring the chart\n",
                    "rendered": {
                      "text": "\n```\nhelm repo add cert-exporter https://joe-elliott.github.io/cert-exporter/\nhelm repo update\nhelm install -n <my-namespace> my-cert-exporter-release  cert-exporter/cert-exporter -f <values>\n```\n\n# Configuring the chart\n",
                      "markdown": "`\n```\nhelm repo add cert-exporter https://joe-elliott.github.io/cert-exporter/\nhelm repo update\nhelm install -n <my-namespace> my-cert-exporter-release  cert-exporter/cert-exporter -f <values>\n```\n\n# Configuring the chart\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/cert-manager/certs.yaml"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 2,
                  "endLine": 42,
                  "endColumn": 10,
                  "snippet": {
                    "text": "elfsigning-issuer\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: example-crt-not-working\n  namespace: cert-manager-test\nspec:\n  commonName: example.com\n  secretName: example-crt-not-working\n  duration: 2400h\n  issuerRef:\n    name: notworking-issuer\n---\napiVersion: v1\ndata:\n  password: bXlQYXNzd29yZB==\n  store.p12: MIIKTwIBAzCCCgUGCSqGSIb3DQEHAaCCCfYEggnyMIIJ7jCCBFoGCSqGSIb3DQEHBqCCBEswggRHAgEAMIIEQAYJKoZIhvcNAQcBMF8GCSqGSIb3DQEFDTBSMDEGCSqGSIb3DQEFDDAkBBATd6MPsIPiP3oUyahJHmPkAgIIADAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQGCtKSYUn+qiaNzNXJWOw2oCCA9Cb3tH7/hu/i6dbLfmkO2GWWsSe6E3Pmzu5",
                    "rendered": {
                      "text": "elfsigning-issuer\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: example-crt-not-working\n  namespace: cert-manager-test\nspec:\n  commonName: example.com\n  secretName: example-crt-not-working\n  duration: 2400h\n  issuerRef:\n    name: notworking-issuer\n---\napiVersion: v1\ndata:\n  password: bXlQYXNzd29yZB==\n  store.p12: MIIKTwIBAzCCCgUGCSqGSIb3DQEHAaCCCfYEggnyMIIJ7jCCBFoGCSqGSIb3DQEHBqCCBEswggRHAgEAMIIEQAYJKoZIhvcNAQcBMF8GCSqGSIb3DQEFDTBSMDEGCSqGSIb3DQEFDDAkBBATd6MPsIPiP3oUyahJHmPkAgIIADAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQGCtKSYUn+qiaNzNXJWOw2oCCA9Cb3tH7/hu/i6dbLfmkO2GWWsSe6E3Pmzu5",
                      "markdown": "`elfsigning-issuer\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: example-crt-not-working\n  namespace: cert-manager-test\nspec:\n  commonName: example.com\n  secretName: example-crt-not-working\n  duration: 2400h\n  issuerRef:\n    name: notworking-issuer\n---\napiVersion: v1\ndata:\n  password: bXlQYXNzd29yZB==\n  store.p12: MIIKTwIBAzCCCgUGCSqGSIb3DQEHAaCCCfYEggnyMIIJ7jCCBFoGCSqGSIb3DQEHBqCCBEswggRHAgEAMIIEQAYJKoZIhvcNAQcBMF8GCSqGSIb3DQEFDTBSMDEGCSqGSIb3DQEFDDAkBBATd6MPsIPiP3oUyahJHmPkAgIIADAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQGCtKSYUn+qiaNzNXJWOw2oCCA9Cb3tH7/hu/i6dbLfmkO2GWWsSe6E3Pmzu5`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/cert-manager/test.sh"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 31,
                  "endLine": 54,
                  "endColumn": 37,
                  "snippet": {
                    "text": "sleep 10 # NB give the deploy more time to be ready. let us know if you know a better way!\n\nkubectl --kubeconfig=$CONFIG_PATH apply -f ./certs.yaml\nsleep 10 # NB give cert-manager time to create the certificates. let us know if you know a better way to do this!\n\nCERT_REQUEST=$(kubectl --kubeconfig=$CONFIG_PATH get certificaterequest -n cert-manager-test -l=\"testlabel=test\" -o jsonpath={'.items[].metadata.name'})\n\n",
                    "rendered": {
                      "text": "sleep 10 # NB give the deploy more time to be ready. let us know if you know a better way!\n\nkubectl --kubeconfig=$CONFIG_PATH apply -f ./certs.yaml\nsleep 10 # NB give cert-manager time to create the certificates. let us know if you know a better way to do this!\n\nCERT_REQUEST=$(kubectl --kubeconfig=$CONFIG_PATH get certificaterequest -n cert-manager-test -l=\"testlabel=test\" -o jsonpath={'.items[].metadata.name'})\n\n",
                      "markdown": "`sleep 10 # NB give the deploy more time to be ready. let us know if you know a better way!\n\nkubectl --kubeconfig=$CONFIG_PATH apply -f ./certs.yaml\nsleep 10 # NB give cert-manager time to create the certificates. let us know if you know a better way to do this!\n\nCERT_REQUEST=$(kubectl --kubeconfig=$CONFIG_PATH get certificaterequest -n cert-manager-test -l=\"testlabel=test\" -o jsonpath={'.items[].metadata.name'})\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/cert-manager/test.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 34,
                  "endLine": 51,
                  "endColumn": 40,
                  "snippet": {
                    "text": "kubectl --kubeconfig=$CONFIG_PATH apply -f https://github.com/jetstack/cert-manager/releases/download/v1.8.1/cert-manager.yaml\n\nkubectl --kubeconfig=$CONFIG_PATH wait --for=condition=available deploy --all -n cert-manager --timeout=3m\nsleep 10 # NB give the deploy more time to be ready. let us know if you know a better way!\n\nkubectl --kubeconfig=$CONFIG_PATH apply -f ./certs.yaml\nsleep 10 # NB give cert-manager time to create the certificates. let us know if you know a better way to do this!\n",
                    "rendered": {
                      "text": "kubectl --kubeconfig=$CONFIG_PATH apply -f https://github.com/jetstack/cert-manager/releases/download/v1.8.1/cert-manager.yaml\n\nkubectl --kubeconfig=$CONFIG_PATH wait --for=condition=available deploy --all -n cert-manager --timeout=3m\nsleep 10 # NB give the deploy more time to be ready. let us know if you know a better way!\n\nkubectl --kubeconfig=$CONFIG_PATH apply -f ./certs.yaml\nsleep 10 # NB give cert-manager time to create the certificates. let us know if you know a better way to do this!\n",
                      "markdown": "`kubectl --kubeconfig=$CONFIG_PATH apply -f https://github.com/jetstack/cert-manager/releases/download/v1.8.1/cert-manager.yaml\n\nkubectl --kubeconfig=$CONFIG_PATH wait --for=condition=available deploy --all -n cert-manager --timeout=3m\nsleep 10 # NB give the deploy more time to be ready. let us know if you know a better way!\n\nkubectl --kubeconfig=$CONFIG_PATH apply -f ./certs.yaml\nsleep 10 # NB give cert-manager time to create the certificates. let us know if you know a better way to do this!\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/cert-manager/test.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 64,
                  "endLine": 39,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    fi\n}\n\nCERT_EXPORTER_PATH=\"../../dist/cert-exporter_$(go env GOOS)_$(go env GOARCH)_v1/cert-exporter\"\nKIND_CLUSTER_NAME=cert-exporter\nCONFIG_PATH=cert-exporter.kubeconfig\n\n",
                    "rendered": {
                      "text": "    fi\n}\n\nCERT_EXPORTER_PATH=\"../../dist/cert-exporter_$(go env GOOS)_$(go env GOARCH)_v1/cert-exporter\"\nKIND_CLUSTER_NAME=cert-exporter\nCONFIG_PATH=cert-exporter.kubeconfig\n\n",
                      "markdown": "`    fi\n}\n\nCERT_EXPORTER_PATH=\"../../dist/cert-exporter_$(go env GOOS)_$(go env GOARCH)_v1/cert-exporter\"\nKIND_CLUSTER_NAME=cert-exporter\nCONFIG_PATH=cert-exporter.kubeconfig\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/cert-manager/test.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 49,
                  "endLine": 39,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    fi\n}\n\nCERT_EXPORTER_PATH=\"../../dist/cert-exporter_$(go env GOOS)_$(go env GOARCH)_v1/cert-exporter\"\nKIND_CLUSTER_NAME=cert-exporter\nCONFIG_PATH=cert-exporter.kubeconfig\n\n",
                    "rendered": {
                      "text": "    fi\n}\n\nCERT_EXPORTER_PATH=\"../../dist/cert-exporter_$(go env GOOS)_$(go env GOARCH)_v1/cert-exporter\"\nKIND_CLUSTER_NAME=cert-exporter\nCONFIG_PATH=cert-exporter.kubeconfig\n\n",
                      "markdown": "`    fi\n}\n\nCERT_EXPORTER_PATH=\"../../dist/cert-exporter_$(go env GOOS)_$(go env GOARCH)_v1/cert-exporter\"\nKIND_CLUSTER_NAME=cert-exporter\nCONFIG_PATH=cert-exporter.kubeconfig\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/cert-manager/test.sh"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 23,
                  "endLine": 16,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    if [ \"$raw\" == \"\" ]; then\n      echo \"TEST FAILURE: $metrics\" \n      echo \"  Unable to find metrics string\"\n      return 0\n    fi\n\n",
                    "rendered": {
                      "text": "\n    if [ \"$raw\" == \"\" ]; then\n      echo \"TEST FAILURE: $metrics\" \n      echo \"  Unable to find metrics string\"\n      return 0\n    fi\n\n",
                      "markdown": "`\n    if [ \"$raw\" == \"\" ]; then\n      echo \"TEST FAILURE: $metrics\" \n      echo \"  Unable to find metrics string\"\n      return 0\n    fi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/test/cert-manager/test.sh"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 55,
                  "endLine": 12,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    metrics=$1\n    expectedVal=$2\n\n    raw=$(curl --silent http://localhost:8080/metrics | grep \"$metrics\" || true)\n\n    if [ \"$raw\" == \"\" ]; then\n      echo \"TEST FAILURE: $metrics\" \n",
                    "rendered": {
                      "text": "    metrics=$1\n    expectedVal=$2\n\n    raw=$(curl --silent http://localhost:8080/metrics | grep \"$metrics\" || true)\n\n    if [ \"$raw\" == \"\" ]; then\n      echo \"TEST FAILURE: $metrics\" \n",
                      "markdown": "`    metrics=$1\n    expectedVal=$2\n\n    raw=$(curl --silent http://localhost:8080/metrics | grep \"$metrics\" || true)\n\n    if [ \"$raw\" == \"\" ]; then\n      echo \"TEST FAILURE: $metrics\" \n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/examples/custom-secrets/service.yaml"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 5,
                  "endLine": 3,
                  "snippet": {
                    "text": "apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-exporter\n  name: cert-exporter\n",
                    "rendered": {
                      "text": "apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-exporter\n  name: cert-exporter\n",
                      "markdown": "`apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: cert-exporter\n  name: cert-exporter\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/testing.md"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 38,
                  "snippet": {
                    "text": "\n### Dependencies\n\n- bash\n- openssl\n- curl\n\n### cert-manager testing\n",
                    "rendered": {
                      "text": "\n### Dependencies\n\n- bash\n- openssl\n- curl\n\n### cert-manager testing\n",
                      "markdown": "`\n### Dependencies\n\n- bash\n- openssl\n- curl\n\n### cert-manager testing\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/testing.md"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 40,
                  "snippet": {
                    "text": "\n- bash\n- openssl\n- curl\n\n### cert-manager testing\n\n`./test/cert-manager-v1/test.sh` do really basic testing of cert-manager created certs.\n",
                    "rendered": {
                      "text": "\n- bash\n- openssl\n- curl\n\n### cert-manager testing\n\n`./test/cert-manager-v1/test.sh` do really basic testing of cert-manager created certs.\n",
                      "markdown": "`\n- bash\n- openssl\n- curl\n\n### cert-manager testing\n\n`./test/cert-manager-v1/test.sh` do really basic testing of cert-manager created certs.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/testing.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 39,
                  "snippet": {
                    "text": "### Dependencies\n\n- bash\n- openssl\n- curl\n\n### cert-manager testing\n\n",
                    "rendered": {
                      "text": "### Dependencies\n\n- bash\n- openssl\n- curl\n\n### cert-manager testing\n\n",
                      "markdown": "`### Dependencies\n\n- bash\n- openssl\n- curl\n\n### cert-manager testing\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/testing.md"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 38,
                  "snippet": {
                    "text": "\n### Dependencies\n\n- bash\n- openssl\n- curl\n\n### cert-manager testing\n",
                    "rendered": {
                      "text": "\n### Dependencies\n\n- bash\n- openssl\n- curl\n\n### cert-manager testing\n",
                      "markdown": "`\n### Dependencies\n\n- bash\n- openssl\n- curl\n\n### cert-manager testing\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/docs/testing.md"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 185,
                  "endLine": 3,
                  "endColumn": 191,
                  "snippet": {
                    "text": "# Testing\n\ncert-exporter testing is fairly simple.  The [./test.sh](../test/files/test.sh) in the test directory will generate some certs and kubeconfigs, run the application against the files and curl the prometheus metrics to confirm they are accurate.  It takes one parameter which is the number of days to expire the test certs in.\n\nExample:\n\n",
                    "rendered": {
                      "text": "# Testing\n\ncert-exporter testing is fairly simple.  The [./test.sh](../test/files/test.sh) in the test directory will generate some certs and kubeconfigs, run the application against the files and curl the prometheus metrics to confirm they are accurate.  It takes one parameter which is the number of days to expire the test certs in.\n\nExample:\n\n",
                      "markdown": "`# Testing\n\ncert-exporter testing is fairly simple.  The [./test.sh](../test/files/test.sh) in the test directory will generate some certs and kubeconfigs, run the application against the files and curl the prometheus metrics to confirm they are accurate.  It takes one parameter which is the number of days to expire the test certs in.\n\nExample:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/src/checkers/periodicSecretChecker.go"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 84,
                  "endLine": 170,
                  "endColumn": 92,
                  "snippet": {
                    "text": "\t\t\t\t\t\tcertPassword = string(certPasswortBytes)\n\t\t\t\t\t}\n\n\t\t\t\t\terr = p.exporter.ExportMetrics(bytes, name, secret.Name, secret.Namespace, certPassword)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tglog.Errorf(\"Error exporting secret %v\", err)\n\t\t\t\t\t\tmetrics.ErrorTotal.Inc()\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\tcertPassword = string(certPasswortBytes)\n\t\t\t\t\t}\n\n\t\t\t\t\terr = p.exporter.ExportMetrics(bytes, name, secret.Name, secret.Namespace, certPassword)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tglog.Errorf(\"Error exporting secret %v\", err)\n\t\t\t\t\t\tmetrics.ErrorTotal.Inc()\n",
                      "markdown": "`\t\t\t\t\t\tcertPassword = string(certPasswortBytes)\n\t\t\t\t\t}\n\n\t\t\t\t\terr = p.exporter.ExportMetrics(bytes, name, secret.Name, secret.Namespace, certPassword)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tglog.Errorf(\"Error exporting secret %v\", err)\n\t\t\t\t\t\tmetrics.ErrorTotal.Inc()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/src/checkers/periodicSecretChecker.go"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 10,
                  "endLine": 167,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t\t\t\t\tglog.Infof(\"Publishing %v/%v metrics %v\", secret.Name, secret.Namespace, name)\n\t\t\t\t\tcertPassword := \"\"\n\t\t\t\t\tif certPasswortBytes, found := secret.Data[\"password\"]; found {\n\t\t\t\t\t\tcertPassword = string(certPasswortBytes)\n\t\t\t\t\t}\n\n\t\t\t\t\terr = p.exporter.ExportMetrics(bytes, name, secret.Name, secret.Namespace, certPassword)\n",
                    "rendered": {
                      "text": "\t\t\t\t\tglog.Infof(\"Publishing %v/%v metrics %v\", secret.Name, secret.Namespace, name)\n\t\t\t\t\tcertPassword := \"\"\n\t\t\t\t\tif certPasswortBytes, found := secret.Data[\"password\"]; found {\n\t\t\t\t\t\tcertPassword = string(certPasswortBytes)\n\t\t\t\t\t}\n\n\t\t\t\t\terr = p.exporter.ExportMetrics(bytes, name, secret.Name, secret.Namespace, certPassword)\n",
                      "markdown": "`\t\t\t\t\tglog.Infof(\"Publishing %v/%v metrics %v\", secret.Name, secret.Namespace, name)\n\t\t\t\t\tcertPassword := \"\"\n\t\t\t\t\tif certPasswortBytes, found := secret.Data[\"password\"]; found {\n\t\t\t\t\t\tcertPassword = string(certPasswortBytes)\n\t\t\t\t\t}\n\n\t\t\t\t\terr = p.exporter.ExportMetrics(bytes, name, secret.Name, secret.Namespace, certPassword)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/src/checkers/periodicSecretChecker.go"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 49,
                  "endLine": 166,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t\t\t\tif include && !exclude {\n\t\t\t\t\tglog.Infof(\"Publishing %v/%v metrics %v\", secret.Name, secret.Namespace, name)\n\t\t\t\t\tcertPassword := \"\"\n\t\t\t\t\tif certPasswortBytes, found := secret.Data[\"password\"]; found {\n\t\t\t\t\t\tcertPassword = string(certPasswortBytes)\n\t\t\t\t\t}\n\n",
                    "rendered": {
                      "text": "\t\t\t\tif include && !exclude {\n\t\t\t\t\tglog.Infof(\"Publishing %v/%v metrics %v\", secret.Name, secret.Namespace, name)\n\t\t\t\t\tcertPassword := \"\"\n\t\t\t\t\tif certPasswortBytes, found := secret.Data[\"password\"]; found {\n\t\t\t\t\t\tcertPassword = string(certPasswortBytes)\n\t\t\t\t\t}\n\n",
                      "markdown": "`\t\t\t\tif include && !exclude {\n\t\t\t\t\tglog.Infof(\"Publishing %v/%v metrics %v\", secret.Name, secret.Namespace, name)\n\t\t\t\t\tcertPassword := \"\"\n\t\t\t\t\tif certPasswortBytes, found := secret.Data[\"password\"]; found {\n\t\t\t\t\t\tcertPassword = string(certPasswortBytes)\n\t\t\t\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/src/checkers/periodicSecretChecker.go"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 9,
                  "endLine": 165,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n\t\t\t\tif include && !exclude {\n\t\t\t\t\tglog.Infof(\"Publishing %v/%v metrics %v\", secret.Name, secret.Namespace, name)\n\t\t\t\t\tcertPassword := \"\"\n\t\t\t\t\tif certPasswortBytes, found := secret.Data[\"password\"]; found {\n\t\t\t\t\t\tcertPassword = string(certPasswortBytes)\n\t\t\t\t\t}\n",
                    "rendered": {
                      "text": "\n\t\t\t\tif include && !exclude {\n\t\t\t\t\tglog.Infof(\"Publishing %v/%v metrics %v\", secret.Name, secret.Namespace, name)\n\t\t\t\t\tcertPassword := \"\"\n\t\t\t\t\tif certPasswortBytes, found := secret.Data[\"password\"]; found {\n\t\t\t\t\t\tcertPassword = string(certPasswortBytes)\n\t\t\t\t\t}\n",
                      "markdown": "`\n\t\t\t\tif include && !exclude {\n\t\t\t\t\tglog.Infof(\"Publishing %v/%v metrics %v\", secret.Name, secret.Namespace, name)\n\t\t\t\t\tcertPassword := \"\"\n\t\t\t\t\tif certPasswortBytes, found := secret.Data[\"password\"]; found {\n\t\t\t\t\t\tcertPassword = string(certPasswortBytes)\n\t\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/src/checkers/periodicSecretChecker.go"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 73,
                  "endLine": 19,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\t\"github.com/joe-elliott/cert-exporter/src/metrics\"\n)\n\n// PeriodicSecretChecker is an object designed to check for files on disk at a regular interval\ntype PeriodicSecretChecker struct {\n\tperiod                  time.Duration\n\tlabelSelectors          []string\n",
                    "rendered": {
                      "text": "\t\"github.com/joe-elliott/cert-exporter/src/metrics\"\n)\n\n// PeriodicSecretChecker is an object designed to check for files on disk at a regular interval\ntype PeriodicSecretChecker struct {\n\tperiod                  time.Duration\n\tlabelSelectors          []string\n",
                      "markdown": "`\t\"github.com/joe-elliott/cert-exporter/src/metrics\"\n)\n\n// PeriodicSecretChecker is an object designed to check for files on disk at a regular interval\ntype PeriodicSecretChecker struct {\n\tperiod                  time.Duration\n\tlabelSelectors          []string\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/src/checkers/periodicCertChecker.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 28,
                  "endLine": 43,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\tp.exporter.ResetMetrics()\n\n\t\tfor _, match := range p.getMatches() {\n\t\t\tglog.Infof(\"Publishing %v node metrics %v\", p.nodeName, match)\n\n\t\t\terr := p.exporter.ExportMetrics(match, p.nodeName)\n\t\t\tif err != nil {\n",
                    "rendered": {
                      "text": "\t\tp.exporter.ResetMetrics()\n\n\t\tfor _, match := range p.getMatches() {\n\t\t\tglog.Infof(\"Publishing %v node metrics %v\", p.nodeName, match)\n\n\t\t\terr := p.exporter.ExportMetrics(match, p.nodeName)\n\t\t\tif err != nil {\n",
                      "markdown": "`\t\tp.exporter.ResetMetrics()\n\n\t\tfor _, match := range p.getMatches() {\n\t\t\tglog.Infof(\"Publishing %v node metrics %v\", p.nodeName, match)\n\n\t\t\terr := p.exporter.ExportMetrics(match, p.nodeName)\n\t\t\tif err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 12,
                  "endLine": 23,
                  "endColumn": 17,
                  "snippet": {
                    "text": "          go-version: ^1.19\n\n      - name: Clean Helm Tags\n        run: git tag -d $(git tag -l \"cert-exporter*\")\n\n      - name: Build\n        run: make build\n",
                    "rendered": {
                      "text": "          go-version: ^1.19\n\n      - name: Clean Helm Tags\n        run: git tag -d $(git tag -l \"cert-exporter*\")\n\n      - name: Build\n        run: make build\n",
                      "markdown": "`          go-version: ^1.19\n\n      - name: Clean Helm Tags\n        run: git tag -d $(git tag -l \"cert-exporter*\")\n\n      - name: Build\n        run: make build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/release.md"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 14,
                  "endLine": 10,
                  "endColumn": 22,
                  "snippet": {
                    "text": "# Helm chart\n\n- Submit a PR to update the chart version\n  - (optional) update the image versions to the latest docker image\n  ",
                    "rendered": {
                      "text": "# Helm chart\n\n- Submit a PR to update the chart version\n  - (optional) update the image versions to the latest docker image\n  ",
                      "markdown": "`# Helm chart\n\n- Submit a PR to update the chart version\n  - (optional) update the image versions to the latest docker image\n  `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/release.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 16,
                  "endLine": 9,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n# Helm chart\n\n- Submit a PR to update the chart version\n  - (optional) update the image versions to the latest docker image\n  ",
                    "rendered": {
                      "text": "\n# Helm chart\n\n- Submit a PR to update the chart version\n  - (optional) update the image versions to the latest docker image\n  ",
                      "markdown": "`\n# Helm chart\n\n- Submit a PR to update the chart version\n  - (optional) update the image versions to the latest docker image\n  `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/cert-exporter.zip/release.md"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 54,
                  "endLine": 10,
                  "endColumn": 62,
                  "snippet": {
                    "text": "# Helm chart\n\n- Submit a PR to update the chart version\n  - (optional) update the image versions to the latest docker image\n  ",
                    "rendered": {
                      "text": "# Helm chart\n\n- Submit a PR to update the chart version\n  - (optional) update the image versions to the latest docker image\n  ",
                      "markdown": "`# Helm chart\n\n- Submit a PR to update the chart version\n  - (optional) update the image versions to the latest docker image\n  `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}