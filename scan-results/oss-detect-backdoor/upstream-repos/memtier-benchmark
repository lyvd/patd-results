{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/debian/setup_sbuild.sh"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 68,
                  "endLine": 36,
                  "endColumn": 73,
                  "snippet": {
                    "text": "# Ubuntu has the main and ports repositories on different URLs, so we need to\n# properly set up /etc/apt/sources.list to make cross compilation work.\nif [ \"$disttype\" = \"ubuntu\" ]; then\n    cat <<__END__ | schroot -c source:${dist}-${arch}-sbuild -d / -- tee /etc/apt/sources.list\ndeb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu ${dist} main universe\ndeb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu ${dist}-updates main universe\ndeb [arch=armhf,arm64] http://ports.ubuntu.com ${dist} main universe\n",
                    "rendered": {
                      "text": "# Ubuntu has the main and ports repositories on different URLs, so we need to\n# properly set up /etc/apt/sources.list to make cross compilation work.\nif [ \"$disttype\" = \"ubuntu\" ]; then\n    cat <<__END__ | schroot -c source:${dist}-${arch}-sbuild -d / -- tee /etc/apt/sources.list\ndeb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu ${dist} main universe\ndeb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu ${dist}-updates main universe\ndeb [arch=armhf,arm64] http://ports.ubuntu.com ${dist} main universe\n",
                      "markdown": "`# Ubuntu has the main and ports repositories on different URLs, so we need to\n# properly set up /etc/apt/sources.list to make cross compilation work.\nif [ \"$disttype\" = \"ubuntu\" ]; then\n    cat <<__END__ | schroot -c source:${dist}-${arch}-sbuild -d / -- tee /etc/apt/sources.list\ndeb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu ${dist} main universe\ndeb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu ${dist}-updates main universe\ndeb [arch=armhf,arm64] http://ports.ubuntu.com ${dist} main universe\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/debian/setup_sbuild.sh"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 3,
                  "endLine": 36,
                  "endColumn": 8,
                  "snippet": {
                    "text": "# Ubuntu has the main and ports repositories on different URLs, so we need to\n# properly set up /etc/apt/sources.list to make cross compilation work.\nif [ \"$disttype\" = \"ubuntu\" ]; then\n    cat <<__END__ | schroot -c source:${dist}-${arch}-sbuild -d / -- tee /etc/apt/sources.list\ndeb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu ${dist} main universe\ndeb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu ${dist}-updates main universe\ndeb [arch=armhf,arm64] http://ports.ubuntu.com ${dist} main universe\n",
                    "rendered": {
                      "text": "# Ubuntu has the main and ports repositories on different URLs, so we need to\n# properly set up /etc/apt/sources.list to make cross compilation work.\nif [ \"$disttype\" = \"ubuntu\" ]; then\n    cat <<__END__ | schroot -c source:${dist}-${arch}-sbuild -d / -- tee /etc/apt/sources.list\ndeb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu ${dist} main universe\ndeb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu ${dist}-updates main universe\ndeb [arch=armhf,arm64] http://ports.ubuntu.com ${dist} main universe\n",
                      "markdown": "`# Ubuntu has the main and ports repositories on different URLs, so we need to\n# properly set up /etc/apt/sources.list to make cross compilation work.\nif [ \"$disttype\" = \"ubuntu\" ]; then\n    cat <<__END__ | schroot -c source:${dist}-${arch}-sbuild -d / -- tee /etc/apt/sources.list\ndeb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu ${dist} main universe\ndeb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu ${dist}-updates main universe\ndeb [arch=armhf,arm64] http://ports.ubuntu.com ${dist} main universe\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/debian/setup_sbuild.sh"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 16,
                  "endLine": 16,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    disttype=\"debian\"\nfi\n\n# Determine base apt repository URL based on type of distribution.\ncase \"$disttype\" in\n    ubuntu)\n        url=http://archive.ubuntu.com/ubuntu\n",
                    "rendered": {
                      "text": "    disttype=\"debian\"\nfi\n\n# Determine base apt repository URL based on type of distribution.\ncase \"$disttype\" in\n    ubuntu)\n        url=http://archive.ubuntu.com/ubuntu\n",
                      "markdown": "`    disttype=\"debian\"\nfi\n\n# Determine base apt repository URL based on type of distribution.\ncase \"$disttype\" in\n    ubuntu)\n        url=http://archive.ubuntu.com/ubuntu\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/debian/setup_sbuild.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 29,
                  "endLine": 10,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\ndist=\"$1\"\narch=\"$2\"\nif ubuntu-distro-info --all | grep -Fqx \"$dist\"; then\n    disttype=\"ubuntu\"\nelse\n    disttype=\"debian\"\n",
                    "rendered": {
                      "text": "\ndist=\"$1\"\narch=\"$2\"\nif ubuntu-distro-info --all | grep -Fqx \"$dist\"; then\n    disttype=\"ubuntu\"\nelse\n    disttype=\"debian\"\n",
                      "markdown": "`\ndist=\"$1\"\narch=\"$2\"\nif ubuntu-distro-info --all | grep -Fqx \"$dist\"; then\n    disttype=\"ubuntu\"\nelse\n    disttype=\"debian\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/run_tests.sh"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "endColumn": 5,
                  "snippet": {
                    "text": "#----------------------------------------------------------------------------------------------\n\nhelp() {\n\tcat <<-END\n\t\tRun flow tests.\n\n\t\t[ARGVARS...] run_tests.sh [--help|help]\n",
                    "rendered": {
                      "text": "#----------------------------------------------------------------------------------------------\n\nhelp() {\n\tcat <<-END\n\t\tRun flow tests.\n\n\t\t[ARGVARS...] run_tests.sh [--help|help]\n",
                      "markdown": "`#----------------------------------------------------------------------------------------------\n\nhelp() {\n\tcat <<-END\n\t\tRun flow tests.\n\n\t\t[ARGVARS...] run_tests.sh [--help|help]\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/deps/hdr_histogram/README.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 64,
                  "endLine": 10,
                  "snippet": {
                    "text": "\n\nThe code present on `hdr_histogram.c`, `hdr_histogram.h`, and `hdr_atomic.c` was Written by Gil Tene, Michael Barker,\nand Matt Warren, and released to the public domain, as explained at\nhttp://creativecommons.org/publicdomain/zero/1.0/.",
                    "rendered": {
                      "text": "\n\nThe code present on `hdr_histogram.c`, `hdr_histogram.h`, and `hdr_atomic.c` was Written by Gil Tene, Michael Barker,\nand Matt Warren, and released to the public domain, as explained at\nhttp://creativecommons.org/publicdomain/zero/1.0/.",
                      "markdown": "`\n\nThe code present on `hdr_histogram.c`, `hdr_histogram.h`, and `hdr_atomic.c` was Written by Gil Tene, Michael Barker,\nand Matt Warren, and released to the public domain, as explained at\nhttp://creativecommons.org/publicdomain/zero/1.0/.`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/deps/hdr_histogram/README.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 94,
                  "endLine": 5,
                  "endColumn": 98,
                  "snippet": {
                    "text": "\n----------------------------------------------\n\nThis port contains a subset of the 'C' version of High Dynamic Range (HDR) Histogram available at [github.com/HdrHistogram/HdrHistogram_c](https://github.com/HdrHistogram/HdrHistogram_c).\n\n\nThe code present on `hdr_histogram.c`, `hdr_histogram.h`, and `hdr_atomic.c` was Written by Gil Tene, Michael Barker,\n",
                    "rendered": {
                      "text": "\n----------------------------------------------\n\nThis port contains a subset of the 'C' version of High Dynamic Range (HDR) Histogram available at [github.com/HdrHistogram/HdrHistogram_c](https://github.com/HdrHistogram/HdrHistogram_c).\n\n\nThe code present on `hdr_histogram.c`, `hdr_histogram.h`, and `hdr_atomic.c` was Written by Gil Tene, Michael Barker,\n",
                      "markdown": "`\n----------------------------------------------\n\nThis port contains a subset of the 'C' version of High Dynamic Range (HDR) Histogram available at [github.com/HdrHistogram/HdrHistogram_c](https://github.com/HdrHistogram/HdrHistogram_c).\n\n\nThe code present on `hdr_histogram.c`, `hdr_histogram.h`, and `hdr_atomic.c` was Written by Gil Tene, Michael Barker,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/memtier_benchmark.1"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 26,
                  "endLine": 37,
                  "endColumn": 34,
                  "snippet": {
                    "text": ".TP\n\\fB\\-a\\fR, \\fB\\-\\-authenticate\\fR=\\fI\\,CREDENTIALS\\/\\fR Authenticate using specified credentials.\nA simple password is used for memcache_text\nand Redis <= 5.x. <USER>:<PASSWORD> can be\nspecified for memcache_binary or Redis 6.x\nor newer with ACL user support.\n.TP\n",
                    "rendered": {
                      "text": ".TP\n\\fB\\-a\\fR, \\fB\\-\\-authenticate\\fR=\\fI\\,CREDENTIALS\\/\\fR Authenticate using specified credentials.\nA simple password is used for memcache_text\nand Redis <= 5.x. <USER>:<PASSWORD> can be\nspecified for memcache_binary or Redis 6.x\nor newer with ACL user support.\n.TP\n",
                      "markdown": "`.TP\n\\fB\\-a\\fR, \\fB\\-\\-authenticate\\fR=\\fI\\,CREDENTIALS\\/\\fR Authenticate using specified credentials.\nA simple password is used for memcache_text\nand Redis <= 5.x. <USER>:<PASSWORD> can be\nspecified for memcache_binary or Redis 6.x\nor newer with ACL user support.\n.TP\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/memtier_benchmark.1"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 9,
                  "endLine": 36,
                  "endColumn": 17,
                  "snippet": {
                    "text": "when using one of resp2 or resp3 the redis protocol version will be set via HELLO command.\n.TP\n\\fB\\-a\\fR, \\fB\\-\\-authenticate\\fR=\\fI\\,CREDENTIALS\\/\\fR Authenticate using specified credentials.\nA simple password is used for memcache_text\nand Redis <= 5.x. <USER>:<PASSWORD> can be\nspecified for memcache_binary or Redis 6.x\nor newer with ACL user support.\n",
                    "rendered": {
                      "text": "when using one of resp2 or resp3 the redis protocol version will be set via HELLO command.\n.TP\n\\fB\\-a\\fR, \\fB\\-\\-authenticate\\fR=\\fI\\,CREDENTIALS\\/\\fR Authenticate using specified credentials.\nA simple password is used for memcache_text\nand Redis <= 5.x. <USER>:<PASSWORD> can be\nspecified for memcache_binary or Redis 6.x\nor newer with ACL user support.\n",
                      "markdown": "`when using one of resp2 or resp3 the redis protocol version will be set via HELLO command.\n.TP\n\\fB\\-a\\fR, \\fB\\-\\-authenticate\\fR=\\fI\\,CREDENTIALS\\/\\fR Authenticate using specified credentials.\nA simple password is used for memcache_text\nand Redis <= 5.x. <USER>:<PASSWORD> can be\nspecified for memcache_binary or Redis 6.x\nor newer with ACL user support.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/Dockerfile"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 9,
                  "endLine": 16,
                  "endColumn": 17,
                  "snippet": {
                    "text": "LABEL Description=\"memtier_benchmark\"\nCOPY --from=builder /usr/local/bin/memtier_benchmark /usr/local/bin/memtier_benchmark\nRUN \\\n  apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive \\\n    apt-get install -y --no-install-recommends \\\n      libevent-dev \\\n",
                    "rendered": {
                      "text": "LABEL Description=\"memtier_benchmark\"\nCOPY --from=builder /usr/local/bin/memtier_benchmark /usr/local/bin/memtier_benchmark\nRUN \\\n  apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive \\\n    apt-get install -y --no-install-recommends \\\n      libevent-dev \\\n",
                      "markdown": "`LABEL Description=\"memtier_benchmark\"\nCOPY --from=builder /usr/local/bin/memtier_benchmark /usr/local/bin/memtier_benchmark\nRUN \\\n  apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive \\\n    apt-get install -y --no-install-recommends \\\n      libevent-dev \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/Dockerfile"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 11,
                  "endLine": 3,
                  "snippet": {
                    "text": "FROM ubuntu:22.04 as builder\nRUN apt-get update\nRUN \\\n  DEBIAN_FRONTEND=noninteractive \\\n  apt-get install -y \\\n    build-essential autoconf automake libpcre3-dev libevent-dev \\\n",
                    "rendered": {
                      "text": "FROM ubuntu:22.04 as builder\nRUN apt-get update\nRUN \\\n  DEBIAN_FRONTEND=noninteractive \\\n  apt-get install -y \\\n    build-essential autoconf automake libpcre3-dev libevent-dev \\\n",
                      "markdown": "`FROM ubuntu:22.04 as builder\nRUN apt-get update\nRUN \\\n  DEBIAN_FRONTEND=noninteractive \\\n  apt-get install -y \\\n    build-essential autoconf automake libpcre3-dev libevent-dev \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/Dockerfile"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    apt-get install -y --no-install-recommends \\\n      libevent-dev \\\n  && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/\n\nENTRYPOINT [\"memtier_benchmark\"]\n",
                    "rendered": {
                      "text": "    apt-get install -y --no-install-recommends \\\n      libevent-dev \\\n  && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/\n\nENTRYPOINT [\"memtier_benchmark\"]\n",
                      "markdown": "`    apt-get install -y --no-install-recommends \\\n      libevent-dev \\\n  && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/\n\nENTRYPOINT [\"memtier_benchmark\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/Dockerfile"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 3,
                  "endLine": 18,
                  "endColumn": 12,
                  "snippet": {
                    "text": "RUN \\\n  apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive \\\n    apt-get install -y --no-install-recommends \\\n      libevent-dev \\\n  && \\\n  apt-get clean && \\\n",
                    "rendered": {
                      "text": "RUN \\\n  apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive \\\n    apt-get install -y --no-install-recommends \\\n      libevent-dev \\\n  && \\\n  apt-get clean && \\\n",
                      "markdown": "`RUN \\\n  apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive \\\n    apt-get install -y --no-install-recommends \\\n      libevent-dev \\\n  && \\\n  apt-get clean && \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/Dockerfile"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 10,
                  "snippet": {
                    "text": "LABEL Description=\"memtier_benchmark\"\nCOPY --from=builder /usr/local/bin/memtier_benchmark /usr/local/bin/memtier_benchmark\nRUN \\\n  apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive \\\n    apt-get install -y --no-install-recommends \\\n      libevent-dev \\\n",
                    "rendered": {
                      "text": "LABEL Description=\"memtier_benchmark\"\nCOPY --from=builder /usr/local/bin/memtier_benchmark /usr/local/bin/memtier_benchmark\nRUN \\\n  apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive \\\n    apt-get install -y --no-install-recommends \\\n      libevent-dev \\\n",
                      "markdown": "`LABEL Description=\"memtier_benchmark\"\nCOPY --from=builder /usr/local/bin/memtier_benchmark /usr/local/bin/memtier_benchmark\nRUN \\\n  apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive \\\n    apt-get install -y --no-install-recommends \\\n      libevent-dev \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 10,
                  "snippet": {
                    "text": "RUN apt-get update\nRUN \\\n  DEBIAN_FRONTEND=noninteractive \\\n  apt-get install -y \\\n    build-essential autoconf automake libpcre3-dev libevent-dev \\\n    pkg-config zlib1g-dev libssl-dev libboost-all-dev cmake flex\nCOPY . /memtier_benchmark\n",
                    "rendered": {
                      "text": "RUN apt-get update\nRUN \\\n  DEBIAN_FRONTEND=noninteractive \\\n  apt-get install -y \\\n    build-essential autoconf automake libpcre3-dev libevent-dev \\\n    pkg-config zlib1g-dev libssl-dev libboost-all-dev cmake flex\nCOPY . /memtier_benchmark\n",
                      "markdown": "`RUN apt-get update\nRUN \\\n  DEBIAN_FRONTEND=noninteractive \\\n  apt-get install -y \\\n    build-essential autoconf automake libpcre3-dev libevent-dev \\\n    pkg-config zlib1g-dev libssl-dev libboost-all-dev cmake flex\nCOPY . /memtier_benchmark\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/Dockerfile"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 3,
                  "endLine": 2,
                  "endColumn": 12,
                  "snippet": {
                    "text": "FROM ubuntu:22.04 as builder\nRUN apt-get update\nRUN \\\n  DEBIAN_FRONTEND=noninteractive \\\n  apt-get install -y \\\n",
                    "rendered": {
                      "text": "FROM ubuntu:22.04 as builder\nRUN apt-get update\nRUN \\\n  DEBIAN_FRONTEND=noninteractive \\\n  apt-get install -y \\\n",
                      "markdown": "`FROM ubuntu:22.04 as builder\nRUN apt-get update\nRUN \\\n  DEBIAN_FRONTEND=noninteractive \\\n  apt-get install -y \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/client.cpp"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 28,
                  "endLine": 274,
                  "endColumn": 33,
                  "snippet": {
                    "text": "bool client::create_arbitrary_request(unsigned int command_index, struct timeval& timestamp, unsigned int conn_id) {\n    int cmd_size = 0;\n\n    const arbitrary_command& cmd = get_arbitrary_command(command_index);\n\n    benchmark_debug_log(\"%s: %s:\\n\", m_connections[conn_id]->get_readable_id(), cmd.command.c_str());\n\n",
                    "rendered": {
                      "text": "bool client::create_arbitrary_request(unsigned int command_index, struct timeval& timestamp, unsigned int conn_id) {\n    int cmd_size = 0;\n\n    const arbitrary_command& cmd = get_arbitrary_command(command_index);\n\n    benchmark_debug_log(\"%s: %s:\\n\", m_connections[conn_id]->get_readable_id(), cmd.command.c_str());\n\n",
                      "markdown": "`bool client::create_arbitrary_request(unsigned int command_index, struct timeval& timestamp, unsigned int conn_id) {\n    int cmd_size = 0;\n\n    const arbitrary_command& cmd = get_arbitrary_command(command_index);\n\n    benchmark_debug_log(\"%s: %s:\\n\", m_connections[conn_id]->get_readable_id(), cmd.command.c_str());\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/client.cpp"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 21,
                  "endLine": 174,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    struct connect_info addr;\n\n    // get primary connection\n    shard_connection* sc = MAIN_CONNECTION;\n    assert(sc != NULL);\n\n    // get address information\n",
                    "rendered": {
                      "text": "    struct connect_info addr;\n\n    // get primary connection\n    shard_connection* sc = MAIN_CONNECTION;\n    assert(sc != NULL);\n\n    // get address information\n",
                      "markdown": "`    struct connect_info addr;\n\n    // get primary connection\n    shard_connection* sc = MAIN_CONNECTION;\n    assert(sc != NULL);\n\n    // get address information\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/client.cpp"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 21,
                  "endLine": 163,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nvoid client::disconnect(void)\n{\n    shard_connection* sc = MAIN_CONNECTION;\n    assert(sc != NULL);\n\n    sc->disconnect();\n",
                    "rendered": {
                      "text": "\nvoid client::disconnect(void)\n{\n    shard_connection* sc = MAIN_CONNECTION;\n    assert(sc != NULL);\n\n    sc->disconnect();\n",
                      "markdown": "`\nvoid client::disconnect(void)\n{\n    shard_connection* sc = MAIN_CONNECTION;\n    assert(sc != NULL);\n\n    sc->disconnect();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/client.cpp"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 25,
                  "endLine": 140,
                  "endColumn": 29,
                  "snippet": {
                    "text": "client::~client()\n{\n    for (unsigned int i = 0; i < m_connections.size(); i++) {\n        shard_connection* sc = m_connections[i];\n        delete sc;\n    }\n    m_connections.clear();\n",
                    "rendered": {
                      "text": "client::~client()\n{\n    for (unsigned int i = 0; i < m_connections.size(); i++) {\n        shard_connection* sc = m_connections[i];\n        delete sc;\n    }\n    m_connections.clear();\n",
                      "markdown": "`client::~client()\n{\n    for (unsigned int i = 0; i < m_connections.size(); i++) {\n        shard_connection* sc = m_connections[i];\n        delete sc;\n    }\n    m_connections.clear();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/client.cpp"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 16,
                  "endLine": 305,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nbool client::create_wait_request(struct timeval& timestamp, unsigned int conn_id) {\n    unsigned int num_slaves = m_obj_gen->random_range(m_config->num_slaves.min, m_config->num_slaves.max);\n    unsigned int timeout = m_obj_gen->normal_distribution(m_config->wait_timeout.min,\n                                                          m_config->wait_timeout.max, 0,\n                                                          ((m_config->wait_timeout.max - m_config->wait_timeout.min)/2.0) + m_config->wait_timeout.min);\n\n",
                    "rendered": {
                      "text": "\nbool client::create_wait_request(struct timeval& timestamp, unsigned int conn_id) {\n    unsigned int num_slaves = m_obj_gen->random_range(m_config->num_slaves.min, m_config->num_slaves.max);\n    unsigned int timeout = m_obj_gen->normal_distribution(m_config->wait_timeout.min,\n                                                          m_config->wait_timeout.max, 0,\n                                                          ((m_config->wait_timeout.max - m_config->wait_timeout.min)/2.0) + m_config->wait_timeout.min);\n\n",
                      "markdown": "`\nbool client::create_wait_request(struct timeval& timestamp, unsigned int conn_id) {\n    unsigned int num_slaves = m_obj_gen->random_range(m_config->num_slaves.min, m_config->num_slaves.max);\n    unsigned int timeout = m_obj_gen->normal_distribution(m_config->wait_timeout.min,\n                                                          m_config->wait_timeout.max, 0,\n                                                          ((m_config->wait_timeout.max - m_config->wait_timeout.min)/2.0) + m_config->wait_timeout.min);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/debian/copyright"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 35,
                  "endLine": 44,
                  "endColumn": 41,
                  "snippet": {
                    "text": " You must obey the GNU General Public License in all respects for all of the\n code used other than OpenSSL.  If you modify file(s) with this exception, you\n may extend this exception to your version of the file(s), but you are not\n obligated to do so.  If you do not wish to do so, delete this exception\n statement from your version.  If you delete this exception statement from all\n source files in the program, then also delete it here.\n\n",
                    "rendered": {
                      "text": " You must obey the GNU General Public License in all respects for all of the\n code used other than OpenSSL.  If you modify file(s) with this exception, you\n may extend this exception to your version of the file(s), but you are not\n obligated to do so.  If you do not wish to do so, delete this exception\n statement from your version.  If you delete this exception statement from all\n source files in the program, then also delete it here.\n\n",
                      "markdown": "` You must obey the GNU General Public License in all respects for all of the\n code used other than OpenSSL.  If you modify file(s) with this exception, you\n may extend this exception to your version of the file(s), but you are not\n obligated to do so.  If you do not wish to do so, delete this exception\n statement from your version.  If you delete this exception statement from all\n source files in the program, then also delete it here.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/debian/copyright"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 51,
                  "endLine": 37,
                  "endColumn": 60,
                  "snippet": {
                    "text": " Public License version 2 can be found in \"/usr/share/common-licenses/GPL-2\".\n .\n In addition, as a special exception, the copyright holders give permission to\n link the code of portions of this program with the OpenSSL library under\n certain conditions as described in each individual source file, and distribute\n linked combinations including the two.\n .\n",
                    "rendered": {
                      "text": " Public License version 2 can be found in \"/usr/share/common-licenses/GPL-2\".\n .\n In addition, as a special exception, the copyright holders give permission to\n link the code of portions of this program with the OpenSSL library under\n certain conditions as described in each individual source file, and distribute\n linked combinations including the two.\n .\n",
                      "markdown": "` Public License version 2 can be found in \"/usr/share/common-licenses/GPL-2\".\n .\n In addition, as a special exception, the copyright holders give permission to\n link the code of portions of this program with the OpenSSL library under\n certain conditions as described in each individual source file, and distribute\n linked combinations including the two.\n .\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/debian/copyright"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 20,
                  "endLine": 8,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\nFiles: *\nCopyright: 2011-2020 Redis Ltd. <info@redislabs.com>\nLicense: GPL-2+ with OpenSSL Exception\n\nFiles: deps/hdr_histogram/*\nCopyright: 2012-2014, Gil Tene\n",
                    "rendered": {
                      "text": "\nFiles: *\nCopyright: 2011-2020 Redis Ltd. <info@redislabs.com>\nLicense: GPL-2+ with OpenSSL Exception\n\nFiles: deps/hdr_histogram/*\nCopyright: 2012-2014, Gil Tene\n",
                      "markdown": "`\nFiles: *\nCopyright: 2011-2020 Redis Ltd. <info@redislabs.com>\nLicense: GPL-2+ with OpenSSL Exception\n\nFiles: deps/hdr_histogram/*\nCopyright: 2012-2014, Gil Tene\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 660,
                  "startColumn": 31,
                  "endLine": 660,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n    benchmark = Benchmark.from_json(config, benchmark_specs)\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    # reset the commandstats\n    for master_connection in master_nodes_connections:\n        master_connection.execute_command(\"CONFIG\", \"RESETSTAT\")\n",
                    "rendered": {
                      "text": "\n    benchmark = Benchmark.from_json(config, benchmark_specs)\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    # reset the commandstats\n    for master_connection in master_nodes_connections:\n        master_connection.execute_command(\"CONFIG\", \"RESETSTAT\")\n",
                      "markdown": "`\n    benchmark = Benchmark.from_json(config, benchmark_specs)\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    # reset the commandstats\n    for master_connection in master_nodes_connections:\n        master_connection.execute_command(\"CONFIG\", \"RESETSTAT\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 17,
                  "endLine": 650,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,1, 2)\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                    "rendered": {
                      "text": "    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,1, 2)\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                      "markdown": "`    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,1, 2)\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 648,
                  "startColumn": 24,
                  "endLine": 648,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    benchmark_specs = {\"name\": env.testName, \"args\": [f\"--data-import={ROOT_FOLDER}/tests/data-import-2-keys-expiration.txt\",'--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,1, 2)\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n",
                    "rendered": {
                      "text": "    benchmark_specs = {\"name\": env.testName, \"args\": [f\"--data-import={ROOT_FOLDER}/tests/data-import-2-keys-expiration.txt\",'--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,1, 2)\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n",
                      "markdown": "`    benchmark_specs = {\"name\": env.testName, \"args\": [f\"--data-import={ROOT_FOLDER}/tests/data-import-2-keys-expiration.txt\",'--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,1, 2)\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 4,
                  "endLine": 644,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n\ndef test_data_import_setex(env):\n    env.skipOnCluster()\n    benchmark_specs = {\"name\": env.testName, \"args\": [f\"--data-import={ROOT_FOLDER}/tests/data-import-2-keys-expiration.txt\",'--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n",
                    "rendered": {
                      "text": "\n\ndef test_data_import_setex(env):\n    env.skipOnCluster()\n    benchmark_specs = {\"name\": env.testName, \"args\": [f\"--data-import={ROOT_FOLDER}/tests/data-import-2-keys-expiration.txt\",'--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n",
                      "markdown": "`\n\ndef test_data_import_setex(env):\n    env.skipOnCluster()\n    benchmark_specs = {\"name\": env.testName, \"args\": [f\"--data-import={ROOT_FOLDER}/tests/data-import-2-keys-expiration.txt\",'--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 628,
                  "startColumn": 31,
                  "endLine": 628,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n    benchmark = Benchmark.from_json(config, benchmark_specs)\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    # reset the commandstats\n    for master_connection in master_nodes_connections:\n        master_connection.execute_command(\"CONFIG\", \"RESETSTAT\")\n",
                    "rendered": {
                      "text": "\n    benchmark = Benchmark.from_json(config, benchmark_specs)\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    # reset the commandstats\n    for master_connection in master_nodes_connections:\n        master_connection.execute_command(\"CONFIG\", \"RESETSTAT\")\n",
                      "markdown": "`\n    benchmark = Benchmark.from_json(config, benchmark_specs)\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    # reset the commandstats\n    for master_connection in master_nodes_connections:\n        master_connection.execute_command(\"CONFIG\", \"RESETSTAT\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 618,
                  "startColumn": 17,
                  "endLine": 618,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,1, 2)\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                    "rendered": {
                      "text": "    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,1, 2)\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                      "markdown": "`    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,1, 2)\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 24,
                  "endLine": 616,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    benchmark_specs = {\"name\": env.testName, \"args\": [f\"--data-import={ROOT_FOLDER}/tests/data-import-2-keys.txt\",'--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,1, 2)\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n",
                    "rendered": {
                      "text": "    benchmark_specs = {\"name\": env.testName, \"args\": [f\"--data-import={ROOT_FOLDER}/tests/data-import-2-keys.txt\",'--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,1, 2)\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n",
                      "markdown": "`    benchmark_specs = {\"name\": env.testName, \"args\": [f\"--data-import={ROOT_FOLDER}/tests/data-import-2-keys.txt\",'--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,1, 2)\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 612,
                  "startColumn": 4,
                  "endLine": 612,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n\ndef test_data_import(env):\n    env.skipOnCluster()\n    benchmark_specs = {\"name\": env.testName, \"args\": [f\"--data-import={ROOT_FOLDER}/tests/data-import-2-keys.txt\",'--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n",
                    "rendered": {
                      "text": "\n\ndef test_data_import(env):\n    env.skipOnCluster()\n    benchmark_specs = {\"name\": env.testName, \"args\": [f\"--data-import={ROOT_FOLDER}/tests/data-import-2-keys.txt\",'--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n",
                      "markdown": "`\n\ndef test_data_import(env):\n    env.skipOnCluster()\n    benchmark_specs = {\"name\": env.testName, \"args\": [f\"--data-import={ROOT_FOLDER}/tests/data-import-2-keys.txt\",'--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 605,
                  "startColumn": 39,
                  "endLine": 605,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            # benchmark.run() returns True if the return code of memtier_benchmark was 0\n            memtier_ok = benchmark.run()\n\n            master_nodes_connections = env.getOSSMasterNodesConnectionList()\n            merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n            overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n            assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count, request_delta)\n",
                    "rendered": {
                      "text": "            # benchmark.run() returns True if the return code of memtier_benchmark was 0\n            memtier_ok = benchmark.run()\n\n            master_nodes_connections = env.getOSSMasterNodesConnectionList()\n            merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n            overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n            assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count, request_delta)\n",
                      "markdown": "`            # benchmark.run() returns True if the return code of memtier_benchmark was 0\n            memtier_ok = benchmark.run()\n\n            master_nodes_connections = env.getOSSMasterNodesConnectionList()\n            merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n            overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n            assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count, request_delta)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 592,
                  "startColumn": 25,
                  "endLine": 592,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            for master_connection in master_nodes_connections:\n                master_connection.execute_command(\"CONFIG\", \"RESETSTAT\")\n\n            add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n            # Create a temporary directory\n            test_dir = tempfile.mkdtemp()\n",
                    "rendered": {
                      "text": "            for master_connection in master_nodes_connections:\n                master_connection.execute_command(\"CONFIG\", \"RESETSTAT\")\n\n            add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n            # Create a temporary directory\n            test_dir = tempfile.mkdtemp()\n",
                      "markdown": "`            for master_connection in master_nodes_connections:\n                master_connection.execute_command(\"CONFIG\", \"RESETSTAT\")\n\n            add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n            # Create a temporary directory\n            test_dir = tempfile.mkdtemp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 586,
                  "startColumn": 39,
                  "endLine": 586,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            addTLSArgs(benchmark_specs, env)\n            config = get_default_memtier_config(thread_count,client_count,None,test_time_secs)\n\n            master_nodes_connections = env.getOSSMasterNodesConnectionList()\n\n            # reset the commandstats\n            for master_connection in master_nodes_connections:\n",
                    "rendered": {
                      "text": "            addTLSArgs(benchmark_specs, env)\n            config = get_default_memtier_config(thread_count,client_count,None,test_time_secs)\n\n            master_nodes_connections = env.getOSSMasterNodesConnectionList()\n\n            # reset the commandstats\n            for master_connection in master_nodes_connections:\n",
                      "markdown": "`            addTLSArgs(benchmark_specs, env)\n            config = get_default_memtier_config(thread_count,client_count,None,test_time_secs)\n\n            master_nodes_connections = env.getOSSMasterNodesConnectionList()\n\n            # reset the commandstats\n            for master_connection in master_nodes_connections:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 572,
                  "startColumn": 24,
                  "endLine": 572,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\ndef test_default_set_get_rate_limited(env):\n    env.skipOnCluster()\n    master_nodes_list = env.getMasterNodesList()\n    for client_count in [1,2,4]:\n        for thread_count in [1,2]:\n            rps_per_client = 100\n",
                    "rendered": {
                      "text": "\ndef test_default_set_get_rate_limited(env):\n    env.skipOnCluster()\n    master_nodes_list = env.getMasterNodesList()\n    for client_count in [1,2,4]:\n        for thread_count in [1,2]:\n            rps_per_client = 100\n",
                      "markdown": "`\ndef test_default_set_get_rate_limited(env):\n    env.skipOnCluster()\n    master_nodes_list = env.getMasterNodesList()\n    for client_count in [1,2,4]:\n        for thread_count in [1,2]:\n            rps_per_client = 100\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 571,
                  "startColumn": 4,
                  "endLine": 571,
                  "endColumn": 15,
                  "snippet": {
                    "text": "                                    overall_request_count)\n\ndef test_default_set_get_rate_limited(env):\n    env.skipOnCluster()\n    master_nodes_list = env.getMasterNodesList()\n    for client_count in [1,2,4]:\n        for thread_count in [1,2]:\n",
                    "rendered": {
                      "text": "                                    overall_request_count)\n\ndef test_default_set_get_rate_limited(env):\n    env.skipOnCluster()\n    master_nodes_list = env.getMasterNodesList()\n    for client_count in [1,2,4]:\n        for thread_count in [1,2]:\n",
                      "markdown": "`                                    overall_request_count)\n\ndef test_default_set_get_rate_limited(env):\n    env.skipOnCluster()\n    master_nodes_list = env.getMasterNodesList()\n    for client_count in [1,2,4]:\n        for thread_count in [1,2]:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 564,
                  "startColumn": 31,
                  "endLine": 564,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    memtier_ok = benchmark.run()\n    debugPrintMemtierOnError(config, env)\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_hset': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count,\n",
                    "rendered": {
                      "text": "    memtier_ok = benchmark.run()\n    debugPrintMemtierOnError(config, env)\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_hset': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count,\n",
                      "markdown": "`    memtier_ok = benchmark.run()\n    debugPrintMemtierOnError(config, env)\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_hset': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 17,
                  "endLine": 550,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                    "rendered": {
                      "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                      "markdown": "`    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 24,
                  "endLine": 547,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    # on arbitrary command args should be the last one\n    benchmark_specs[\"args\"].append('--command=HSET __key__ field1 __data__ field2 __data__ field3 __data__')\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                    "rendered": {
                      "text": "    # on arbitrary command args should be the last one\n    benchmark_specs[\"args\"].append('--command=HSET __key__ field1 __data__ field2 __data__ field3 __data__')\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                      "markdown": "`    # on arbitrary command args should be the last one\n    benchmark_specs[\"args\"].append('--command=HSET __key__ field1 __data__ field2 __data__ field3 __data__')\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 31,
                  "endLine": 535,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_hset': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n",
                    "rendered": {
                      "text": "    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_hset': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n",
                      "markdown": "`    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_hset': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 17,
                  "endLine": 522,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                    "rendered": {
                      "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                      "markdown": "`    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 24,
                  "endLine": 519,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    # on arbitrary command args should be the last one\n    benchmark_specs[\"args\"].append('--command=HSET __key__ field1 __data__')\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                    "rendered": {
                      "text": "    # on arbitrary command args should be the last one\n    benchmark_specs[\"args\"].append('--command=HSET __key__ field1 __data__')\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                      "markdown": "`    # on arbitrary command args should be the last one\n    benchmark_specs[\"args\"].append('--command=HSET __key__ field1 __data__')\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 507,
                  "startColumn": 31,
                  "endLine": 507,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n",
                    "rendered": {
                      "text": "    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n",
                      "markdown": "`    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 494,
                  "startColumn": 17,
                  "endLine": 494,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                    "rendered": {
                      "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                      "markdown": "`    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 491,
                  "startColumn": 24,
                  "endLine": 491,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    # on arbitrary command args should be the last one\n    benchmark_specs[\"args\"].append('--command=SET __key__ __data__')\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                    "rendered": {
                      "text": "    # on arbitrary command args should be the last one\n    benchmark_specs[\"args\"].append('--command=SET __key__ __data__')\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                      "markdown": "`    # on arbitrary command args should be the last one\n    benchmark_specs[\"args\"].append('--command=SET __key__ __data__')\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 17,
                  "endLine": 440,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                    "rendered": {
                      "text": "    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                      "markdown": "`    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 24,
                  "endLine": 438,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    # on arbitrary command args should be the last one\n    benchmark_specs[\"args\"].append('--command=PING')\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n",
                    "rendered": {
                      "text": "    # on arbitrary command args should be the last one\n    benchmark_specs[\"args\"].append('--command=PING')\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n",
                      "markdown": "`    # on arbitrary command args should be the last one\n    benchmark_specs[\"args\"].append('--command=PING')\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 17,
                  "endLine": 418,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                    "rendered": {
                      "text": "    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                      "markdown": "`    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 24,
                  "endLine": 416,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    # on arbitrary command args should be the last one\n    benchmark_specs[\"args\"].append('--command=publish \\\"__key__\\\" \\\"__data__\\\"')\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n",
                    "rendered": {
                      "text": "    # on arbitrary command args should be the last one\n    benchmark_specs[\"args\"].append('--command=publish \\\"__key__\\\" \\\"__data__\\\"')\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n",
                      "markdown": "`    # on arbitrary command args should be the last one\n    benchmark_specs[\"args\"].append('--command=publish \\\"__key__\\\" \\\"__data__\\\"')\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 31,
                  "endLine": 404,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n",
                    "rendered": {
                      "text": "    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n",
                      "markdown": "`    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 17,
                  "endLine": 391,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config) * run_count\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                    "rendered": {
                      "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config) * run_count\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                      "markdown": "`    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config) * run_count\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 24,
                  "endLine": 388,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    benchmark_specs = {\"name\": env.testName, \"args\": ['--run-count={}'.format(run_count)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config) * run_count\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                    "rendered": {
                      "text": "    benchmark_specs = {\"name\": env.testName, \"args\": ['--run-count={}'.format(run_count)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config) * run_count\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                      "markdown": "`    benchmark_specs = {\"name\": env.testName, \"args\": ['--run-count={}'.format(run_count)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config) * run_count\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 31,
                  "endLine": 376,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n",
                    "rendered": {
                      "text": "    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n",
                      "markdown": "`    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 17,
                  "endLine": 363,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                    "rendered": {
                      "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                      "markdown": "`    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 24,
                  "endLine": 360,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    benchmark_specs = {\"name\": env.testName, \"args\": ['--reconnect-interval=1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                    "rendered": {
                      "text": "    benchmark_specs = {\"name\": env.testName, \"args\": ['--reconnect-interval=1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                      "markdown": "`    benchmark_specs = {\"name\": env.testName, \"args\": ['--reconnect-interval=1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 4,
                  "endLine": 356,
                  "endColumn": 15,
                  "snippet": {
                    "text": "# run each test on different env\ndef test_short_reconnect_interval(env):\n    # cluster mode dose not support reconnect-interval option\n    env.skipOnCluster()\n    benchmark_specs = {\"name\": env.testName, \"args\": ['--reconnect-interval=1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n",
                    "rendered": {
                      "text": "# run each test on different env\ndef test_short_reconnect_interval(env):\n    # cluster mode dose not support reconnect-interval option\n    env.skipOnCluster()\n    benchmark_specs = {\"name\": env.testName, \"args\": ['--reconnect-interval=1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n",
                      "markdown": "`# run each test on different env\ndef test_short_reconnect_interval(env):\n    # cluster mode dose not support reconnect-interval option\n    env.skipOnCluster()\n    benchmark_specs = {\"name\": env.testName, \"args\": ['--reconnect-interval=1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 31,
                  "endLine": 345,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n",
                    "rendered": {
                      "text": "    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n",
                      "markdown": "`    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 17,
                  "endLine": 332,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                    "rendered": {
                      "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                      "markdown": "`    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 24,
                  "endLine": 329,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    benchmark_specs = {\"name\": env.testName, \"args\": ['--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                    "rendered": {
                      "text": "    benchmark_specs = {\"name\": env.testName, \"args\": ['--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                      "markdown": "`    benchmark_specs = {\"name\": env.testName, \"args\": ['--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 31,
                  "endLine": 298,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n",
                    "rendered": {
                      "text": "    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n",
                      "markdown": "`    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 17,
                  "endLine": 285,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                    "rendered": {
                      "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                      "markdown": "`    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 24,
                  "endLine": 282,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    benchmark_specs = {\"name\": env.testName, \"args\": ['--print-percentiles={}'.format(p_str),'--hdr-file-prefix={}'.format(histogram_prefix)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                    "rendered": {
                      "text": "    benchmark_specs = {\"name\": env.testName, \"args\": ['--print-percentiles={}'.format(p_str),'--hdr-file-prefix={}'.format(histogram_prefix)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                      "markdown": "`    benchmark_specs = {\"name\": env.testName, \"args\": ['--print-percentiles={}'.format(p_str),'--hdr-file-prefix={}'.format(histogram_prefix)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 12,
                  "endLine": 244,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            set_metric_value_kbs = set_metrics[metric_name]\n            get_metric_value_kbs = get_metrics[metric_name]\n            env.assertTrue(set_metric_value_kbs > 0)\n            env.assertTrue(get_metric_value_kbs > 0)\n\n        for second_data in set_metrics_ts.values():\n            bytes_rx = second_data[\"Bytes RX\"]\n",
                    "rendered": {
                      "text": "            set_metric_value_kbs = set_metrics[metric_name]\n            get_metric_value_kbs = get_metrics[metric_name]\n            env.assertTrue(set_metric_value_kbs > 0)\n            env.assertTrue(get_metric_value_kbs > 0)\n\n        for second_data in set_metrics_ts.values():\n            bytes_rx = second_data[\"Bytes RX\"]\n",
                      "markdown": "`            set_metric_value_kbs = set_metrics[metric_name]\n            get_metric_value_kbs = get_metrics[metric_name]\n            env.assertTrue(set_metric_value_kbs > 0)\n            env.assertTrue(get_metric_value_kbs > 0)\n\n        for second_data in set_metrics_ts.values():\n            bytes_rx = second_data[\"Bytes RX\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 12,
                  "endLine": 239,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        for metric_name in [\"KB/sec RX/TX\",\"KB/sec RX\",\"KB/sec TX\",\"KB/sec\"]:\n            # assert the metric exists\n            env.assertTrue(metric_name in set_metrics)\n            env.assertTrue(metric_name in get_metrics)\n            # assert the metric value is non zero given we've had write and read\n            set_metric_value_kbs = set_metrics[metric_name]\n            get_metric_value_kbs = get_metrics[metric_name]\n",
                    "rendered": {
                      "text": "        for metric_name in [\"KB/sec RX/TX\",\"KB/sec RX\",\"KB/sec TX\",\"KB/sec\"]:\n            # assert the metric exists\n            env.assertTrue(metric_name in set_metrics)\n            env.assertTrue(metric_name in get_metrics)\n            # assert the metric value is non zero given we've had write and read\n            set_metric_value_kbs = set_metrics[metric_name]\n            get_metric_value_kbs = get_metrics[metric_name]\n",
                      "markdown": "`        for metric_name in [\"KB/sec RX/TX\",\"KB/sec RX\",\"KB/sec TX\",\"KB/sec\"]:\n            # assert the metric exists\n            env.assertTrue(metric_name in set_metrics)\n            env.assertTrue(metric_name in get_metrics)\n            # assert the metric value is non zero given we've had write and read\n            set_metric_value_kbs = set_metrics[metric_name]\n            get_metric_value_kbs = get_metrics[metric_name]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 31,
                  "endLine": 223,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n",
                    "rendered": {
                      "text": "    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n",
                      "markdown": "`    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    overall_request_count = agg_info_commandstats(master_nodes_connections, merged_command_stats)\n    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 17,
                  "endLine": 210,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                    "rendered": {
                      "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                      "markdown": "`    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 24,
                  "endLine": 207,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    benchmark_specs = {\"name\": env.testName, \"args\": []}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                    "rendered": {
                      "text": "    benchmark_specs = {\"name\": env.testName, \"args\": []}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                      "markdown": "`    benchmark_specs = {\"name\": env.testName, \"args\": []}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 12,
                  "endLine": 183,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            set_metric_value_kbs = set_metrics[metric_name]\n            get_metric_value_kbs = get_metrics[metric_name]\n            env.assertTrue(set_metric_value_kbs > 0)\n            env.assertTrue(get_metric_value_kbs == 0)\n\n        for second_data in set_metrics_ts.values():\n            bytes_rx = second_data[\"Bytes RX\"]\n",
                    "rendered": {
                      "text": "            set_metric_value_kbs = set_metrics[metric_name]\n            get_metric_value_kbs = get_metrics[metric_name]\n            env.assertTrue(set_metric_value_kbs > 0)\n            env.assertTrue(get_metric_value_kbs == 0)\n\n        for second_data in set_metrics_ts.values():\n            bytes_rx = second_data[\"Bytes RX\"]\n",
                      "markdown": "`            set_metric_value_kbs = set_metrics[metric_name]\n            get_metric_value_kbs = get_metrics[metric_name]\n            env.assertTrue(set_metric_value_kbs > 0)\n            env.assertTrue(get_metric_value_kbs == 0)\n\n        for second_data in set_metrics_ts.values():\n            bytes_rx = second_data[\"Bytes RX\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 12,
                  "endLine": 178,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        for metric_name in [\"KB/sec RX/TX\",\"KB/sec RX\",\"KB/sec TX\",\"KB/sec\"]:\n            # assert the metric exists\n            env.assertTrue(metric_name in set_metrics)\n            env.assertTrue(metric_name in get_metrics)\n            # assert the metric value is non zero on writes and zero on reads\n            set_metric_value_kbs = set_metrics[metric_name]\n            get_metric_value_kbs = get_metrics[metric_name]\n",
                    "rendered": {
                      "text": "        for metric_name in [\"KB/sec RX/TX\",\"KB/sec RX\",\"KB/sec TX\",\"KB/sec\"]:\n            # assert the metric exists\n            env.assertTrue(metric_name in set_metrics)\n            env.assertTrue(metric_name in get_metrics)\n            # assert the metric value is non zero on writes and zero on reads\n            set_metric_value_kbs = set_metrics[metric_name]\n            get_metric_value_kbs = get_metrics[metric_name]\n",
                      "markdown": "`        for metric_name in [\"KB/sec RX/TX\",\"KB/sec RX\",\"KB/sec TX\",\"KB/sec\"]:\n            # assert the metric exists\n            env.assertTrue(metric_name in set_metrics)\n            env.assertTrue(metric_name in get_metrics)\n            # assert the metric value is non zero on writes and zero on reads\n            set_metric_value_kbs = set_metrics[metric_name]\n            get_metric_value_kbs = get_metrics[metric_name]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 12,
                  "endLine": 164,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            get_tx_rx = int(get_tx_rx_column_data[col_pos])\n            env.assertTrue(get_tx == 0)\n            env.assertTrue(get_rx == 0)\n            env.assertTrue(get_tx_rx == 0)\n            env.assertAlmostEqual(set_tx_rx,set_tx+set_rx,1)\n\n    ## Assert that all JSON BW metrics are properly stored and calculated\n",
                    "rendered": {
                      "text": "            get_tx_rx = int(get_tx_rx_column_data[col_pos])\n            env.assertTrue(get_tx == 0)\n            env.assertTrue(get_rx == 0)\n            env.assertTrue(get_tx_rx == 0)\n            env.assertAlmostEqual(set_tx_rx,set_tx+set_rx,1)\n\n    ## Assert that all JSON BW metrics are properly stored and calculated\n",
                      "markdown": "`            get_tx_rx = int(get_tx_rx_column_data[col_pos])\n            env.assertTrue(get_tx == 0)\n            env.assertTrue(get_rx == 0)\n            env.assertTrue(get_tx_rx == 0)\n            env.assertAlmostEqual(set_tx_rx,set_tx+set_rx,1)\n\n    ## Assert that all JSON BW metrics are properly stored and calculated\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 12,
                  "endLine": 163,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            get_rx = int(get_rx_column_data[col_pos])\n            get_tx_rx = int(get_tx_rx_column_data[col_pos])\n            env.assertTrue(get_tx == 0)\n            env.assertTrue(get_rx == 0)\n            env.assertTrue(get_tx_rx == 0)\n            env.assertAlmostEqual(set_tx_rx,set_tx+set_rx,1)\n\n",
                    "rendered": {
                      "text": "            get_rx = int(get_rx_column_data[col_pos])\n            get_tx_rx = int(get_tx_rx_column_data[col_pos])\n            env.assertTrue(get_tx == 0)\n            env.assertTrue(get_rx == 0)\n            env.assertTrue(get_tx_rx == 0)\n            env.assertAlmostEqual(set_tx_rx,set_tx+set_rx,1)\n\n",
                      "markdown": "`            get_rx = int(get_rx_column_data[col_pos])\n            get_tx_rx = int(get_tx_rx_column_data[col_pos])\n            env.assertTrue(get_tx == 0)\n            env.assertTrue(get_rx == 0)\n            env.assertTrue(get_tx_rx == 0)\n            env.assertAlmostEqual(set_tx_rx,set_tx+set_rx,1)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 12,
                  "endLine": 162,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            get_tx = int(get_tx_column_data[col_pos])\n            get_rx = int(get_rx_column_data[col_pos])\n            get_tx_rx = int(get_tx_rx_column_data[col_pos])\n            env.assertTrue(get_tx == 0)\n            env.assertTrue(get_rx == 0)\n            env.assertTrue(get_tx_rx == 0)\n            env.assertAlmostEqual(set_tx_rx,set_tx+set_rx,1)\n",
                    "rendered": {
                      "text": "            get_tx = int(get_tx_column_data[col_pos])\n            get_rx = int(get_rx_column_data[col_pos])\n            get_tx_rx = int(get_tx_rx_column_data[col_pos])\n            env.assertTrue(get_tx == 0)\n            env.assertTrue(get_rx == 0)\n            env.assertTrue(get_tx_rx == 0)\n            env.assertAlmostEqual(set_tx_rx,set_tx+set_rx,1)\n",
                      "markdown": "`            get_tx = int(get_tx_column_data[col_pos])\n            get_rx = int(get_rx_column_data[col_pos])\n            get_tx_rx = int(get_tx_rx_column_data[col_pos])\n            env.assertTrue(get_tx == 0)\n            env.assertTrue(get_rx == 0)\n            env.assertTrue(get_tx_rx == 0)\n            env.assertAlmostEqual(set_tx_rx,set_tx+set_rx,1)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 31,
                  "endLine": 122,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}}\n    assert_keyspace_range(env, key_max, key_min, master_nodes_connections)\n\n",
                    "rendered": {
                      "text": "    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}}\n    assert_keyspace_range(env, key_max, key_min, master_nodes_connections)\n\n",
                      "markdown": "`    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}}\n    assert_keyspace_range(env, key_max, key_min, master_nodes_connections)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 17,
                  "endLine": 111,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    config = RunConfig(test_dir, env.testName, config, {})\n    results_dir = config.results_dir\n",
                    "rendered": {
                      "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    config = RunConfig(test_dir, env.testName, config, {})\n    results_dir = config.results_dir\n",
                      "markdown": "`    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    config = RunConfig(test_dir, env.testName, config, {})\n    results_dir = config.results_dir\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 24,
                  "endLine": 108,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    benchmark_specs = {\"name\": env.testName, \"args\": ['--client-stats',f'{test_dir}/set_client_stats','--pipeline=10','--ratio=1:0','--key-pattern=R:R','--key-minimum={}'.format(key_min),'--key-maximum={}'.format(key_max)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config(threads=2, clients=10, requests=200000)\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                    "rendered": {
                      "text": "    benchmark_specs = {\"name\": env.testName, \"args\": ['--client-stats',f'{test_dir}/set_client_stats','--pipeline=10','--ratio=1:0','--key-pattern=R:R','--key-minimum={}'.format(key_min),'--key-maximum={}'.format(key_max)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config(threads=2, clients=10, requests=200000)\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                      "markdown": "`    benchmark_specs = {\"name\": env.testName, \"args\": ['--client-stats',f'{test_dir}/set_client_stats','--pipeline=10','--ratio=1:0','--key-pattern=R:R','--key-minimum={}'.format(key_min),'--key-maximum={}'.format(key_max)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config(threads=2, clients=10, requests=200000)\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 31,
                  "endLine": 92,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    assert_keyspace_range(env, key_max, key_min, master_nodes_connections)\n",
                    "rendered": {
                      "text": "\n    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    assert_keyspace_range(env, key_max, key_min, master_nodes_connections)\n",
                      "markdown": "`\n    # benchmark.run() returns True if the return code of memtier_benchmark was 0\n    memtier_ok = benchmark.run()\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    assert_keyspace_range(env, key_max, key_min, master_nodes_connections)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 17,
                  "endLine": 80,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                    "rendered": {
                      "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                      "markdown": "`    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 24,
                  "endLine": 77,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    benchmark_specs = {\"name\": env.testName, \"args\": ['--pipeline=10','--ratio=1:0','--key-pattern=P:P','--key-minimum={}'.format(key_min),'--key-maximum={}'.format(key_max)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config(threads=2, clients=10, requests='allkeys')\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                    "rendered": {
                      "text": "    benchmark_specs = {\"name\": env.testName, \"args\": ['--pipeline=10','--ratio=1:0','--key-pattern=P:P','--key-minimum={}'.format(key_min),'--key-maximum={}'.format(key_max)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config(threads=2, clients=10, requests='allkeys')\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                      "markdown": "`    benchmark_specs = {\"name\": env.testName, \"args\": ['--pipeline=10','--ratio=1:0','--key-pattern=P:P','--key-minimum={}'.format(key_min),'--key-maximum={}'.format(key_max)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config(threads=2, clients=10, requests='allkeys')\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "endLine": 49,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                    "rendered": {
                      "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                      "markdown": "`    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 24,
                  "endLine": 46,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    benchmark_specs = {\"name\": env.testName, \"args\": ['--pipeline=10','--ratio=1:1','--key-pattern=R:R','--key-minimum={}'.format(key_min),'--key-maximum={}'.format(key_max)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config(threads=2, clients=10, requests=200000)\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                    "rendered": {
                      "text": "    benchmark_specs = {\"name\": env.testName, \"args\": ['--pipeline=10','--ratio=1:1','--key-pattern=R:R','--key-minimum={}'.format(key_min),'--key-maximum={}'.format(key_max)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config(threads=2, clients=10, requests=200000)\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                      "markdown": "`    benchmark_specs = {\"name\": env.testName, \"args\": ['--pipeline=10','--ratio=1:1','--key-pattern=R:R','--key-minimum={}'.format(key_min),'--key-maximum={}'.format(key_max)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config(threads=2, clients=10, requests=200000)\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 31,
                  "endLine": 31,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    memtier_ok = benchmark.run()\n    debugPrintMemtierOnError(config, env)\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    assert_keyspace_range(env, key_max, key_min, master_nodes_connections)\n\n",
                    "rendered": {
                      "text": "    memtier_ok = benchmark.run()\n    debugPrintMemtierOnError(config, env)\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    assert_keyspace_range(env, key_max, key_min, master_nodes_connections)\n\n",
                      "markdown": "`    memtier_ok = benchmark.run()\n    debugPrintMemtierOnError(config, env)\n\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    merged_command_stats = {'cmdstat_set': {'calls': 0}, 'cmdstat_get': {'calls': 0}}\n    assert_keyspace_range(env, key_max, key_min, master_nodes_connections)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 17,
                  "endLine": 17,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                    "rendered": {
                      "text": "    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n",
                      "markdown": "`    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n\n    # Create a temporary directory\n    test_dir = tempfile.mkdtemp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 24,
                  "endLine": 14,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    benchmark_specs = {\"name\": env.testName, \"args\": ['--pipeline=10','--ratio=1:0','--key-pattern=P:P','--key-minimum={}'.format(key_min),'--key-maximum={}'.format(key_max)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config(threads=2, clients=10, requests='allkeys')\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                    "rendered": {
                      "text": "    benchmark_specs = {\"name\": env.testName, \"args\": ['--pipeline=10','--ratio=1:0','--key-pattern=P:P','--key-minimum={}'.format(key_min),'--key-maximum={}'.format(key_max)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config(threads=2, clients=10, requests='allkeys')\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n",
                      "markdown": "`    benchmark_specs = {\"name\": env.testName, \"args\": ['--pipeline=10','--ratio=1:0','--key-pattern=P:P','--key-minimum={}'.format(key_min),'--key-maximum={}'.format(key_max)]}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config(threads=2, clients=10, requests='allkeys')\n    master_nodes_list = env.getMasterNodesList()\n    overall_expected_request_count = get_expected_request_count(config,key_min, key_max)\n\n    add_required_env_arguments(benchmark_specs, config, env, master_nodes_list)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 55,
                  "endLine": 310,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        for ftype in [\"txt\",\"hgrm\"]:\n            histogram_files.append(\"{0}{1}.{2}\".format(histogram_prefix,sufix,ftype))\n\n    ## Assert that all requested percentiles are stored at the json file\n    with open(json_filename) as results_json:\n        results_dict = json.load(results_json)\n        set_percentiles = results_dict['ALL STATS']['Sets']['Percentile Latencies']\n",
                    "rendered": {
                      "text": "        for ftype in [\"txt\",\"hgrm\"]:\n            histogram_files.append(\"{0}{1}.{2}\".format(histogram_prefix,sufix,ftype))\n\n    ## Assert that all requested percentiles are stored at the json file\n    with open(json_filename) as results_json:\n        results_dict = json.load(results_json)\n        set_percentiles = results_dict['ALL STATS']['Sets']['Percentile Latencies']\n",
                      "markdown": "`        for ftype in [\"txt\",\"hgrm\"]:\n            histogram_files.append(\"{0}{1}.{2}\".format(histogram_prefix,sufix,ftype))\n\n    ## Assert that all requested percentiles are stored at the json file\n    with open(json_filename) as results_json:\n        results_dict = json.load(results_json)\n        set_percentiles = results_dict['ALL STATS']['Sets']['Percentile Latencies']\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 28,
                  "endLine": 383,
                  "snippet": {
                    "text": "    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n\n\n# run each test on different env\ndef test_default_set_get_3_runs(env):\n    run_count = 3\n    benchmark_specs = {\"name\": env.testName, \"args\": ['--run-count={}'.format(run_count)]}\n    addTLSArgs(benchmark_specs, env)\n",
                    "rendered": {
                      "text": "    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n\n\n# run each test on different env\ndef test_default_set_get_3_runs(env):\n    run_count = 3\n    benchmark_specs = {\"name\": env.testName, \"args\": ['--run-count={}'.format(run_count)]}\n    addTLSArgs(benchmark_specs, env)\n",
                      "markdown": "`    assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count, overall_request_count)\n\n\n# run each test on different env\ndef test_default_set_get_3_runs(env):\n    run_count = 3\n    benchmark_specs = {\"name\": env.testName, \"args\": ['--run-count={}'.format(run_count)]}\n    addTLSArgs(benchmark_specs, env)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 28,
                  "endLine": 354,
                  "snippet": {
                    "text": "    # assert same number of gets and sets\n    env.assertEqual(merged_command_stats['cmdstat_set']['calls'], merged_command_stats['cmdstat_get']['calls'])\n\n# run each test on different env\ndef test_short_reconnect_interval(env):\n    # cluster mode dose not support reconnect-interval option\n    env.skipOnCluster()\n    benchmark_specs = {\"name\": env.testName, \"args\": ['--reconnect-interval=1']}\n",
                    "rendered": {
                      "text": "    # assert same number of gets and sets\n    env.assertEqual(merged_command_stats['cmdstat_set']['calls'], merged_command_stats['cmdstat_get']['calls'])\n\n# run each test on different env\ndef test_short_reconnect_interval(env):\n    # cluster mode dose not support reconnect-interval option\n    env.skipOnCluster()\n    benchmark_specs = {\"name\": env.testName, \"args\": ['--reconnect-interval=1']}\n",
                      "markdown": "`    # assert same number of gets and sets\n    env.assertEqual(merged_command_stats['cmdstat_set']['calls'], merged_command_stats['cmdstat_get']['calls'])\n\n# run each test on different env\ndef test_short_reconnect_interval(env):\n    # cluster mode dose not support reconnect-interval option\n    env.skipOnCluster()\n    benchmark_specs = {\"name\": env.testName, \"args\": ['--reconnect-interval=1']}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/tests_oss_simple_flow.py"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 28,
                  "endLine": 325,
                  "snippet": {
                    "text": "\n    \n\n# run each test on different env\ndef test_default_set_get_1_1(env):\n    benchmark_specs = {\"name\": env.testName, \"args\": ['--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n",
                    "rendered": {
                      "text": "\n    \n\n# run each test on different env\ndef test_default_set_get_1_1(env):\n    benchmark_specs = {\"name\": env.testName, \"args\": ['--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n",
                      "markdown": "`\n    \n\n# run each test on different env\ndef test_default_set_get_1_1(env):\n    benchmark_specs = {\"name\": env.testName, \"args\": ['--ratio=1:1']}\n    addTLSArgs(benchmark_specs, env)\n    config = get_default_memtier_config()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/gen-test-certs.sh"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 28,
                  "endLine": 58,
                  "endColumn": 37,
                  "snippet": {
                    "text": "generate_cert client \"Client-only\" \"-extfile tests/tls/openssl.cnf -extensions client_cert\"\ngenerate_cert redis \"Generic-cert\"\n\n[ -f tests/tls/redis.dh ] || openssl dhparam -out tests/tls/redis.dh 2048\n",
                    "rendered": {
                      "text": "generate_cert client \"Client-only\" \"-extfile tests/tls/openssl.cnf -extensions client_cert\"\ngenerate_cert redis \"Generic-cert\"\n\n[ -f tests/tls/redis.dh ] || openssl dhparam -out tests/tls/redis.dh 2048\n",
                      "markdown": "`generate_cert client \"Client-only\" \"-extfile tests/tls/openssl.cnf -extensions client_cert\"\ngenerate_cert redis \"Generic-cert\"\n\n[ -f tests/tls/redis.dh ] || openssl dhparam -out tests/tls/redis.dh 2048\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/gen-test-certs.sh"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 44,
                  "endColumn": 4,
                  "snippet": {
                    "text": "    -days 3650 \\\n    -subj '/O=Redis Test/CN=Certificate Authority' \\\n    -out tests/tls/ca.crt\n\ncat > tests/tls/openssl.cnf <<_END_\n[ server_cert ]\nkeyUsage = digitalSignature, keyEncipherment\nnsCertType = server\n",
                    "rendered": {
                      "text": "    -days 3650 \\\n    -subj '/O=Redis Test/CN=Certificate Authority' \\\n    -out tests/tls/ca.crt\n\ncat > tests/tls/openssl.cnf <<_END_\n[ server_cert ]\nkeyUsage = digitalSignature, keyEncipherment\nnsCertType = server\n",
                      "markdown": "`    -days 3650 \\\n    -subj '/O=Redis Test/CN=Certificate Authority' \\\n    -out tests/tls/ca.crt\n\ncat > tests/tls/openssl.cnf <<_END_\n[ server_cert ]\nkeyUsage = digitalSignature, keyEncipherment\nnsCertType = server\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/gen-test-certs.sh"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 68,
                  "endLine": 37,
                  "endColumn": 8,
                  "snippet": {
                    "text": "}\n\nmkdir -p tests/tls\n[ -f tests/tls/ca.key ] || openssl genrsa -out tests/tls/ca.key 4096\nopenssl req \\\n    -x509 -new -nodes -sha256 \\\n    -key tests/tls/ca.key \\\n    -days 3650 \\\n",
                    "rendered": {
                      "text": "}\n\nmkdir -p tests/tls\n[ -f tests/tls/ca.key ] || openssl genrsa -out tests/tls/ca.key 4096\nopenssl req \\\n    -x509 -new -nodes -sha256 \\\n    -key tests/tls/ca.key \\\n    -days 3650 \\\n",
                      "markdown": "`}\n\nmkdir -p tests/tls\n[ -f tests/tls/ca.key ] || openssl genrsa -out tests/tls/ca.key 4096\nopenssl req \\\n    -x509 -new -nodes -sha256 \\\n    -key tests/tls/ca.key \\\n    -days 3650 \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/gen-test-certs.sh"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 26,
                  "endLine": 36,
                  "endColumn": 35,
                  "snippet": {
                    "text": "}\n\nmkdir -p tests/tls\n[ -f tests/tls/ca.key ] || openssl genrsa -out tests/tls/ca.key 4096\nopenssl req \\\n    -x509 -new -nodes -sha256 \\\n    -key tests/tls/ca.key \\\n",
                    "rendered": {
                      "text": "}\n\nmkdir -p tests/tls\n[ -f tests/tls/ca.key ] || openssl genrsa -out tests/tls/ca.key 4096\nopenssl req \\\n    -x509 -new -nodes -sha256 \\\n    -key tests/tls/ca.key \\\n",
                      "markdown": "`}\n\nmkdir -p tests/tls\n[ -f tests/tls/ca.key ] || openssl genrsa -out tests/tls/ca.key 4096\nopenssl req \\\n    -x509 -new -nodes -sha256 \\\n    -key tests/tls/ca.key \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/gen-test-certs.sh"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 7,
                  "endLine": 24,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        -new -sha256 \\\n        -subj \"/O=Redis Test/CN=$cn\" \\\n        -key $keyfile | \\\n        openssl x509 \\\n            -req -sha256 \\\n            -CA tests/tls/ca.crt \\\n            -CAkey tests/tls/ca.key \\\n",
                    "rendered": {
                      "text": "        -new -sha256 \\\n        -subj \"/O=Redis Test/CN=$cn\" \\\n        -key $keyfile | \\\n        openssl x509 \\\n            -req -sha256 \\\n            -CA tests/tls/ca.crt \\\n            -CAkey tests/tls/ca.key \\\n",
                      "markdown": "`        -new -sha256 \\\n        -subj \"/O=Redis Test/CN=$cn\" \\\n        -key $keyfile | \\\n        openssl x509 \\\n            -req -sha256 \\\n            -CA tests/tls/ca.crt \\\n            -CAkey tests/tls/ca.key \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/gen-test-certs.sh"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 3,
                  "endLine": 20,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    local certfile=tests/tls/${name}.crt\n\n    [ -f $keyfile ] || openssl genrsa -out $keyfile 2048\n    openssl req \\\n        -new -sha256 \\\n        -subj \"/O=Redis Test/CN=$cn\" \\\n        -key $keyfile | \\\n",
                    "rendered": {
                      "text": "    local certfile=tests/tls/${name}.crt\n\n    [ -f $keyfile ] || openssl genrsa -out $keyfile 2048\n    openssl req \\\n        -new -sha256 \\\n        -subj \"/O=Redis Test/CN=$cn\" \\\n        -key $keyfile | \\\n",
                      "markdown": "`    local certfile=tests/tls/${name}.crt\n\n    [ -f $keyfile ] || openssl genrsa -out $keyfile 2048\n    openssl req \\\n        -new -sha256 \\\n        -subj \"/O=Redis Test/CN=$cn\" \\\n        -key $keyfile | \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/gen-test-certs.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 22,
                  "endLine": 19,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    local keyfile=tests/tls/${name}.key\n    local certfile=tests/tls/${name}.crt\n\n    [ -f $keyfile ] || openssl genrsa -out $keyfile 2048\n    openssl req \\\n        -new -sha256 \\\n        -subj \"/O=Redis Test/CN=$cn\" \\\n",
                    "rendered": {
                      "text": "    local keyfile=tests/tls/${name}.key\n    local certfile=tests/tls/${name}.crt\n\n    [ -f $keyfile ] || openssl genrsa -out $keyfile 2048\n    openssl req \\\n        -new -sha256 \\\n        -subj \"/O=Redis Test/CN=$cn\" \\\n",
                      "markdown": "`    local keyfile=tests/tls/${name}.key\n    local certfile=tests/tls/${name}.crt\n\n    [ -f $keyfile ] || openssl genrsa -out $keyfile 2048\n    openssl req \\\n        -new -sha256 \\\n        -subj \"/O=Redis Test/CN=$cn\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/dockers.yml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 10,
                  "endLine": 34,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      - uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: build and push in master\n        uses: docker/build-push-action@v4\n",
                    "rendered": {
                      "text": "      - uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: build and push in master\n        uses: docker/build-push-action@v4\n",
                      "markdown": "`      - uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: build and push in master\n        uses: docker/build-push-action@v4\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/utils/prepare_release.sh"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nset -e\n\n# Update configure.ac version\nsed -i 's/^\\(AC_INIT(.*\\),.*,\\(.*)\\)$/\\1,'$RELEASE',\\2/' configure.ac\n\n# Build\n",
                    "rendered": {
                      "text": "\nset -e\n\n# Update configure.ac version\nsed -i 's/^\\(AC_INIT(.*\\),.*,\\(.*)\\)$/\\1,'$RELEASE',\\2/' configure.ac\n\n# Build\n",
                      "markdown": "`\nset -e\n\n# Update configure.ac version\nsed -i 's/^\\(AC_INIT(.*\\),.*,\\(.*)\\)$/\\1,'$RELEASE',\\2/' configure.ac\n\n# Build\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/utils/prepare_release.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 40,
                  "endLine": 26,
                  "endColumn": 4,
                  "snippet": {
                    "text": "make rebuild-man\n\n# Commit\ngit add configure.ac memtier_benchmark.1\ngit commit -m \"Release $RELEASE\"\n",
                    "rendered": {
                      "text": "make rebuild-man\n\n# Commit\ngit add configure.ac memtier_benchmark.1\ngit commit -m \"Release $RELEASE\"\n",
                      "markdown": "`make rebuild-man\n\n# Commit\ngit add configure.ac memtier_benchmark.1\ngit commit -m \"Release $RELEASE\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/utils/prepare_release.sh"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 8,
                  "endLine": 25,
                  "endColumn": 4,
                  "snippet": {
                    "text": "make\nmake rebuild-man\n\n# Commit\ngit add configure.ac memtier_benchmark.1\ngit commit -m \"Release $RELEASE\"\n",
                    "rendered": {
                      "text": "make\nmake rebuild-man\n\n# Commit\ngit add configure.ac memtier_benchmark.1\ngit commit -m \"Release $RELEASE\"\n",
                      "markdown": "`make\nmake rebuild-man\n\n# Commit\ngit add configure.ac memtier_benchmark.1\ngit commit -m \"Release $RELEASE\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/utils/prepare_release.sh"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 29,
                  "endLine": 16,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nset -e\n\n# Update configure.ac version\nsed -i 's/^\\(AC_INIT(.*\\),.*,\\(.*)\\)$/\\1,'$RELEASE',\\2/' configure.ac\n\n# Build\nautoreconf -ivf\n",
                    "rendered": {
                      "text": "\nset -e\n\n# Update configure.ac version\nsed -i 's/^\\(AC_INIT(.*\\),.*,\\(.*)\\)$/\\1,'$RELEASE',\\2/' configure.ac\n\n# Build\nautoreconf -ivf\n",
                      "markdown": "`\nset -e\n\n# Update configure.ac version\nsed -i 's/^\\(AC_INIT(.*\\),.*,\\(.*)\\)$/\\1,'$RELEASE',\\2/' configure.ac\n\n# Build\nautoreconf -ivf\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/client.h"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 32,
                  "endLine": 165,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    }\n\n    inline int arbitrary_obj_iter_type(unsigned int index) {\n        const arbitrary_command& cmd = get_arbitrary_command(index);\n        if (cmd.key_pattern == 'R') {\n            return OBJECT_GENERATOR_KEY_RANDOM;\n        } else if (cmd.key_pattern == 'G') {\n",
                    "rendered": {
                      "text": "    }\n\n    inline int arbitrary_obj_iter_type(unsigned int index) {\n        const arbitrary_command& cmd = get_arbitrary_command(index);\n        if (cmd.key_pattern == 'R') {\n            return OBJECT_GENERATOR_KEY_RANDOM;\n        } else if (cmd.key_pattern == 'G') {\n",
                      "markdown": "`    }\n\n    inline int arbitrary_obj_iter_type(unsigned int index) {\n        const arbitrary_command& cmd = get_arbitrary_command(index);\n        if (cmd.key_pattern == 'R') {\n            return OBJECT_GENERATOR_KEY_RANDOM;\n        } else if (cmd.key_pattern == 'G') {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/config_types.cpp"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 33,
                  "endLine": 260,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    hints.ai_family = m_resolution;\n\n    snprintf(port_str, sizeof(port_str)-1, \"%u\", m_port);\n    m_last_error = getaddrinfo(m_hostname.c_str(), port_str, &hints, &m_server_addr);\n    return m_last_error;\n}\n\n",
                    "rendered": {
                      "text": "    hints.ai_family = m_resolution;\n\n    snprintf(port_str, sizeof(port_str)-1, \"%u\", m_port);\n    m_last_error = getaddrinfo(m_hostname.c_str(), port_str, &hints, &m_server_addr);\n    return m_last_error;\n}\n\n",
                      "markdown": "`    hints.ai_family = m_resolution;\n\n    snprintf(port_str, sizeof(port_str)-1, \"%u\", m_port);\n    m_last_error = getaddrinfo(m_hostname.c_str(), port_str, &hints, &m_server_addr);\n    return m_last_error;\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/config_types.cpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 15,
                  "endLine": 229,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n\nserver_addr::server_addr(const char *hostname, int port, int resolution) :\n    m_hostname(hostname), m_port(port), m_server_addr(NULL), m_used_addr(NULL), m_resolution(resolution), m_last_error(0)\n{\n    int error = resolve();\n\n",
                    "rendered": {
                      "text": "\n\nserver_addr::server_addr(const char *hostname, int port, int resolution) :\n    m_hostname(hostname), m_port(port), m_server_addr(NULL), m_used_addr(NULL), m_resolution(resolution), m_last_error(0)\n{\n    int error = resolve();\n\n",
                      "markdown": "`\n\nserver_addr::server_addr(const char *hostname, int port, int resolution) :\n    m_hostname(hostname), m_port(port), m_server_addr(NULL), m_used_addr(NULL), m_resolution(resolution), m_last_error(0)\n{\n    int error = resolve();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/config_types.cpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 6,
                  "endLine": 229,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n\nserver_addr::server_addr(const char *hostname, int port, int resolution) :\n    m_hostname(hostname), m_port(port), m_server_addr(NULL), m_used_addr(NULL), m_resolution(resolution), m_last_error(0)\n{\n    int error = resolve();\n\n",
                    "rendered": {
                      "text": "\n\nserver_addr::server_addr(const char *hostname, int port, int resolution) :\n    m_hostname(hostname), m_port(port), m_server_addr(NULL), m_used_addr(NULL), m_resolution(resolution), m_last_error(0)\n{\n    int error = resolve();\n\n",
                      "markdown": "`\n\nserver_addr::server_addr(const char *hostname, int port, int resolution) :\n    m_hostname(hostname), m_port(port), m_server_addr(NULL), m_used_addr(NULL), m_resolution(resolution), m_last_error(0)\n{\n    int error = resolve();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/config_types.cpp"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 37,
                  "endLine": 228,
                  "endColumn": 45,
                  "snippet": {
                    "text": "}\n\n\nserver_addr::server_addr(const char *hostname, int port, int resolution) :\n    m_hostname(hostname), m_port(port), m_server_addr(NULL), m_used_addr(NULL), m_resolution(resolution), m_last_error(0)\n{\n    int error = resolve();\n",
                    "rendered": {
                      "text": "}\n\n\nserver_addr::server_addr(const char *hostname, int port, int resolution) :\n    m_hostname(hostname), m_port(port), m_server_addr(NULL), m_used_addr(NULL), m_resolution(resolution), m_last_error(0)\n{\n    int error = resolve();\n",
                      "markdown": "`}\n\n\nserver_addr::server_addr(const char *hostname, int port, int resolution) :\n    m_hostname(hostname), m_port(port), m_server_addr(NULL), m_used_addr(NULL), m_resolution(resolution), m_last_error(0)\n{\n    int error = resolve();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 29,
                  "endLine": 11,
                  "endColumn": 34,
                  "snippet": {
                    "text": "TLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n\ndef ensure_tls_protocols(master_nodes_connections):\n",
                    "rendered": {
                      "text": "TLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n\ndef ensure_tls_protocols(master_nodes_connections):\n",
                      "markdown": "`TLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n\ndef ensure_tls_protocols(master_nodes_connections):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 26,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "ROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n\n",
                    "rendered": {
                      "text": "ROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n\n",
                      "markdown": "`ROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 23,
                  "endLine": 9,
                  "endColumn": 28,
                  "snippet": {
                    "text": "TLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n",
                    "rendered": {
                      "text": "TLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n",
                      "markdown": "`TLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 20,
                  "endLine": 8,
                  "endColumn": 25,
                  "snippet": {
                    "text": "MEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n",
                    "rendered": {
                      "text": "MEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n",
                      "markdown": "`MEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 24,
                  "endLine": 7,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\n",
                    "rendered": {
                      "text": "\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\n",
                      "markdown": "`\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 21,
                  "endLine": 6,
                  "endColumn": 26,
                  "snippet": {
                    "text": "import logging\n\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\n",
                    "rendered": {
                      "text": "import logging\n\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\n",
                      "markdown": "`import logging\n\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 27,
                  "endLine": 5,
                  "endColumn": 32,
                  "snippet": {
                    "text": "import os\nimport logging\n\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\n",
                    "rendered": {
                      "text": "import os\nimport logging\n\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\n",
                      "markdown": "`import os\nimport logging\n\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 36,
                  "endLine": 75,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\n    if not env.isCluster():\n        if env.envRunner is not None:\n            log_file = os.path.join(env.envRunner.dbDirPath, env.envRunner._getFileName('master', '.log'))\n            with open(log_file) as redislog:\n                env.debugPrint(\"### REDIS LOG ###\", True)\n                env.debugPrint(\n",
                    "rendered": {
                      "text": "\n    if not env.isCluster():\n        if env.envRunner is not None:\n            log_file = os.path.join(env.envRunner.dbDirPath, env.envRunner._getFileName('master', '.log'))\n            with open(log_file) as redislog:\n                env.debugPrint(\"### REDIS LOG ###\", True)\n                env.debugPrint(\n",
                      "markdown": "`\n    if not env.isCluster():\n        if env.envRunner is not None:\n            log_file = os.path.join(env.envRunner.dbDirPath, env.envRunner._getFileName('master', '.log'))\n            with open(log_file) as redislog:\n                env.debugPrint(\"### REDIS LOG ###\", True)\n                env.debugPrint(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 31,
                  "endLine": 46,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        logging.basicConfig(level=logging.DEBUG)\n\n    # if we've specified TLS_PROTOCOLS ensure we configure it on redis\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    ensure_tls_protocols(master_nodes_connections)\n\n    # check if environment is cluster\n",
                    "rendered": {
                      "text": "        logging.basicConfig(level=logging.DEBUG)\n\n    # if we've specified TLS_PROTOCOLS ensure we configure it on redis\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    ensure_tls_protocols(master_nodes_connections)\n\n    # check if environment is cluster\n",
                      "markdown": "`        logging.basicConfig(level=logging.DEBUG)\n\n    # if we've specified TLS_PROTOCOLS ensure we configure it on redis\n    master_nodes_connections = env.getOSSMasterNodesConnectionList()\n    ensure_tls_protocols(master_nodes_connections)\n\n    # check if environment is cluster\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 17,
                  "endLine": 41,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        if env.getNumberOfFailedAssertion() > failed_asserts:\n            debugPrintMemtierOnError(config, env)\n\ndef add_required_env_arguments(benchmark_specs, config, env, master_nodes_list):\n    if VERBOSE:\n        logging.basicConfig(level=logging.DEBUG)\n\n",
                    "rendered": {
                      "text": "        if env.getNumberOfFailedAssertion() > failed_asserts:\n            debugPrintMemtierOnError(config, env)\n\ndef add_required_env_arguments(benchmark_specs, config, env, master_nodes_list):\n    if VERBOSE:\n        logging.basicConfig(level=logging.DEBUG)\n\n",
                      "markdown": "`        if env.getNumberOfFailedAssertion() > failed_asserts:\n            debugPrintMemtierOnError(config, env)\n\ndef add_required_env_arguments(benchmark_specs, config, env, master_nodes_list):\n    if VERBOSE:\n        logging.basicConfig(level=logging.DEBUG)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 11,
                  "endLine": 38,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        else:\n            env.assertAlmostEqual(overall_expected_request_count, overall_request_count,overall_request_delta)\n    finally:\n        if env.getNumberOfFailedAssertion() > failed_asserts:\n            debugPrintMemtierOnError(config, env)\n\ndef add_required_env_arguments(benchmark_specs, config, env, master_nodes_list):\n",
                    "rendered": {
                      "text": "        else:\n            env.assertAlmostEqual(overall_expected_request_count, overall_request_count,overall_request_delta)\n    finally:\n        if env.getNumberOfFailedAssertion() > failed_asserts:\n            debugPrintMemtierOnError(config, env)\n\ndef add_required_env_arguments(benchmark_specs, config, env, master_nodes_list):\n",
                      "markdown": "`        else:\n            env.assertAlmostEqual(overall_expected_request_count, overall_request_count,overall_request_delta)\n    finally:\n        if env.getNumberOfFailedAssertion() > failed_asserts:\n            debugPrintMemtierOnError(config, env)\n\ndef add_required_env_arguments(benchmark_specs, config, env, master_nodes_list):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 21,
                  "endLine": 23,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\ndef assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count,\n                                    overall_request_count, overall_request_delta=None):\n    failed_asserts = env.getNumberOfFailedAssertion()\n    try:\n        # assert correct exit code\n        env.assertTrue(memtier_ok == True)\n",
                    "rendered": {
                      "text": "\ndef assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count,\n                                    overall_request_count, overall_request_delta=None):\n    failed_asserts = env.getNumberOfFailedAssertion()\n    try:\n        # assert correct exit code\n        env.assertTrue(memtier_ok == True)\n",
                      "markdown": "`\ndef assert_minimum_memtier_outcomes(config, env, memtier_ok, overall_expected_request_count,\n                                    overall_request_count, overall_request_delta=None):\n    failed_asserts = env.getNumberOfFailedAssertion()\n    try:\n        # assert correct exit code\n        env.assertTrue(memtier_ok == True)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 22,
                  "endLine": 11,
                  "endColumn": 33,
                  "snippet": {
                    "text": "TLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n\ndef ensure_tls_protocols(master_nodes_connections):\n",
                    "rendered": {
                      "text": "TLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n\ndef ensure_tls_protocols(master_nodes_connections):\n",
                      "markdown": "`TLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n\ndef ensure_tls_protocols(master_nodes_connections):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 19,
                  "endLine": 10,
                  "endColumn": 30,
                  "snippet": {
                    "text": "ROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n\n",
                    "rendered": {
                      "text": "ROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n\n",
                      "markdown": "`ROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 16,
                  "endLine": 9,
                  "endColumn": 27,
                  "snippet": {
                    "text": "TLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n",
                    "rendered": {
                      "text": "TLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n",
                      "markdown": "`TLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 13,
                  "endLine": 8,
                  "endColumn": 24,
                  "snippet": {
                    "text": "MEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n",
                    "rendered": {
                      "text": "MEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n",
                      "markdown": "`MEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\nVERBOSE = bool(int(os.environ.get(\"VERBOSE\",\"0\")))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\n",
                    "rendered": {
                      "text": "\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\n",
                      "markdown": "`\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\nTLS_PROTOCOLS = os.environ.get(\"TLS_PROTOCOLS\", \"\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 14,
                  "endLine": 6,
                  "endColumn": 25,
                  "snippet": {
                    "text": "import logging\n\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\n",
                    "rendered": {
                      "text": "import logging\n\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\n",
                      "markdown": "`import logging\n\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\nTLS_CACERT = os.environ.get(\"TLS_CACERT\", \"\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 20,
                  "endLine": 5,
                  "endColumn": 63,
                  "snippet": {
                    "text": "import os\nimport logging\n\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\n",
                    "rendered": {
                      "text": "import os\nimport logging\n\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\n",
                      "markdown": "`import os\nimport logging\n\nMEMTIER_BINARY = os.environ.get(\"MEMTIER_BINARY\", \"memtier_benchmark\")\nTLS_CERT = os.environ.get(\"TLS_CERT\", \"\")\nROOT_FOLDER = os.environ.get(\"ROOT_FOLDER\", \"\")\nTLS_KEY = os.environ.get(\"TLS_KEY\", \"\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/tests/include.py"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 46,
                  "endLine": 16,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\ndef ensure_tls_protocols(master_nodes_connections):\n    if TLS_PROTOCOLS != \"\":\n        # if we've specified the TLS_PROTOCOLS env variable ensure the server enforces thos protocol versions\n        for master_connection in master_nodes_connections:\n            master_connection.execute_command(\"CONFIG\", \"SET\", \"tls-protocols\", TLS_PROTOCOLS)\n\n",
                    "rendered": {
                      "text": "\ndef ensure_tls_protocols(master_nodes_connections):\n    if TLS_PROTOCOLS != \"\":\n        # if we've specified the TLS_PROTOCOLS env variable ensure the server enforces thos protocol versions\n        for master_connection in master_nodes_connections:\n            master_connection.execute_command(\"CONFIG\", \"SET\", \"tls-protocols\", TLS_PROTOCOLS)\n\n",
                      "markdown": "`\ndef ensure_tls_protocols(master_nodes_connections):\n    if TLS_PROTOCOLS != \"\":\n        # if we've specified the TLS_PROTOCOLS env variable ensure the server enforces thos protocol versions\n        for master_connection in master_nodes_connections:\n            master_connection.execute_command(\"CONFIG\", \"SET\", \"tls-protocols\", TLS_PROTOCOLS)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 15,
                  "endLine": 116,
                  "snippet": {
                    "text": "      uses: actions/download-artifact@v2\n    - name: Install packages\n      run: |\n        apt-get update\n        cd binary-$(echo ${{ matrix.image }} | cut -d: -f2)-${{ env.ARCH }} && apt install --yes ./*.deb\n\n  publish-to-apt:\n    if: github.event.release.prerelease == false\n",
                    "rendered": {
                      "text": "      uses: actions/download-artifact@v2\n    - name: Install packages\n      run: |\n        apt-get update\n        cd binary-$(echo ${{ matrix.image }} | cut -d: -f2)-${{ env.ARCH }} && apt install --yes ./*.deb\n\n  publish-to-apt:\n    if: github.event.release.prerelease == false\n",
                      "markdown": "`      uses: actions/download-artifact@v2\n    - name: Install packages\n      run: |\n        apt-get update\n        cd binary-$(echo ${{ matrix.image }} | cut -d: -f2)-${{ env.ARCH }} && apt install --yes ./*.deb\n\n  publish-to-apt:\n    if: github.event.release.prerelease == false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 22,
                  "endLine": 72,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        APT_SIGNING_KEY: ${{ secrets.APT_SIGNING_KEY }}\n    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            sbuild debhelper\n          sudo sbuild-adduser $USER\n",
                    "rendered": {
                      "text": "        APT_SIGNING_KEY: ${{ secrets.APT_SIGNING_KEY }}\n    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            sbuild debhelper\n          sudo sbuild-adduser $USER\n",
                      "markdown": "`        APT_SIGNING_KEY: ${{ secrets.APT_SIGNING_KEY }}\n    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            sbuild debhelper\n          sudo sbuild-adduser $USER\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 22,
                  "endLine": 19,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        path: sources\n    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            debhelper dput libevent-dev libpcre2-dev libssl-dev pkg-config\n    - name: Create changelog\n",
                    "rendered": {
                      "text": "        path: sources\n    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            debhelper dput libevent-dev libpcre2-dev libssl-dev pkg-config\n    - name: Create changelog\n",
                      "markdown": "`        path: sources\n    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            debhelper dput libevent-dev libpcre2-dev libssl-dev pkg-config\n    - name: Create changelog\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 30,
                  "endLine": 147,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        # Quick hack to deal with duplicate _all packages\n        rm -f binary-*-i386/*_all.deb\n        for dir in binary-*; do \\\n            dist=$(echo $dir | cut -d- -f 2) ; \\\n            deb-s3 upload \\\n                --bucket ${{ secrets.APT_S3_BUCKET }} \\\n                --s3-region ${{ secrets.APT_S3_REGION }} \\\n",
                    "rendered": {
                      "text": "        # Quick hack to deal with duplicate _all packages\n        rm -f binary-*-i386/*_all.deb\n        for dir in binary-*; do \\\n            dist=$(echo $dir | cut -d- -f 2) ; \\\n            deb-s3 upload \\\n                --bucket ${{ secrets.APT_S3_BUCKET }} \\\n                --s3-region ${{ secrets.APT_S3_REGION }} \\\n",
                      "markdown": "`        # Quick hack to deal with duplicate _all packages\n        rm -f binary-*-i386/*_all.deb\n        for dir in binary-*; do \\\n            dist=$(echo $dir | cut -d- -f 2) ; \\\n            deb-s3 upload \\\n                --bucket ${{ secrets.APT_S3_BUCKET }} \\\n                --s3-region ${{ secrets.APT_S3_REGION }} \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 9,
                  "endLine": 140,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          ruby-version: \"2.7\"\n    - name: Install deb-s3\n      run: |\n          curl -sLO https://github.com/deb-s3/deb-s3/releases/download/${{ env.DEB_S3_VERSION }}/deb-s3-${{ env.DEB_S3_VERSION }}.gem\n          gem install deb-s3-${{ env.DEB_S3_VERSION }}.gem\n    - name: Upload packages\n      run: |\n",
                    "rendered": {
                      "text": "          ruby-version: \"2.7\"\n    - name: Install deb-s3\n      run: |\n          curl -sLO https://github.com/deb-s3/deb-s3/releases/download/${{ env.DEB_S3_VERSION }}/deb-s3-${{ env.DEB_S3_VERSION }}.gem\n          gem install deb-s3-${{ env.DEB_S3_VERSION }}.gem\n    - name: Upload packages\n      run: |\n",
                      "markdown": "`          ruby-version: \"2.7\"\n    - name: Install deb-s3\n      run: |\n          curl -sLO https://github.com/deb-s3/deb-s3/releases/download/${{ env.DEB_S3_VERSION }}/deb-s3-${{ env.DEB_S3_VERSION }}.gem\n          gem install deb-s3-${{ env.DEB_S3_VERSION }}.gem\n    - name: Upload packages\n      run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 17,
                  "endLine": 135,
                  "snippet": {
                    "text": "        APT_SIGNING_KEY: ${{ secrets.APT_SIGNING_KEY }}\n    - name: Get binary packages\n      uses: actions/download-artifact@v2\n    - name: Setup ruby\n      uses: ruby/setup-ruby@v1\n      with:\n          ruby-version: \"2.7\"\n    - name: Install deb-s3\n",
                    "rendered": {
                      "text": "        APT_SIGNING_KEY: ${{ secrets.APT_SIGNING_KEY }}\n    - name: Get binary packages\n      uses: actions/download-artifact@v2\n    - name: Setup ruby\n      uses: ruby/setup-ruby@v1\n      with:\n          ruby-version: \"2.7\"\n    - name: Install deb-s3\n",
                      "markdown": "`        APT_SIGNING_KEY: ${{ secrets.APT_SIGNING_KEY }}\n    - name: Get binary packages\n      uses: actions/download-artifact@v2\n    - name: Setup ruby\n      uses: ruby/setup-ruby@v1\n      with:\n          ruby-version: \"2.7\"\n    - name: Install deb-s3\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 17,
                  "endLine": 126,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    environment: build\n    needs: smoke-test-packages\n    steps:\n    - name: Setup APT Signing key\n      run: |\n          mkdir -m 0700 -p ~/.gnupg\n          echo \"$APT_SIGNING_KEY\" | gpg --import\n",
                    "rendered": {
                      "text": "    environment: build\n    needs: smoke-test-packages\n    steps:\n    - name: Setup APT Signing key\n      run: |\n          mkdir -m 0700 -p ~/.gnupg\n          echo \"$APT_SIGNING_KEY\" | gpg --import\n",
                      "markdown": "`    environment: build\n    needs: smoke-test-packages\n    steps:\n    - name: Setup APT Signing key\n      run: |\n          mkdir -m 0700 -p ~/.gnupg\n          echo \"$APT_SIGNING_KEY\" | gpg --import\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 78,
                  "endLine": 116,
                  "endColumn": 83,
                  "snippet": {
                    "text": "    - name: Install packages\n      run: |\n        apt-get update\n        cd binary-$(echo ${{ matrix.image }} | cut -d: -f2)-${{ env.ARCH }} && apt install --yes ./*.deb\n\n  publish-to-apt:\n    if: github.event.release.prerelease == false\n",
                    "rendered": {
                      "text": "    - name: Install packages\n      run: |\n        apt-get update\n        cd binary-$(echo ${{ matrix.image }} | cut -d: -f2)-${{ env.ARCH }} && apt install --yes ./*.deb\n\n  publish-to-apt:\n    if: github.event.release.prerelease == false\n",
                      "markdown": "`    - name: Install packages\n      run: |\n        apt-get update\n        cd binary-$(echo ${{ matrix.image }} | cut -d: -f2)-${{ env.ARCH }} && apt install --yes ./*.deb\n\n  publish-to-apt:\n    if: github.event.release.prerelease == false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 46,
                  "endLine": 116,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    - name: Install packages\n      run: |\n        apt-get update\n        cd binary-$(echo ${{ matrix.image }} | cut -d: -f2)-${{ env.ARCH }} && apt install --yes ./*.deb\n\n  publish-to-apt:\n    if: github.event.release.prerelease == false\n",
                    "rendered": {
                      "text": "    - name: Install packages\n      run: |\n        apt-get update\n        cd binary-$(echo ${{ matrix.image }} | cut -d: -f2)-${{ env.ARCH }} && apt install --yes ./*.deb\n\n  publish-to-apt:\n    if: github.event.release.prerelease == false\n",
                      "markdown": "`    - name: Install packages\n      run: |\n        apt-get update\n        cd binary-$(echo ${{ matrix.image }} | cut -d: -f2)-${{ env.ARCH }} && apt install --yes ./*.deb\n\n  publish-to-apt:\n    if: github.event.release.prerelease == false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 7,
                  "endLine": 115,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      uses: actions/download-artifact@v2\n    - name: Install packages\n      run: |\n        apt-get update\n        cd binary-$(echo ${{ matrix.image }} | cut -d: -f2)-${{ env.ARCH }} && apt install --yes ./*.deb\n\n  publish-to-apt:\n",
                    "rendered": {
                      "text": "      uses: actions/download-artifact@v2\n    - name: Install packages\n      run: |\n        apt-get update\n        cd binary-$(echo ${{ matrix.image }} | cut -d: -f2)-${{ env.ARCH }} && apt install --yes ./*.deb\n\n  publish-to-apt:\n",
                      "markdown": "`      uses: actions/download-artifact@v2\n    - name: Install packages\n      run: |\n        apt-get update\n        cd binary-$(echo ${{ matrix.image }} | cut -d: -f2)-${{ env.ARCH }} && apt install --yes ./*.deb\n\n  publish-to-apt:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 14,
                  "endLine": 73,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            sbuild debhelper\n          sudo sbuild-adduser $USER\n    - name: Prepare sbuild environment\n",
                    "rendered": {
                      "text": "    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            sbuild debhelper\n          sudo sbuild-adduser $USER\n    - name: Prepare sbuild environment\n",
                      "markdown": "`    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            sbuild debhelper\n          sudo sbuild-adduser $USER\n    - name: Prepare sbuild environment\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 14,
                  "endLine": 72,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        APT_SIGNING_KEY: ${{ secrets.APT_SIGNING_KEY }}\n    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            sbuild debhelper\n          sudo sbuild-adduser $USER\n",
                    "rendered": {
                      "text": "        APT_SIGNING_KEY: ${{ secrets.APT_SIGNING_KEY }}\n    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            sbuild debhelper\n          sudo sbuild-adduser $USER\n",
                      "markdown": "`        APT_SIGNING_KEY: ${{ secrets.APT_SIGNING_KEY }}\n    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            sbuild debhelper\n          sudo sbuild-adduser $USER\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 17,
                  "endLine": 64,
                  "endColumn": 22,
                  "snippet": {
                    "text": "              BUILD_ARCH=amd64\n          fi\n          echo \"BUILD_ARCH=${BUILD_ARCH}\" >> $GITHUB_ENV\n    - name: Setup APT Signing key\n      run: |\n          mkdir -m 0700 -p ~/.gnupg\n          echo \"$APT_SIGNING_KEY\" | gpg --import\n",
                    "rendered": {
                      "text": "              BUILD_ARCH=amd64\n          fi\n          echo \"BUILD_ARCH=${BUILD_ARCH}\" >> $GITHUB_ENV\n    - name: Setup APT Signing key\n      run: |\n          mkdir -m 0700 -p ~/.gnupg\n          echo \"$APT_SIGNING_KEY\" | gpg --import\n",
                      "markdown": "`              BUILD_ARCH=amd64\n          fi\n          echo \"BUILD_ARCH=${BUILD_ARCH}\" >> $GITHUB_ENV\n    - name: Setup APT Signing key\n      run: |\n          mkdir -m 0700 -p ~/.gnupg\n          echo \"$APT_SIGNING_KEY\" | gpg --import\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 14,
                  "endLine": 20,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            debhelper dput libevent-dev libpcre2-dev libssl-dev pkg-config\n    - name: Create changelog\n      env:\n",
                    "rendered": {
                      "text": "    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            debhelper dput libevent-dev libpcre2-dev libssl-dev pkg-config\n    - name: Create changelog\n      env:\n",
                      "markdown": "`    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            debhelper dput libevent-dev libpcre2-dev libssl-dev pkg-config\n    - name: Create changelog\n      env:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 14,
                  "endLine": 19,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        path: sources\n    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            debhelper dput libevent-dev libpcre2-dev libssl-dev pkg-config\n    - name: Create changelog\n",
                    "rendered": {
                      "text": "        path: sources\n    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            debhelper dput libevent-dev libpcre2-dev libssl-dev pkg-config\n    - name: Create changelog\n",
                      "markdown": "`        path: sources\n    - name: Install dependencies\n      run: |\n          sudo apt-get update && \\\n          sudo apt-get install \\\n            debhelper dput libevent-dev libpcre2-dev libssl-dev pkg-config\n    - name: Create changelog\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 26,
                  "endLine": 2,
                  "snippet": {
                    "text": "name: Build and Publish to APT\n\non:\n  release:\n    types: [published]\n",
                    "rendered": {
                      "text": "name: Build and Publish to APT\n\non:\n  release:\n    types: [published]\n",
                      "markdown": "`name: Build and Publish to APT\n\non:\n  release:\n    types: [published]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 7,
                  "endLine": 101,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      if: matrix.platform == 'ubuntu-latest'\n      run: |\n        make code-coverage-capture\n        bash <(curl -s https://codecov.io/bash) -f memtier_benchmark-*-coverage.info || echo \"Codecov did not collect coverage reports\"\n\n  build-macos:\n    strategy:\n",
                    "rendered": {
                      "text": "      if: matrix.platform == 'ubuntu-latest'\n      run: |\n        make code-coverage-capture\n        bash <(curl -s https://codecov.io/bash) -f memtier_benchmark-*-coverage.info || echo \"Codecov did not collect coverage reports\"\n\n  build-macos:\n    strategy:\n",
                      "markdown": "`      if: matrix.platform == 'ubuntu-latest'\n      run: |\n        make code-coverage-capture\n        bash <(curl -s https://codecov.io/bash) -f memtier_benchmark-*-coverage.info || echo \"Codecov did not collect coverage reports\"\n\n  build-macos:\n    strategy:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 24,
                  "endLine": 46,
                  "snippet": {
                    "text": "      run: |\n        curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n        sudo service redis-server stop\n\n    - name: Increase connection limit\n",
                    "rendered": {
                      "text": "      run: |\n        curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n        sudo service redis-server stop\n\n    - name: Increase connection limit\n",
                      "markdown": "`      run: |\n        curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n        sudo service redis-server stop\n\n    - name: Increase connection limit\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 24,
                  "endLine": 28,
                  "snippet": {
                    "text": "    - uses: actions/checkout@v2\n    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev libssl-dev\n\n    - name: Build\n      run: autoreconf -ivf && ./configure --enable-code-coverage && make -j\n",
                    "rendered": {
                      "text": "    - uses: actions/checkout@v2\n    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev libssl-dev\n\n    - name: Build\n      run: autoreconf -ivf && ./configure --enable-code-coverage && make -j\n",
                      "markdown": "`    - uses: actions/checkout@v2\n    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev libssl-dev\n\n    - name: Build\n      run: autoreconf -ivf && ./configure --enable-code-coverage && make -j\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 24,
                  "endLine": 13,
                  "snippet": {
                    "text": "    - uses: actions/checkout@v2\n    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev\n\n    - name: Build\n      run: autoreconf -ivf && ./configure --disable-tls && make -j\n",
                    "rendered": {
                      "text": "    - uses: actions/checkout@v2\n    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev\n\n    - name: Build\n      run: autoreconf -ivf && ./configure --disable-tls && make -j\n",
                      "markdown": "`    - uses: actions/checkout@v2\n    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev\n\n    - name: Build\n      run: autoreconf -ivf && ./configure --disable-tls && make -j\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 19,
                  "endLine": 125,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    - uses: actions/checkout@v1\n    - name: Install dependencies\n      run: brew install autoconf automake libtool libevent pkg-config\n    - name: Install openssl v1.0.2\n      run: brew install rbenv/tap/openssl@1.0\n    - name: Build\n      run: autoreconf -ivf && PKG_CONFIG_PATH=`brew --prefix openssl@1.0`/lib/pkgconfig ./configure && make\n",
                    "rendered": {
                      "text": "    - uses: actions/checkout@v1\n    - name: Install dependencies\n      run: brew install autoconf automake libtool libevent pkg-config\n    - name: Install openssl v1.0.2\n      run: brew install rbenv/tap/openssl@1.0\n    - name: Build\n      run: autoreconf -ivf && PKG_CONFIG_PATH=`brew --prefix openssl@1.0`/lib/pkgconfig ./configure && make\n",
                      "markdown": "`    - uses: actions/checkout@v1\n    - name: Install dependencies\n      run: brew install autoconf automake libtool libevent pkg-config\n    - name: Install openssl v1.0.2\n      run: brew install rbenv/tap/openssl@1.0\n    - name: Build\n      run: autoreconf -ivf && PKG_CONFIG_PATH=`brew --prefix openssl@1.0`/lib/pkgconfig ./configure && make\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 7,
                  "endLine": 101,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      if: matrix.platform == 'ubuntu-latest'\n      run: |\n        make code-coverage-capture\n        bash <(curl -s https://codecov.io/bash) -f memtier_benchmark-*-coverage.info || echo \"Codecov did not collect coverage reports\"\n\n  build-macos:\n    strategy:\n",
                    "rendered": {
                      "text": "      if: matrix.platform == 'ubuntu-latest'\n      run: |\n        make code-coverage-capture\n        bash <(curl -s https://codecov.io/bash) -f memtier_benchmark-*-coverage.info || echo \"Codecov did not collect coverage reports\"\n\n  build-macos:\n    strategy:\n",
                      "markdown": "`      if: matrix.platform == 'ubuntu-latest'\n      run: |\n        make code-coverage-capture\n        bash <(curl -s https://codecov.io/bash) -f memtier_benchmark-*-coverage.info || echo \"Codecov did not collect coverage reports\"\n\n  build-macos:\n    strategy:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 12,
                  "endLine": 47,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n        sudo service redis-server stop\n\n    - name: Increase connection limit\n      run: |\n",
                    "rendered": {
                      "text": "        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n        sudo service redis-server stop\n\n    - name: Increase connection limit\n      run: |\n",
                      "markdown": "`        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n        sudo service redis-server stop\n\n    - name: Increase connection limit\n      run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 12,
                  "endLine": 46,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n        sudo service redis-server stop\n\n    - name: Increase connection limit\n",
                    "rendered": {
                      "text": "        curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n        sudo service redis-server stop\n\n    - name: Increase connection limit\n",
                      "markdown": "`        curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n        sudo service redis-server stop\n\n    - name: Increase connection limit\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 12,
                  "endLine": 45,
                  "endColumn": 21,
                  "snippet": {
                    "text": "      run: |\n        curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n        sudo service redis-server stop\n\n",
                    "rendered": {
                      "text": "      run: |\n        curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n        sudo service redis-server stop\n\n",
                      "markdown": "`      run: |\n        curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n        sudo service redis-server stop\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 137,
                  "endLine": 44,
                  "endColumn": 142,
                  "snippet": {
                    "text": "    - name: Install Redis\n      run: |\n        curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n        sudo service redis-server stop\n",
                    "rendered": {
                      "text": "    - name: Install Redis\n      run: |\n        curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n        sudo service redis-server stop\n",
                      "markdown": "`    - name: Install Redis\n      run: |\n        curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n        sudo service redis-server stop\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 7,
                  "endLine": 43,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n    - name: Install Redis\n      run: |\n        curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n",
                    "rendered": {
                      "text": "\n    - name: Install Redis\n      run: |\n        curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n",
                      "markdown": "`\n    - name: Install Redis\n      run: |\n        curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n        echo \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n        sudo apt-get -qq update\n        sudo apt-get install redis\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        architecture: x64\n\n    - name: Install Python dependencies\n      run: pip install -r ./tests/test_requirements.txt\n\n    - name: Install Redis\n      run: |\n",
                    "rendered": {
                      "text": "        architecture: x64\n\n    - name: Install Python dependencies\n      run: pip install -r ./tests/test_requirements.txt\n\n    - name: Install Redis\n      run: |\n",
                      "markdown": "`        architecture: x64\n\n    - name: Install Python dependencies\n      run: pip install -r ./tests/test_requirements.txt\n\n    - name: Install Redis\n      run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 12,
                  "endLine": 28,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev libssl-dev\n\n    - name: Build\n      run: autoreconf -ivf && ./configure --enable-code-coverage && make -j\n",
                    "rendered": {
                      "text": "    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev libssl-dev\n\n    - name: Build\n      run: autoreconf -ivf && ./configure --enable-code-coverage && make -j\n",
                      "markdown": "`    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev libssl-dev\n\n    - name: Build\n      run: autoreconf -ivf && ./configure --enable-code-coverage && make -j\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 12,
                  "endLine": 27,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    - uses: actions/checkout@v2\n    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev libssl-dev\n\n    - name: Build\n",
                    "rendered": {
                      "text": "    - uses: actions/checkout@v2\n    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev libssl-dev\n\n    - name: Build\n",
                      "markdown": "`    - uses: actions/checkout@v2\n    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev libssl-dev\n\n    - name: Build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 12,
                  "endLine": 13,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev\n\n    - name: Build\n      run: autoreconf -ivf && ./configure --disable-tls && make -j\n",
                    "rendered": {
                      "text": "    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev\n\n    - name: Build\n      run: autoreconf -ivf && ./configure --disable-tls && make -j\n",
                      "markdown": "`    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev\n\n    - name: Build\n      run: autoreconf -ivf && ./configure --disable-tls && make -j\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 12,
                  "endLine": 12,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    - uses: actions/checkout@v2\n    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev\n\n    - name: Build\n",
                    "rendered": {
                      "text": "    - uses: actions/checkout@v2\n    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev\n\n    - name: Build\n",
                      "markdown": "`    - uses: actions/checkout@v2\n    - name: Install dependencies\n      run: |\n        sudo apt-get -qq update\n        sudo apt-get install lcov autoconf automake pkg-config libevent-dev libpcre3-dev\n\n    - name: Build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.import"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 19,
                  "endLine": 8,
                  "endColumn": 25,
                  "snippet": {
                    "text": "columns:\n\n'dumpflags'     an integer bit-mask flags value which should generally be '0'.\n'time'          the time the item was inserted or modified, expressed in \n                seconds since the memcached startup.\n'exptime'       item's expiration time, expressed in seconds since the \n                memcached startup.                \n",
                    "rendered": {
                      "text": "columns:\n\n'dumpflags'     an integer bit-mask flags value which should generally be '0'.\n'time'          the time the item was inserted or modified, expressed in \n                seconds since the memcached startup.\n'exptime'       item's expiration time, expressed in seconds since the \n                memcached startup.                \n",
                      "markdown": "`columns:\n\n'dumpflags'     an integer bit-mask flags value which should generally be '0'.\n'time'          the time the item was inserted or modified, expressed in \n                seconds since the memcached startup.\n'exptime'       item's expiration time, expressed in seconds since the \n                memcached startup.                \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/COPYING"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 35,
                  "endLine": 330,
                  "endColumn": 39,
                  "snippet": {
                    "text": "necessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n",
                    "rendered": {
                      "text": "necessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n",
                      "markdown": "`necessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/COPYING"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 59,
                  "endLine": 290,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n",
                    "rendered": {
                      "text": "\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n",
                      "markdown": "`\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/COPYING"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 30,
                  "endLine": 204,
                  "endColumn": 34,
                  "snippet": {
                    "text": "excuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\n",
                    "rendered": {
                      "text": "excuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\n",
                      "markdown": "`excuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/COPYING"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 63,
                  "endLine": 159,
                  "endColumn": 8,
                  "snippet": {
                    "text": "The source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\n",
                    "rendered": {
                      "text": "The source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\n",
                      "markdown": "`The source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/COPYING"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 51,
                  "endLine": 142,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n",
                    "rendered": {
                      "text": "    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n",
                      "markdown": "`    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/COPYING"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 21,
                  "endLine": 126,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\n",
                    "rendered": {
                      "text": "\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\n",
                      "markdown": "`\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/COPYING"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 43,
                  "endLine": 100,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n",
                    "rendered": {
                      "text": "\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n",
                      "markdown": "`\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/COPYING"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 7,
                  "endLine": 88,
                  "endColumn": 11,
                  "snippet": {
                    "text": "along with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\n",
                    "rendered": {
                      "text": "along with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\n",
                      "markdown": "`along with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/COPYING"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 63,
                  "endLine": 54,
                  "endColumn": 67,
                  "snippet": {
                    "text": "patents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n",
                    "rendered": {
                      "text": "patents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n",
                      "markdown": "`patents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/COPYING"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 12,
                  "endLine": 250,
                  "endColumn": 18,
                  "snippet": {
                    "text": "this License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\n",
                    "rendered": {
                      "text": "this License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\n",
                      "markdown": "`this License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/COPYING"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 34,
                  "endLine": 238,
                  "endColumn": 40,
                  "snippet": {
                    "text": "the limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n",
                    "rendered": {
                      "text": "the limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n",
                      "markdown": "`the limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/COPYING"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 9,
                  "endLine": 189,
                  "endColumn": 15,
                  "snippet": {
                    "text": "all its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\n",
                    "rendered": {
                      "text": "all its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\n",
                      "markdown": "`all its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/COPYING"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 12,
                  "endLine": 51,
                  "endColumn": 18,
                  "snippet": {
                    "text": "authors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n",
                    "rendered": {
                      "text": "authors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n",
                      "markdown": "`authors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/COPYING"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 4,
                  "endLine": 24,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n",
                    "rendered": {
                      "text": "  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n",
                      "markdown": "`  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/Dockerfile.alpine"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 38,
                  "endLine": 15,
                  "snippet": {
                    "text": "LABEL Description=\"memtier_benchmark\"\nCOPY --from=builder /usr/local/bin/memtier_benchmark /usr/local/bin/memtier_benchmark\nRUN \\\n  apk add libstdc++ pcre libevent zlib openssl\n\nENTRYPOINT [\"memtier_benchmark\"]\n",
                    "rendered": {
                      "text": "LABEL Description=\"memtier_benchmark\"\nCOPY --from=builder /usr/local/bin/memtier_benchmark /usr/local/bin/memtier_benchmark\nRUN \\\n  apk add libstdc++ pcre libevent zlib openssl\n\nENTRYPOINT [\"memtier_benchmark\"]\n",
                      "markdown": "`LABEL Description=\"memtier_benchmark\"\nCOPY --from=builder /usr/local/bin/memtier_benchmark /usr/local/bin/memtier_benchmark\nRUN \\\n  apk add libstdc++ pcre libevent zlib openssl\n\nENTRYPOINT [\"memtier_benchmark\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/config_types.h"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 18,
                  "endLine": 98,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    int resolve(void);\n    pthread_mutex_t m_mutex;\n\n    std::string m_hostname;\n    int m_port;\n    struct addrinfo *m_server_addr;\n    struct addrinfo *m_used_addr;\n",
                    "rendered": {
                      "text": "    int resolve(void);\n    pthread_mutex_t m_mutex;\n\n    std::string m_hostname;\n    int m_port;\n    struct addrinfo *m_server_addr;\n    struct addrinfo *m_used_addr;\n",
                      "markdown": "`    int resolve(void);\n    pthread_mutex_t m_mutex;\n\n    std::string m_hostname;\n    int m_port;\n    struct addrinfo *m_server_addr;\n    struct addrinfo *m_used_addr;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/config_types.h"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 28,
                  "endLine": 89,
                  "endColumn": 36,
                  "snippet": {
                    "text": "};\n\nstruct server_addr {\n    server_addr(const char *hostname, int port, int resolution);\n    virtual ~server_addr();\n\n    int get_connect_info(struct connect_info *ci);\n",
                    "rendered": {
                      "text": "};\n\nstruct server_addr {\n    server_addr(const char *hostname, int port, int resolution);\n    virtual ~server_addr();\n\n    int get_connect_info(struct connect_info *ci);\n",
                      "markdown": "`};\n\nstruct server_addr {\n    server_addr(const char *hostname, int port, int resolution);\n    virtual ~server_addr();\n\n    int get_connect_info(struct connect_info *ci);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/file_io.cpp"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 57,
                  "endLine": 183,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n        int c = fgetc(m_file);\n        if (c != '\"') {\n            fprintf(stderr, \"%s:%d: warning: missing '\\\"' at end of column (got '%c').\\n\",\n                m_filename, m_line, c);\n        }\n    }\n",
                    "rendered": {
                      "text": "\n        int c = fgetc(m_file);\n        if (c != '\"') {\n            fprintf(stderr, \"%s:%d: warning: missing '\\\"' at end of column (got '%c').\\n\",\n                m_filename, m_line, c);\n        }\n    }\n",
                      "markdown": "`\n        int c = fgetc(m_file);\n        if (c != '\"') {\n            fprintf(stderr, \"%s:%d: warning: missing '\\\"' at end of column (got '%c').\\n\",\n                m_filename, m_line, c);\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/configure.ac"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 1,
                  "endLine": 86,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    AC_SUBST(LIBEVENT_CFLAGS) AC_SUBST(LIBEVENT_LIBS)\n)\n\n# bash completion\nPKG_CHECK_MODULES([BASH_COMPLETION], [bash-completion >= 2.0],\n    [BASH_COMPLETION_DIR=\"`pkg-config --variable=completionsdir bash-completion`\"],\n    [BASH_COMPLETION_DIR=\"$datadir/bash-completion/completions\"])\n",
                    "rendered": {
                      "text": "    AC_SUBST(LIBEVENT_CFLAGS) AC_SUBST(LIBEVENT_LIBS)\n)\n\n# bash completion\nPKG_CHECK_MODULES([BASH_COMPLETION], [bash-completion >= 2.0],\n    [BASH_COMPLETION_DIR=\"`pkg-config --variable=completionsdir bash-completion`\"],\n    [BASH_COMPLETION_DIR=\"$datadir/bash-completion/completions\"])\n",
                      "markdown": "`    AC_SUBST(LIBEVENT_CFLAGS) AC_SUBST(LIBEVENT_LIBS)\n)\n\n# bash completion\nPKG_CHECK_MODULES([BASH_COMPLETION], [bash-completion >= 2.0],\n    [BASH_COMPLETION_DIR=\"`pkg-config --variable=completionsdir bash-completion`\"],\n    [BASH_COMPLETION_DIR=\"$datadir/bash-completion/completions\"])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/configure.ac"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 1,
                  "endLine": 86,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    AC_SUBST(LIBEVENT_CFLAGS) AC_SUBST(LIBEVENT_LIBS)\n)\n\n# bash completion\nPKG_CHECK_MODULES([BASH_COMPLETION], [bash-completion >= 2.0],\n    [BASH_COMPLETION_DIR=\"`pkg-config --variable=completionsdir bash-completion`\"],\n    [BASH_COMPLETION_DIR=\"$datadir/bash-completion/completions\"])\n",
                    "rendered": {
                      "text": "    AC_SUBST(LIBEVENT_CFLAGS) AC_SUBST(LIBEVENT_LIBS)\n)\n\n# bash completion\nPKG_CHECK_MODULES([BASH_COMPLETION], [bash-completion >= 2.0],\n    [BASH_COMPLETION_DIR=\"`pkg-config --variable=completionsdir bash-completion`\"],\n    [BASH_COMPLETION_DIR=\"$datadir/bash-completion/completions\"])\n",
                      "markdown": "`    AC_SUBST(LIBEVENT_CFLAGS) AC_SUBST(LIBEVENT_LIBS)\n)\n\n# bash completion\nPKG_CHECK_MODULES([BASH_COMPLETION], [bash-completion >= 2.0],\n    [BASH_COMPLETION_DIR=\"`pkg-config --variable=completionsdir bash-completion`\"],\n    [BASH_COMPLETION_DIR=\"$datadir/bash-completion/completions\"])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/dockers.yml"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 10,
                  "endLine": 32,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      - uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: build and push in master\n        uses: docker/build-push-action@v4\n",
                    "rendered": {
                      "text": "      - uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: build and push in master\n        uses: docker/build-push-action@v4\n",
                      "markdown": "`      - uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: build and push in master\n        uses: docker/build-push-action@v4\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/bash-completion/memtier_benchmark"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 13,
                  "endLine": 2,
                  "snippet": {
                    "text": "#/usr/bin/env bash\n\n_memtier_look_for_element () {\n  local op prev=\"$1\" cur=\"$2\"\n  shift\n",
                    "rendered": {
                      "text": "#/usr/bin/env bash\n\n_memtier_look_for_element () {\n  local op prev=\"$1\" cur=\"$2\"\n  shift\n",
                      "markdown": "`#/usr/bin/env bash\n\n_memtier_look_for_element () {\n  local op prev=\"$1\" cur=\"$2\"\n  shift\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/bash-completion/memtier_benchmark"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 13,
                  "endLine": 2,
                  "snippet": {
                    "text": "#/usr/bin/env bash\n\n_memtier_look_for_element () {\n  local op prev=\"$1\" cur=\"$2\"\n  shift\n",
                    "rendered": {
                      "text": "#/usr/bin/env bash\n\n_memtier_look_for_element () {\n  local op prev=\"$1\" cur=\"$2\"\n  shift\n",
                      "markdown": "`#/usr/bin/env bash\n\n_memtier_look_for_element () {\n  local op prev=\"$1\" cur=\"$2\"\n  shift\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/m4/ax_code_coverage.m4"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 49,
                  "endLine": 190,
                  "endColumn": 54,
                  "snippet": {
                    "text": "#  - CODE_COVERAGE_IGNORE_PATTERN: Extra glob pattern of files to ignore\n#\n# The generated report will be titled using the $(PACKAGE_NAME) and\n# $(PACKAGE_VERSION). In order to add the current git hash to the title,\n# use the git-version-gen script, available online.\n\n# Optional variables\n",
                    "rendered": {
                      "text": "#  - CODE_COVERAGE_IGNORE_PATTERN: Extra glob pattern of files to ignore\n#\n# The generated report will be titled using the $(PACKAGE_NAME) and\n# $(PACKAGE_VERSION). In order to add the current git hash to the title,\n# use the git-version-gen script, available online.\n\n# Optional variables\n",
                      "markdown": "`#  - CODE_COVERAGE_IGNORE_PATTERN: Extra glob pattern of files to ignore\n#\n# The generated report will be titled using the $(PACKAGE_NAME) and\n# $(PACKAGE_VERSION). In order to add the current git hash to the title,\n# use the git-version-gen script, available online.\n\n# Optional variables\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/m4/ax_code_coverage.m4"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 26,
                  "endLine": 139,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\tesac\n\n\t\tAS_IF([ test -z \"$GENHTML\" ], [\n\t\t\tAC_MSG_ERROR([Could not find genhtml from the lcov package])\n\t\t])\n\n\t\tdnl Build the code coverage flags\n",
                    "rendered": {
                      "text": "\t\tesac\n\n\t\tAS_IF([ test -z \"$GENHTML\" ], [\n\t\t\tAC_MSG_ERROR([Could not find genhtml from the lcov package])\n\t\t])\n\n\t\tdnl Build the code coverage flags\n",
                      "markdown": "`\t\tesac\n\n\t\tAS_IF([ test -z \"$GENHTML\" ], [\n\t\t\tAC_MSG_ERROR([Could not find genhtml from the lcov package])\n\t\t])\n\n\t\tdnl Build the code coverage flags\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/protocol.cpp"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 12,
                  "endLine": 259,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            (int) user_len,\n            user,\n            strlen(password),\n            password);\n    }\n    return size;\n}\n",
                    "rendered": {
                      "text": "            (int) user_len,\n            user,\n            strlen(password),\n            password);\n    }\n    return size;\n}\n",
                      "markdown": "`            (int) user_len,\n            user,\n            strlen(password),\n            password);\n    }\n    return size;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/protocol.cpp"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 19,
                  "endLine": 258,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            user_len,\n            (int) user_len,\n            user,\n            strlen(password),\n            password);\n    }\n    return size;\n",
                    "rendered": {
                      "text": "            user_len,\n            (int) user_len,\n            user,\n            strlen(password),\n            password);\n    }\n    return size;\n",
                      "markdown": "`            user_len,\n            (int) user_len,\n            user,\n            strlen(password),\n            password);\n    }\n    return size;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/protocol.cpp"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 26,
                  "endLine": 246,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            \"%s\\r\\n\",\n            strlen(password), password);\n    } else {\n        size_t user_len = password - user - 1;\n        size = evbuffer_add_printf(m_write_buf,\n            \"*3\\r\\n\"\n            \"$4\\r\\n\"\n",
                    "rendered": {
                      "text": "            \"%s\\r\\n\",\n            strlen(password), password);\n    } else {\n        size_t user_len = password - user - 1;\n        size = evbuffer_add_printf(m_write_buf,\n            \"*3\\r\\n\"\n            \"$4\\r\\n\"\n",
                      "markdown": "`            \"%s\\r\\n\",\n            strlen(password), password);\n    } else {\n        size_t user_len = password - user - 1;\n        size = evbuffer_add_printf(m_write_buf,\n            \"*3\\r\\n\"\n            \"$4\\r\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/protocol.cpp"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 30,
                  "endLine": 244,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            \"AUTH\\r\\n\"\n            \"$%zu\\r\\n\"\n            \"%s\\r\\n\",\n            strlen(password), password);\n    } else {\n        size_t user_len = password - user - 1;\n        size = evbuffer_add_printf(m_write_buf,\n",
                    "rendered": {
                      "text": "            \"AUTH\\r\\n\"\n            \"$%zu\\r\\n\"\n            \"%s\\r\\n\",\n            strlen(password), password);\n    } else {\n        size_t user_len = password - user - 1;\n        size = evbuffer_add_printf(m_write_buf,\n",
                      "markdown": "`            \"AUTH\\r\\n\"\n            \"$%zu\\r\\n\"\n            \"%s\\r\\n\",\n            strlen(password), password);\n    } else {\n        size_t user_len = password - user - 1;\n        size = evbuffer_add_printf(m_write_buf,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/protocol.cpp"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 19,
                  "endLine": 244,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            \"AUTH\\r\\n\"\n            \"$%zu\\r\\n\"\n            \"%s\\r\\n\",\n            strlen(password), password);\n    } else {\n        size_t user_len = password - user - 1;\n        size = evbuffer_add_printf(m_write_buf,\n",
                    "rendered": {
                      "text": "            \"AUTH\\r\\n\"\n            \"$%zu\\r\\n\"\n            \"%s\\r\\n\",\n            strlen(password), password);\n    } else {\n        size_t user_len = password - user - 1;\n        size = evbuffer_add_printf(m_write_buf,\n",
                      "markdown": "`            \"AUTH\\r\\n\"\n            \"$%zu\\r\\n\"\n            \"%s\\r\\n\",\n            strlen(password), password);\n    } else {\n        size_t user_len = password - user - 1;\n        size = evbuffer_add_printf(m_write_buf,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/protocol.cpp"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 12,
                  "endLine": 233,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            password = credentials;\n        } else {\n            user = credentials;\n            password++;\n        }\n    }\n\n",
                    "rendered": {
                      "text": "            password = credentials;\n        } else {\n            user = credentials;\n            password++;\n        }\n    }\n\n",
                      "markdown": "`            password = credentials;\n        } else {\n            user = credentials;\n            password++;\n        }\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/protocol.cpp"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 12,
                  "endLine": 230,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    } else {\n        password = strchr(credentials, ':');\n        if (!password) {\n            password = credentials;\n        } else {\n            user = credentials;\n            password++;\n",
                    "rendered": {
                      "text": "    } else {\n        password = strchr(credentials, ':');\n        if (!password) {\n            password = credentials;\n        } else {\n            user = credentials;\n            password++;\n",
                      "markdown": "`    } else {\n        password = strchr(credentials, ':');\n        if (!password) {\n            password = credentials;\n        } else {\n            user = credentials;\n            password++;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/protocol.cpp"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 13,
                  "endLine": 229,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        password = credentials + 1;\n    } else {\n        password = strchr(credentials, ':');\n        if (!password) {\n            password = credentials;\n        } else {\n            user = credentials;\n",
                    "rendered": {
                      "text": "        password = credentials + 1;\n    } else {\n        password = strchr(credentials, ':');\n        if (!password) {\n            password = credentials;\n        } else {\n            user = credentials;\n",
                      "markdown": "`        password = credentials + 1;\n    } else {\n        password = strchr(credentials, ':');\n        if (!password) {\n            password = credentials;\n        } else {\n            user = credentials;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/protocol.cpp"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 8,
                  "endLine": 228,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    if (credentials[0] == ':') {\n        password = credentials + 1;\n    } else {\n        password = strchr(credentials, ':');\n        if (!password) {\n            password = credentials;\n        } else {\n",
                    "rendered": {
                      "text": "    if (credentials[0] == ':') {\n        password = credentials + 1;\n    } else {\n        password = strchr(credentials, ':');\n        if (!password) {\n            password = credentials;\n        } else {\n",
                      "markdown": "`    if (credentials[0] == ':') {\n        password = credentials + 1;\n    } else {\n        password = strchr(credentials, ':');\n        if (!password) {\n            password = credentials;\n        } else {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/protocol.cpp"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 8,
                  "endLine": 226,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    const char *password;\n\n    if (credentials[0] == ':') {\n        password = credentials + 1;\n    } else {\n        password = strchr(credentials, ':');\n        if (!password) {\n",
                    "rendered": {
                      "text": "    const char *password;\n\n    if (credentials[0] == ':') {\n        password = credentials + 1;\n    } else {\n        password = strchr(credentials, ':');\n        if (!password) {\n",
                      "markdown": "`    const char *password;\n\n    if (credentials[0] == ':') {\n        password = credentials + 1;\n    } else {\n        password = strchr(credentials, ':');\n        if (!password) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/protocol.cpp"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 16,
                  "endLine": 223,
                  "endColumn": 24,
                  "snippet": {
                    "text": "     */\n\n    const char *user = NULL;\n    const char *password;\n\n    if (credentials[0] == ':') {\n        password = credentials + 1;\n",
                    "rendered": {
                      "text": "     */\n\n    const char *user = NULL;\n    const char *password;\n\n    if (credentials[0] == ':') {\n        password = credentials + 1;\n",
                      "markdown": "`     */\n\n    const char *user = NULL;\n    const char *password;\n\n    if (credentials[0] == ':') {\n        password = credentials + 1;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/protocol.cpp"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 68,
                  "endLine": 218,
                  "endColumn": 76,
                  "snippet": {
                    "text": "     * <PASSWORD>           For Redis <6.0 simple AUTH commands.\n     * <USER>:<PASSWORD>    For Redis 6.0+ AUTH with both username and password.\n     *\n     * A :<PASSWORD> will be handled as a special case of quoting a password that\n     * contains a colon.\n     */\n\n",
                    "rendered": {
                      "text": "     * <PASSWORD>           For Redis <6.0 simple AUTH commands.\n     * <USER>:<PASSWORD>    For Redis 6.0+ AUTH with both username and password.\n     *\n     * A :<PASSWORD> will be handled as a special case of quoting a password that\n     * contains a colon.\n     */\n\n",
                      "markdown": "`     * <PASSWORD>           For Redis <6.0 simple AUTH commands.\n     * <USER>:<PASSWORD>    For Redis 6.0+ AUTH with both username and password.\n     *\n     * A :<PASSWORD> will be handled as a special case of quoting a password that\n     * contains a colon.\n     */\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/protocol.cpp"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 11,
                  "endLine": 218,
                  "endColumn": 19,
                  "snippet": {
                    "text": "     * <PASSWORD>           For Redis <6.0 simple AUTH commands.\n     * <USER>:<PASSWORD>    For Redis 6.0+ AUTH with both username and password.\n     *\n     * A :<PASSWORD> will be handled as a special case of quoting a password that\n     * contains a colon.\n     */\n\n",
                    "rendered": {
                      "text": "     * <PASSWORD>           For Redis <6.0 simple AUTH commands.\n     * <USER>:<PASSWORD>    For Redis 6.0+ AUTH with both username and password.\n     *\n     * A :<PASSWORD> will be handled as a special case of quoting a password that\n     * contains a colon.\n     */\n\n",
                      "markdown": "`     * <PASSWORD>           For Redis <6.0 simple AUTH commands.\n     * <USER>:<PASSWORD>    For Redis 6.0+ AUTH with both username and password.\n     *\n     * A :<PASSWORD> will be handled as a special case of quoting a password that\n     * contains a colon.\n     */\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/protocol.cpp"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 71,
                  "endLine": 216,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\n    /* Credentials may be one of:\n     * <PASSWORD>           For Redis <6.0 simple AUTH commands.\n     * <USER>:<PASSWORD>    For Redis 6.0+ AUTH with both username and password.\n     *\n     * A :<PASSWORD> will be handled as a special case of quoting a password that\n     * contains a colon.\n",
                    "rendered": {
                      "text": "\n    /* Credentials may be one of:\n     * <PASSWORD>           For Redis <6.0 simple AUTH commands.\n     * <USER>:<PASSWORD>    For Redis 6.0+ AUTH with both username and password.\n     *\n     * A :<PASSWORD> will be handled as a special case of quoting a password that\n     * contains a colon.\n",
                      "markdown": "`\n    /* Credentials may be one of:\n     * <PASSWORD>           For Redis <6.0 simple AUTH commands.\n     * <USER>:<PASSWORD>    For Redis 6.0+ AUTH with both username and password.\n     *\n     * A :<PASSWORD> will be handled as a special case of quoting a password that\n     * contains a colon.\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/protocol.cpp"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 15,
                  "endLine": 216,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n    /* Credentials may be one of:\n     * <PASSWORD>           For Redis <6.0 simple AUTH commands.\n     * <USER>:<PASSWORD>    For Redis 6.0+ AUTH with both username and password.\n     *\n     * A :<PASSWORD> will be handled as a special case of quoting a password that\n     * contains a colon.\n",
                    "rendered": {
                      "text": "\n    /* Credentials may be one of:\n     * <PASSWORD>           For Redis <6.0 simple AUTH commands.\n     * <USER>:<PASSWORD>    For Redis 6.0+ AUTH with both username and password.\n     *\n     * A :<PASSWORD> will be handled as a special case of quoting a password that\n     * contains a colon.\n",
                      "markdown": "`\n    /* Credentials may be one of:\n     * <PASSWORD>           For Redis <6.0 simple AUTH commands.\n     * <USER>:<PASSWORD>    For Redis 6.0+ AUTH with both username and password.\n     *\n     * A :<PASSWORD> will be handled as a special case of quoting a password that\n     * contains a colon.\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/protocol.cpp"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 8,
                  "endLine": 215,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    assert(credentials != NULL);\n\n    /* Credentials may be one of:\n     * <PASSWORD>           For Redis <6.0 simple AUTH commands.\n     * <USER>:<PASSWORD>    For Redis 6.0+ AUTH with both username and password.\n     *\n     * A :<PASSWORD> will be handled as a special case of quoting a password that\n",
                    "rendered": {
                      "text": "    assert(credentials != NULL);\n\n    /* Credentials may be one of:\n     * <PASSWORD>           For Redis <6.0 simple AUTH commands.\n     * <USER>:<PASSWORD>    For Redis 6.0+ AUTH with both username and password.\n     *\n     * A :<PASSWORD> will be handled as a special case of quoting a password that\n",
                      "markdown": "`    assert(credentials != NULL);\n\n    /* Credentials may be one of:\n     * <PASSWORD>           For Redis <6.0 simple AUTH commands.\n     * <USER>:<PASSWORD>    For Redis 6.0+ AUTH with both username and password.\n     *\n     * A :<PASSWORD> will be handled as a special case of quoting a password that\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 107,
                  "endLine": 191,
                  "endColumn": 170,
                  "snippet": {
                    "text": "\n### Using rate-limiting for informed benchmarking\n\nWhen you impose a rate limit on your benchmark tests, you're essentially mimicking a controlled production environment. This setup is crucial for understanding how latency behaves under certain throughput constraints. Here's why benchmarking latency in a rate-limited scenario is important:\n\n\n1. **Realistic Performance Metrics**: In real-world scenarios, systems often operate under various limitations. Understanding how these limitations affect latency gives you a more accurate picture of system performance, than simply running benchmarks at full stress level.\n",
                    "rendered": {
                      "text": "\n### Using rate-limiting for informed benchmarking\n\nWhen you impose a rate limit on your benchmark tests, you're essentially mimicking a controlled production environment. This setup is crucial for understanding how latency behaves under certain throughput constraints. Here's why benchmarking latency in a rate-limited scenario is important:\n\n\n1. **Realistic Performance Metrics**: In real-world scenarios, systems often operate under various limitations. Understanding how these limitations affect latency gives you a more accurate picture of system performance, than simply running benchmarks at full stress level.\n",
                      "markdown": "`\n### Using rate-limiting for informed benchmarking\n\nWhen you impose a rate limit on your benchmark tests, you're essentially mimicking a controlled production environment. This setup is crucial for understanding how latency behaves under certain throughput constraints. Here's why benchmarking latency in a rate-limited scenario is important:\n\n\n1. **Realistic Performance Metrics**: In real-world scenarios, systems often operate under various limitations. Understanding how these limitations affect latency gives you a more accurate picture of system performance, than simply running benchmarks at full stress level.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 102,
                  "endLine": 231,
                  "endColumn": 106,
                  "snippet": {
                    "text": "togram/HdrHistogram_c). On memtier_benchmark we’ve decided to use the  HdrHistogram due to its low memory footprint, high precision, zero allocation during the benchmark and constant access time.\n\n\nBy default Memtier will output the 50th, 99th, and 99.9th percentiles. They are the latency thresholds at which 50%, 99%, and 99.9% of commands are faster than that particular presented value. \nTo output different percentiles you should use the --print-percentiles option followed by the comma separated list of values ( example: `--print-percentiles 90,99,99.9,99.99` ).\n\n#### Saving the full latency spec",
                    "rendered": {
                      "text": "togram/HdrHistogram_c). On memtier_benchmark we’ve decided to use the  HdrHistogram due to its low memory footprint, high precision, zero allocation during the benchmark and constant access time.\n\n\nBy default Memtier will output the 50th, 99th, and 99.9th percentiles. They are the latency thresholds at which 50%, 99%, and 99.9% of commands are faster than that particular presented value. \nTo output different percentiles you should use the --print-percentiles option followed by the comma separated list of values ( example: `--print-percentiles 90,99,99.9,99.99` ).\n\n#### Saving the full latency spec",
                      "markdown": "`togram/HdrHistogram_c). On memtier_benchmark we’ve decided to use the  HdrHistogram due to its low memory footprint, high precision, zero allocation during the benchmark and constant access time.\n\n\nBy default Memtier will output the 50th, 99th, and 99.9th percentiles. They are the latency thresholds at which 50%, 99%, and 99.9% of commands are faster than that particular presented value. \nTo output different percentiles you should use the --print-percentiles option followed by the comma separated list of values ( example: `--print-percentiles 90,99,99.9,99.99` ).\n\n#### Saving the full latency spec`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 348,
                  "endLine": 228,
                  "endColumn": 352,
                  "snippet": {
                    "text": "ples are usually taken at regular intervals. However, since the data does not obey to a normal distribution it would be very expensive to keep equally spaced intervals of latency records while enabling large value ranges. We can apply algorithms that can calculate a good approximation of percentiles at minimal CPU and memory cost, such as [t-digest](https://github.com/tdunning/t-digest) or [HdrHistogram](https://github.com/HdrHistogram/HdrHistogram_c). On memtier_benchmark we’ve decided to use the  HdrHistogram due to its low memory footprint, high precision, zero allocation during the benchmark a",
                    "rendered": {
                      "text": "ples are usually taken at regular intervals. However, since the data does not obey to a normal distribution it would be very expensive to keep equally spaced intervals of latency records while enabling large value ranges. We can apply algorithms that can calculate a good approximation of percentiles at minimal CPU and memory cost, such as [t-digest](https://github.com/tdunning/t-digest) or [HdrHistogram](https://github.com/HdrHistogram/HdrHistogram_c). On memtier_benchmark we’ve decided to use the  HdrHistogram due to its low memory footprint, high precision, zero allocation during the benchmark a",
                      "markdown": "`ples are usually taken at regular intervals. However, since the data does not obey to a normal distribution it would be very expensive to keep equally spaced intervals of latency records while enabling large value ranges. We can apply algorithms that can calculate a good approximation of percentiles at minimal CPU and memory cost, such as [t-digest](https://github.com/tdunning/t-digest) or [HdrHistogram](https://github.com/HdrHistogram/HdrHistogram_c). On memtier_benchmark we’ve decided to use the  HdrHistogram due to its low memory footprint, high precision, zero allocation during the benchmark a`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 70,
                  "endLine": 228,
                  "endColumn": 74,
                  "snippet": {
                    "text": "ing just the mean, which tries to express the whole distribution in a single result, we can use a sampling of the distribution at intervals -- percentiles, which tell you how many requests actually would experience that delay. \n\n\nWhen used for normally distributed data, the samples are usually taken at regular intervals. However, since the data does not obey to a normal distribution it would be very expensive to keep equally spaced intervals of latency records while enabling large value ranges. We can apply algorithms that can calculate a good approximation of percentiles at minimal CPU and memory",
                    "rendered": {
                      "text": "ing just the mean, which tries to express the whole distribution in a single result, we can use a sampling of the distribution at intervals -- percentiles, which tell you how many requests actually would experience that delay. \n\n\nWhen used for normally distributed data, the samples are usually taken at regular intervals. However, since the data does not obey to a normal distribution it would be very expensive to keep equally spaced intervals of latency records while enabling large value ranges. We can apply algorithms that can calculate a good approximation of percentiles at minimal CPU and memory",
                      "markdown": "`ing just the mean, which tries to express the whole distribution in a single result, we can use a sampling of the distribution at intervals -- percentiles, which tell you how many requests actually would experience that delay. \n\n\nWhen used for normally distributed data, the samples are usually taken at regular intervals. However, since the data does not obey to a normal distribution it would be very expensive to keep equally spaced intervals of latency records while enabling large value ranges. We can apply algorithms that can calculate a good approximation of percentiles at minimal CPU and memory`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 272,
                  "endLine": 225,
                  "endColumn": 276,
                  "snippet": {
                    "text": " latency spectrum analysis\n\nFor distributions that are non-normal, such as the latency, many “basic rules” of normally distributed statistics are violated.  Instead of computing just the mean, which tries to express the whole distribution in a single result, we can use a sampling of the distribution at intervals -- percentiles, which tell you how many requests actually would experience that delay. \n\n\nWhen used for normally distributed data, the samples are usually taken at regular intervals. However, since the data does not obey to a normal distribution it would be very expensive to keep equally s",
                    "rendered": {
                      "text": " latency spectrum analysis\n\nFor distributions that are non-normal, such as the latency, many “basic rules” of normally distributed statistics are violated.  Instead of computing just the mean, which tries to express the whole distribution in a single result, we can use a sampling of the distribution at intervals -- percentiles, which tell you how many requests actually would experience that delay. \n\n\nWhen used for normally distributed data, the samples are usually taken at regular intervals. However, since the data does not obey to a normal distribution it would be very expensive to keep equally s",
                      "markdown": "` latency spectrum analysis\n\nFor distributions that are non-normal, such as the latency, many “basic rules” of normally distributed statistics are violated.  Instead of computing just the mean, which tries to express the whole distribution in a single result, we can use a sampling of the distribution at intervals -- percentiles, which tell you how many requests actually would experience that delay. \n\n\nWhen used for normally distributed data, the samples are usually taken at regular intervals. However, since the data does not obey to a normal distribution it would be very expensive to keep equally s`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 69,
                  "endLine": 217,
                  "endColumn": 73,
                  "snippet": {
                    "text": "Note: When using rate-limiting together with cluster-mode option, the rate-limit is associated to the connection for each node.\n\n\n#### Rate limited example: 100% writes, 1M Keys, 60 seconds benchmark at 10K RPS\n\n```\nmemtier_benchmark --ratio=1:0 --test-time=60 --rate-limiting=100 -t 2 -c 50 --key-pattern=P:P --key-maximum 1000000\n",
                    "rendered": {
                      "text": "Note: When using rate-limiting together with cluster-mode option, the rate-limit is associated to the connection for each node.\n\n\n#### Rate limited example: 100% writes, 1M Keys, 60 seconds benchmark at 10K RPS\n\n```\nmemtier_benchmark --ratio=1:0 --test-time=60 --rate-limiting=100 -t 2 -c 50 --key-pattern=P:P --key-maximum 1000000\n",
                      "markdown": "`Note: When using rate-limiting together with cluster-mode option, the rate-limit is associated to the connection for each node.\n\n\n#### Rate limited example: 100% writes, 1M Keys, 60 seconds benchmark at 10K RPS\n\n```\nmemtier_benchmark --ratio=1:0 --test-time=60 --rate-limiting=100 -t 2 -c 50 --key-pattern=P:P --key-maximum 1000000\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 131,
                  "endLine": 198,
                  "endColumn": 135,
                  "snippet": {
                    "text": "ter plan for scaling your infrastructure. It helps in identifying at what point increased load leads to unacceptable latency, guiding decisions about when to scale up.\n\n1. **Quality of Service (QoS) Guarantees**: For services that require a certain level of performance guarantee, knowing the latency at specific rate limits helps in setting realistic QoS benchmarks.\n\n1. **Identifying Bottlenecks**: Rate-limited benchmarking can help in identifying bottlenecks in your system. If latency increases disproportionately with a small increase in rate limit, it may indicate a bottleneck that needs attentio",
                    "rendered": {
                      "text": "ter plan for scaling your infrastructure. It helps in identifying at what point increased load leads to unacceptable latency, guiding decisions about when to scale up.\n\n1. **Quality of Service (QoS) Guarantees**: For services that require a certain level of performance guarantee, knowing the latency at specific rate limits helps in setting realistic QoS benchmarks.\n\n1. **Identifying Bottlenecks**: Rate-limited benchmarking can help in identifying bottlenecks in your system. If latency increases disproportionately with a small increase in rate limit, it may indicate a bottleneck that needs attentio",
                      "markdown": "`ter plan for scaling your infrastructure. It helps in identifying at what point increased load leads to unacceptable latency, guiding decisions about when to scale up.\n\n1. **Quality of Service (QoS) Guarantees**: For services that require a certain level of performance guarantee, knowing the latency at specific rate limits helps in setting realistic QoS benchmarks.\n\n1. **Identifying Bottlenecks**: Rate-limited benchmarking can help in identifying bottlenecks in your system. If latency increases disproportionately with a small increase in rate limit, it may indicate a bottleneck that needs attentio`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 149,
                  "endLine": 196,
                  "endColumn": 153,
                  "snippet": {
                    "text": "ng how these limitations affect latency gives you a more accurate picture of system performance, than simply running benchmarks at full stress level.\n\n1. **Capacity Planning**: By observing latency at different rate limits, you can better plan for scaling your infrastructure. It helps in identifying at what point increased load leads to unacceptable latency, guiding decisions about when to scale up.\n\n1. **Quality of Service (QoS) Guarantees**: For services that require a certain level of performance guarantee, knowing the latency at specific rate limits helps in setting realistic QoS benchmarks.\n\n",
                    "rendered": {
                      "text": "ng how these limitations affect latency gives you a more accurate picture of system performance, than simply running benchmarks at full stress level.\n\n1. **Capacity Planning**: By observing latency at different rate limits, you can better plan for scaling your infrastructure. It helps in identifying at what point increased load leads to unacceptable latency, guiding decisions about when to scale up.\n\n1. **Quality of Service (QoS) Guarantees**: For services that require a certain level of performance guarantee, knowing the latency at specific rate limits helps in setting realistic QoS benchmarks.\n\n",
                      "markdown": "`ng how these limitations affect latency gives you a more accurate picture of system performance, than simply running benchmarks at full stress level.\n\n1. **Capacity Planning**: By observing latency at different rate limits, you can better plan for scaling your infrastructure. It helps in identifying at what point increased load leads to unacceptable latency, guiding decisions about when to scale up.\n\n1. **Quality of Service (QoS) Guarantees**: For services that require a certain level of performance guarantee, knowing the latency at specific rate limits helps in setting realistic QoS benchmarks.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 46,
                  "endLine": 196,
                  "endColumn": 50,
                  "snippet": {
                    "text": "rmance Metrics**: In real-world scenarios, systems often operate under various limitations. Understanding how these limitations affect latency gives you a more accurate picture of system performance, than simply running benchmarks at full stress level.\n\n1. **Capacity Planning**: By observing latency at different rate limits, you can better plan for scaling your infrastructure. It helps in identifying at what point increased load leads to unacceptable latency, guiding decisions about when to scale up.\n\n1. **Quality of Service (QoS) Guarantees**: For services that require a certain level of performa",
                    "rendered": {
                      "text": "rmance Metrics**: In real-world scenarios, systems often operate under various limitations. Understanding how these limitations affect latency gives you a more accurate picture of system performance, than simply running benchmarks at full stress level.\n\n1. **Capacity Planning**: By observing latency at different rate limits, you can better plan for scaling your infrastructure. It helps in identifying at what point increased load leads to unacceptable latency, guiding decisions about when to scale up.\n\n1. **Quality of Service (QoS) Guarantees**: For services that require a certain level of performa",
                      "markdown": "`rmance Metrics**: In real-world scenarios, systems often operate under various limitations. Understanding how these limitations affect latency gives you a more accurate picture of system performance, than simply running benchmarks at full stress level.\n\n1. **Capacity Planning**: By observing latency at different rate limits, you can better plan for scaling your infrastructure. It helps in identifying at what point increased load leads to unacceptable latency, guiding decisions about when to scale up.\n\n1. **Quality of Service (QoS) Guarantees**: For services that require a certain level of performa`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 250,
                  "endLine": 194,
                  "endColumn": 254,
                  "snippet": {
                    "text": "atency in a rate-limited scenario is important:\n\n\n1. **Realistic Performance Metrics**: In real-world scenarios, systems often operate under various limitations. Understanding how these limitations affect latency gives you a more accurate picture of system performance, than simply running benchmarks at full stress level.\n\n1. **Capacity Planning**: By observing latency at different rate limits, you can better plan for scaling your infrastructure. It helps in identifying at what point increased load leads to unacceptable latency, guiding decisions about when to scale up.\n\n1. **Quality of Service (Qo",
                    "rendered": {
                      "text": "atency in a rate-limited scenario is important:\n\n\n1. **Realistic Performance Metrics**: In real-world scenarios, systems often operate under various limitations. Understanding how these limitations affect latency gives you a more accurate picture of system performance, than simply running benchmarks at full stress level.\n\n1. **Capacity Planning**: By observing latency at different rate limits, you can better plan for scaling your infrastructure. It helps in identifying at what point increased load leads to unacceptable latency, guiding decisions about when to scale up.\n\n1. **Quality of Service (Qo",
                      "markdown": "`atency in a rate-limited scenario is important:\n\n\n1. **Realistic Performance Metrics**: In real-world scenarios, systems often operate under various limitations. Understanding how these limitations affect latency gives you a more accurate picture of system performance, than simply running benchmarks at full stress level.\n\n1. **Capacity Planning**: By observing latency at different rate limits, you can better plan for scaling your infrastructure. It helps in identifying at what point increased load leads to unacceptable latency, guiding decisions about when to scale up.\n\n1. **Quality of Service (Qo`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 12,
                  "endLine": 40,
                  "snippet": {
                    "text": "\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\nsudo apt-get update\n```\n\nOnce configured, to install memtier_benchmark use:\n\n",
                    "rendered": {
                      "text": "\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\nsudo apt-get update\n```\n\nOnce configured, to install memtier_benchmark use:\n\n",
                      "markdown": "`\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\nsudo apt-get update\n```\n\nOnce configured, to install memtier_benchmark use:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 102,
                  "endLine": 235,
                  "endColumn": 108,
                  "snippet": {
                    "text": " percentiles you should use the --print-percentiles option followed by the comma separated list of values ( example: `--print-percentiles 90,99,99.9,99.99` ).\n\n#### Saving the full latency spectrum\nTo save the full latencies you should use the --hdr-file-prefix option followed by the prefix name you wish the filenames to have. \nEach distinct command will be saved into two different files - one in .txt (textual format) and another in .hgrm (HistogramLogProcessor format).\nThe textual format can be hard to analyze solely, but you can use an [online formatter](http://hdrhistogram.github.io/HdrHistogram/",
                    "rendered": {
                      "text": " percentiles you should use the --print-percentiles option followed by the comma separated list of values ( example: `--print-percentiles 90,99,99.9,99.99` ).\n\n#### Saving the full latency spectrum\nTo save the full latencies you should use the --hdr-file-prefix option followed by the prefix name you wish the filenames to have. \nEach distinct command will be saved into two different files - one in .txt (textual format) and another in .hgrm (HistogramLogProcessor format).\nThe textual format can be hard to analyze solely, but you can use an [online formatter](http://hdrhistogram.github.io/HdrHistogram/",
                      "markdown": "` percentiles you should use the --print-percentiles option followed by the comma separated list of values ( example: `--print-percentiles 90,99,99.9,99.99` ).\n\n#### Saving the full latency spectrum\nTo save the full latencies you should use the --hdr-file-prefix option followed by the prefix name you wish the filenames to have. \nEach distinct command will be saved into two different files - one in .txt (textual format) and another in .hgrm (HistogramLogProcessor format).\nThe textual format can be hard to analyze solely, but you can use an [online formatter](http://hdrhistogram.github.io/HdrHistogram/`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 15,
                  "endLine": 198,
                  "endColumn": 24,
                  "snippet": {
                    "text": "nchmarks at full stress level.\n\n1. **Capacity Planning**: By observing latency at different rate limits, you can better plan for scaling your infrastructure. It helps in identifying at what point increased load leads to unacceptable latency, guiding decisions about when to scale up.\n\n1. **Quality of Service (QoS) Guarantees**: For services that require a certain level of performance guarantee, knowing the latency at specific rate limits helps in setting realistic QoS benchmarks.\n\n1. **Identifying Bottlenecks**: Rate-limited benchmarking can help in identifying bottlenecks in your system. If latency inc",
                    "rendered": {
                      "text": "nchmarks at full stress level.\n\n1. **Capacity Planning**: By observing latency at different rate limits, you can better plan for scaling your infrastructure. It helps in identifying at what point increased load leads to unacceptable latency, guiding decisions about when to scale up.\n\n1. **Quality of Service (QoS) Guarantees**: For services that require a certain level of performance guarantee, knowing the latency at specific rate limits helps in setting realistic QoS benchmarks.\n\n1. **Identifying Bottlenecks**: Rate-limited benchmarking can help in identifying bottlenecks in your system. If latency inc",
                      "markdown": "`nchmarks at full stress level.\n\n1. **Capacity Planning**: By observing latency at different rate limits, you can better plan for scaling your infrastructure. It helps in identifying at what point increased load leads to unacceptable latency, guiding decisions about when to scale up.\n\n1. **Quality of Service (QoS) Guarantees**: For services that require a certain level of performance guarantee, knowing the latency at specific rate limits helps in setting realistic QoS benchmarks.\n\n1. **Identifying Bottlenecks**: Rate-limited benchmarking can help in identifying bottlenecks in your system. If latency inc`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 9,
                  "endLine": 151,
                  "endColumn": 17,
                  "snippet": {
                    "text": "$ docker run --rm memtier_benchmark --help\n```\n\n### Using Docker Compose\n```\n$ docker-compose -f docker-compose.memcached.yml up --build\n```\n",
                    "rendered": {
                      "text": "$ docker run --rm memtier_benchmark --help\n```\n\n### Using Docker Compose\n```\n$ docker-compose -f docker-compose.memcached.yml up --build\n```\n",
                      "markdown": "`$ docker run --rm memtier_benchmark --help\n```\n\n### Using Docker Compose\n```\n$ docker-compose -f docker-compose.memcached.yml up --build\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 1,
                  "endLine": 148,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n```\n$ docker build -t memtier_benchmark .\n$ docker run --rm memtier_benchmark --help\n```\n\n### Using Docker Compose\n",
                    "rendered": {
                      "text": "\n```\n$ docker build -t memtier_benchmark .\n$ docker run --rm memtier_benchmark --help\n```\n\n### Using Docker Compose\n",
                      "markdown": "`\n```\n$ docker build -t memtier_benchmark .\n$ docker run --rm memtier_benchmark --help\n```\n\n### Using Docker Compose\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 1,
                  "endLine": 147,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Or, build locally:\n\n```\n$ docker build -t memtier_benchmark .\n$ docker run --rm memtier_benchmark --help\n```\n\n",
                    "rendered": {
                      "text": "Or, build locally:\n\n```\n$ docker build -t memtier_benchmark .\n$ docker run --rm memtier_benchmark --help\n```\n\n",
                      "markdown": "`Or, build locally:\n\n```\n$ docker build -t memtier_benchmark .\n$ docker run --rm memtier_benchmark --help\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 1,
                  "endLine": 141,
                  "endColumn": 9,
                  "snippet": {
                    "text": "$ docker run --rm redislabs/memtier_benchmark:latest --help\n\n# master branch edge build\n$ docker run --rm redislabs/memtier_benchmark:edge --help\n```\n\nOr, build locally:\n",
                    "rendered": {
                      "text": "$ docker run --rm redislabs/memtier_benchmark:latest --help\n\n# master branch edge build\n$ docker run --rm redislabs/memtier_benchmark:edge --help\n```\n\nOr, build locally:\n",
                      "markdown": "`$ docker run --rm redislabs/memtier_benchmark:latest --help\n\n# master branch edge build\n$ docker run --rm redislabs/memtier_benchmark:edge --help\n```\n\nOr, build locally:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 1,
                  "endLine": 138,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n```\n# latest stable release\n$ docker run --rm redislabs/memtier_benchmark:latest --help\n\n# master branch edge build\n$ docker run --rm redislabs/memtier_benchmark:edge --help\n",
                    "rendered": {
                      "text": "\n```\n# latest stable release\n$ docker run --rm redislabs/memtier_benchmark:latest --help\n\n# master branch edge build\n$ docker run --rm redislabs/memtier_benchmark:edge --help\n",
                      "markdown": "`\n```\n# latest stable release\n$ docker run --rm redislabs/memtier_benchmark:latest --help\n\n# master branch edge build\n$ docker run --rm redislabs/memtier_benchmark:edge --help\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 23,
                  "endLine": 134,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n## Using Docker\n\nUse available images on Docker Hub:\n\n```\n# latest stable release\n",
                    "rendered": {
                      "text": "\n## Using Docker\n\nUse available images on Docker Hub:\n\n```\n# latest stable release\n",
                      "markdown": "`\n## Using Docker\n\nUse available images on Docker Hub:\n\n```\n# latest stable release\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 8,
                  "endLine": 133,
                  "snippet": {
                    "text": "\n    $ ./tests/run_tests.sh --help\n\n## Using Docker\n\nUse available images on Docker Hub:\n\n```\n",
                    "rendered": {
                      "text": "\n    $ ./tests/run_tests.sh --help\n\n## Using Docker\n\nUse available images on Docker Hub:\n\n```\n",
                      "markdown": "`\n    $ ./tests/run_tests.sh --help\n\n## Using Docker\n\nUse available images on Docker Hub:\n\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 5,
                  "endLine": 125,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    $ mkdir -p .env\n    $ virtualenv .env\n    $ source .env/bin/activate\n    $ pip install -r tests/test_requirements.txt\n    $ ./tests/run_tests.sh\n\nTo understand what test options are available simply run:\n",
                    "rendered": {
                      "text": "    $ mkdir -p .env\n    $ virtualenv .env\n    $ source .env/bin/activate\n    $ pip install -r tests/test_requirements.txt\n    $ ./tests/run_tests.sh\n\nTo understand what test options are available simply run:\n",
                      "markdown": "`    $ mkdir -p .env\n    $ virtualenv .env\n    $ source .env/bin/activate\n    $ pip install -r tests/test_requirements.txt\n    $ ./tests/run_tests.sh\n\nTo understand what test options are available simply run:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 42,
                  "endLine": 90,
                  "endColumn": 48,
                  "snippet": {
                    "text": "$ brew install autoconf automake libtool libevent pkg-config openssl@3.0\n```\n\nWhen running `./configure`, if it fails to find libssl it may be necessary to\ntweak the `PKG_CONFIG_PATH` environment variable:\n\n```\n",
                    "rendered": {
                      "text": "$ brew install autoconf automake libtool libevent pkg-config openssl@3.0\n```\n\nWhen running `./configure`, if it fails to find libssl it may be necessary to\ntweak the `PKG_CONFIG_PATH` environment variable:\n\n```\n",
                      "markdown": "`$ brew install autoconf automake libtool libevent pkg-config openssl@3.0\n```\n\nWhen running `./configure`, if it fails to find libssl it may be necessary to\ntweak the `PKG_CONFIG_PATH` environment variable:\n\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 6,
                  "endLine": 78,
                  "endColumn": 15,
                  "snippet": {
                    "text": "Use the following to install prerequisites:\n\n```\n$ sudo apt-get install build-essential autoconf automake libpcre3-dev \\\n    libevent-dev pkg-config zlib1g-dev libssl-dev\n```\n\n",
                    "rendered": {
                      "text": "Use the following to install prerequisites:\n\n```\n$ sudo apt-get install build-essential autoconf automake libpcre3-dev \\\n    libevent-dev pkg-config zlib1g-dev libssl-dev\n```\n\n",
                      "markdown": "`Use the following to install prerequisites:\n\n```\n$ sudo apt-get install build-essential autoconf automake libpcre3-dev \\\n    libevent-dev pkg-config zlib1g-dev libssl-dev\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 6,
                  "endLine": 69,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\nUse the following to install prerequisites:\n```\n$ sudo yum install autoconf automake make gcc-c++ \\\n    pcre-devel zlib-devel libmemcached-devel libevent-devel openssl-devel\n```\n\n",
                    "rendered": {
                      "text": "\nUse the following to install prerequisites:\n```\n$ sudo yum install autoconf automake make gcc-c++ \\\n    pcre-devel zlib-devel libmemcached-devel libevent-devel openssl-devel\n```\n\n",
                      "markdown": "`\nUse the following to install prerequisites:\n```\n$ sudo yum install autoconf automake make gcc-c++ \\\n    pcre-devel zlib-devel libmemcached-devel libevent-devel openssl-devel\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 1,
                  "endLine": 56,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n* libevent 2.0.10 or newer.\n* libpcre 8.x.\n* OpenSSL (unless TLS support is disabled by `./configure --disable-tls`).\n\nThe following tools are required\n* autoconf\n",
                    "rendered": {
                      "text": "\n* libevent 2.0.10 or newer.\n* libpcre 8.x.\n* OpenSSL (unless TLS support is disabled by `./configure --disable-tls`).\n\nThe following tools are required\n* autoconf\n",
                      "markdown": "`\n* libevent 2.0.10 or newer.\n* libpcre 8.x.\n* OpenSSL (unless TLS support is disabled by `./configure --disable-tls`).\n\nThe following tools are required\n* autoconf\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 4,
                  "endLine": 45,
                  "endColumn": 13,
                  "snippet": {
                    "text": "Once configured, to install memtier_benchmark use:\n\n```\nsudo apt-get install memtier-benchmark\n```\n\n### Installing from source\n",
                    "rendered": {
                      "text": "Once configured, to install memtier_benchmark use:\n\n```\nsudo apt-get install memtier-benchmark\n```\n\n### Installing from source\n",
                      "markdown": "`Once configured, to install memtier_benchmark use:\n\n```\nsudo apt-get install memtier-benchmark\n```\n\n### Installing from source\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\nsudo apt-get update\n```\n\nOnce configured, to install memtier_benchmark use:\n",
                    "rendered": {
                      "text": "\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\nsudo apt-get update\n```\n\nOnce configured, to install memtier_benchmark use:\n",
                      "markdown": "`\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\nsudo apt-get update\n```\n\nOnce configured, to install memtier_benchmark use:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 129,
                  "endLine": 37,
                  "endColumn": 134,
                  "snippet": {
                    "text": "\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\nsudo apt-get update\n```\n",
                    "rendered": {
                      "text": "\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\nsudo apt-get update\n```\n",
                      "markdown": "`\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\nsudo apt-get update\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 35,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n```\nsudo apt install lsb-release curl gpg\n\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\n",
                    "rendered": {
                      "text": "\n```\nsudo apt install lsb-release curl gpg\n\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\n",
                      "markdown": "`\n```\nsudo apt install lsb-release curl gpg\n\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 28,
                  "endLine": 33,
                  "endColumn": 34,
                  "snippet": {
                    "text": "repository. To configure this repository, use the following steps:\n\n```\nsudo apt install lsb-release curl gpg\n\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\n",
                    "rendered": {
                      "text": "repository. To configure this repository, use the following steps:\n\n```\nsudo apt install lsb-release curl gpg\n\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\n",
                      "markdown": "`repository. To configure this repository, use the following steps:\n\n```\nsudo apt install lsb-release curl gpg\n\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 4,
                  "endLine": 33,
                  "endColumn": 9,
                  "snippet": {
                    "text": "repository. To configure this repository, use the following steps:\n\n```\nsudo apt install lsb-release curl gpg\n\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\n",
                    "rendered": {
                      "text": "repository. To configure this repository, use the following steps:\n\n```\nsudo apt install lsb-release curl gpg\n\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\n",
                      "markdown": "`repository. To configure this repository, use the following steps:\n\n```\nsudo apt install lsb-release curl gpg\n\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/README.md"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 88,
                  "endLine": 30,
                  "snippet": {
                    "text": "\n### Installing on Debian and Ubuntu\n\nPre-compiled binaries are available for these platforms from the packages.redis.io Redis APT\nrepository. To configure this repository, use the following steps:\n\n```\nsudo apt install lsb-release curl gpg\n",
                    "rendered": {
                      "text": "\n### Installing on Debian and Ubuntu\n\nPre-compiled binaries are available for these platforms from the packages.redis.io Redis APT\nrepository. To configure this repository, use the following steps:\n\n```\nsudo apt install lsb-release curl gpg\n",
                      "markdown": "`\n### Installing on Debian and Ubuntu\n\nPre-compiled binaries are available for these platforms from the packages.redis.io Redis APT\nrepository. To configure this repository, use the following steps:\n\n```\nsudo apt install lsb-release curl gpg\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/memtier_benchmark.cpp"
                },
                "region": {
                  "startLine": 1547,
                  "startColumn": 96,
                  "endLine": 1547,
                  "endColumn": 104,
                  "snippet": {
                    "text": "        }\n        if (cfg.protocol == PROTOCOL_MEMCACHE_BINARY &&\n            strchr(cfg.authenticate, ':') == NULL) {\n                fprintf(stderr, \"error: binary_memcache credentials must be in the form of USER:PASSWORD.\\n\");\n                usage();\n        }\n    }\n",
                    "rendered": {
                      "text": "        }\n        if (cfg.protocol == PROTOCOL_MEMCACHE_BINARY &&\n            strchr(cfg.authenticate, ':') == NULL) {\n                fprintf(stderr, \"error: binary_memcache credentials must be in the form of USER:PASSWORD.\\n\");\n                usage();\n        }\n    }\n",
                      "markdown": "`        }\n        if (cfg.protocol == PROTOCOL_MEMCACHE_BINARY &&\n            strchr(cfg.authenticate, ':') == NULL) {\n                fprintf(stderr, \"error: binary_memcache credentials must be in the form of USER:PASSWORD.\\n\");\n                usage();\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/memtier_benchmark.cpp"
                },
                "region": {
                  "startLine": 1407,
                  "startColumn": 29,
                  "endLine": 1407,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                fprintf(stderr, \"Error: Failed to load certificate file.\\n\");\n                exit(1);\n            }\n            if (!SSL_CTX_use_PrivateKey_file(cfg.openssl_ctx,\n                        cfg.tls_key ? cfg.tls_key : cfg.tls_cert,\n                        SSL_FILETYPE_PEM)) {\n                ERR_print_errors_fp(stderr);\n",
                    "rendered": {
                      "text": "                fprintf(stderr, \"Error: Failed to load certificate file.\\n\");\n                exit(1);\n            }\n            if (!SSL_CTX_use_PrivateKey_file(cfg.openssl_ctx,\n                        cfg.tls_key ? cfg.tls_key : cfg.tls_cert,\n                        SSL_FILETYPE_PEM)) {\n                ERR_print_errors_fp(stderr);\n",
                      "markdown": "`                fprintf(stderr, \"Error: Failed to load certificate file.\\n\");\n                exit(1);\n            }\n            if (!SSL_CTX_use_PrivateKey_file(cfg.openssl_ctx,\n                        cfg.tls_key ? cfg.tls_key : cfg.tls_cert,\n                        SSL_FILETYPE_PEM)) {\n                ERR_print_errors_fp(stderr);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/memtier_benchmark.cpp"
                },
                "region": {
                  "startLine": 959,
                  "startColumn": 72,
                  "endLine": 959,
                  "endColumn": 80,
                  "snippet": {
                    "text": "            \"                                 when using one of resp2 or resp3 the redis protocol version will be set via HELLO command.\\n\"\n            \"  -a, --authenticate=CREDENTIALS Authenticate using specified credentials.\\n\"\n            \"                                 A simple password is used for memcache_text\\n\"\n            \"                                 and Redis <= 5.x. <USER>:<PASSWORD> can be\\n\"\n            \"                                 specified for memcache_binary or Redis 6.x\\n\"\n            \"                                 or newer with ACL user support.\\n\"\n#ifdef USE_TLS\n",
                    "rendered": {
                      "text": "            \"                                 when using one of resp2 or resp3 the redis protocol version will be set via HELLO command.\\n\"\n            \"  -a, --authenticate=CREDENTIALS Authenticate using specified credentials.\\n\"\n            \"                                 A simple password is used for memcache_text\\n\"\n            \"                                 and Redis <= 5.x. <USER>:<PASSWORD> can be\\n\"\n            \"                                 specified for memcache_binary or Redis 6.x\\n\"\n            \"                                 or newer with ACL user support.\\n\"\n#ifdef USE_TLS\n",
                      "markdown": "`            \"                                 when using one of resp2 or resp3 the redis protocol version will be set via HELLO command.\\n\"\n            \"  -a, --authenticate=CREDENTIALS Authenticate using specified credentials.\\n\"\n            \"                                 A simple password is used for memcache_text\\n\"\n            \"                                 and Redis <= 5.x. <USER>:<PASSWORD> can be\\n\"\n            \"                                 specified for memcache_binary or Redis 6.x\\n\"\n            \"                                 or newer with ACL user support.\\n\"\n#ifdef USE_TLS\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/memtier_benchmark.cpp"
                },
                "region": {
                  "startLine": 958,
                  "startColumn": 55,
                  "endLine": 958,
                  "endColumn": 63,
                  "snippet": {
                    "text": "he_binary.\\n\"\n            \"                                 when using one of resp2 or resp3 the redis protocol version will be set via HELLO command.\\n\"\n            \"  -a, --authenticate=CREDENTIALS Authenticate using specified credentials.\\n\"\n            \"                                 A simple password is used for memcache_text\\n\"\n            \"                                 and Redis <= 5.x. <USER>:<PASSWORD> can be\\n\"\n            \"                                 specified for memcache_binary or Redis 6.x\\n\"\n            \"                                 or newer with ACL user support.\\n\"\n#ifde",
                    "rendered": {
                      "text": "he_binary.\\n\"\n            \"                                 when using one of resp2 or resp3 the redis protocol version will be set via HELLO command.\\n\"\n            \"  -a, --authenticate=CREDENTIALS Authenticate using specified credentials.\\n\"\n            \"                                 A simple password is used for memcache_text\\n\"\n            \"                                 and Redis <= 5.x. <USER>:<PASSWORD> can be\\n\"\n            \"                                 specified for memcache_binary or Redis 6.x\\n\"\n            \"                                 or newer with ACL user support.\\n\"\n#ifde",
                      "markdown": "`he_binary.\\n\"\n            \"                                 when using one of resp2 or resp3 the redis protocol version will be set via HELLO command.\\n\"\n            \"  -a, --authenticate=CREDENTIALS Authenticate using specified credentials.\\n\"\n            \"                                 A simple password is used for memcache_text\\n\"\n            \"                                 and Redis <= 5.x. <USER>:<PASSWORD> can be\\n\"\n            \"                                 specified for memcache_binary or Redis 6.x\\n\"\n            \"                                 or newer with ACL user support.\\n\"\n#ifde`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/memtier_benchmark.cpp"
                },
                "region": {
                  "startLine": 865,
                  "startColumn": 38,
                  "endLine": 865,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                    }\n\n                    // command configuration always applied on last configured command\n                    arbitrary_command& cmd = cfg->arbitrary_commands->get_last_command();\n                    if (!cmd.set_ratio(optarg)) {\n                        fprintf(stderr, \"error: failed to set ratio for command %s.\\n\", cmd.command_name.c_str());\n                        return -1;\n",
                    "rendered": {
                      "text": "                    }\n\n                    // command configuration always applied on last configured command\n                    arbitrary_command& cmd = cfg->arbitrary_commands->get_last_command();\n                    if (!cmd.set_ratio(optarg)) {\n                        fprintf(stderr, \"error: failed to set ratio for command %s.\\n\", cmd.command_name.c_str());\n                        return -1;\n",
                      "markdown": "`                    }\n\n                    // command configuration always applied on last configured command\n                    arbitrary_command& cmd = cfg->arbitrary_commands->get_last_command();\n                    if (!cmd.set_ratio(optarg)) {\n                        fprintf(stderr, \"error: failed to set ratio for command %s.\\n\", cmd.command_name.c_str());\n                        return -1;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/memtier_benchmark.cpp"
                },
                "region": {
                  "startLine": 851,
                  "startColumn": 38,
                  "endLine": 851,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                    }\n\n                    // command configuration always applied on last configured command\n                    arbitrary_command& cmd = cfg->arbitrary_commands->get_last_command();\n                    if (!cmd.set_key_pattern(optarg)) {\n                        fprintf(stderr, \"error: key-pattern for command %s must be in the format of [S/R/G/P].\\n\", cmd.command_name.c_str());\n                        return -1;\n",
                    "rendered": {
                      "text": "                    }\n\n                    // command configuration always applied on last configured command\n                    arbitrary_command& cmd = cfg->arbitrary_commands->get_last_command();\n                    if (!cmd.set_key_pattern(optarg)) {\n                        fprintf(stderr, \"error: key-pattern for command %s must be in the format of [S/R/G/P].\\n\", cmd.command_name.c_str());\n                        return -1;\n",
                      "markdown": "`                    }\n\n                    // command configuration always applied on last configured command\n                    arbitrary_command& cmd = cfg->arbitrary_commands->get_last_command();\n                    if (!cmd.set_key_pattern(optarg)) {\n                        fprintf(stderr, \"error: key-pattern for command %s must be in the format of [S/R/G/P].\\n\", cmd.command_name.c_str());\n                        return -1;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/memtier_benchmark.cpp"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 26,
                  "endLine": 369,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    // verify that when using Parallel key pattern, it's configured to all commands\n    size_t parallel_count = 0;\n    for (size_t i = 0; i<cfg->arbitrary_commands->size(); i++) {\n        arbitrary_command& cmd =  cfg->arbitrary_commands->at(i);\n        if (cmd.key_pattern == 'P') {\n            parallel_count++;\n        }\n",
                    "rendered": {
                      "text": "    // verify that when using Parallel key pattern, it's configured to all commands\n    size_t parallel_count = 0;\n    for (size_t i = 0; i<cfg->arbitrary_commands->size(); i++) {\n        arbitrary_command& cmd =  cfg->arbitrary_commands->at(i);\n        if (cmd.key_pattern == 'P') {\n            parallel_count++;\n        }\n",
                      "markdown": "`    // verify that when using Parallel key pattern, it's configured to all commands\n    size_t parallel_count = 0;\n    for (size_t i = 0; i<cfg->arbitrary_commands->size(); i++) {\n        arbitrary_command& cmd =  cfg->arbitrary_commands->at(i);\n        if (cmd.key_pattern == 'P') {\n            parallel_count++;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/memtier_benchmark.cpp"
                },
                "region": {
                  "startLine": 1382,
                  "startColumn": 17,
                  "endLine": 1382,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    }\n\n#ifdef USE_TLS\n    // Initialize OpenSSL only if we're really going to use it.\n    if (cfg.tls) {\n        init_openssl();\n\n",
                    "rendered": {
                      "text": "    }\n\n#ifdef USE_TLS\n    // Initialize OpenSSL only if we're really going to use it.\n    if (cfg.tls) {\n        init_openssl();\n\n",
                      "markdown": "`    }\n\n#ifdef USE_TLS\n    // Initialize OpenSSL only if we're really going to use it.\n    if (cfg.tls) {\n        init_openssl();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/memtier_benchmark.cpp"
                },
                "region": {
                  "startLine": 1314,
                  "startColumn": 45,
                  "endLine": 1314,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    SSL_library_init();\n    SSL_load_error_strings();\n    if (!RAND_poll()) {\n        fprintf(stderr, \"Failed to initialize OpenSSL random entropy.\\n\");\n        exit(1);\n    }\n\n",
                    "rendered": {
                      "text": "    SSL_library_init();\n    SSL_load_error_strings();\n    if (!RAND_poll()) {\n        fprintf(stderr, \"Failed to initialize OpenSSL random entropy.\\n\");\n        exit(1);\n    }\n\n",
                      "markdown": "`    SSL_library_init();\n    SSL_load_error_strings();\n    if (!RAND_poll()) {\n        fprintf(stderr, \"Failed to initialize OpenSSL random entropy.\\n\");\n        exit(1);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/memtier_benchmark.cpp"
                },
                "region": {
                  "startLine": 633,
                  "startColumn": 52,
                  "endLine": 633,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                    endptr = NULL;\n                    cfg->test_time = (unsigned int) strtoul(optarg, &endptr, 10);\n                    if (!cfg->test_time || !endptr || *endptr != '\\0') {\n                        fprintf(stderr, \"error: test time must be greater than zero.\\n\");\n                        return -1;\n                    }\n                    if (cfg->requests) {\n",
                    "rendered": {
                      "text": "                    endptr = NULL;\n                    cfg->test_time = (unsigned int) strtoul(optarg, &endptr, 10);\n                    if (!cfg->test_time || !endptr || *endptr != '\\0') {\n                        fprintf(stderr, \"error: test time must be greater than zero.\\n\");\n                        return -1;\n                    }\n                    if (cfg->requests) {\n",
                      "markdown": "`                    endptr = NULL;\n                    cfg->test_time = (unsigned int) strtoul(optarg, &endptr, 10);\n                    if (!cfg->test_time || !endptr || *endptr != '\\0') {\n                        fprintf(stderr, \"error: test time must be greater than zero.\\n\");\n                        return -1;\n                    }\n                    if (cfg->requests) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/cluster_client.cpp"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 11,
                  "endLine": 272,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n        // if connection doesn't exist, add it\n        if (sc == NULL) {\n            sc = create_shard_connection(MAIN_CONNECTION->get_protocol());\n            connect_shard_connection(sc, addr, port);\n        }\n\n",
                    "rendered": {
                      "text": "\n        // if connection doesn't exist, add it\n        if (sc == NULL) {\n            sc = create_shard_connection(MAIN_CONNECTION->get_protocol());\n            connect_shard_connection(sc, addr, port);\n        }\n\n",
                      "markdown": "`\n        // if connection doesn't exist, add it\n        if (sc == NULL) {\n            sc = create_shard_connection(MAIN_CONNECTION->get_protocol());\n            connect_shard_connection(sc, addr, port);\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/cluster_client.cpp"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 15,
                  "endLine": 255,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        for (j = 0; j < m_connections.size(); j++) {\n            if (strcmp(addr, m_connections[j]->get_address()) == 0 &&\n                strcmp(port, m_connections[j]->get_port()) == 0) {\n                sc = m_connections[j];\n\n                // mark not to close this connection\n                if (j < prev_connections_size)\n",
                    "rendered": {
                      "text": "        for (j = 0; j < m_connections.size(); j++) {\n            if (strcmp(addr, m_connections[j]->get_address()) == 0 &&\n                strcmp(port, m_connections[j]->get_port()) == 0) {\n                sc = m_connections[j];\n\n                // mark not to close this connection\n                if (j < prev_connections_size)\n",
                      "markdown": "`        for (j = 0; j < m_connections.size(); j++) {\n            if (strcmp(addr, m_connections[j]->get_address()) == 0 &&\n                strcmp(port, m_connections[j]->get_port()) == 0) {\n                sc = m_connections[j];\n\n                // mark not to close this connection\n                if (j < prev_connections_size)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/cluster_client.cpp"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 25,
                  "endLine": 249,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        port[mbulk_port_el->value_len] = '\\0';\n\n        // check if connection already exist\n        shard_connection* sc = NULL;\n        unsigned int j;\n\n        for (j = 0; j < m_connections.size(); j++) {\n",
                    "rendered": {
                      "text": "        port[mbulk_port_el->value_len] = '\\0';\n\n        // check if connection already exist\n        shard_connection* sc = NULL;\n        unsigned int j;\n\n        for (j = 0; j < m_connections.size(); j++) {\n",
                      "markdown": "`        port[mbulk_port_el->value_len] = '\\0';\n\n        // check if connection already exist\n        shard_connection* sc = NULL;\n        unsigned int j;\n\n        for (j = 0; j < m_connections.size(); j++) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/cluster_client.cpp"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 21,
                  "endLine": 162,
                  "endColumn": 25,
                  "snippet": {
                    "text": "}\n\nshard_connection* cluster_client::create_shard_connection(abstract_protocol* abs_protocol) {\n    shard_connection* sc = new shard_connection(m_connections.size(), this,\n                                                m_config, m_event_base,\n                                                abs_protocol);\n    assert(sc != NULL);\n",
                    "rendered": {
                      "text": "}\n\nshard_connection* cluster_client::create_shard_connection(abstract_protocol* abs_protocol) {\n    shard_connection* sc = new shard_connection(m_connections.size(), this,\n                                                m_config, m_event_base,\n                                                abs_protocol);\n    assert(sc != NULL);\n",
                      "markdown": "`}\n\nshard_connection* cluster_client::create_shard_connection(abstract_protocol* abs_protocol) {\n    shard_connection* sc = new shard_connection(m_connections.size(), this,\n                                                m_config, m_event_base,\n                                                abs_protocol);\n    assert(sc != NULL);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/cluster_client.cpp"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 25,
                  "endLine": 155,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    // delete all connections except main connection\n    for (i = conn_size - 1; i > 0; i--) {\n        shard_connection* sc = m_connections.back();\n        m_connections.pop_back();\n        delete sc;\n    }\n",
                    "rendered": {
                      "text": "\n    // delete all connections except main connection\n    for (i = conn_size - 1; i > 0; i--) {\n        shard_connection* sc = m_connections.back();\n        m_connections.pop_back();\n        delete sc;\n    }\n",
                      "markdown": "`\n    // delete all connections except main connection\n    for (i = conn_size - 1; i > 0; i--) {\n        shard_connection* sc = m_connections.back();\n        m_connections.pop_back();\n        delete sc;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/cluster_client.cpp"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 25,
                  "endLine": 149,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    // disconnect all connections\n    for (i = 0; i < m_connections.size(); i++) {\n        shard_connection* sc = m_connections[i];\n        sc->disconnect();\n    }\n\n",
                    "rendered": {
                      "text": "\n    // disconnect all connections\n    for (i = 0; i < m_connections.size(); i++) {\n        shard_connection* sc = m_connections[i];\n        sc->disconnect();\n    }\n\n",
                      "markdown": "`\n    // disconnect all connections\n    for (i = 0; i < m_connections.size(); i++) {\n        shard_connection* sc = m_connections[i];\n        sc->disconnect();\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/memtier-benchmark.zip/cluster_client.cpp"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 21,
                  "endLine": 125,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nint cluster_client::connect(void) {\n    // get main connection\n    shard_connection* sc = MAIN_CONNECTION;\n    assert(sc != NULL);\n\n    // set main connection to send 'CLUSTER SLOTS' command\n",
                    "rendered": {
                      "text": "\nint cluster_client::connect(void) {\n    // get main connection\n    shard_connection* sc = MAIN_CONNECTION;\n    assert(sc != NULL);\n\n    // set main connection to send 'CLUSTER SLOTS' command\n",
                      "markdown": "`\nint cluster_client::connect(void) {\n    // get main connection\n    shard_connection* sc = MAIN_CONNECTION;\n    assert(sc != NULL);\n\n    // set main connection to send 'CLUSTER SLOTS' command\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}