{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 1103,
                  "startColumn": 46,
                  "endLine": 1103,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    builder.WithHttpProxyOptions(testState.m_proxyOptions);\n\n    testState.m_mqttConnection = testState.m_mqttClient->NewConnection(builder.Build());\n    ASSERT_NOT_NULL(testState.m_mqttConnection.get());\n\n    aws_string_destroy(awsIotEndpoint);\n    aws_string_destroy(certificatePath);\n",
                    "rendered": {
                      "text": "    builder.WithHttpProxyOptions(testState.m_proxyOptions);\n\n    testState.m_mqttConnection = testState.m_mqttClient->NewConnection(builder.Build());\n    ASSERT_NOT_NULL(testState.m_mqttConnection.get());\n\n    aws_string_destroy(awsIotEndpoint);\n    aws_string_destroy(certificatePath);\n",
                      "markdown": "`    builder.WithHttpProxyOptions(testState.m_proxyOptions);\n\n    testState.m_mqttConnection = testState.m_mqttClient->NewConnection(builder.Build());\n    ASSERT_NOT_NULL(testState.m_mqttConnection.get());\n\n    aws_string_destroy(awsIotEndpoint);\n    aws_string_destroy(certificatePath);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 915,
                  "startColumn": 46,
                  "endLine": 915,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    builder.WithEndpoint(Aws::Crt::String(aws_string_c_str(awsIotEndpoint)));\n\n    testState.m_mqttConnection = testState.m_mqttClient->NewConnection(builder.Build());\n    ASSERT_NOT_NULL(testState.m_mqttConnection.get());\n\n    aws_string_destroy(awsIotSigningRegion);\n    aws_string_destroy(awsIotEndpoint);\n",
                    "rendered": {
                      "text": "    builder.WithEndpoint(Aws::Crt::String(aws_string_c_str(awsIotEndpoint)));\n\n    testState.m_mqttConnection = testState.m_mqttClient->NewConnection(builder.Build());\n    ASSERT_NOT_NULL(testState.m_mqttConnection.get());\n\n    aws_string_destroy(awsIotSigningRegion);\n    aws_string_destroy(awsIotEndpoint);\n",
                      "markdown": "`    builder.WithEndpoint(Aws::Crt::String(aws_string_c_str(awsIotEndpoint)));\n\n    testState.m_mqttConnection = testState.m_mqttClient->NewConnection(builder.Build());\n    ASSERT_NOT_NULL(testState.m_mqttConnection.get());\n\n    aws_string_destroy(awsIotSigningRegion);\n    aws_string_destroy(awsIotEndpoint);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 753,
                  "startColumn": 44,
                  "endLine": 753,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    providerConfig.TlsOptions = tlsConnectionOptions;\n\n    testState.m_x509Provider = CredentialsProvider::CreateCredentialsProviderX509(providerConfig, allocator);\n    ASSERT_NOT_NULL(testState.m_x509Provider.get());\n\n    aws_string_destroy(x509Endpoint);\n    aws_string_destroy(x509RoleAlias);\n",
                    "rendered": {
                      "text": "    providerConfig.TlsOptions = tlsConnectionOptions;\n\n    testState.m_x509Provider = CredentialsProvider::CreateCredentialsProviderX509(providerConfig, allocator);\n    ASSERT_NOT_NULL(testState.m_x509Provider.get());\n\n    aws_string_destroy(x509Endpoint);\n    aws_string_destroy(x509RoleAlias);\n",
                      "markdown": "`    providerConfig.TlsOptions = tlsConnectionOptions;\n\n    testState.m_x509Provider = CredentialsProvider::CreateCredentialsProviderX509(providerConfig, allocator);\n    ASSERT_NOT_NULL(testState.m_x509Provider.get());\n\n    aws_string_destroy(x509Endpoint);\n    aws_string_destroy(x509RoleAlias);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 736,
                  "startColumn": 58,
                  "endLine": 736,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_RootCAPathVariable, &x509RootCAPath));\n\n    CredentialsProviderX509Config providerConfig;\n    providerConfig.Bootstrap = testState.m_clientBootstrap.get();\n    providerConfig.Endpoint = aws_string_c_str(x509Endpoint);\n    providerConfig.RoleAlias = aws_string_c_str(x509RoleAlias);\n    providerConfig.ThingName = aws_string_c_str(x509ThingName);\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_RootCAPathVariable, &x509RootCAPath));\n\n    CredentialsProviderX509Config providerConfig;\n    providerConfig.Bootstrap = testState.m_clientBootstrap.get();\n    providerConfig.Endpoint = aws_string_c_str(x509Endpoint);\n    providerConfig.RoleAlias = aws_string_c_str(x509RoleAlias);\n    providerConfig.ThingName = aws_string_c_str(x509ThingName);\n",
                      "markdown": "`    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_RootCAPathVariable, &x509RootCAPath));\n\n    CredentialsProviderX509Config providerConfig;\n    providerConfig.Bootstrap = testState.m_clientBootstrap.get();\n    providerConfig.Endpoint = aws_string_c_str(x509Endpoint);\n    providerConfig.RoleAlias = aws_string_c_str(x509RoleAlias);\n    providerConfig.ThingName = aws_string_c_str(x509ThingName);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 48,
                  "endLine": 394,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    testState.m_request->SetPath(ByteCursorFromCString(\"/\"));\n\n    HttpRequestOptions requestOptions;\n    requestOptions.request = testState.m_request.get();\n\n    requestOptions.onIncomingBody = [&testState](Http::HttpStream &, const ByteCursor &data)\n    {\n",
                    "rendered": {
                      "text": "    testState.m_request->SetPath(ByteCursorFromCString(\"/\"));\n\n    HttpRequestOptions requestOptions;\n    requestOptions.request = testState.m_request.get();\n\n    requestOptions.onIncomingBody = [&testState](Http::HttpStream &, const ByteCursor &data)\n    {\n",
                      "markdown": "`    testState.m_request->SetPath(ByteCursorFromCString(\"/\"));\n\n    HttpRequestOptions requestOptions;\n    requestOptions.request = testState.m_request.get();\n\n    requestOptions.onIncomingBody = [&testState](Http::HttpStream &, const ByteCursor &data)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 73,
                  "endLine": 111,
                  "endColumn": 78,
                  "snippet": {
                    "text": "    Aws::Crt::Io::SocketOptions socketOptions;\n    socketOptions.SetConnectTimeoutMs(10000);\n\n    testState.m_connectionOptions.Bootstrap = testState.m_clientBootstrap.get();\n    testState.m_connectionOptions.SocketOptions = socketOptions;\n    testState.m_connectionOptions.HostName = String((const char *)hostName.ptr, hostName.len);\n    testState.m_connectionOptions.Port = useTls ? 443 : 80;\n",
                    "rendered": {
                      "text": "    Aws::Crt::Io::SocketOptions socketOptions;\n    socketOptions.SetConnectTimeoutMs(10000);\n\n    testState.m_connectionOptions.Bootstrap = testState.m_clientBootstrap.get();\n    testState.m_connectionOptions.SocketOptions = socketOptions;\n    testState.m_connectionOptions.HostName = String((const char *)hostName.ptr, hostName.len);\n    testState.m_connectionOptions.Port = useTls ? 443 : 80;\n",
                      "markdown": "`    Aws::Crt::Io::SocketOptions socketOptions;\n    socketOptions.SetConnectTimeoutMs(10000);\n\n    testState.m_connectionOptions.Bootstrap = testState.m_clientBootstrap.get();\n    testState.m_connectionOptions.SocketOptions = socketOptions;\n    testState.m_connectionOptions.HostName = String((const char *)hostName.ptr, hostName.len);\n    testState.m_connectionOptions.Port = useTls ? 443 : 80;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 65,
                  "endLine": 524,
                  "endColumn": 73,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_InitializeBasicAuthParameters(testState));\n\n    basicAuthConfig.Username = aws_string_c_str(testState.m_BasicUsername);\n    basicAuthConfig.Password = aws_string_c_str(testState.m_BasicPassword);\n\n    testState.m_proxyOptions.ProxyStrategy =\n        HttpProxyStrategy::CreateBasicHttpProxyStrategy(basicAuthConfig, allocator);\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_InitializeBasicAuthParameters(testState));\n\n    basicAuthConfig.Username = aws_string_c_str(testState.m_BasicUsername);\n    basicAuthConfig.Password = aws_string_c_str(testState.m_BasicPassword);\n\n    testState.m_proxyOptions.ProxyStrategy =\n        HttpProxyStrategy::CreateBasicHttpProxyStrategy(basicAuthConfig, allocator);\n",
                      "markdown": "`    ASSERT_SUCCESS(s_InitializeBasicAuthParameters(testState));\n\n    basicAuthConfig.Username = aws_string_c_str(testState.m_BasicUsername);\n    basicAuthConfig.Password = aws_string_c_str(testState.m_BasicPassword);\n\n    testState.m_proxyOptions.ProxyStrategy =\n        HttpProxyStrategy::CreateBasicHttpProxyStrategy(basicAuthConfig, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 20,
                  "endLine": 524,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_InitializeBasicAuthParameters(testState));\n\n    basicAuthConfig.Username = aws_string_c_str(testState.m_BasicUsername);\n    basicAuthConfig.Password = aws_string_c_str(testState.m_BasicPassword);\n\n    testState.m_proxyOptions.ProxyStrategy =\n        HttpProxyStrategy::CreateBasicHttpProxyStrategy(basicAuthConfig, allocator);\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_InitializeBasicAuthParameters(testState));\n\n    basicAuthConfig.Username = aws_string_c_str(testState.m_BasicUsername);\n    basicAuthConfig.Password = aws_string_c_str(testState.m_BasicPassword);\n\n    testState.m_proxyOptions.ProxyStrategy =\n        HttpProxyStrategy::CreateBasicHttpProxyStrategy(basicAuthConfig, allocator);\n",
                      "markdown": "`    ASSERT_SUCCESS(s_InitializeBasicAuthParameters(testState));\n\n    basicAuthConfig.Username = aws_string_c_str(testState.m_BasicUsername);\n    basicAuthConfig.Password = aws_string_c_str(testState.m_BasicPassword);\n\n    testState.m_proxyOptions.ProxyStrategy =\n        HttpProxyStrategy::CreateBasicHttpProxyStrategy(basicAuthConfig, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 83,
                  "endLine": 486,
                  "endColumn": 91,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_InitializeBasicAuthParameters(testState));\n\n    testState.m_proxyOptions.BasicAuthUsername = aws_string_c_str(testState.m_BasicUsername);\n    testState.m_proxyOptions.BasicAuthPassword = aws_string_c_str(testState.m_BasicPassword);\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_InitializeBasicAuthParameters(testState));\n\n    testState.m_proxyOptions.BasicAuthUsername = aws_string_c_str(testState.m_BasicUsername);\n    testState.m_proxyOptions.BasicAuthPassword = aws_string_c_str(testState.m_BasicPassword);\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    ASSERT_SUCCESS(s_InitializeBasicAuthParameters(testState));\n\n    testState.m_proxyOptions.BasicAuthUsername = aws_string_c_str(testState.m_BasicUsername);\n    testState.m_proxyOptions.BasicAuthPassword = aws_string_c_str(testState.m_BasicPassword);\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 38,
                  "endLine": 486,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(s_InitializeBasicAuthParameters(testState));\n\n    testState.m_proxyOptions.BasicAuthUsername = aws_string_c_str(testState.m_BasicUsername);\n    testState.m_proxyOptions.BasicAuthPassword = aws_string_c_str(testState.m_BasicPassword);\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(s_InitializeBasicAuthParameters(testState));\n\n    testState.m_proxyOptions.BasicAuthUsername = aws_string_c_str(testState.m_BasicUsername);\n    testState.m_proxyOptions.BasicAuthPassword = aws_string_c_str(testState.m_BasicPassword);\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    ASSERT_SUCCESS(s_InitializeBasicAuthParameters(testState));\n\n    testState.m_proxyOptions.BasicAuthUsername = aws_string_c_str(testState.m_BasicUsername);\n    testState.m_proxyOptions.BasicAuthPassword = aws_string_c_str(testState.m_BasicPassword);\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 473,
                  "startColumn": 106,
                  "endLine": 473,
                  "endColumn": 114,
                  "snippet": {
                    "text": "    struct aws_allocator *allocator = testState.m_allocator;\n\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_BasicAuthUsernameEnvVariable, &testState.m_BasicUsername));\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_BasicAuthPasswordEnvVariable, &testState.m_BasicPassword));\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    struct aws_allocator *allocator = testState.m_allocator;\n\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_BasicAuthUsernameEnvVariable, &testState.m_BasicUsername));\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_BasicAuthPasswordEnvVariable, &testState.m_BasicPassword));\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    struct aws_allocator *allocator = testState.m_allocator;\n\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_BasicAuthUsernameEnvVariable, &testState.m_BasicUsername));\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_BasicAuthPasswordEnvVariable, &testState.m_BasicPassword));\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 473,
                  "startColumn": 67,
                  "endLine": 473,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    struct aws_allocator *allocator = testState.m_allocator;\n\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_BasicAuthUsernameEnvVariable, &testState.m_BasicUsername));\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_BasicAuthPasswordEnvVariable, &testState.m_BasicPassword));\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    struct aws_allocator *allocator = testState.m_allocator;\n\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_BasicAuthUsernameEnvVariable, &testState.m_BasicUsername));\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_BasicAuthPasswordEnvVariable, &testState.m_BasicPassword));\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    struct aws_allocator *allocator = testState.m_allocator;\n\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_BasicAuthUsernameEnvVariable, &testState.m_BasicUsername));\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_BasicAuthPasswordEnvVariable, &testState.m_BasicPassword));\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 84,
                  "endLine": 466,
                  "endColumn": 92,
                  "snippet": {
                    "text": "AWS_TEST_CASE(ConnectionManagerForwardingProxy, s_TestConnectionManagerForwardingProxy)\n\nAWS_STATIC_STRING_FROM_LITERAL(s_BasicAuthUsernameEnvVariable, \"AWS_TEST_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_BasicAuthPasswordEnvVariable, \"AWS_TEST_BASIC_AUTH_PASSWORD\");\n\nstatic int s_InitializeBasicAuthParameters(ProxyIntegrationTestState &testState)\n{\n",
                    "rendered": {
                      "text": "AWS_TEST_CASE(ConnectionManagerForwardingProxy, s_TestConnectionManagerForwardingProxy)\n\nAWS_STATIC_STRING_FROM_LITERAL(s_BasicAuthUsernameEnvVariable, \"AWS_TEST_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_BasicAuthPasswordEnvVariable, \"AWS_TEST_BASIC_AUTH_PASSWORD\");\n\nstatic int s_InitializeBasicAuthParameters(ProxyIntegrationTestState &testState)\n{\n",
                      "markdown": "`AWS_TEST_CASE(ConnectionManagerForwardingProxy, s_TestConnectionManagerForwardingProxy)\n\nAWS_STATIC_STRING_FROM_LITERAL(s_BasicAuthUsernameEnvVariable, \"AWS_TEST_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_BasicAuthPasswordEnvVariable, \"AWS_TEST_BASIC_AUTH_PASSWORD\");\n\nstatic int s_InitializeBasicAuthParameters(ProxyIntegrationTestState &testState)\n{\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 42,
                  "endLine": 466,
                  "endColumn": 50,
                  "snippet": {
                    "text": "AWS_TEST_CASE(ConnectionManagerForwardingProxy, s_TestConnectionManagerForwardingProxy)\n\nAWS_STATIC_STRING_FROM_LITERAL(s_BasicAuthUsernameEnvVariable, \"AWS_TEST_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_BasicAuthPasswordEnvVariable, \"AWS_TEST_BASIC_AUTH_PASSWORD\");\n\nstatic int s_InitializeBasicAuthParameters(ProxyIntegrationTestState &testState)\n{\n",
                    "rendered": {
                      "text": "AWS_TEST_CASE(ConnectionManagerForwardingProxy, s_TestConnectionManagerForwardingProxy)\n\nAWS_STATIC_STRING_FROM_LITERAL(s_BasicAuthUsernameEnvVariable, \"AWS_TEST_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_BasicAuthPasswordEnvVariable, \"AWS_TEST_BASIC_AUTH_PASSWORD\");\n\nstatic int s_InitializeBasicAuthParameters(ProxyIntegrationTestState &testState)\n{\n",
                      "markdown": "`AWS_TEST_CASE(ConnectionManagerForwardingProxy, s_TestConnectionManagerForwardingProxy)\n\nAWS_STATIC_STRING_FROM_LITERAL(s_BasicAuthUsernameEnvVariable, \"AWS_TEST_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_BasicAuthPasswordEnvVariable, \"AWS_TEST_BASIC_AUTH_PASSWORD\");\n\nstatic int s_InitializeBasicAuthParameters(ProxyIntegrationTestState &testState)\n{\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 30,
                  "endLine": 60,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    int m_mqttErrorCode;\n\n    struct aws_string *m_BasicUsername;\n    struct aws_string *m_BasicPassword;\n\n    HttpClientConnectionProxyOptions m_proxyOptions;\n    HttpClientConnectionOptions m_connectionOptions;\n",
                    "rendered": {
                      "text": "    int m_mqttErrorCode;\n\n    struct aws_string *m_BasicUsername;\n    struct aws_string *m_BasicPassword;\n\n    HttpClientConnectionProxyOptions m_proxyOptions;\n    HttpClientConnectionOptions m_connectionOptions;\n",
                      "markdown": "`    int m_mqttErrorCode;\n\n    struct aws_string *m_BasicUsername;\n    struct aws_string *m_BasicPassword;\n\n    HttpClientConnectionProxyOptions m_proxyOptions;\n    HttpClientConnectionOptions m_connectionOptions;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 34,
                  "endLine": 42,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    ~ProxyIntegrationTestState()\n    {\n        aws_string_destroy(m_BasicUsername);\n        aws_string_destroy(m_BasicPassword);\n    }\n\n    struct aws_allocator *m_allocator;\n",
                    "rendered": {
                      "text": "    ~ProxyIntegrationTestState()\n    {\n        aws_string_destroy(m_BasicUsername);\n        aws_string_destroy(m_BasicPassword);\n    }\n\n    struct aws_allocator *m_allocator;\n",
                      "markdown": "`    ~ProxyIntegrationTestState()\n    {\n        aws_string_destroy(m_BasicUsername);\n        aws_string_destroy(m_BasicPassword);\n    }\n\n    struct aws_allocator *m_allocator;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 17,
                  "endLine": 35,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    ProxyIntegrationTestState(struct aws_allocator *allocator)\n        : m_allocator(allocator), m_streamComplete(false), m_streamStatusCode(0), m_credentialsFetched(false),\n          m_mqttConnectComplete(false), m_mqttDisconnectComplete(false), m_mqttErrorCode(0), m_BasicUsername(NULL),\n          m_BasicPassword(NULL)\n    {\n    }\n\n",
                    "rendered": {
                      "text": "    ProxyIntegrationTestState(struct aws_allocator *allocator)\n        : m_allocator(allocator), m_streamComplete(false), m_streamStatusCode(0), m_credentialsFetched(false),\n          m_mqttConnectComplete(false), m_mqttDisconnectComplete(false), m_mqttErrorCode(0), m_BasicUsername(NULL),\n          m_BasicPassword(NULL)\n    {\n    }\n\n",
                      "markdown": "`    ProxyIntegrationTestState(struct aws_allocator *allocator)\n        : m_allocator(allocator), m_streamComplete(false), m_streamStatusCode(0), m_credentialsFetched(false),\n          m_mqttConnectComplete(false), m_mqttDisconnectComplete(false), m_mqttErrorCode(0), m_BasicUsername(NULL),\n          m_BasicPassword(NULL)\n    {\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 27,
                  "endLine": 269,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    struct aws_string *proxy_port = NULL;\n\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_GetProxyHostVariable(proxyHostType), &proxy_host_name));\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_GetProxyPortVariable(proxyHostType), &proxy_port));\n\n    testState.m_proxyOptions.HostName = Aws::Crt::String(aws_string_c_str(proxy_host_name));\n    testState.m_proxyOptions.Port = static_cast<uint32_t>(atoi(aws_string_c_str(proxy_port)));\n",
                    "rendered": {
                      "text": "    struct aws_string *proxy_port = NULL;\n\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_GetProxyHostVariable(proxyHostType), &proxy_host_name));\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_GetProxyPortVariable(proxyHostType), &proxy_port));\n\n    testState.m_proxyOptions.HostName = Aws::Crt::String(aws_string_c_str(proxy_host_name));\n    testState.m_proxyOptions.Port = static_cast<uint32_t>(atoi(aws_string_c_str(proxy_port)));\n",
                      "markdown": "`    struct aws_string *proxy_port = NULL;\n\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_GetProxyHostVariable(proxyHostType), &proxy_host_name));\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_GetProxyPortVariable(proxyHostType), &proxy_port));\n\n    testState.m_proxyOptions.HostName = Aws::Crt::String(aws_string_c_str(proxy_host_name));\n    testState.m_proxyOptions.Port = static_cast<uint32_t>(atoi(aws_string_c_str(proxy_port)));\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/ProxyTest.cpp"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 27,
                  "endLine": 268,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    struct aws_string *proxy_host_name = NULL;\n    struct aws_string *proxy_port = NULL;\n\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_GetProxyHostVariable(proxyHostType), &proxy_host_name));\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_GetProxyPortVariable(proxyHostType), &proxy_port));\n\n    testState.m_proxyOptions.HostName = Aws::Crt::String(aws_string_c_str(proxy_host_name));\n",
                    "rendered": {
                      "text": "    struct aws_string *proxy_host_name = NULL;\n    struct aws_string *proxy_port = NULL;\n\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_GetProxyHostVariable(proxyHostType), &proxy_host_name));\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_GetProxyPortVariable(proxyHostType), &proxy_port));\n\n    testState.m_proxyOptions.HostName = Aws::Crt::String(aws_string_c_str(proxy_host_name));\n",
                      "markdown": "`    struct aws_string *proxy_host_name = NULL;\n    struct aws_string *proxy_port = NULL;\n\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_GetProxyHostVariable(proxyHostType), &proxy_host_name));\n    ASSERT_SUCCESS(aws_get_environment_value(allocator, s_GetProxyPortVariable(proxyHostType), &proxy_port));\n\n    testState.m_proxyOptions.HostName = Aws::Crt::String(aws_string_c_str(proxy_host_name));\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 1208,
                  "startColumn": 55,
                  "endLine": 1208,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                    "rendered": {
                      "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                      "markdown": "`    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 1128,
                  "startColumn": 55,
                  "endLine": 1128,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                    "rendered": {
                      "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                      "markdown": "`    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 1049,
                  "startColumn": 55,
                  "endLine": 1049,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                    "rendered": {
                      "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                      "markdown": "`    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 966,
                  "startColumn": 55,
                  "endLine": 966,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                    "rendered": {
                      "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                      "markdown": "`    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 885,
                  "startColumn": 55,
                  "endLine": 885,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                    "rendered": {
                      "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                      "markdown": "`    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 815,
                  "startColumn": 55,
                  "endLine": 815,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                    "rendered": {
                      "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                      "markdown": "`    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 739,
                  "startColumn": 55,
                  "endLine": 739,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                    "rendered": {
                      "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                      "markdown": "`    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 652,
                  "startColumn": 55,
                  "endLine": 652,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                    "rendered": {
                      "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                      "markdown": "`    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 551,
                  "startColumn": 55,
                  "endLine": 551,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                    "rendered": {
                      "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                      "markdown": "`    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 55,
                  "endLine": 451,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                    "rendered": {
                      "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                      "markdown": "`    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 55,
                  "endLine": 353,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                    "rendered": {
                      "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                      "markdown": "`    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 55,
                  "endLine": 262,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                    "rendered": {
                      "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                      "markdown": "`    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 55,
                  "endLine": 174,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                    "rendered": {
                      "text": "    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n",
                      "markdown": "`    Aws::Crt::String uuidStr = Uuid.ToString();\n\n    ASSERT_TRUE(connection->Connect(uuidStr.c_str(), true /*cleanSession*/, 5000 /*keepAliveTimeSecs*/));\n    ASSERT_TRUE(connectionCompletedPromise.get_future().get());\n    if (connection->Disconnect())\n    {\n        connectionClosedPromise.get_future().wait();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 747,
                  "startColumn": 30,
                  "endLine": 747,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n    aws_string_destroy(endpoint);\n    aws_string_destroy(pkcs12_key);\n    aws_string_destroy(pkcs12_password);\n    aws_string_destroy(codebuild_buildID);\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "\n    aws_string_destroy(endpoint);\n    aws_string_destroy(pkcs12_key);\n    aws_string_destroy(pkcs12_password);\n    aws_string_destroy(codebuild_buildID);\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`\n    aws_string_destroy(endpoint);\n    aws_string_destroy(pkcs12_key);\n    aws_string_destroy(pkcs12_password);\n    aws_string_destroy(codebuild_buildID);\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 706,
                  "startColumn": 64,
                  "endLine": 706,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n    Aws::Iot::Pkcs12Options testPkcs12Options;\n    testPkcs12Options.pkcs12_file = aws_string_c_str(pkcs12_key);\n    testPkcs12Options.pkcs12_password = aws_string_c_str(pkcs12_password);\n\n    Aws::Iot::MqttClient client;\n    auto clientConfigBuilder = Aws::Iot::MqttClientConnectionConfigBuilder(testPkcs12Options, allocator);\n",
                    "rendered": {
                      "text": "\n    Aws::Iot::Pkcs12Options testPkcs12Options;\n    testPkcs12Options.pkcs12_file = aws_string_c_str(pkcs12_key);\n    testPkcs12Options.pkcs12_password = aws_string_c_str(pkcs12_password);\n\n    Aws::Iot::MqttClient client;\n    auto clientConfigBuilder = Aws::Iot::MqttClientConnectionConfigBuilder(testPkcs12Options, allocator);\n",
                      "markdown": "`\n    Aws::Iot::Pkcs12Options testPkcs12Options;\n    testPkcs12Options.pkcs12_file = aws_string_c_str(pkcs12_key);\n    testPkcs12Options.pkcs12_password = aws_string_c_str(pkcs12_password);\n\n    Aws::Iot::MqttClient client;\n    auto clientConfigBuilder = Aws::Iot::MqttClientConnectionConfigBuilder(testPkcs12Options, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 706,
                  "startColumn": 29,
                  "endLine": 706,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n    Aws::Iot::Pkcs12Options testPkcs12Options;\n    testPkcs12Options.pkcs12_file = aws_string_c_str(pkcs12_key);\n    testPkcs12Options.pkcs12_password = aws_string_c_str(pkcs12_password);\n\n    Aws::Iot::MqttClient client;\n    auto clientConfigBuilder = Aws::Iot::MqttClientConnectionConfigBuilder(testPkcs12Options, allocator);\n",
                    "rendered": {
                      "text": "\n    Aws::Iot::Pkcs12Options testPkcs12Options;\n    testPkcs12Options.pkcs12_file = aws_string_c_str(pkcs12_key);\n    testPkcs12Options.pkcs12_password = aws_string_c_str(pkcs12_password);\n\n    Aws::Iot::MqttClient client;\n    auto clientConfigBuilder = Aws::Iot::MqttClientConnectionConfigBuilder(testPkcs12Options, allocator);\n",
                      "markdown": "`\n    Aws::Iot::Pkcs12Options testPkcs12Options;\n    testPkcs12Options.pkcs12_file = aws_string_c_str(pkcs12_key);\n    testPkcs12Options.pkcs12_password = aws_string_c_str(pkcs12_password);\n\n    Aws::Iot::MqttClient client;\n    auto clientConfigBuilder = Aws::Iot::MqttClientConnectionConfigBuilder(testPkcs12Options, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 34,
                  "endLine": 689,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        printf(\"Environment Variables are not set for the test, skip the test\");\n        aws_string_destroy(endpoint);\n        aws_string_destroy(pkcs12_key);\n        aws_string_destroy(pkcs12_password);\n\n        // If this is in Codebuild, return as a 'success' even though it is a skip\n        if (codebuild_buildID && aws_string_is_valid(codebuild_buildID))\n",
                    "rendered": {
                      "text": "        printf(\"Environment Variables are not set for the test, skip the test\");\n        aws_string_destroy(endpoint);\n        aws_string_destroy(pkcs12_key);\n        aws_string_destroy(pkcs12_password);\n\n        // If this is in Codebuild, return as a 'success' even though it is a skip\n        if (codebuild_buildID && aws_string_is_valid(codebuild_buildID))\n",
                      "markdown": "`        printf(\"Environment Variables are not set for the test, skip the test\");\n        aws_string_destroy(endpoint);\n        aws_string_destroy(pkcs12_key);\n        aws_string_destroy(pkcs12_password);\n\n        // If this is in Codebuild, return as a 'success' even though it is a skip\n        if (codebuild_buildID && aws_string_is_valid(codebuild_buildID))\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 682,
                  "startColumn": 97,
                  "endLine": 682,
                  "endColumn": 105,
                  "snippet": {
                    "text": "\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt311_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt311_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt311_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 682,
                  "startColumn": 79,
                  "endLine": 682,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt311_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt311_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt311_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 677,
                  "startColumn": 30,
                  "endLine": 677,
                  "endColumn": 38,
                  "snippet": {
                    "text": "{\n    struct aws_string *endpoint = NULL;\n    struct aws_string *pkcs12_key = NULL;\n    struct aws_string *pkcs12_password = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n",
                    "rendered": {
                      "text": "{\n    struct aws_string *endpoint = NULL;\n    struct aws_string *pkcs12_key = NULL;\n    struct aws_string *pkcs12_password = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n",
                      "markdown": "`{\n    struct aws_string *endpoint = NULL;\n    struct aws_string *pkcs12_key = NULL;\n    struct aws_string *pkcs12_password = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 663,
                  "startColumn": 30,
                  "endLine": 663,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    aws_string_destroy(pkcs11_cert);\n    aws_string_destroy(pkcs11_userPin);\n    aws_string_destroy(pkcs11_tokenLabel);\n    aws_string_destroy(pkcs11_privateKeyLabel);\n    aws_string_destroy(pkcs11_ca);\n    aws_string_destroy(pkcs11_use_openssl);\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    aws_string_destroy(pkcs11_cert);\n    aws_string_destroy(pkcs11_userPin);\n    aws_string_destroy(pkcs11_tokenLabel);\n    aws_string_destroy(pkcs11_privateKeyLabel);\n    aws_string_destroy(pkcs11_ca);\n    aws_string_destroy(pkcs11_use_openssl);\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    aws_string_destroy(pkcs11_cert);\n    aws_string_destroy(pkcs11_userPin);\n    aws_string_destroy(pkcs11_tokenLabel);\n    aws_string_destroy(pkcs11_privateKeyLabel);\n    aws_string_destroy(pkcs11_ca);\n    aws_string_destroy(pkcs11_use_openssl);\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 67,
                  "endLine": 616,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    pkcs11Options.SetCertificateFilePath(aws_string_c_str(pkcs11_cert));\n    pkcs11Options.SetUserPin(aws_string_c_str(pkcs11_userPin));\n    pkcs11Options.SetTokenLabel(aws_string_c_str(pkcs11_tokenLabel));\n    pkcs11Options.SetPrivateKeyObjectLabel(aws_string_c_str(pkcs11_privateKeyLabel));\n\n    Aws::Iot::MqttClient client;\n    auto clientConfigBuilder = Aws::Iot::MqttClientConnectionConfigBuilder(pkcs11Options, allocator);\n",
                    "rendered": {
                      "text": "    pkcs11Options.SetCertificateFilePath(aws_string_c_str(pkcs11_cert));\n    pkcs11Options.SetUserPin(aws_string_c_str(pkcs11_userPin));\n    pkcs11Options.SetTokenLabel(aws_string_c_str(pkcs11_tokenLabel));\n    pkcs11Options.SetPrivateKeyObjectLabel(aws_string_c_str(pkcs11_privateKeyLabel));\n\n    Aws::Iot::MqttClient client;\n    auto clientConfigBuilder = Aws::Iot::MqttClientConnectionConfigBuilder(pkcs11Options, allocator);\n",
                      "markdown": "`    pkcs11Options.SetCertificateFilePath(aws_string_c_str(pkcs11_cert));\n    pkcs11Options.SetUserPin(aws_string_c_str(pkcs11_userPin));\n    pkcs11Options.SetTokenLabel(aws_string_c_str(pkcs11_tokenLabel));\n    pkcs11Options.SetPrivateKeyObjectLabel(aws_string_c_str(pkcs11_privateKeyLabel));\n\n    Aws::Iot::MqttClient client;\n    auto clientConfigBuilder = Aws::Iot::MqttClientConnectionConfigBuilder(pkcs11Options, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 21,
                  "endLine": 616,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    pkcs11Options.SetCertificateFilePath(aws_string_c_str(pkcs11_cert));\n    pkcs11Options.SetUserPin(aws_string_c_str(pkcs11_userPin));\n    pkcs11Options.SetTokenLabel(aws_string_c_str(pkcs11_tokenLabel));\n    pkcs11Options.SetPrivateKeyObjectLabel(aws_string_c_str(pkcs11_privateKeyLabel));\n\n    Aws::Iot::MqttClient client;\n    auto clientConfigBuilder = Aws::Iot::MqttClientConnectionConfigBuilder(pkcs11Options, allocator);\n",
                    "rendered": {
                      "text": "    pkcs11Options.SetCertificateFilePath(aws_string_c_str(pkcs11_cert));\n    pkcs11Options.SetUserPin(aws_string_c_str(pkcs11_userPin));\n    pkcs11Options.SetTokenLabel(aws_string_c_str(pkcs11_tokenLabel));\n    pkcs11Options.SetPrivateKeyObjectLabel(aws_string_c_str(pkcs11_privateKeyLabel));\n\n    Aws::Iot::MqttClient client;\n    auto clientConfigBuilder = Aws::Iot::MqttClientConnectionConfigBuilder(pkcs11Options, allocator);\n",
                      "markdown": "`    pkcs11Options.SetCertificateFilePath(aws_string_c_str(pkcs11_cert));\n    pkcs11Options.SetUserPin(aws_string_c_str(pkcs11_userPin));\n    pkcs11Options.SetTokenLabel(aws_string_c_str(pkcs11_tokenLabel));\n    pkcs11Options.SetPrivateKeyObjectLabel(aws_string_c_str(pkcs11_privateKeyLabel));\n\n    Aws::Iot::MqttClient client;\n    auto clientConfigBuilder = Aws::Iot::MqttClientConnectionConfigBuilder(pkcs11Options, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 601,
                  "startColumn": 34,
                  "endLine": 601,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        aws_string_destroy(pkcs11_cert);\n        aws_string_destroy(pkcs11_userPin);\n        aws_string_destroy(pkcs11_tokenLabel);\n        aws_string_destroy(pkcs11_privateKeyLabel);\n        aws_string_destroy(pkcs11_ca);\n        aws_string_destroy(pkcs11_use_openssl);\n        return AWS_OP_SKIP;\n",
                    "rendered": {
                      "text": "        aws_string_destroy(pkcs11_cert);\n        aws_string_destroy(pkcs11_userPin);\n        aws_string_destroy(pkcs11_tokenLabel);\n        aws_string_destroy(pkcs11_privateKeyLabel);\n        aws_string_destroy(pkcs11_ca);\n        aws_string_destroy(pkcs11_use_openssl);\n        return AWS_OP_SKIP;\n",
                      "markdown": "`        aws_string_destroy(pkcs11_cert);\n        aws_string_destroy(pkcs11_userPin);\n        aws_string_destroy(pkcs11_tokenLabel);\n        aws_string_destroy(pkcs11_privateKeyLabel);\n        aws_string_destroy(pkcs11_ca);\n        aws_string_destroy(pkcs11_use_openssl);\n        return AWS_OP_SKIP;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 590,
                  "startColumn": 102,
                  "endLine": 590,
                  "endColumn": 112,
                  "snippet": {
                    "text": " |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_token_label, &pkcs11_tokenLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_private_key_label, &pkcs11_privateKeyLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_ca, &pkcs11_ca);\n    s_GetEnvVariable(allocator, s_test_envName_iot_pkcs11_use_openssl, &pkcs11_use_openssl);\n    if (error != AWS_OP_SUCCESS || pkcs11_use_openssl == NULL)\n    {\n        printf(\"Environment Variables ",
                    "rendered": {
                      "text": " |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_token_label, &pkcs11_tokenLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_private_key_label, &pkcs11_privateKeyLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_ca, &pkcs11_ca);\n    s_GetEnvVariable(allocator, s_test_envName_iot_pkcs11_use_openssl, &pkcs11_use_openssl);\n    if (error != AWS_OP_SUCCESS || pkcs11_use_openssl == NULL)\n    {\n        printf(\"Environment Variables ",
                      "markdown": "` |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_token_label, &pkcs11_tokenLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_private_key_label, &pkcs11_privateKeyLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_ca, &pkcs11_ca);\n    s_GetEnvVariable(allocator, s_test_envName_iot_pkcs11_use_openssl, &pkcs11_use_openssl);\n    if (error != AWS_OP_SUCCESS || pkcs11_use_openssl == NULL)\n    {\n        printf(\"Environment Variables `"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 590,
                  "startColumn": 75,
                  "endLine": 590,
                  "endColumn": 86,
                  "snippet": {
                    "text": "t, &pkcs11_cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_token_label, &pkcs11_tokenLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_private_key_label, &pkcs11_privateKeyLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_ca, &pkcs11_ca);\n    s_GetEnvVariable(allocator, s_test_envName_iot_pkcs11_use_openssl, &pkcs11_use_openssl);\n    if (error != AWS_OP_SUCCESS || pkcs11_use_openssl == NULL)\n    {\n        prin",
                    "rendered": {
                      "text": "t, &pkcs11_cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_token_label, &pkcs11_tokenLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_private_key_label, &pkcs11_privateKeyLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_ca, &pkcs11_ca);\n    s_GetEnvVariable(allocator, s_test_envName_iot_pkcs11_use_openssl, &pkcs11_use_openssl);\n    if (error != AWS_OP_SUCCESS || pkcs11_use_openssl == NULL)\n    {\n        prin",
                      "markdown": "`t, &pkcs11_cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_token_label, &pkcs11_tokenLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_private_key_label, &pkcs11_privateKeyLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_ca, &pkcs11_ca);\n    s_GetEnvVariable(allocator, s_test_envName_iot_pkcs11_use_openssl, &pkcs11_use_openssl);\n    if (error != AWS_OP_SUCCESS || pkcs11_use_openssl == NULL)\n    {\n        prin`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 30,
                  "endLine": 581,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    struct aws_string *pkcs11_cert = NULL;\n    struct aws_string *pkcs11_userPin = NULL;\n    struct aws_string *pkcs11_tokenLabel = NULL;\n    struct aws_string *pkcs11_privateKeyLabel = NULL;\n    struct aws_string *pkcs11_ca = NULL;\n    struct aws_string *pkcs11_use_openssl = NULL;\n\n",
                    "rendered": {
                      "text": "    struct aws_string *pkcs11_cert = NULL;\n    struct aws_string *pkcs11_userPin = NULL;\n    struct aws_string *pkcs11_tokenLabel = NULL;\n    struct aws_string *pkcs11_privateKeyLabel = NULL;\n    struct aws_string *pkcs11_ca = NULL;\n    struct aws_string *pkcs11_use_openssl = NULL;\n\n",
                      "markdown": "`    struct aws_string *pkcs11_cert = NULL;\n    struct aws_string *pkcs11_userPin = NULL;\n    struct aws_string *pkcs11_tokenLabel = NULL;\n    struct aws_string *pkcs11_privateKeyLabel = NULL;\n    struct aws_string *pkcs11_ca = NULL;\n    struct aws_string *pkcs11_use_openssl = NULL;\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 560,
                  "startColumn": 23,
                  "endLine": 560,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(unencodedSignature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n",
                    "rendered": {
                      "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(unencodedSignature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n",
                      "markdown": "`    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(unencodedSignature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 25,
                  "endLine": 520,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        aws_string_c_str(username),\n        aws_string_c_str(authname),\n        aws_string_c_str(unencodedSignature),\n        aws_string_c_str(password),\n        aws_string_c_str(tokenKeyName),\n        aws_string_c_str(tokenValue));\n    auto clientConfig = clientConfigBuilder.Build();\n",
                    "rendered": {
                      "text": "        aws_string_c_str(username),\n        aws_string_c_str(authname),\n        aws_string_c_str(unencodedSignature),\n        aws_string_c_str(password),\n        aws_string_c_str(tokenKeyName),\n        aws_string_c_str(tokenValue));\n    auto clientConfig = clientConfigBuilder.Build();\n",
                      "markdown": "`        aws_string_c_str(username),\n        aws_string_c_str(authname),\n        aws_string_c_str(unencodedSignature),\n        aws_string_c_str(password),\n        aws_string_c_str(tokenKeyName),\n        aws_string_c_str(tokenValue));\n    auto clientConfig = clientConfigBuilder.Build();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 498,
                  "startColumn": 27,
                  "endLine": 498,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(unencodedSignature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n",
                    "rendered": {
                      "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(unencodedSignature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n",
                      "markdown": "`        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(unencodedSignature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 490,
                  "startColumn": 80,
                  "endLine": 490,
                  "endColumn": 90,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &signingRegion);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &signingRegion);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &signingRegion);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 80,
                  "endLine": 489,
                  "endColumn": 90,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &signingRegion);\n    if (error != AWS_OP_SUCCESS)\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &signingRegion);\n    if (error != AWS_OP_SUCCESS)\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &signingRegion);\n    if (error != AWS_OP_SUCCESS)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 58,
                  "endLine": 488,
                  "endColumn": 68,
                  "snippet": {
                    "text": " error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(alloc",
                    "rendered": {
                      "text": " error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(alloc",
                      "markdown": "` error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(alloc`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 96,
                  "endLine": 486,
                  "endColumn": 104,
                  "snippet": {
                    "text": "ror |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_m",
                    "rendered": {
                      "text": "ror |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_m",
                      "markdown": "`ror |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_m`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 85,
                  "endLine": 486,
                  "endColumn": 93,
                  "snippet": {
                    "text": "nt);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(all",
                    "rendered": {
                      "text": "nt);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(all",
                      "markdown": "`nt);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(all`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 477,
                  "startColumn": 23,
                  "endLine": 477,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *unencodedSignature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n",
                    "rendered": {
                      "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *unencodedSignature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n",
                      "markdown": "`    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *unencodedSignature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 460,
                  "startColumn": 23,
                  "endLine": 460,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(signature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n",
                    "rendered": {
                      "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(signature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n",
                      "markdown": "`    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(signature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 25,
                  "endLine": 420,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        aws_string_c_str(username),\n        aws_string_c_str(authname),\n        aws_string_c_str(signature),\n        aws_string_c_str(password),\n        aws_string_c_str(tokenKeyName),\n        aws_string_c_str(tokenValue));\n    auto clientConfig = clientConfigBuilder.Build();\n",
                    "rendered": {
                      "text": "        aws_string_c_str(username),\n        aws_string_c_str(authname),\n        aws_string_c_str(signature),\n        aws_string_c_str(password),\n        aws_string_c_str(tokenKeyName),\n        aws_string_c_str(tokenValue));\n    auto clientConfig = clientConfigBuilder.Build();\n",
                      "markdown": "`        aws_string_c_str(username),\n        aws_string_c_str(authname),\n        aws_string_c_str(signature),\n        aws_string_c_str(password),\n        aws_string_c_str(tokenKeyName),\n        aws_string_c_str(tokenValue));\n    auto clientConfig = clientConfigBuilder.Build();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 27,
                  "endLine": 398,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(signature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n",
                    "rendered": {
                      "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(signature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n",
                      "markdown": "`        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(signature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 80,
                  "endLine": 390,
                  "endColumn": 90,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &signingRegion);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &signingRegion);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &signingRegion);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 80,
                  "endLine": 389,
                  "endColumn": 90,
                  "snippet": {
                    "text": "   error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &signingRegion);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variable",
                    "rendered": {
                      "text": "   error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &signingRegion);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variable",
                      "markdown": "`   error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &signingRegion);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variable`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 80,
                  "endLine": 388,
                  "endColumn": 90,
                  "snippet": {
                    "text": "ame);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_tes",
                    "rendered": {
                      "text": "ame);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_tes",
                      "markdown": "`ame);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_tes`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 96,
                  "endLine": 387,
                  "endColumn": 104,
                  "snippet": {
                    "text": "ror |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign",
                    "rendered": {
                      "text": "ror |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign",
                      "markdown": "`ror |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 85,
                  "endLine": 387,
                  "endColumn": 93,
                  "snippet": {
                    "text": "nt);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envNa",
                    "rendered": {
                      "text": "nt);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envNa",
                      "markdown": "`nt);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envNa`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 23,
                  "endLine": 378,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *signature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n",
                    "rendered": {
                      "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *signature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n",
                      "markdown": "`    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *signature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 23,
                  "endLine": 362,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(unencodedSignature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n",
                    "rendered": {
                      "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(unencodedSignature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n",
                      "markdown": "`    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(unencodedSignature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 25,
                  "endLine": 322,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        aws_string_c_str(username),\n        aws_string_c_str(authname),\n        aws_string_c_str(unencodedSignature),\n        aws_string_c_str(password),\n        aws_string_c_str(tokenKeyName),\n        aws_string_c_str(tokenValue));\n    auto clientConfig = clientConfigBuilder.Build();\n",
                    "rendered": {
                      "text": "        aws_string_c_str(username),\n        aws_string_c_str(authname),\n        aws_string_c_str(unencodedSignature),\n        aws_string_c_str(password),\n        aws_string_c_str(tokenKeyName),\n        aws_string_c_str(tokenValue));\n    auto clientConfig = clientConfigBuilder.Build();\n",
                      "markdown": "`        aws_string_c_str(username),\n        aws_string_c_str(authname),\n        aws_string_c_str(unencodedSignature),\n        aws_string_c_str(password),\n        aws_string_c_str(tokenKeyName),\n        aws_string_c_str(tokenValue));\n    auto clientConfig = clientConfigBuilder.Build();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 27,
                  "endLine": 306,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(unencodedSignature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n",
                    "rendered": {
                      "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(unencodedSignature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n",
                      "markdown": "`        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(unencodedSignature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 80,
                  "endLine": 299,
                  "endColumn": 90,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                      "markdown": "`    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 80,
                  "endLine": 298,
                  "endColumn": 90,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 58,
                  "endLine": 297,
                  "endColumn": 68,
                  "snippet": {
                    "text": " error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n  ",
                    "rendered": {
                      "text": " error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n  ",
                      "markdown": "` error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n  `"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 96,
                  "endLine": 295,
                  "endColumn": 104,
                  "snippet": {
                    "text": "ror |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_m",
                    "rendered": {
                      "text": "ror |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_m",
                      "markdown": "`ror |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_m`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 85,
                  "endLine": 295,
                  "endColumn": 93,
                  "snippet": {
                    "text": "nt);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(all",
                    "rendered": {
                      "text": "nt);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(all",
                      "markdown": "`nt);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(all`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 23,
                  "endLine": 287,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *unencodedSignature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n",
                    "rendered": {
                      "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *unencodedSignature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n",
                      "markdown": "`    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *unencodedSignature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 23,
                  "endLine": 271,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(signature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n",
                    "rendered": {
                      "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(signature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n",
                      "markdown": "`    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(signature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 25,
                  "endLine": 231,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        aws_string_c_str(username),\n        aws_string_c_str(authname),\n        aws_string_c_str(signature),\n        aws_string_c_str(password),\n        aws_string_c_str(tokenKeyName),\n        aws_string_c_str(tokenValue));\n    auto clientConfig = clientConfigBuilder.Build();\n",
                    "rendered": {
                      "text": "        aws_string_c_str(username),\n        aws_string_c_str(authname),\n        aws_string_c_str(signature),\n        aws_string_c_str(password),\n        aws_string_c_str(tokenKeyName),\n        aws_string_c_str(tokenValue));\n    auto clientConfig = clientConfigBuilder.Build();\n",
                      "markdown": "`        aws_string_c_str(username),\n        aws_string_c_str(authname),\n        aws_string_c_str(signature),\n        aws_string_c_str(password),\n        aws_string_c_str(tokenKeyName),\n        aws_string_c_str(tokenValue));\n    auto clientConfig = clientConfigBuilder.Build();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 27,
                  "endLine": 215,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(signature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n",
                    "rendered": {
                      "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(signature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n",
                      "markdown": "`        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(signature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 80,
                  "endLine": 208,
                  "endColumn": 90,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 80,
                  "endLine": 207,
                  "endColumn": 90,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 80,
                  "endLine": 206,
                  "endColumn": 90,
                  "snippet": {
                    "text": "ame);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(",
                    "rendered": {
                      "text": "ame);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(",
                      "markdown": "`ame);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 96,
                  "endLine": 205,
                  "endColumn": 104,
                  "snippet": {
                    "text": "ror |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign",
                    "rendered": {
                      "text": "ror |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign",
                      "markdown": "`ror |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 85,
                  "endLine": 205,
                  "endColumn": 93,
                  "snippet": {
                    "text": "nt);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envNa",
                    "rendered": {
                      "text": "nt);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envNa",
                      "markdown": "`nt);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envNa`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 23,
                  "endLine": 197,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *signature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n",
                    "rendered": {
                      "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *signature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n",
                      "markdown": "`    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *signature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 23,
                  "endLine": 183,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(empty_string);\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(empty_string);\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(empty_string);\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 25,
                  "endLine": 145,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        aws_string_c_str(username),\n        aws_string_c_str(authname),\n        aws_string_c_str(empty_string),\n        aws_string_c_str(password));\n    auto clientConfig = clientConfigBuilder.Build();\n    ASSERT_TRUE(clientConfig);\n    auto connection = client.NewConnection(clientConfig);\n",
                    "rendered": {
                      "text": "        aws_string_c_str(username),\n        aws_string_c_str(authname),\n        aws_string_c_str(empty_string),\n        aws_string_c_str(password));\n    auto clientConfig = clientConfigBuilder.Build();\n    ASSERT_TRUE(clientConfig);\n    auto connection = client.NewConnection(clientConfig);\n",
                      "markdown": "`        aws_string_c_str(username),\n        aws_string_c_str(authname),\n        aws_string_c_str(empty_string),\n        aws_string_c_str(password));\n    auto clientConfig = clientConfigBuilder.Build();\n    ASSERT_TRUE(clientConfig);\n    auto connection = client.NewConnection(clientConfig);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 27,
                  "endLine": 131,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(empty_string);\n        return AWS_OP_SKIP;\n    }\n",
                    "rendered": {
                      "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(empty_string);\n        return AWS_OP_SKIP;\n    }\n",
                      "markdown": "`        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(empty_string);\n        return AWS_OP_SKIP;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 98,
                  "endLine": 124,
                  "endColumn": 106,
                  "snippet": {
                    "text": "    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                    "rendered": {
                      "text": "    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                      "markdown": "`    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 87,
                  "endLine": 124,
                  "endColumn": 95,
                  "snippet": {
                    "text": "    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                    "rendered": {
                      "text": "    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                      "markdown": "`    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 23,
                  "endLine": 118,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *empty_string = aws_string_new_from_c_str(allocator, \"\");\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n",
                    "rendered": {
                      "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *empty_string = aws_string_new_from_c_str(allocator, \"\");\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n",
                      "markdown": "`    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *empty_string = aws_string_new_from_c_str(allocator, \"\");\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 42,
                  "endLine": 68,
                  "endColumn": 50,
                  "snippet": {
                    "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs12_key, \"AWS_TEST_MQTT311_IOT_CORE_PKCS12_KEY\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_pkcs12_key_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_PKCS12_KEY_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_windows_cert, \"AWS_TEST_MQTT311_IOT_CORE_WINDOWS_CERT_STORE\");\n\n",
                    "rendered": {
                      "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs12_key, \"AWS_TEST_MQTT311_IOT_CORE_PKCS12_KEY\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_pkcs12_key_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_PKCS12_KEY_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_windows_cert, \"AWS_TEST_MQTT311_IOT_CORE_WINDOWS_CERT_STORE\");\n\n",
                      "markdown": "`AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs12_key, \"AWS_TEST_MQTT311_IOT_CORE_PKCS12_KEY\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_pkcs12_key_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_PKCS12_KEY_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_windows_cert, \"AWS_TEST_MQTT311_IOT_CORE_WINDOWS_CERT_STORE\");\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 42,
                  "endLine": 67,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs12_key, \"AWS_TEST_MQTT311_IOT_CORE_PKCS12_KEY\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_pkcs12_key_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_PKCS12_KEY_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_windows_cert, \"AWS_TEST_MQTT311_IOT_CORE_WINDOWS_CERT_STORE\");\n",
                    "rendered": {
                      "text": "\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs12_key, \"AWS_TEST_MQTT311_IOT_CORE_PKCS12_KEY\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_pkcs12_key_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_PKCS12_KEY_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_windows_cert, \"AWS_TEST_MQTT311_IOT_CORE_WINDOWS_CERT_STORE\");\n",
                      "markdown": "`\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs12_key, \"AWS_TEST_MQTT311_IOT_CORE_PKCS12_KEY\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_pkcs12_key_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_PKCS12_KEY_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_windows_cert, \"AWS_TEST_MQTT311_IOT_CORE_WINDOWS_CERT_STORE\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 65,
                  "endLine": 59,
                  "endColumn": 76,
                  "snippet": {
                    "text": "1_lib, \"AWS_TEST_PKCS11_LIB\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_token_label, \"AWS_TEST_PKCS11_TOKEN_LABEL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_pin, \"AWS_TEST_PKCS11_PIN\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_private_key_label, \"AWS_TEST_PKCS11_PKEY_LABEL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_cert, \"AWS_TEST_PKCS11_CERT_FILE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_ca, \"AWS_TEST_PKCS11_CA_FILE\");\n// C++ specific PKCS11 check: only runs PKCS11 if 'DUSE_OPENSSL",
                    "rendered": {
                      "text": "1_lib, \"AWS_TEST_PKCS11_LIB\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_token_label, \"AWS_TEST_PKCS11_TOKEN_LABEL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_pin, \"AWS_TEST_PKCS11_PIN\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_private_key_label, \"AWS_TEST_PKCS11_PKEY_LABEL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_cert, \"AWS_TEST_PKCS11_CERT_FILE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_ca, \"AWS_TEST_PKCS11_CA_FILE\");\n// C++ specific PKCS11 check: only runs PKCS11 if 'DUSE_OPENSSL",
                      "markdown": "`1_lib, \"AWS_TEST_PKCS11_LIB\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_token_label, \"AWS_TEST_PKCS11_TOKEN_LABEL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_pin, \"AWS_TEST_PKCS11_PIN\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_private_key_label, \"AWS_TEST_PKCS11_PKEY_LABEL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_cert, \"AWS_TEST_PKCS11_CERT_FILE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_ca, \"AWS_TEST_PKCS11_CA_FILE\");\n// C++ specific PKCS11 check: only runs PKCS11 if 'DUSE_OPENSSL`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 43,
                  "endLine": 53,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE_UNENCODED\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_lib, \"AWS_TEST_PKCS11_LIB\");\n",
                    "rendered": {
                      "text": "    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE_UNENCODED\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_lib, \"AWS_TEST_PKCS11_LIB\");\n",
                      "markdown": "`    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE_UNENCODED\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_lib, \"AWS_TEST_PKCS11_LIB\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 43,
                  "endLine": 50,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_KEY_NAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n",
                    "rendered": {
                      "text": "    s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_KEY_NAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n",
                      "markdown": "`    s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_KEY_NAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 43,
                  "endLine": 47,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_KEY_NAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature,\n",
                    "rendered": {
                      "text": "    s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_KEY_NAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature,\n",
                      "markdown": "`    s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_KEY_NAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 43,
                  "endLine": 44,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    s_mqtt311_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey,\n",
                    "rendered": {
                      "text": "    s_mqtt311_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey,\n",
                      "markdown": "`    s_mqtt311_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 50,
                  "endLine": 42,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\n",
                    "rendered": {
                      "text": "    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\n",
                      "markdown": "`    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 48,
                  "endLine": 41,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    s_mqtt311_test_envName_iot_sign_custom_auth_username,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue,\n",
                    "rendered": {
                      "text": "    s_mqtt311_test_envName_iot_sign_custom_auth_username,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue,\n",
                      "markdown": "`    s_mqtt311_test_envName_iot_sign_custom_auth_username,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 53,
                  "endLine": 32,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    \"AWS_TEST_MQTT311_IOT_CORE_NO_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_nosign_custom_auth_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_NO_SIGNING_AUTHORIZER_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_name,\n",
                    "rendered": {
                      "text": "    \"AWS_TEST_MQTT311_IOT_CORE_NO_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_nosign_custom_auth_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_NO_SIGNING_AUTHORIZER_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_name,\n",
                      "markdown": "`    \"AWS_TEST_MQTT311_IOT_CORE_NO_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_nosign_custom_auth_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_NO_SIGNING_AUTHORIZER_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_name,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 50,
                  "endLine": 31,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    s_mqtt311_test_envName_iot_nosign_custom_auth_username,\n    \"AWS_TEST_MQTT311_IOT_CORE_NO_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_nosign_custom_auth_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_NO_SIGNING_AUTHORIZER_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n",
                    "rendered": {
                      "text": "    s_mqtt311_test_envName_iot_nosign_custom_auth_username,\n    \"AWS_TEST_MQTT311_IOT_CORE_NO_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_nosign_custom_auth_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_NO_SIGNING_AUTHORIZER_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n",
                      "markdown": "`    s_mqtt311_test_envName_iot_nosign_custom_auth_username,\n    \"AWS_TEST_MQTT311_IOT_CORE_NO_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_nosign_custom_auth_password,\n    \"AWS_TEST_MQTT311_IOT_CORE_NO_SIGNING_AUTHORIZER_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 34,
                  "endLine": 488,
                  "endColumn": 83,
                  "snippet": {
                    "text": "th_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311",
                    "rendered": {
                      "text": "th_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311",
                      "markdown": "`th_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    error |= s_GetEnvVariable(allocator, s_mqtt311`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 34,
                  "endLine": 297,
                  "endColumn": 83,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 19,
                  "endLine": 53,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE_UNENCODED\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_lib, \"AWS_TEST_PKCS11_LIB\");\n",
                    "rendered": {
                      "text": "    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE_UNENCODED\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_lib, \"AWS_TEST_PKCS11_LIB\");\n",
                      "markdown": "`    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n    \"AWS_TEST_MQTT311_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE_UNENCODED\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_pkcs11_lib, \"AWS_TEST_PKCS11_LIB\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 1154,
                  "startColumn": 71,
                  "endLine": 1154,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    struct aws_string *secretAccessKey = NULL;\n    struct aws_string *sessionToken = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt_cred_access_key, &accessKey);\n    error |= s_GetEnvVariable(allocator, s_mqtt_cred_secret_access_key, &secretAccessKey);\n",
                    "rendered": {
                      "text": "    struct aws_string *secretAccessKey = NULL;\n    struct aws_string *sessionToken = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt_cred_access_key, &accessKey);\n    error |= s_GetEnvVariable(allocator, s_mqtt_cred_secret_access_key, &secretAccessKey);\n",
                      "markdown": "`    struct aws_string *secretAccessKey = NULL;\n    struct aws_string *sessionToken = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt_cred_access_key, &accessKey);\n    error |= s_GetEnvVariable(allocator, s_mqtt_cred_secret_access_key, &secretAccessKey);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 1073,
                  "startColumn": 71,
                  "endLine": 1073,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    struct aws_string *profileCredentials = NULL;\n    struct aws_string *profileConfig = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_profile_credentials, &profileCredentials);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_profile_config, &profileConfig);\n",
                    "rendered": {
                      "text": "    struct aws_string *profileCredentials = NULL;\n    struct aws_string *profileConfig = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_profile_credentials, &profileCredentials);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_profile_config, &profileConfig);\n",
                      "markdown": "`    struct aws_string *profileCredentials = NULL;\n    struct aws_string *profileConfig = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_profile_credentials, &profileCredentials);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_profile_config, &profileConfig);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 991,
                  "startColumn": 71,
                  "endLine": 991,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    struct aws_string *cognitoEndpoint = NULL;\n    struct aws_string *cognitoIdentity = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_cognito_endpoint, &cognitoEndpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_cognito_identity, &cognitoIdentity);\n",
                    "rendered": {
                      "text": "    struct aws_string *cognitoEndpoint = NULL;\n    struct aws_string *cognitoIdentity = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_cognito_endpoint, &cognitoEndpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_cognito_identity, &cognitoIdentity);\n",
                      "markdown": "`    struct aws_string *cognitoEndpoint = NULL;\n    struct aws_string *cognitoIdentity = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_cognito_endpoint, &cognitoEndpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_cognito_identity, &cognitoIdentity);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 908,
                  "startColumn": 71,
                  "endLine": 908,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    struct aws_string *secretAccessKey = NULL;\n    struct aws_string *sessionToken = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_credential_access_key, &accessKeyId);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_credential_secret_access_key, &secretAccessKey);\n",
                    "rendered": {
                      "text": "    struct aws_string *secretAccessKey = NULL;\n    struct aws_string *sessionToken = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_credential_access_key, &accessKeyId);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_credential_secret_access_key, &secretAccessKey);\n",
                      "markdown": "`    struct aws_string *secretAccessKey = NULL;\n    struct aws_string *sessionToken = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_credential_access_key, &accessKeyId);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_credential_secret_access_key, &secretAccessKey);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 836,
                  "startColumn": 71,
                  "endLine": 836,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *region = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &region);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *region = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &region);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`    struct aws_string *endpoint = NULL;\n    struct aws_string *region = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_region, &region);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 762,
                  "startColumn": 71,
                  "endLine": 762,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    struct aws_string *windows_cert = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_windows_cert, &windows_cert);\n    s_GetEnvVariable(allocator, s_mqtt311_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n",
                    "rendered": {
                      "text": "    struct aws_string *windows_cert = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_windows_cert, &windows_cert);\n    s_GetEnvVariable(allocator, s_mqtt311_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n",
                      "markdown": "`    struct aws_string *windows_cert = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_windows_cert, &windows_cert);\n    s_GetEnvVariable(allocator, s_mqtt311_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 680,
                  "startColumn": 71,
                  "endLine": 680,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    struct aws_string *pkcs12_password = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt311_test_envName_codebuild, &codebuild_buildID);\n",
                    "rendered": {
                      "text": "    struct aws_string *pkcs12_password = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt311_test_envName_codebuild, &codebuild_buildID);\n",
                      "markdown": "`    struct aws_string *pkcs12_password = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt311_test_envName_codebuild, &codebuild_buildID);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 585,
                  "startColumn": 71,
                  "endLine": 585,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    struct aws_string *pkcs11_ca = NULL;\n    struct aws_string *pkcs11_use_openssl = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_lib, &pkcs11_lib);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_cert, &pkcs11_cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n",
                    "rendered": {
                      "text": "    struct aws_string *pkcs11_ca = NULL;\n    struct aws_string *pkcs11_use_openssl = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_lib, &pkcs11_lib);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_cert, &pkcs11_cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n",
                      "markdown": "`    struct aws_string *pkcs11_ca = NULL;\n    struct aws_string *pkcs11_use_openssl = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_lib, &pkcs11_lib);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_cert, &pkcs11_cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 483,
                  "startColumn": 71,
                  "endLine": 483,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    struct aws_string *tokenValue = NULL;\n    struct aws_string *signingRegion = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n",
                    "rendered": {
                      "text": "    struct aws_string *tokenValue = NULL;\n    struct aws_string *signingRegion = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n",
                      "markdown": "`    struct aws_string *tokenValue = NULL;\n    struct aws_string *signingRegion = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 71,
                  "endLine": 384,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    struct aws_string *tokenValue = NULL;\n    struct aws_string *signingRegion = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n",
                    "rendered": {
                      "text": "    struct aws_string *tokenValue = NULL;\n    struct aws_string *signingRegion = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n",
                      "markdown": "`    struct aws_string *tokenValue = NULL;\n    struct aws_string *signingRegion = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 71,
                  "endLine": 292,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n",
                    "rendered": {
                      "text": "    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n",
                      "markdown": "`    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 71,
                  "endLine": 202,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n",
                    "rendered": {
                      "text": "    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n",
                      "markdown": "`    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_sign_custom_auth_password, &password);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 71,
                  "endLine": 121,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    struct aws_string *password = NULL;\n    struct aws_string *empty_string = aws_string_new_from_c_str(allocator, \"\");\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_password, &password);\n",
                    "rendered": {
                      "text": "    struct aws_string *password = NULL;\n    struct aws_string *empty_string = aws_string_new_from_c_str(allocator, \"\");\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_password, &password);\n",
                      "markdown": "`    struct aws_string *password = NULL;\n    struct aws_string *empty_string = aws_string_new_from_c_str(allocator, \"\");\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_nosign_custom_auth_password, &password);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 58,
                  "endLine": 21,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n#if !BYO_CRYPTO\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_hostname, \"AWS_TEST_MQTT311_IOT_CORE_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_region, \"AWS_TEST_MQTT311_IOT_CORE_REGION\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n",
                    "rendered": {
                      "text": "\n#if !BYO_CRYPTO\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_hostname, \"AWS_TEST_MQTT311_IOT_CORE_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_region, \"AWS_TEST_MQTT311_IOT_CORE_REGION\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n",
                      "markdown": "`\n#if !BYO_CRYPTO\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_hostname, \"AWS_TEST_MQTT311_IOT_CORE_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_region, \"AWS_TEST_MQTT311_IOT_CORE_REGION\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3617,
                  "startColumn": 31,
                  "endLine": 3617,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    // Sleep and wait for message recieved\n    aws_thread_current_sleep(2000 * 1000 * 1000);\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    ASSERT_TRUE(received1 == 1);\n    ASSERT_TRUE(received2 == 1);\n",
                    "rendered": {
                      "text": "    // Sleep and wait for message recieved\n    aws_thread_current_sleep(2000 * 1000 * 1000);\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    ASSERT_TRUE(received1 == 1);\n    ASSERT_TRUE(received2 == 1);\n",
                      "markdown": "`    // Sleep and wait for message recieved\n    aws_thread_current_sleep(2000 * 1000 * 1000);\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    ASSERT_TRUE(received1 == 1);\n    ASSERT_TRUE(received2 == 1);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3573,
                  "startColumn": 46,
                  "endLine": 3573,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    };\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    mqttConnection1->Subscribe(testTopic1.c_str(), Mqtt::QOS::AWS_MQTT_QOS_AT_LEAST_ONCE, onMessage1, onSubAck1);\n    {\n",
                    "rendered": {
                      "text": "    };\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    mqttConnection1->Subscribe(testTopic1.c_str(), Mqtt::QOS::AWS_MQTT_QOS_AT_LEAST_ONCE, onMessage1, onSubAck1);\n    {\n",
                      "markdown": "`    };\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    mqttConnection1->Subscribe(testTopic1.c_str(), Mqtt::QOS::AWS_MQTT_QOS_AT_LEAST_ONCE, onMessage1, onSubAck1);\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3424,
                  "startColumn": 31,
                  "endLine": 3424,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    delete builder;\n\n",
                    "rendered": {
                      "text": "\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    delete builder;\n\n",
                      "markdown": "`\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    delete builder;\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3350,
                  "startColumn": 46,
                  "endLine": 3350,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqttConnection);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    auto onMessage = [&](Mqtt::MqttConnection &, const String &topic, const ByteBuf &payload, bool, Mqtt::QOS, bool)\n    {\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqttConnection);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    auto onMessage = [&](Mqtt::MqttConnection &, const String &topic, const ByteBuf &payload, bool, Mqtt::QOS, bool)\n    {\n",
                      "markdown": "`    ASSERT_TRUE(mqttConnection);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    auto onMessage = [&](Mqtt::MqttConnection &, const String &topic, const ByteBuf &payload, bool, Mqtt::QOS, bool)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3265,
                  "startColumn": 31,
                  "endLine": 3265,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3261,
                  "startColumn": 46,
                  "endLine": 3261,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqttConnection);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqttConnection);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n",
                      "markdown": "`    ASSERT_TRUE(mqttConnection);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3219,
                  "startColumn": 31,
                  "endLine": 3219,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    ASSERT_TRUE(Mqtt3WebSocket == 0);\n    ASSERT_TRUE(Mqtt5WebSocket == 1);\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    ASSERT_TRUE(Mqtt3WebSocket == 0);\n    ASSERT_TRUE(Mqtt5WebSocket == 1);\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    ASSERT_TRUE(Mqtt3WebSocket == 0);\n    ASSERT_TRUE(Mqtt5WebSocket == 1);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3217,
                  "startColumn": 46,
                  "endLine": 3217,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    };\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n",
                    "rendered": {
                      "text": "    };\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n",
                      "markdown": "`    };\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2832,
                  "startColumn": 31,
                  "endLine": 2832,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2830,
                  "startColumn": 46,
                  "endLine": 2830,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqttConnection && *mqttConnection);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqttConnection && *mqttConnection);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n",
                      "markdown": "`    ASSERT_TRUE(mqttConnection && *mqttConnection);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2800,
                  "startColumn": 47,
                  "endLine": 2800,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        printf(\"Failed to connect\");\n        return AWS_OP_ERR;\n    }\n    if (connectionCompletedPromise.get_future().get() == false)\n    {\n        printf(\"Connection failed\");\n        return AWS_OP_ERR;\n",
                    "rendered": {
                      "text": "        printf(\"Failed to connect\");\n        return AWS_OP_ERR;\n    }\n    if (connectionCompletedPromise.get_future().get() == false)\n    {\n        printf(\"Connection failed\");\n        return AWS_OP_ERR;\n",
                      "markdown": "`        printf(\"Failed to connect\");\n        return AWS_OP_ERR;\n    }\n    if (connectionCompletedPromise.get_future().get() == false)\n    {\n        printf(\"Connection failed\");\n        return AWS_OP_ERR;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2760,
                  "startColumn": 31,
                  "endLine": 2760,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_INT_EQUALS(0, statistics.unackedOperationSize);\n\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    ASSERT_INT_EQUALS(0, statistics.unackedOperationSize);\n\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    ASSERT_INT_EQUALS(0, statistics.unackedOperationSize);\n\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2734,
                  "startColumn": 46,
                  "endLine": 2734,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    /* Make sure the operations are empty */\n    Mqtt5::Mqtt5ClientOperationStatistics statistics = mqtt5Client->GetOperationStatistics();\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    /* Make sure the operations are empty */\n    Mqtt5::Mqtt5ClientOperationStatistics statistics = mqtt5Client->GetOperationStatistics();\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    /* Make sure the operations are empty */\n    Mqtt5::Mqtt5ClientOperationStatistics statistics = mqtt5Client->GetOperationStatistics();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2696,
                  "startColumn": 31,
                  "endLine": 2696,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2684,
                  "startColumn": 46,
                  "endLine": 2684,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    const Aws::Crt::String TEST_TOPIC = \"test/s_TestMqtt5InterruptPublish\" + Aws::Crt::UUID().ToString();\n\n",
                    "rendered": {
                      "text": "\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    const Aws::Crt::String TEST_TOPIC = \"test/s_TestMqtt5InterruptPublish\" + Aws::Crt::UUID().ToString();\n\n",
                      "markdown": "`\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    const Aws::Crt::String TEST_TOPIC = \"test/s_TestMqtt5InterruptPublish\" + Aws::Crt::UUID().ToString();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2647,
                  "startColumn": 31,
                  "endLine": 2647,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2634,
                  "startColumn": 46,
                  "endLine": 2634,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    const Aws::Crt::String TEST_TOPIC = \"test/s_TestMqtt5InterruptUnsub\" + Aws::Crt::UUID().ToString();\n\n",
                    "rendered": {
                      "text": "\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    const Aws::Crt::String TEST_TOPIC = \"test/s_TestMqtt5InterruptUnsub\" + Aws::Crt::UUID().ToString();\n\n",
                      "markdown": "`\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    const Aws::Crt::String TEST_TOPIC = \"test/s_TestMqtt5InterruptUnsub\" + Aws::Crt::UUID().ToString();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2598,
                  "startColumn": 31,
                  "endLine": 2598,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`\n    /* Stop immediately */\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2587,
                  "startColumn": 46,
                  "endLine": 2587,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    const Aws::Crt::String TEST_TOPIC = \"test/s_TestMqtt5InterruptSub\" + Aws::Crt::UUID().ToString();\n    /* Subscribe to test topic */\n",
                    "rendered": {
                      "text": "\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    const Aws::Crt::String TEST_TOPIC = \"test/s_TestMqtt5InterruptSub\" + Aws::Crt::UUID().ToString();\n    /* Subscribe to test topic */\n",
                      "markdown": "`\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    const Aws::Crt::String TEST_TOPIC = \"test/s_TestMqtt5InterruptSub\" + Aws::Crt::UUID().ToString();\n    /* Subscribe to test topic */\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2548,
                  "startColumn": 32,
                  "endLine": 2548,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client3->Stop());\n    stopped3Promise.get_future().get();\n    ASSERT_TRUE(mqtt5Client1->Stop());\n    stopped1Promise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5RetainSetAndClear, s_TestMqtt5RetainSetAndClear)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client3->Stop());\n    stopped3Promise.get_future().get();\n    ASSERT_TRUE(mqtt5Client1->Stop());\n    stopped1Promise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5RetainSetAndClear, s_TestMqtt5RetainSetAndClear)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client3->Stop());\n    stopped3Promise.get_future().get();\n    ASSERT_TRUE(mqtt5Client1->Stop());\n    stopped1Promise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5RetainSetAndClear, s_TestMqtt5RetainSetAndClear)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2546,
                  "startColumn": 32,
                  "endLine": 2546,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    aws_thread_current_sleep(2000 * 1000 * 1000);\n\n    ASSERT_TRUE(mqtt5Client3->Stop());\n    stopped3Promise.get_future().get();\n    ASSERT_TRUE(mqtt5Client1->Stop());\n    stopped1Promise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    aws_thread_current_sleep(2000 * 1000 * 1000);\n\n    ASSERT_TRUE(mqtt5Client3->Stop());\n    stopped3Promise.get_future().get();\n    ASSERT_TRUE(mqtt5Client1->Stop());\n    stopped1Promise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    aws_thread_current_sleep(2000 * 1000 * 1000);\n\n    ASSERT_TRUE(mqtt5Client3->Stop());\n    stopped3Promise.get_future().get();\n    ASSERT_TRUE(mqtt5Client1->Stop());\n    stopped1Promise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2539,
                  "startColumn": 47,
                  "endLine": 2539,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n    // 5. client3 start and subscribe to retain topic\n    ASSERT_TRUE(mqtt5Client3->Start());\n    ASSERT_TRUE(connection3Promise.get_future().get());\n    ASSERT_TRUE(mqtt5Client3->Subscribe(subscribe));\n\n    // Wait for client 3\n",
                    "rendered": {
                      "text": "\n    // 5. client3 start and subscribe to retain topic\n    ASSERT_TRUE(mqtt5Client3->Start());\n    ASSERT_TRUE(connection3Promise.get_future().get());\n    ASSERT_TRUE(mqtt5Client3->Subscribe(subscribe));\n\n    // Wait for client 3\n",
                      "markdown": "`\n    // 5. client3 start and subscribe to retain topic\n    ASSERT_TRUE(mqtt5Client3->Start());\n    ASSERT_TRUE(connection3Promise.get_future().get());\n    ASSERT_TRUE(mqtt5Client3->Subscribe(subscribe));\n\n    // Wait for client 3\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2530,
                  "startColumn": 32,
                  "endLine": 2530,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n    // Stop client2\n    ASSERT_TRUE(mqtt5Client2->Stop());\n    stopped2Promise.get_future().get();\n\n    // 4. client1 reset retian message\n    std::shared_ptr<Mqtt5::PublishPacket> clearRetainPacket = std::make_shared<Mqtt5::PublishPacket>(allocator);\n",
                    "rendered": {
                      "text": "\n    // Stop client2\n    ASSERT_TRUE(mqtt5Client2->Stop());\n    stopped2Promise.get_future().get();\n\n    // 4. client1 reset retian message\n    std::shared_ptr<Mqtt5::PublishPacket> clearRetainPacket = std::make_shared<Mqtt5::PublishPacket>(allocator);\n",
                      "markdown": "`\n    // Stop client2\n    ASSERT_TRUE(mqtt5Client2->Stop());\n    stopped2Promise.get_future().get();\n\n    // 4. client1 reset retian message\n    std::shared_ptr<Mqtt5::PublishPacket> clearRetainPacket = std::make_shared<Mqtt5::PublishPacket>(allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2526,
                  "startColumn": 45,
                  "endLine": 2526,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    subscribe->WithSubscription(std::move(subscription));\n    ASSERT_TRUE(mqtt5Client2->Subscribe(subscribe));\n\n    client2RetianMessageReceived.get_future().get();\n\n    // Stop client2\n    ASSERT_TRUE(mqtt5Client2->Stop());\n",
                    "rendered": {
                      "text": "    subscribe->WithSubscription(std::move(subscription));\n    ASSERT_TRUE(mqtt5Client2->Subscribe(subscribe));\n\n    client2RetianMessageReceived.get_future().get();\n\n    // Stop client2\n    ASSERT_TRUE(mqtt5Client2->Stop());\n",
                      "markdown": "`    subscribe->WithSubscription(std::move(subscription));\n    ASSERT_TRUE(mqtt5Client2->Subscribe(subscribe));\n\n    client2RetianMessageReceived.get_future().get();\n\n    // Stop client2\n    ASSERT_TRUE(mqtt5Client2->Stop());\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2519,
                  "startColumn": 47,
                  "endLine": 2519,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n    // 2. connect to client 2\n    ASSERT_TRUE(mqtt5Client2->Start());\n    ASSERT_TRUE(connection2Promise.get_future().get());\n    // 3. client2 subscribe to retain topic\n    Mqtt5::Subscription subscription(TEST_TOPIC, Mqtt5::QOS::AWS_MQTT5_QOS_AT_LEAST_ONCE, allocator);\n    std::shared_ptr<Mqtt5::SubscribePacket> subscribe = std::make_shared<Mqtt5::SubscribePacket>(allocator);\n",
                    "rendered": {
                      "text": "\n    // 2. connect to client 2\n    ASSERT_TRUE(mqtt5Client2->Start());\n    ASSERT_TRUE(connection2Promise.get_future().get());\n    // 3. client2 subscribe to retain topic\n    Mqtt5::Subscription subscription(TEST_TOPIC, Mqtt5::QOS::AWS_MQTT5_QOS_AT_LEAST_ONCE, allocator);\n    std::shared_ptr<Mqtt5::SubscribePacket> subscribe = std::make_shared<Mqtt5::SubscribePacket>(allocator);\n",
                      "markdown": "`\n    // 2. connect to client 2\n    ASSERT_TRUE(mqtt5Client2->Start());\n    ASSERT_TRUE(connection2Promise.get_future().get());\n    // 3. client2 subscribe to retain topic\n    Mqtt5::Subscription subscription(TEST_TOPIC, Mqtt5::QOS::AWS_MQTT5_QOS_AT_LEAST_ONCE, allocator);\n    std::shared_ptr<Mqtt5::SubscribePacket> subscribe = std::make_shared<Mqtt5::SubscribePacket>(allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2512,
                  "startColumn": 47,
                  "endLine": 2512,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n    // 1. client1 start and publish a retian message\n    ASSERT_TRUE(mqtt5Client1->Start());\n    ASSERT_TRUE(connection1Promise.get_future().get());\n    std::shared_ptr<Mqtt5::PublishPacket> setRetainPacket = std::make_shared<Mqtt5::PublishPacket>(allocator);\n    setRetainPacket->WithTopic(TEST_TOPIC).WithPayload(ByteCursorFromString(RETAIN_MESSAGE)).WithRetain(true);\n    ASSERT_TRUE(mqtt5Client1->Publish(setRetainPacket));\n",
                    "rendered": {
                      "text": "\n    // 1. client1 start and publish a retian message\n    ASSERT_TRUE(mqtt5Client1->Start());\n    ASSERT_TRUE(connection1Promise.get_future().get());\n    std::shared_ptr<Mqtt5::PublishPacket> setRetainPacket = std::make_shared<Mqtt5::PublishPacket>(allocator);\n    setRetainPacket->WithTopic(TEST_TOPIC).WithPayload(ByteCursorFromString(RETAIN_MESSAGE)).WithRetain(true);\n    ASSERT_TRUE(mqtt5Client1->Publish(setRetainPacket));\n",
                      "markdown": "`\n    // 1. client1 start and publish a retian message\n    ASSERT_TRUE(mqtt5Client1->Start());\n    ASSERT_TRUE(connection1Promise.get_future().get());\n    std::shared_ptr<Mqtt5::PublishPacket> setRetainPacket = std::make_shared<Mqtt5::PublishPacket>(allocator);\n    setRetainPacket->WithTopic(TEST_TOPIC).WithPayload(ByteCursorFromString(RETAIN_MESSAGE)).WithRetain(true);\n    ASSERT_TRUE(mqtt5Client1->Publish(setRetainPacket));\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2431,
                  "startColumn": 40,
                  "endLine": 2431,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    ASSERT_TRUE(subscriber->Stop());\n    subscriberStoppedPromise.get_future().get();\n    ASSERT_TRUE(publisher->Stop());\n    publisherStoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(subscriber->Stop());\n    subscriberStoppedPromise.get_future().get();\n    ASSERT_TRUE(publisher->Stop());\n    publisherStoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    ASSERT_TRUE(subscriber->Stop());\n    subscriberStoppedPromise.get_future().get();\n    ASSERT_TRUE(publisher->Stop());\n    publisherStoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2429,
                  "startColumn": 41,
                  "endLine": 2429,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    }\n\n    ASSERT_TRUE(subscriber->Stop());\n    subscriberStoppedPromise.get_future().get();\n    ASSERT_TRUE(publisher->Stop());\n    publisherStoppedPromise.get_future().get();\n\n",
                    "rendered": {
                      "text": "    }\n\n    ASSERT_TRUE(subscriber->Stop());\n    subscriberStoppedPromise.get_future().get();\n    ASSERT_TRUE(publisher->Stop());\n    publisherStoppedPromise.get_future().get();\n\n",
                      "markdown": "`    }\n\n    ASSERT_TRUE(subscriber->Stop());\n    subscriberStoppedPromise.get_future().get();\n    ASSERT_TRUE(publisher->Stop());\n    publisherStoppedPromise.get_future().get();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2409,
                  "startColumn": 27,
                  "endLine": 2409,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    ASSERT_TRUE(subscriber->Subscribe(\n        subscribe, [&subscribed](int, std::shared_ptr<Mqtt5::SubAckPacket>) { subscribed.set_value(); }));\n\n    subscribed.get_future().get();\n\n    /* Publish 10 messages to test topic */\n    for (int i = 0; i < MESSAGE_NUMBER; i++)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(subscriber->Subscribe(\n        subscribe, [&subscribed](int, std::shared_ptr<Mqtt5::SubAckPacket>) { subscribed.set_value(); }));\n\n    subscribed.get_future().get();\n\n    /* Publish 10 messages to test topic */\n    for (int i = 0; i < MESSAGE_NUMBER; i++)\n",
                      "markdown": "`    ASSERT_TRUE(subscriber->Subscribe(\n        subscribe, [&subscribed](int, std::shared_ptr<Mqtt5::SubAckPacket>) { subscribed.set_value(); }));\n\n    subscribed.get_future().get();\n\n    /* Publish 10 messages to test topic */\n    for (int i = 0; i < MESSAGE_NUMBER; i++)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2398,
                  "startColumn": 56,
                  "endLine": 2398,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    ASSERT_TRUE(publisherConnectionPromise.get_future().get());\n\n    ASSERT_TRUE(subscriber->Start());\n    ASSERT_TRUE(subscriberConnectionPromise.get_future().get());\n\n    /* Subscribe to test topic */\n    Mqtt5::Subscription subscription(TEST_TOPIC, Mqtt5::QOS::AWS_MQTT5_QOS_AT_LEAST_ONCE, allocator);\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(publisherConnectionPromise.get_future().get());\n\n    ASSERT_TRUE(subscriber->Start());\n    ASSERT_TRUE(subscriberConnectionPromise.get_future().get());\n\n    /* Subscribe to test topic */\n    Mqtt5::Subscription subscription(TEST_TOPIC, Mqtt5::QOS::AWS_MQTT5_QOS_AT_LEAST_ONCE, allocator);\n",
                      "markdown": "`    ASSERT_TRUE(publisherConnectionPromise.get_future().get());\n\n    ASSERT_TRUE(subscriber->Start());\n    ASSERT_TRUE(subscriberConnectionPromise.get_future().get());\n\n    /* Subscribe to test topic */\n    Mqtt5::Subscription subscription(TEST_TOPIC, Mqtt5::QOS::AWS_MQTT5_QOS_AT_LEAST_ONCE, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2395,
                  "startColumn": 55,
                  "endLine": 2395,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    ASSERT_TRUE(publisher);\n\n    ASSERT_TRUE(publisher->Start());\n    ASSERT_TRUE(publisherConnectionPromise.get_future().get());\n\n    ASSERT_TRUE(subscriber->Start());\n    ASSERT_TRUE(subscriberConnectionPromise.get_future().get());\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(publisher);\n\n    ASSERT_TRUE(publisher->Start());\n    ASSERT_TRUE(publisherConnectionPromise.get_future().get());\n\n    ASSERT_TRUE(subscriber->Start());\n    ASSERT_TRUE(subscriberConnectionPromise.get_future().get());\n",
                      "markdown": "`    ASSERT_TRUE(publisher);\n\n    ASSERT_TRUE(publisher->Start());\n    ASSERT_TRUE(publisherConnectionPromise.get_future().get());\n\n    ASSERT_TRUE(subscriber->Start());\n    ASSERT_TRUE(subscriberConnectionPromise.get_future().get());\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2300,
                  "startColumn": 31,
                  "endLine": 2300,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_FALSE(mqtt5Client->Unsubscribe(unsubscribe));\n\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    ASSERT_FALSE(mqtt5Client->Unsubscribe(unsubscribe));\n\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    ASSERT_FALSE(mqtt5Client->Unsubscribe(unsubscribe));\n\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2290,
                  "startColumn": 46,
                  "endLine": 2290,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    /* Subscribe to empty subscribe packet*/\n    Vector<String> unsubList;\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    /* Subscribe to empty subscribe packet*/\n    Vector<String> unsubList;\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    /* Subscribe to empty subscribe packet*/\n    Vector<String> unsubList;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2256,
                  "startColumn": 31,
                  "endLine": 2256,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_FALSE(mqtt5Client->Subscribe(subscribe));\n\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    ASSERT_FALSE(mqtt5Client->Subscribe(subscribe));\n\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    ASSERT_FALSE(mqtt5Client->Subscribe(subscribe));\n\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2246,
                  "startColumn": 46,
                  "endLine": 2246,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    /* Subscribe to empty subscribe packet*/\n    Vector<Mqtt5::Subscription> subscriptionList;\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    /* Subscribe to empty subscribe packet*/\n    Vector<Mqtt5::Subscription> subscriptionList;\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    /* Subscribe to empty subscribe packet*/\n    Vector<Mqtt5::Subscription> subscriptionList;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2213,
                  "startColumn": 31,
                  "endLine": 2213,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_FALSE(mqtt5Client->Publish(publish));\n\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    ASSERT_FALSE(mqtt5Client->Publish(publish));\n\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    ASSERT_FALSE(mqtt5Client->Publish(publish));\n\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2202,
                  "startColumn": 46,
                  "endLine": 2202,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    // Invalid publish packet with empty topic\n    ByteBuf payload = Aws::Crt::ByteBufFromCString(\"Mqtt5 Null Publish Test\");\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    // Invalid publish packet with empty topic\n    ByteBuf payload = Aws::Crt::ByteBufFromCString(\"Mqtt5 Null Publish Test\");\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    // Invalid publish packet with empty topic\n    ByteBuf payload = Aws::Crt::ByteBufFromCString(\"Mqtt5 Null Publish Test\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2160,
                  "startColumn": 32,
                  "endLine": 2160,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    /* Wait for all clents to disconnect */\n    stoppedPromise.get_future().get();\n    stoppedPromise2.get_future().get();\n    stoppedPromise3.get_future().get();\n\n    delete subscribe_builder;\n    delete subscribe_builder2;\n",
                    "rendered": {
                      "text": "    /* Wait for all clents to disconnect */\n    stoppedPromise.get_future().get();\n    stoppedPromise2.get_future().get();\n    stoppedPromise3.get_future().get();\n\n    delete subscribe_builder;\n    delete subscribe_builder2;\n",
                      "markdown": "`    /* Wait for all clents to disconnect */\n    stoppedPromise.get_future().get();\n    stoppedPromise2.get_future().get();\n    stoppedPromise3.get_future().get();\n\n    delete subscribe_builder;\n    delete subscribe_builder2;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2159,
                  "startColumn": 32,
                  "endLine": 2159,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n    /* Wait for all clents to disconnect */\n    stoppedPromise.get_future().get();\n    stoppedPromise2.get_future().get();\n    stoppedPromise3.get_future().get();\n\n    delete subscribe_builder;\n",
                    "rendered": {
                      "text": "\n    /* Wait for all clents to disconnect */\n    stoppedPromise.get_future().get();\n    stoppedPromise2.get_future().get();\n    stoppedPromise3.get_future().get();\n\n    delete subscribe_builder;\n",
                      "markdown": "`\n    /* Wait for all clents to disconnect */\n    stoppedPromise.get_future().get();\n    stoppedPromise2.get_future().get();\n    stoppedPromise3.get_future().get();\n\n    delete subscribe_builder;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2158,
                  "startColumn": 31,
                  "endLine": 2158,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Publisher->Stop());\n\n    /* Wait for all clents to disconnect */\n    stoppedPromise.get_future().get();\n    stoppedPromise2.get_future().get();\n    stoppedPromise3.get_future().get();\n\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Publisher->Stop());\n\n    /* Wait for all clents to disconnect */\n    stoppedPromise.get_future().get();\n    stoppedPromise2.get_future().get();\n    stoppedPromise3.get_future().get();\n\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Publisher->Stop());\n\n    /* Wait for all clents to disconnect */\n    stoppedPromise.get_future().get();\n    stoppedPromise2.get_future().get();\n    stoppedPromise3.get_future().get();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2090,
                  "startColumn": 47,
                  "endLine": 2090,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    /* Wait for all clents to connect */\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(connectionPromise2.get_future().get());\n    ASSERT_TRUE(connectionPromise3.get_future().get());\n\n    /* Subscribe to test topic */\n    Mqtt5::Subscription subscription(sharedTopicFilter, Mqtt5::QOS::AWS_MQTT5_QOS_AT_MOST_ONCE, allocator);\n",
                    "rendered": {
                      "text": "    /* Wait for all clents to connect */\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(connectionPromise2.get_future().get());\n    ASSERT_TRUE(connectionPromise3.get_future().get());\n\n    /* Subscribe to test topic */\n    Mqtt5::Subscription subscription(sharedTopicFilter, Mqtt5::QOS::AWS_MQTT5_QOS_AT_MOST_ONCE, allocator);\n",
                      "markdown": "`    /* Wait for all clents to connect */\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(connectionPromise2.get_future().get());\n    ASSERT_TRUE(connectionPromise3.get_future().get());\n\n    /* Subscribe to test topic */\n    Mqtt5::Subscription subscription(sharedTopicFilter, Mqtt5::QOS::AWS_MQTT5_QOS_AT_MOST_ONCE, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2089,
                  "startColumn": 47,
                  "endLine": 2089,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n    /* Wait for all clents to connect */\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(connectionPromise2.get_future().get());\n    ASSERT_TRUE(connectionPromise3.get_future().get());\n\n    /* Subscribe to test topic */\n",
                    "rendered": {
                      "text": "\n    /* Wait for all clents to connect */\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(connectionPromise2.get_future().get());\n    ASSERT_TRUE(connectionPromise3.get_future().get());\n\n    /* Subscribe to test topic */\n",
                      "markdown": "`\n    /* Wait for all clents to connect */\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(connectionPromise2.get_future().get());\n    ASSERT_TRUE(connectionPromise3.get_future().get());\n\n    /* Subscribe to test topic */\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2088,
                  "startColumn": 46,
                  "endLine": 2088,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Publisher->Start());\n\n    /* Wait for all clents to connect */\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(connectionPromise2.get_future().get());\n    ASSERT_TRUE(connectionPromise3.get_future().get());\n\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Publisher->Start());\n\n    /* Wait for all clents to connect */\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(connectionPromise2.get_future().get());\n    ASSERT_TRUE(connectionPromise3.get_future().get());\n\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Publisher->Start());\n\n    /* Wait for all clents to connect */\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(connectionPromise2.get_future().get());\n    ASSERT_TRUE(connectionPromise3.get_future().get());\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1952,
                  "startColumn": 41,
                  "endLine": 1952,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    ASSERT_TRUE(receivedWill);\n\n    ASSERT_TRUE(subscriber->Stop());\n    subscriberStoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(receivedWill);\n\n    ASSERT_TRUE(subscriber->Stop());\n    subscriberStoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    ASSERT_TRUE(receivedWill);\n\n    ASSERT_TRUE(subscriber->Stop());\n    subscriberStoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1946,
                  "startColumn": 40,
                  "endLine": 1946,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::DisconnectPacket> disconnect = std::make_shared<Mqtt5::DisconnectPacket>(allocator);\n    disconnect->WithReasonCode(AWS_MQTT5_DRC_DISCONNECT_WITH_WILL_MESSAGE);\n    ASSERT_TRUE(publisher->Stop(disconnect));\n    publisherStoppedPromise.get_future().get();\n\n    aws_thread_current_sleep(10000ULL * 1000 * 1000);\n    ASSERT_TRUE(receivedWill);\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::DisconnectPacket> disconnect = std::make_shared<Mqtt5::DisconnectPacket>(allocator);\n    disconnect->WithReasonCode(AWS_MQTT5_DRC_DISCONNECT_WITH_WILL_MESSAGE);\n    ASSERT_TRUE(publisher->Stop(disconnect));\n    publisherStoppedPromise.get_future().get();\n\n    aws_thread_current_sleep(10000ULL * 1000 * 1000);\n    ASSERT_TRUE(receivedWill);\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::DisconnectPacket> disconnect = std::make_shared<Mqtt5::DisconnectPacket>(allocator);\n    disconnect->WithReasonCode(AWS_MQTT5_DRC_DISCONNECT_WITH_WILL_MESSAGE);\n    ASSERT_TRUE(publisher->Stop(disconnect));\n    publisherStoppedPromise.get_future().get();\n\n    aws_thread_current_sleep(10000ULL * 1000 * 1000);\n    ASSERT_TRUE(receivedWill);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1941,
                  "startColumn": 27,
                  "endLine": 1941,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    ASSERT_TRUE(subscriber->Subscribe(\n        subscribe, [&subscribed](int, std::shared_ptr<Mqtt5::SubAckPacket>) { subscribed.set_value(); }));\n\n    subscribed.get_future().get();\n\n    std::shared_ptr<Mqtt5::DisconnectPacket> disconnect = std::make_shared<Mqtt5::DisconnectPacket>(allocator);\n    disconnect->WithReasonCode(AWS_MQTT5_DRC_DISCONNECT_WITH_WILL_MESSAGE);\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(subscriber->Subscribe(\n        subscribe, [&subscribed](int, std::shared_ptr<Mqtt5::SubAckPacket>) { subscribed.set_value(); }));\n\n    subscribed.get_future().get();\n\n    std::shared_ptr<Mqtt5::DisconnectPacket> disconnect = std::make_shared<Mqtt5::DisconnectPacket>(allocator);\n    disconnect->WithReasonCode(AWS_MQTT5_DRC_DISCONNECT_WITH_WILL_MESSAGE);\n",
                      "markdown": "`    ASSERT_TRUE(subscriber->Subscribe(\n        subscribe, [&subscribed](int, std::shared_ptr<Mqtt5::SubAckPacket>) { subscribed.set_value(); }));\n\n    subscribed.get_future().get();\n\n    std::shared_ptr<Mqtt5::DisconnectPacket> disconnect = std::make_shared<Mqtt5::DisconnectPacket>(allocator);\n    disconnect->WithReasonCode(AWS_MQTT5_DRC_DISCONNECT_WITH_WILL_MESSAGE);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1929,
                  "startColumn": 44,
                  "endLine": 1929,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    publisherConnectionPromise.get_future().get();\n\n    ASSERT_TRUE(subscriber->Start());\n    subscriberConnectionPromise.get_future().get();\n\n    /* Subscribe to test topic */\n    Mqtt5::Subscription subscription(TEST_TOPIC, Mqtt5::QOS::AWS_MQTT5_QOS_AT_LEAST_ONCE, allocator);\n",
                    "rendered": {
                      "text": "    publisherConnectionPromise.get_future().get();\n\n    ASSERT_TRUE(subscriber->Start());\n    subscriberConnectionPromise.get_future().get();\n\n    /* Subscribe to test topic */\n    Mqtt5::Subscription subscription(TEST_TOPIC, Mqtt5::QOS::AWS_MQTT5_QOS_AT_LEAST_ONCE, allocator);\n",
                      "markdown": "`    publisherConnectionPromise.get_future().get();\n\n    ASSERT_TRUE(subscriber->Start());\n    subscriberConnectionPromise.get_future().get();\n\n    /* Subscribe to test topic */\n    Mqtt5::Subscription subscription(TEST_TOPIC, Mqtt5::QOS::AWS_MQTT5_QOS_AT_LEAST_ONCE, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1926,
                  "startColumn": 43,
                  "endLine": 1926,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    ASSERT_TRUE(publisher);\n\n    ASSERT_TRUE(publisher->Start());\n    publisherConnectionPromise.get_future().get();\n\n    ASSERT_TRUE(subscriber->Start());\n    subscriberConnectionPromise.get_future().get();\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(publisher);\n\n    ASSERT_TRUE(publisher->Start());\n    publisherConnectionPromise.get_future().get();\n\n    ASSERT_TRUE(subscriber->Start());\n    subscriberConnectionPromise.get_future().get();\n",
                      "markdown": "`    ASSERT_TRUE(publisher);\n\n    ASSERT_TRUE(publisher->Start());\n    publisherConnectionPromise.get_future().get();\n\n    ASSERT_TRUE(subscriber->Start());\n    subscriberConnectionPromise.get_future().get();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1863,
                  "startColumn": 31,
                  "endLine": 1863,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    aws_thread_current_sleep(2000 * 1000 * 1000);\n\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    ASSERT_TRUE(receivedCount == 1);\n\n",
                    "rendered": {
                      "text": "    aws_thread_current_sleep(2000 * 1000 * 1000);\n\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    ASSERT_TRUE(receivedCount == 1);\n\n",
                      "markdown": "`    aws_thread_current_sleep(2000 * 1000 * 1000);\n\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    ASSERT_TRUE(receivedCount == 1);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1831,
                  "startColumn": 46,
                  "endLine": 1831,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    /* Subscribe to test topic */\n    Mqtt5::Subscription subscription(TEST_TOPIC, Mqtt5::QOS::AWS_MQTT5_QOS_AT_LEAST_ONCE, allocator);\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    /* Subscribe to test topic */\n    Mqtt5::Subscription subscription(TEST_TOPIC, Mqtt5::QOS::AWS_MQTT5_QOS_AT_LEAST_ONCE, allocator);\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n\n    /* Subscribe to test topic */\n    Mqtt5::Subscription subscription(TEST_TOPIC, Mqtt5::QOS::AWS_MQTT5_QOS_AT_LEAST_ONCE, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1782,
                  "startColumn": 38,
                  "endLine": 1782,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    ASSERT_TRUE(sessionMqtt5Client->Start());\n    ASSERT_TRUE(sessionConnectedPromise.get_future().get());\n    ASSERT_TRUE(sessionMqtt5Client->Stop());\n    sessionStoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(sessionMqtt5Client->Start());\n    ASSERT_TRUE(sessionConnectedPromise.get_future().get());\n    ASSERT_TRUE(sessionMqtt5Client->Stop());\n    sessionStoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    ASSERT_TRUE(sessionMqtt5Client->Start());\n    ASSERT_TRUE(sessionConnectedPromise.get_future().get());\n    ASSERT_TRUE(sessionMqtt5Client->Stop());\n    sessionStoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1780,
                  "startColumn": 52,
                  "endLine": 1780,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    ASSERT_TRUE(sessionMqtt5Client);\n\n    ASSERT_TRUE(sessionMqtt5Client->Start());\n    ASSERT_TRUE(sessionConnectedPromise.get_future().get());\n    ASSERT_TRUE(sessionMqtt5Client->Stop());\n    sessionStoppedPromise.get_future().get();\n\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(sessionMqtt5Client);\n\n    ASSERT_TRUE(sessionMqtt5Client->Start());\n    ASSERT_TRUE(sessionConnectedPromise.get_future().get());\n    ASSERT_TRUE(sessionMqtt5Client->Stop());\n    sessionStoppedPromise.get_future().get();\n\n",
                      "markdown": "`    ASSERT_TRUE(sessionMqtt5Client);\n\n    ASSERT_TRUE(sessionMqtt5Client->Start());\n    ASSERT_TRUE(sessionConnectedPromise.get_future().get());\n    ASSERT_TRUE(sessionMqtt5Client->Stop());\n    sessionStoppedPromise.get_future().get();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1758,
                  "startColumn": 31,
                  "endLine": 1758,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    mqtt5Options.WithSessionBehavior(Aws::Crt::Mqtt5::ClientSessionBehaviorType::AWS_MQTT5_CSBT_REJOIN_ALWAYS);\n\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    mqtt5Options.WithSessionBehavior(Aws::Crt::Mqtt5::ClientSessionBehaviorType::AWS_MQTT5_CSBT_REJOIN_ALWAYS);\n\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    mqtt5Options.WithSessionBehavior(Aws::Crt::Mqtt5::ClientSessionBehaviorType::AWS_MQTT5_CSBT_REJOIN_ALWAYS);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1756,
                  "startColumn": 46,
                  "endLine": 1756,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1707,
                  "startColumn": 31,
                  "endLine": 1707,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1705,
                  "startColumn": 46,
                  "endLine": 1705,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1647,
                  "startColumn": 31,
                  "endLine": 1647,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5NegotiatedSettingsFull, s_TestMqtt5NegotiatedSettingsFull)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5NegotiatedSettingsFull, s_TestMqtt5NegotiatedSettingsFull)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5NegotiatedSettingsFull, s_TestMqtt5NegotiatedSettingsFull)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1645,
                  "startColumn": 46,
                  "endLine": 1645,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1586,
                  "startColumn": 31,
                  "endLine": 1586,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5NegotiatedSettingsHappy, s_TestMqtt5NegotiatedSettingsHappy)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5NegotiatedSettingsHappy, s_TestMqtt5NegotiatedSettingsHappy)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5NegotiatedSettingsHappy, s_TestMqtt5NegotiatedSettingsHappy)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1584,
                  "startColumn": 46,
                  "endLine": 1584,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1528,
                  "startColumn": 32,
                  "endLine": 1528,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client2->Stop());\n    stopped2Promise.get_future().get();\n    ASSERT_TRUE(mqtt5Client1->Stop());\n    stopped1Promise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DoubleClientIDFailure, s_TestMqtt5DoubleClientIDFailure)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client2->Stop());\n    stopped2Promise.get_future().get();\n    ASSERT_TRUE(mqtt5Client1->Stop());\n    stopped1Promise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DoubleClientIDFailure, s_TestMqtt5DoubleClientIDFailure)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client2->Stop());\n    stopped2Promise.get_future().get();\n    ASSERT_TRUE(mqtt5Client1->Stop());\n    stopped1Promise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DoubleClientIDFailure, s_TestMqtt5DoubleClientIDFailure)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1526,
                  "startColumn": 32,
                  "endLine": 1526,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    disconnectionPromise = std::promise<void>();\n\n    ASSERT_TRUE(mqtt5Client2->Stop());\n    stopped2Promise.get_future().get();\n    ASSERT_TRUE(mqtt5Client1->Stop());\n    stopped1Promise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    disconnectionPromise = std::promise<void>();\n\n    ASSERT_TRUE(mqtt5Client2->Stop());\n    stopped2Promise.get_future().get();\n    ASSERT_TRUE(mqtt5Client1->Stop());\n    stopped1Promise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    disconnectionPromise = std::promise<void>();\n\n    ASSERT_TRUE(mqtt5Client2->Stop());\n    stopped2Promise.get_future().get();\n    ASSERT_TRUE(mqtt5Client1->Stop());\n    stopped1Promise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1521,
                  "startColumn": 37,
                  "endLine": 1521,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    ASSERT_TRUE(connection2Promise.get_future().get());\n\n    // Client 1 should get diconnected.\n    disconnectionPromise.get_future().get();\n    // reset the promise so it would not get confused when we stop the client;\n    disconnectionPromise = std::promise<void>();\n\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(connection2Promise.get_future().get());\n\n    // Client 1 should get diconnected.\n    disconnectionPromise.get_future().get();\n    // reset the promise so it would not get confused when we stop the client;\n    disconnectionPromise = std::promise<void>();\n\n",
                      "markdown": "`    ASSERT_TRUE(connection2Promise.get_future().get());\n\n    // Client 1 should get diconnected.\n    disconnectionPromise.get_future().get();\n    // reset the promise so it would not get confused when we stop the client;\n    disconnectionPromise = std::promise<void>();\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1518,
                  "startColumn": 47,
                  "endLine": 1518,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client2->Start());\n\n    // Make sure the client2 is connected.\n    ASSERT_TRUE(connection2Promise.get_future().get());\n\n    // Client 1 should get diconnected.\n    disconnectionPromise.get_future().get();\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client2->Start());\n\n    // Make sure the client2 is connected.\n    ASSERT_TRUE(connection2Promise.get_future().get());\n\n    // Client 1 should get diconnected.\n    disconnectionPromise.get_future().get();\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client2->Start());\n\n    // Make sure the client2 is connected.\n    ASSERT_TRUE(connection2Promise.get_future().get());\n\n    // Client 1 should get diconnected.\n    disconnectionPromise.get_future().get();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1514,
                  "startColumn": 47,
                  "endLine": 1514,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n    ASSERT_TRUE(mqtt5Client1->Start());\n    // Client 1 is connected.\n    ASSERT_TRUE(connection1Promise.get_future().get());\n    ASSERT_TRUE(mqtt5Client2->Start());\n\n    // Make sure the client2 is connected.\n",
                    "rendered": {
                      "text": "\n    ASSERT_TRUE(mqtt5Client1->Start());\n    // Client 1 is connected.\n    ASSERT_TRUE(connection1Promise.get_future().get());\n    ASSERT_TRUE(mqtt5Client2->Start());\n\n    // Make sure the client2 is connected.\n",
                      "markdown": "`\n    ASSERT_TRUE(mqtt5Client1->Start());\n    // Client 1 is connected.\n    ASSERT_TRUE(connection1Promise.get_future().get());\n    ASSERT_TRUE(mqtt5Client2->Start());\n\n    // Make sure the client2 is connected.\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1458,
                  "startColumn": 31,
                  "endLine": 1458,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5IncorrectWSConnect, s_TestMqtt5IncorrectWSConnect)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5IncorrectWSConnect, s_TestMqtt5IncorrectWSConnect)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5IncorrectWSConnect, s_TestMqtt5IncorrectWSConnect)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1456,
                  "startColumn": 47,
                  "endLine": 1456,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1413,
                  "startColumn": 31,
                  "endLine": 1413,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5IncorrectBasicAuth, s_TestMqtt5IncorrectBasicAuth)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5IncorrectBasicAuth, s_TestMqtt5IncorrectBasicAuth)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5IncorrectBasicAuth, s_TestMqtt5IncorrectBasicAuth)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1411,
                  "startColumn": 47,
                  "endLine": 1411,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1374,
                  "startColumn": 31,
                  "endLine": 1374,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5SocketTimeout, s_TestMqtt5SocketTimeout)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5SocketTimeout, s_TestMqtt5SocketTimeout)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5SocketTimeout, s_TestMqtt5SocketTimeout)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1372,
                  "startColumn": 47,
                  "endLine": 1372,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1326,
                  "startColumn": 31,
                  "endLine": 1326,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSInvalidPort, s_TestMqtt5WSInvalidPort)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSInvalidPort, s_TestMqtt5WSInvalidPort)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSInvalidPort, s_TestMqtt5WSInvalidPort)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1324,
                  "startColumn": 47,
                  "endLine": 1324,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1272,
                  "startColumn": 31,
                  "endLine": 1272,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5InvalidPort, s_TestMqtt5DirectInvalidPort)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5InvalidPort, s_TestMqtt5DirectInvalidPort)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5InvalidPort, s_TestMqtt5DirectInvalidPort)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1270,
                  "startColumn": 47,
                  "endLine": 1270,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1239,
                  "startColumn": 31,
                  "endLine": 1239,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5InvalidHostname, s_TestMqtt5DirectInvalidHostname)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5InvalidHostname, s_TestMqtt5DirectInvalidHostname)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5InvalidHostname, s_TestMqtt5DirectInvalidHostname)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1237,
                  "startColumn": 47,
                  "endLine": 1237,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_FALSE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1202,
                  "startColumn": 31,
                  "endLine": 1202,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionFull, s_TestMqtt5WSConnectionFull)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionFull, s_TestMqtt5WSConnectionFull)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionFull, s_TestMqtt5WSConnectionFull)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1200,
                  "startColumn": 46,
                  "endLine": 1200,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1098,
                  "startColumn": 31,
                  "endLine": 1098,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionWithHttpProxy, s_TestMqtt5WSConnectionWithHttpProxy)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionWithHttpProxy, s_TestMqtt5WSConnectionWithHttpProxy)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionWithHttpProxy, s_TestMqtt5WSConnectionWithHttpProxy)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1096,
                  "startColumn": 46,
                  "endLine": 1096,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1019,
                  "startColumn": 31,
                  "endLine": 1019,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionWithMutualTLS, s_TestMqtt5WSConnectionWithMutualTLS)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionWithMutualTLS, s_TestMqtt5WSConnectionWithMutualTLS)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionWithMutualTLS, s_TestMqtt5WSConnectionWithMutualTLS)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1017,
                  "startColumn": 34,
                  "endLine": 1017,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 954,
                  "startColumn": 31,
                  "endLine": 954,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionWithTLS, s_TestMqtt5WSConnectionWithTLS)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionWithTLS, s_TestMqtt5WSConnectionWithTLS)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionWithTLS, s_TestMqtt5WSConnectionWithTLS)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 952,
                  "startColumn": 34,
                  "endLine": 952,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 890,
                  "startColumn": 31,
                  "endLine": 890,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionWithBasicAuth, s_TestMqtt5WSConnectionWithBasicAuth)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionWithBasicAuth, s_TestMqtt5WSConnectionWithBasicAuth)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionWithBasicAuth, s_TestMqtt5WSConnectionWithBasicAuth)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 888,
                  "startColumn": 46,
                  "endLine": 888,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 830,
                  "startColumn": 31,
                  "endLine": 830,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionMinimal, s_TestMqtt5WSConnectionMinimal)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionMinimal, s_TestMqtt5WSConnectionMinimal)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5WSConnectionMinimal, s_TestMqtt5WSConnectionMinimal)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 828,
                  "startColumn": 46,
                  "endLine": 828,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 772,
                  "startColumn": 31,
                  "endLine": 772,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionFull, s_TestMqtt5DirectConnectionFull)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionFull, s_TestMqtt5DirectConnectionFull)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionFull, s_TestMqtt5DirectConnectionFull)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 770,
                  "startColumn": 46,
                  "endLine": 770,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 690,
                  "startColumn": 31,
                  "endLine": 690,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionWithHttpProxy, s_TestMqtt5DirectConnectionWithHttpProxy)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionWithHttpProxy, s_TestMqtt5DirectConnectionWithHttpProxy)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionWithHttpProxy, s_TestMqtt5DirectConnectionWithHttpProxy)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 688,
                  "startColumn": 46,
                  "endLine": 688,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 636,
                  "startColumn": 31,
                  "endLine": 636,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionWithMutualTLS, s_TestMqtt5DirectConnectionWithMutualTLS)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionWithMutualTLS, s_TestMqtt5DirectConnectionWithMutualTLS)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionWithMutualTLS, s_TestMqtt5DirectConnectionWithMutualTLS)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 634,
                  "startColumn": 46,
                  "endLine": 634,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 31,
                  "endLine": 593,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionWithTLS, s_TestMqtt5DirectConnectionWithTLS)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionWithTLS, s_TestMqtt5DirectConnectionWithTLS)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionWithTLS, s_TestMqtt5DirectConnectionWithTLS)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 591,
                  "startColumn": 34,
                  "endLine": 591,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    connectionPromise.get_future().get();\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 549,
                  "startColumn": 31,
                  "endLine": 549,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionWithBasicAuth, s_TestMqtt5DirectConnectionWithBasicAuth)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionWithBasicAuth, s_TestMqtt5DirectConnectionWithBasicAuth)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionWithBasicAuth, s_TestMqtt5DirectConnectionWithBasicAuth)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 46,
                  "endLine": 547,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client);\n\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 31,
                  "endLine": 510,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionMinimal, s_TestMqtt5DirectConnectionMinimal)\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionMinimal, s_TestMqtt5DirectConnectionMinimal)\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt5DirectConnectionMinimal, s_TestMqtt5DirectConnectionMinimal)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 46,
                  "endLine": 508,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise.get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise.get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3499,
                  "startColumn": 73,
                  "endLine": 3499,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        mqtt5TestVars.m_certificate_path_string.c_str(), mqtt5TestVars.m_private_key_path_string.c_str(), allocator);\n\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                    "rendered": {
                      "text": "    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        mqtt5TestVars.m_certificate_path_string.c_str(), mqtt5TestVars.m_private_key_path_string.c_str(), allocator);\n\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                      "markdown": "`    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        mqtt5TestVars.m_certificate_path_string.c_str(), mqtt5TestVars.m_private_key_path_string.c_str(), allocator);\n\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3451,
                  "startColumn": 24,
                  "endLine": 3451,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n",
                      "markdown": "`    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3323,
                  "startColumn": 24,
                  "endLine": 3323,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n",
                      "markdown": "`    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3291,
                  "startColumn": 73,
                  "endLine": 3291,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        mqtt5TestVars.m_certificate_path_string.c_str(), mqtt5TestVars.m_private_key_path_string.c_str(), allocator);\n\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                    "rendered": {
                      "text": "    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        mqtt5TestVars.m_certificate_path_string.c_str(), mqtt5TestVars.m_private_key_path_string.c_str(), allocator);\n\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                      "markdown": "`    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        mqtt5TestVars.m_certificate_path_string.c_str(), mqtt5TestVars.m_private_key_path_string.c_str(), allocator);\n\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3244,
                  "startColumn": 24,
                  "endLine": 3244,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n",
                      "markdown": "`    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3096,
                  "startColumn": 73,
                  "endLine": 3096,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        mqtt5TestVars.m_certificate_path_string.c_str(), mqtt5TestVars.m_private_key_path_string.c_str(), allocator);\n\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                    "rendered": {
                      "text": "    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        mqtt5TestVars.m_certificate_path_string.c_str(), mqtt5TestVars.m_private_key_path_string.c_str(), allocator);\n\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                      "markdown": "`    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        mqtt5TestVars.m_certificate_path_string.c_str(), mqtt5TestVars.m_private_key_path_string.c_str(), allocator);\n\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3058,
                  "startColumn": 24,
                  "endLine": 3058,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n",
                      "markdown": "`    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2671,
                  "startColumn": 24,
                  "endLine": 2671,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n",
                      "markdown": "`    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2622,
                  "startColumn": 24,
                  "endLine": 2622,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n    std::promise<bool> connectionPromise;\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n    std::promise<bool> connectionPromise;\n",
                      "markdown": "`    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n    std::promise<bool> connectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2574,
                  "startColumn": 24,
                  "endLine": 2574,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n",
                      "markdown": "`    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(builder);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2043,
                  "startColumn": 24,
                  "endLine": 2043,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5ClientBuilder *publish_builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(publish_builder);\n\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5ClientBuilder *publish_builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(publish_builder);\n\n",
                      "markdown": "`    Aws::Iot::Mqtt5ClientBuilder *publish_builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n    ASSERT_TRUE(publish_builder);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2034,
                  "startColumn": 28,
                  "endLine": 2034,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n            mqtt5TestVars.m_hostname_string,\n            mqtt5TestVars.m_certificate_path_string.c_str(),\n            mqtt5TestVars.m_private_key_path_string.c_str(),\n            allocator);\n    ASSERT_TRUE(subscribe_builder2);\n\n",
                    "rendered": {
                      "text": "        Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n            mqtt5TestVars.m_hostname_string,\n            mqtt5TestVars.m_certificate_path_string.c_str(),\n            mqtt5TestVars.m_private_key_path_string.c_str(),\n            allocator);\n    ASSERT_TRUE(subscribe_builder2);\n\n",
                      "markdown": "`        Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n            mqtt5TestVars.m_hostname_string,\n            mqtt5TestVars.m_certificate_path_string.c_str(),\n            mqtt5TestVars.m_private_key_path_string.c_str(),\n            allocator);\n    ASSERT_TRUE(subscribe_builder2);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1992,
                  "startColumn": 28,
                  "endLine": 1992,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n            mqtt5TestVars.m_hostname_string,\n            mqtt5TestVars.m_certificate_path_string.c_str(),\n            mqtt5TestVars.m_private_key_path_string.c_str(),\n            allocator);\n    ASSERT_TRUE(subscribe_builder);\n\n",
                    "rendered": {
                      "text": "        Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n            mqtt5TestVars.m_hostname_string,\n            mqtt5TestVars.m_certificate_path_string.c_str(),\n            mqtt5TestVars.m_private_key_path_string.c_str(),\n            allocator);\n    ASSERT_TRUE(subscribe_builder);\n\n",
                      "markdown": "`        Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n            mqtt5TestVars.m_hostname_string,\n            mqtt5TestVars.m_certificate_path_string.c_str(),\n            mqtt5TestVars.m_private_key_path_string.c_str(),\n            allocator);\n    ASSERT_TRUE(subscribe_builder);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1399,
                  "startColumn": 61,
                  "endLine": 1399,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(\"WRONG_USERNAME\");\n    packetConnect->WithPassword(ByteCursorFromCString(\"WRONG_PASSWORD\"));\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n",
                    "rendered": {
                      "text": "\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(\"WRONG_USERNAME\");\n    packetConnect->WithPassword(ByteCursorFromCString(\"WRONG_PASSWORD\"));\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n",
                      "markdown": "`\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(\"WRONG_USERNAME\");\n    packetConnect->WithPassword(ByteCursorFromCString(\"WRONG_PASSWORD\"));\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1399,
                  "startColumn": 23,
                  "endLine": 1399,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(\"WRONG_USERNAME\");\n    packetConnect->WithPassword(ByteCursorFromCString(\"WRONG_PASSWORD\"));\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n",
                    "rendered": {
                      "text": "\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(\"WRONG_USERNAME\");\n    packetConnect->WithPassword(ByteCursorFromCString(\"WRONG_PASSWORD\"));\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n",
                      "markdown": "`\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(\"WRONG_USERNAME\");\n    packetConnect->WithPassword(ByteCursorFromCString(\"WRONG_PASSWORD\"));\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 983,
                  "startColumn": 73,
                  "endLine": 983,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    s_setupConnectionLifeCycle(mqtt5Options, connectionPromise, stoppedPromise);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        mqtt5TestVars.m_certificate_path_string.c_str(), mqtt5TestVars.m_private_key_path_string.c_str(), allocator);\n\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                    "rendered": {
                      "text": "    s_setupConnectionLifeCycle(mqtt5Options, connectionPromise, stoppedPromise);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        mqtt5TestVars.m_certificate_path_string.c_str(), mqtt5TestVars.m_private_key_path_string.c_str(), allocator);\n\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                      "markdown": "`    s_setupConnectionLifeCycle(mqtt5Options, connectionPromise, stoppedPromise);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        mqtt5TestVars.m_certificate_path_string.c_str(), mqtt5TestVars.m_private_key_path_string.c_str(), allocator);\n\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 855,
                  "startColumn": 48,
                  "endLine": 855,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(mqtt5TestVars.m_username_string);\n    packetConnect->WithPassword(mqtt5TestVars.m_password_cursor);\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n",
                    "rendered": {
                      "text": "\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(mqtt5TestVars.m_username_string);\n    packetConnect->WithPassword(mqtt5TestVars.m_password_cursor);\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n",
                      "markdown": "`\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(mqtt5TestVars.m_username_string);\n    packetConnect->WithPassword(mqtt5TestVars.m_password_cursor);\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 855,
                  "startColumn": 23,
                  "endLine": 855,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(mqtt5TestVars.m_username_string);\n    packetConnect->WithPassword(mqtt5TestVars.m_password_cursor);\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n",
                    "rendered": {
                      "text": "\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(mqtt5TestVars.m_username_string);\n    packetConnect->WithPassword(mqtt5TestVars.m_password_cursor);\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n",
                      "markdown": "`\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(mqtt5TestVars.m_username_string);\n    packetConnect->WithPassword(mqtt5TestVars.m_password_cursor);\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 622,
                  "startColumn": 73,
                  "endLine": 622,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    s_setupConnectionLifeCycle(mqtt5Options, connectionPromise, stoppedPromise);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        mqtt5TestVars.m_certificate_path_string.c_str(), mqtt5TestVars.m_private_key_path_string.c_str(), allocator);\n\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                    "rendered": {
                      "text": "    s_setupConnectionLifeCycle(mqtt5Options, connectionPromise, stoppedPromise);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        mqtt5TestVars.m_certificate_path_string.c_str(), mqtt5TestVars.m_private_key_path_string.c_str(), allocator);\n\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                      "markdown": "`    s_setupConnectionLifeCycle(mqtt5Options, connectionPromise, stoppedPromise);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        mqtt5TestVars.m_certificate_path_string.c_str(), mqtt5TestVars.m_private_key_path_string.c_str(), allocator);\n\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 48,
                  "endLine": 535,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(mqtt5TestVars.m_username_string);\n    packetConnect->WithPassword(mqtt5TestVars.m_password_cursor);\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n",
                    "rendered": {
                      "text": "\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(mqtt5TestVars.m_username_string);\n    packetConnect->WithPassword(mqtt5TestVars.m_password_cursor);\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n",
                      "markdown": "`\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(mqtt5TestVars.m_username_string);\n    packetConnect->WithPassword(mqtt5TestVars.m_password_cursor);\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 23,
                  "endLine": 535,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(mqtt5TestVars.m_username_string);\n    packetConnect->WithPassword(mqtt5TestVars.m_password_cursor);\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n",
                    "rendered": {
                      "text": "\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(mqtt5TestVars.m_username_string);\n    packetConnect->WithPassword(mqtt5TestVars.m_password_cursor);\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n",
                      "markdown": "`\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n    packetConnect->WithUserName(mqtt5TestVars.m_username_string);\n    packetConnect->WithPassword(mqtt5TestVars.m_password_cursor);\n    mqtt5Options.WithConnectOptions(packetConnect);\n\n    std::promise<bool> connectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 23,
                  "endLine": 442,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    Aws::Crt::String m_username_string;\n    Aws::Crt::ByteCursor m_password_cursor;\n    Aws::Crt::String m_certificate_path_string;\n    Aws::Crt::String m_private_key_path_string;\n    Aws::Crt::String m_httpproxy_hostname_string;\n    uint32_t m_httpproxy_port_value;\n};\n",
                    "rendered": {
                      "text": "    Aws::Crt::String m_username_string;\n    Aws::Crt::ByteCursor m_password_cursor;\n    Aws::Crt::String m_certificate_path_string;\n    Aws::Crt::String m_private_key_path_string;\n    Aws::Crt::String m_httpproxy_hostname_string;\n    uint32_t m_httpproxy_port_value;\n};\n",
                      "markdown": "`    Aws::Crt::String m_username_string;\n    Aws::Crt::ByteCursor m_password_cursor;\n    Aws::Crt::String m_certificate_path_string;\n    Aws::Crt::String m_private_key_path_string;\n    Aws::Crt::String m_httpproxy_hostname_string;\n    uint32_t m_httpproxy_port_value;\n};\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 27,
                  "endLine": 440,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    Aws::Crt::String m_hostname_string;\n    uint32_t m_port_value;\n    Aws::Crt::String m_username_string;\n    Aws::Crt::ByteCursor m_password_cursor;\n    Aws::Crt::String m_certificate_path_string;\n    Aws::Crt::String m_private_key_path_string;\n    Aws::Crt::String m_httpproxy_hostname_string;\n",
                    "rendered": {
                      "text": "    Aws::Crt::String m_hostname_string;\n    uint32_t m_port_value;\n    Aws::Crt::String m_username_string;\n    Aws::Crt::ByteCursor m_password_cursor;\n    Aws::Crt::String m_certificate_path_string;\n    Aws::Crt::String m_private_key_path_string;\n    Aws::Crt::String m_httpproxy_hostname_string;\n",
                      "markdown": "`    Aws::Crt::String m_hostname_string;\n    uint32_t m_port_value;\n    Aws::Crt::String m_username_string;\n    Aws::Crt::ByteCursor m_password_cursor;\n    Aws::Crt::String m_certificate_path_string;\n    Aws::Crt::String m_private_key_path_string;\n    Aws::Crt::String m_httpproxy_hostname_string;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 433,
                  "startColumn": 25,
                  "endLine": 433,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    struct aws_string *m_username = NULL;\n    struct aws_string *m_password = NULL;\n    struct aws_string *m_certificate_path = NULL;\n    struct aws_string *m_private_key_path = NULL;\n    struct aws_string *m_httpproxy_hostname = NULL;\n    struct aws_string *m_httpproxy_port = NULL;\n\n",
                    "rendered": {
                      "text": "    struct aws_string *m_username = NULL;\n    struct aws_string *m_password = NULL;\n    struct aws_string *m_certificate_path = NULL;\n    struct aws_string *m_private_key_path = NULL;\n    struct aws_string *m_httpproxy_hostname = NULL;\n    struct aws_string *m_httpproxy_port = NULL;\n\n",
                      "markdown": "`    struct aws_string *m_username = NULL;\n    struct aws_string *m_password = NULL;\n    struct aws_string *m_certificate_path = NULL;\n    struct aws_string *m_private_key_path = NULL;\n    struct aws_string *m_httpproxy_hostname = NULL;\n    struct aws_string *m_httpproxy_port = NULL;\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 25,
                  "endLine": 431,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    struct aws_string *m_hostname = NULL;\n    struct aws_string *m_port = NULL;\n    struct aws_string *m_username = NULL;\n    struct aws_string *m_password = NULL;\n    struct aws_string *m_certificate_path = NULL;\n    struct aws_string *m_private_key_path = NULL;\n    struct aws_string *m_httpproxy_hostname = NULL;\n",
                    "rendered": {
                      "text": "    struct aws_string *m_hostname = NULL;\n    struct aws_string *m_port = NULL;\n    struct aws_string *m_username = NULL;\n    struct aws_string *m_password = NULL;\n    struct aws_string *m_certificate_path = NULL;\n    struct aws_string *m_private_key_path = NULL;\n    struct aws_string *m_httpproxy_hostname = NULL;\n",
                      "markdown": "`    struct aws_string *m_hostname = NULL;\n    struct aws_string *m_port = NULL;\n    struct aws_string *m_username = NULL;\n    struct aws_string *m_password = NULL;\n    struct aws_string *m_certificate_path = NULL;\n    struct aws_string *m_private_key_path = NULL;\n    struct aws_string *m_httpproxy_hostname = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 14,
                  "endLine": 409,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        if (m_private_key_path != NULL)\n        {\n            aws_string_destroy(m_private_key_path);\n            m_private_key_path = NULL;\n        }\n\n        if (m_httpproxy_hostname != NULL)\n",
                    "rendered": {
                      "text": "        if (m_private_key_path != NULL)\n        {\n            aws_string_destroy(m_private_key_path);\n            m_private_key_path = NULL;\n        }\n\n        if (m_httpproxy_hostname != NULL)\n",
                      "markdown": "`        if (m_private_key_path != NULL)\n        {\n            aws_string_destroy(m_private_key_path);\n            m_private_key_path = NULL;\n        }\n\n        if (m_httpproxy_hostname != NULL)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 33,
                  "endLine": 408,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n        if (m_private_key_path != NULL)\n        {\n            aws_string_destroy(m_private_key_path);\n            m_private_key_path = NULL;\n        }\n\n",
                    "rendered": {
                      "text": "\n        if (m_private_key_path != NULL)\n        {\n            aws_string_destroy(m_private_key_path);\n            m_private_key_path = NULL;\n        }\n\n",
                      "markdown": "`\n        if (m_private_key_path != NULL)\n        {\n            aws_string_destroy(m_private_key_path);\n            m_private_key_path = NULL;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 14,
                  "endLine": 406,
                  "endColumn": 25,
                  "snippet": {
                    "text": "            m_certificate_path = NULL;\n        }\n\n        if (m_private_key_path != NULL)\n        {\n            aws_string_destroy(m_private_key_path);\n            m_private_key_path = NULL;\n",
                    "rendered": {
                      "text": "            m_certificate_path = NULL;\n        }\n\n        if (m_private_key_path != NULL)\n        {\n            aws_string_destroy(m_private_key_path);\n            m_private_key_path = NULL;\n",
                      "markdown": "`            m_certificate_path = NULL;\n        }\n\n        if (m_private_key_path != NULL)\n        {\n            aws_string_destroy(m_private_key_path);\n            m_private_key_path = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 14,
                  "endLine": 397,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        if (m_password != NULL)\n        {\n            aws_string_destroy(m_password);\n            m_password = NULL;\n        }\n\n        if (m_certificate_path != NULL)\n",
                    "rendered": {
                      "text": "        if (m_password != NULL)\n        {\n            aws_string_destroy(m_password);\n            m_password = NULL;\n        }\n\n        if (m_certificate_path != NULL)\n",
                      "markdown": "`        if (m_password != NULL)\n        {\n            aws_string_destroy(m_password);\n            m_password = NULL;\n        }\n\n        if (m_certificate_path != NULL)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 33,
                  "endLine": 396,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n        if (m_password != NULL)\n        {\n            aws_string_destroy(m_password);\n            m_password = NULL;\n        }\n\n",
                    "rendered": {
                      "text": "\n        if (m_password != NULL)\n        {\n            aws_string_destroy(m_password);\n            m_password = NULL;\n        }\n\n",
                      "markdown": "`\n        if (m_password != NULL)\n        {\n            aws_string_destroy(m_password);\n            m_password = NULL;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 14,
                  "endLine": 394,
                  "endColumn": 22,
                  "snippet": {
                    "text": "            m_username = NULL;\n        }\n\n        if (m_password != NULL)\n        {\n            aws_string_destroy(m_password);\n            m_password = NULL;\n",
                    "rendered": {
                      "text": "            m_username = NULL;\n        }\n\n        if (m_password != NULL)\n        {\n            aws_string_destroy(m_password);\n            m_password = NULL;\n",
                      "markdown": "`            m_username = NULL;\n        }\n\n        if (m_password != NULL)\n        {\n            aws_string_destroy(m_password);\n            m_password = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 67,
                  "endLine": 351,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n                break;\n            }\n",
                    "rendered": {
                      "text": "                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n                break;\n            }\n",
                      "markdown": "`                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n                break;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 22,
                  "endLine": 351,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n                break;\n            }\n",
                    "rendered": {
                      "text": "                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n                break;\n            }\n",
                      "markdown": "`                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n                break;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 74,
                  "endLine": 343,
                  "endColumn": 85,
                  "snippet": {
                    "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                    "rendered": {
                      "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                      "markdown": "`                {\n                    return;\n                }\n                if (m_hostname == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 97,
                  "endLine": 337,
                  "endColumn": 108,
                  "snippet": {
                    "text": "                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_hostname, &m_hostname);\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_key, &m_private_key_path);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                    "rendered": {
                      "text": "                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_hostname, &m_hostname);\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_key, &m_private_key_path);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                      "markdown": "`                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_hostname, &m_hostname);\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_key, &m_private_key_path);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 67,
                  "endLine": 328,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n                break;\n            }\n",
                    "rendered": {
                      "text": "                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n                break;\n            }\n",
                      "markdown": "`                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n                break;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 22,
                  "endLine": 328,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n                break;\n            }\n",
                    "rendered": {
                      "text": "                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n                break;\n            }\n",
                      "markdown": "`                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n                break;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 92,
                  "endLine": 319,
                  "endColumn": 103,
                  "snippet": {
                    "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                    "rendered": {
                      "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                      "markdown": "`                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 101,
                  "endLine": 313,
                  "endColumn": 112,
                  "snippet": {
                    "text": "                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                    "rendered": {
                      "text": "                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                      "markdown": "`                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 85,
                  "endLine": 313,
                  "endColumn": 96,
                  "snippet": {
                    "text": "                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                    "rendered": {
                      "text": "                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                      "markdown": "`                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 81,
                  "endLine": 303,
                  "endColumn": 89,
                  "snippet": {
                    "text": "                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_username_string = aws_string_c_str(m_username);\n                    m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                }\n                break;\n            }\n",
                    "rendered": {
                      "text": "                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_username_string = aws_string_c_str(m_username);\n                    m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                }\n                break;\n            }\n",
                      "markdown": "`                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_username_string = aws_string_c_str(m_username);\n                    m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                }\n                break;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 62,
                  "endLine": 303,
                  "endColumn": 70,
                  "snippet": {
                    "text": "                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_username_string = aws_string_c_str(m_username);\n                    m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                }\n                break;\n            }\n",
                    "rendered": {
                      "text": "                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_username_string = aws_string_c_str(m_username);\n                    m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                }\n                break;\n            }\n",
                      "markdown": "`                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_username_string = aws_string_c_str(m_username);\n                    m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                }\n                break;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 22,
                  "endLine": 303,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_username_string = aws_string_c_str(m_username);\n                    m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                }\n                break;\n            }\n",
                    "rendered": {
                      "text": "                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_username_string = aws_string_c_str(m_username);\n                    m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                }\n                break;\n            }\n",
                      "markdown": "`                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_username_string = aws_string_c_str(m_username);\n                    m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                }\n                break;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 84,
                  "endLine": 294,
                  "endColumn": 92,
                  "snippet": {
                    "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_username == NULL || m_password == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                    "rendered": {
                      "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_username == NULL || m_password == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                      "markdown": "`                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_username == NULL || m_password == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 104,
                  "endLine": 288,
                  "endColumn": 112,
                  "snippet": {
                    "text": "                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_basic_auth_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_password, &m_password);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                    "rendered": {
                      "text": "                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_basic_auth_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_password, &m_password);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                      "markdown": "`                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_basic_auth_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_password, &m_password);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 91,
                  "endLine": 288,
                  "endColumn": 99,
                  "snippet": {
                    "text": "                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_basic_auth_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_password, &m_password);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                    "rendered": {
                      "text": "                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_basic_auth_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_password, &m_password);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                      "markdown": "`                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_basic_auth_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_password, &m_password);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 63,
                  "endLine": 258,
                  "endColumn": 74,
                  "snippet": {
                    "text": "                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                break;\n            }\n            case MQTT5CONNECT_WS:\n",
                    "rendered": {
                      "text": "                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                break;\n            }\n            case MQTT5CONNECT_WS:\n",
                      "markdown": "`                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                break;\n            }\n            case MQTT5CONNECT_WS:\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 18,
                  "endLine": 258,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                break;\n            }\n            case MQTT5CONNECT_WS:\n",
                    "rendered": {
                      "text": "                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                break;\n            }\n            case MQTT5CONNECT_WS:\n",
                      "markdown": "`                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                break;\n            }\n            case MQTT5CONNECT_WS:\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 92,
                  "endLine": 250,
                  "endColumn": 103,
                  "snippet": {
                    "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                    "rendered": {
                      "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                      "markdown": "`                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 101,
                  "endLine": 244,
                  "endColumn": 112,
                  "snippet": {
                    "text": "                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                    "rendered": {
                      "text": "                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                      "markdown": "`                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 85,
                  "endLine": 244,
                  "endColumn": 96,
                  "snippet": {
                    "text": "                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                    "rendered": {
                      "text": "                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                      "markdown": "`                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 77,
                  "endLine": 236,
                  "endColumn": 85,
                  "snippet": {
                    "text": "                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_username_string = aws_string_c_str(m_username);\n                m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                break;\n            }\n            case MQTT5CONNECT_DIRECT_TLS:\n",
                    "rendered": {
                      "text": "                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_username_string = aws_string_c_str(m_username);\n                m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                break;\n            }\n            case MQTT5CONNECT_DIRECT_TLS:\n",
                      "markdown": "`                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_username_string = aws_string_c_str(m_username);\n                m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                break;\n            }\n            case MQTT5CONNECT_DIRECT_TLS:\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 58,
                  "endLine": 236,
                  "endColumn": 66,
                  "snippet": {
                    "text": "                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_username_string = aws_string_c_str(m_username);\n                m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                break;\n            }\n            case MQTT5CONNECT_DIRECT_TLS:\n",
                    "rendered": {
                      "text": "                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_username_string = aws_string_c_str(m_username);\n                m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                break;\n            }\n            case MQTT5CONNECT_DIRECT_TLS:\n",
                      "markdown": "`                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_username_string = aws_string_c_str(m_username);\n                m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                break;\n            }\n            case MQTT5CONNECT_DIRECT_TLS:\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 18,
                  "endLine": 236,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_username_string = aws_string_c_str(m_username);\n                m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                break;\n            }\n            case MQTT5CONNECT_DIRECT_TLS:\n",
                    "rendered": {
                      "text": "                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_username_string = aws_string_c_str(m_username);\n                m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                break;\n            }\n            case MQTT5CONNECT_DIRECT_TLS:\n",
                      "markdown": "`                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_username_string = aws_string_c_str(m_username);\n                m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n                break;\n            }\n            case MQTT5CONNECT_DIRECT_TLS:\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 84,
                  "endLine": 228,
                  "endColumn": 92,
                  "snippet": {
                    "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_username == NULL || m_password == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                    "rendered": {
                      "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_username == NULL || m_password == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                      "markdown": "`                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_username == NULL || m_password == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 104,
                  "endLine": 222,
                  "endColumn": 112,
                  "snippet": {
                    "text": "                    aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_password, &m_password);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                    "rendered": {
                      "text": "                    aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_password, &m_password);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                      "markdown": "`                    aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_password, &m_password);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 91,
                  "endLine": 222,
                  "endColumn": 99,
                  "snippet": {
                    "text": "                    aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_password, &m_password);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                    "rendered": {
                      "text": "                    aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_password, &m_password);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                      "markdown": "`                    aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_password, &m_password);\n\n                if (m_error != AWS_OP_SUCCESS)\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 52,
                  "endLine": 175,
                  "endColumn": 63,
                  "snippet": {
                    "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_port, \"AWS_TEST_MQTT5_PROXY_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_certificate, \"AWS_TEST_MQTT5_CERTIFICATE_FILE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_private_key, \"AWS_TEST_MQTT5_KEY_FILE\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_hostname, \"AWS_TEST_MQTT5_IOT_CORE_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_certificate, \"AWS_TEST_MQTT5_IOT_CORE_RSA_CERT\");\n",
                    "rendered": {
                      "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_port, \"AWS_TEST_MQTT5_PROXY_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_certificate, \"AWS_TEST_MQTT5_CERTIFICATE_FILE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_private_key, \"AWS_TEST_MQTT5_KEY_FILE\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_hostname, \"AWS_TEST_MQTT5_IOT_CORE_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_certificate, \"AWS_TEST_MQTT5_IOT_CORE_RSA_CERT\");\n",
                      "markdown": "`AWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_port, \"AWS_TEST_MQTT5_PROXY_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_certificate, \"AWS_TEST_MQTT5_CERTIFICATE_FILE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_private_key, \"AWS_TEST_MQTT5_KEY_FILE\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_hostname, \"AWS_TEST_MQTT5_IOT_CORE_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_certificate, \"AWS_TEST_MQTT5_IOT_CORE_RSA_CERT\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 95,
                  "endLine": 170,
                  "endColumn": 103,
                  "snippet": {
                    "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_websocket_tls_port, \"AWS_TEST_MQTT5_WS_MQTT_TLS_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_username, \"AWS_TEST_MQTT5_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_password, \"AWS_TEST_MQTT5_BASIC_AUTH_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_hostname, \"AWS_TEST_MQTT5_PROXY_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_port, \"AWS_TEST_MQTT5_PROXY_PORT\");\n\n",
                    "rendered": {
                      "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_websocket_tls_port, \"AWS_TEST_MQTT5_WS_MQTT_TLS_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_username, \"AWS_TEST_MQTT5_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_password, \"AWS_TEST_MQTT5_BASIC_AUTH_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_hostname, \"AWS_TEST_MQTT5_PROXY_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_port, \"AWS_TEST_MQTT5_PROXY_PORT\");\n\n",
                      "markdown": "`AWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_websocket_tls_port, \"AWS_TEST_MQTT5_WS_MQTT_TLS_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_username, \"AWS_TEST_MQTT5_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_password, \"AWS_TEST_MQTT5_BASIC_AUTH_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_hostname, \"AWS_TEST_MQTT5_PROXY_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_port, \"AWS_TEST_MQTT5_PROXY_PORT\");\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 58,
                  "endLine": 170,
                  "endColumn": 66,
                  "snippet": {
                    "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_websocket_tls_port, \"AWS_TEST_MQTT5_WS_MQTT_TLS_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_username, \"AWS_TEST_MQTT5_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_password, \"AWS_TEST_MQTT5_BASIC_AUTH_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_hostname, \"AWS_TEST_MQTT5_PROXY_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_port, \"AWS_TEST_MQTT5_PROXY_PORT\");\n\n",
                    "rendered": {
                      "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_websocket_tls_port, \"AWS_TEST_MQTT5_WS_MQTT_TLS_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_username, \"AWS_TEST_MQTT5_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_password, \"AWS_TEST_MQTT5_BASIC_AUTH_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_hostname, \"AWS_TEST_MQTT5_PROXY_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_port, \"AWS_TEST_MQTT5_PROXY_PORT\");\n\n",
                      "markdown": "`AWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_websocket_tls_port, \"AWS_TEST_MQTT5_WS_MQTT_TLS_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_username, \"AWS_TEST_MQTT5_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_password, \"AWS_TEST_MQTT5_BASIC_AUTH_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_hostname, \"AWS_TEST_MQTT5_PROXY_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_port, \"AWS_TEST_MQTT5_PROXY_PORT\");\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3495,
                  "startColumn": 46,
                  "endLine": 3495,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3449,
                  "startColumn": 24,
                  "endLine": 3449,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3321,
                  "startColumn": 24,
                  "endLine": 3321,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3287,
                  "startColumn": 46,
                  "endLine": 3287,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3242,
                  "startColumn": 24,
                  "endLine": 3242,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3161,
                  "startColumn": 46,
                  "endLine": 3161,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    Aws::Crt::Io::SocketOptions socketOptions;\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    Aws::Crt::Io::SocketOptions socketOptions;\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    Aws::Crt::Io::SocketOptions socketOptions;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3137,
                  "startColumn": 46,
                  "endLine": 3137,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    socketOptions.SetConnectTimeoutMs(3000);\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    return s_AdapterConenctAndDisconnectThroughMqtt5(mqtt5Options, allocator);\n",
                    "rendered": {
                      "text": "    socketOptions.SetConnectTimeoutMs(3000);\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    return s_AdapterConenctAndDisconnectThroughMqtt5(mqtt5Options, allocator);\n",
                      "markdown": "`    socketOptions.SetConnectTimeoutMs(3000);\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    return s_AdapterConenctAndDisconnectThroughMqtt5(mqtt5Options, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3092,
                  "startColumn": 46,
                  "endLine": 3092,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 3056,
                  "startColumn": 24,
                  "endLine": 3056,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2982,
                  "startColumn": 46,
                  "endLine": 2982,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    Aws::Crt::Io::SocketOptions socketOptions;\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    Aws::Crt::Io::SocketOptions socketOptions;\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    Aws::Crt::Io::SocketOptions socketOptions;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2951,
                  "startColumn": 46,
                  "endLine": 2951,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    socketOptions.SetConnectTimeoutMs(3000);\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n",
                    "rendered": {
                      "text": "    socketOptions.SetConnectTimeoutMs(3000);\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n",
                      "markdown": "`    socketOptions.SetConnectTimeoutMs(3000);\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Mqtt5::Mqtt5Client> mqtt5Client = Mqtt5::Mqtt5Client::NewMqtt5Client(mqtt5Options, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2724,
                  "startColumn": 46,
                  "endLine": 2724,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    const String TEST_TOPIC = \"test/MQTT5_Binding_CPP\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n    std::promise<void> stoppedPromise;\n",
                    "rendered": {
                      "text": "    const String TEST_TOPIC = \"test/MQTT5_Binding_CPP\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n    std::promise<void> stoppedPromise;\n",
                      "markdown": "`    const String TEST_TOPIC = \"test/MQTT5_Binding_CPP\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n    std::promise<void> stoppedPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2669,
                  "startColumn": 24,
                  "endLine": 2669,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2620,
                  "startColumn": 24,
                  "endLine": 2620,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2572,
                  "startColumn": 24,
                  "endLine": 2572,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2461,
                  "startColumn": 46,
                  "endLine": 2461,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    const Aws::Crt::String RETAIN_MESSAGE = \"This is a retian message\";\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connection1Promise;\n",
                    "rendered": {
                      "text": "    const Aws::Crt::String RETAIN_MESSAGE = \"This is a retian message\";\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connection1Promise;\n",
                      "markdown": "`    const Aws::Crt::String RETAIN_MESSAGE = \"This is a retian message\";\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connection1Promise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2362,
                  "startColumn": 46,
                  "endLine": 2362,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    }\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> subscriberConnectionPromise;\n    std::promise<bool> publisherConnectionPromise;\n",
                    "rendered": {
                      "text": "    }\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> subscriberConnectionPromise;\n    std::promise<bool> publisherConnectionPromise;\n",
                      "markdown": "`    }\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> subscriberConnectionPromise;\n    std::promise<bool> publisherConnectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2279,
                  "startColumn": 46,
                  "endLine": 2279,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    const String TEST_TOPIC = \"test/s_TestMqtt5NullUnsubscribe\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n    std::promise<void> stoppedPromise;\n",
                    "rendered": {
                      "text": "    const String TEST_TOPIC = \"test/s_TestMqtt5NullUnsubscribe\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n    std::promise<void> stoppedPromise;\n",
                      "markdown": "`    const String TEST_TOPIC = \"test/s_TestMqtt5NullUnsubscribe\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n    std::promise<void> stoppedPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2236,
                  "startColumn": 46,
                  "endLine": 2236,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    const String TEST_TOPIC = \"test/s_TestMqtt5NullSubscribe\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n    std::promise<void> stoppedPromise;\n",
                    "rendered": {
                      "text": "    const String TEST_TOPIC = \"test/s_TestMqtt5NullSubscribe\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n    std::promise<void> stoppedPromise;\n",
                      "markdown": "`    const String TEST_TOPIC = \"test/s_TestMqtt5NullSubscribe\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n    std::promise<void> stoppedPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2192,
                  "startColumn": 46,
                  "endLine": 2192,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    const String TEST_TOPIC = \"test/s_TestMqtt5NullPublish\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n    std::promise<void> stoppedPromise;\n",
                    "rendered": {
                      "text": "    const String TEST_TOPIC = \"test/s_TestMqtt5NullPublish\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n    std::promise<void> stoppedPromise;\n",
                      "markdown": "`    const String TEST_TOPIC = \"test/s_TestMqtt5NullPublish\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n    std::promise<void> stoppedPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2041,
                  "startColumn": 24,
                  "endLine": 2041,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    subscribe_builder2->WithPublishReceivedCallback(onMessage_client2);\n\n    Aws::Iot::Mqtt5ClientBuilder *publish_builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n",
                    "rendered": {
                      "text": "    subscribe_builder2->WithPublishReceivedCallback(onMessage_client2);\n\n    Aws::Iot::Mqtt5ClientBuilder *publish_builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n",
                      "markdown": "`    subscribe_builder2->WithPublishReceivedCallback(onMessage_client2);\n\n    Aws::Iot::Mqtt5ClientBuilder *publish_builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n        mqtt5TestVars.m_hostname_string,\n        mqtt5TestVars.m_certificate_path_string.c_str(),\n        mqtt5TestVars.m_private_key_path_string.c_str(),\n        allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 2032,
                  "startColumn": 28,
                  "endLine": 2032,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    Aws::Iot::Mqtt5ClientBuilder *subscribe_builder2 =\n        Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n            mqtt5TestVars.m_hostname_string,\n            mqtt5TestVars.m_certificate_path_string.c_str(),\n            mqtt5TestVars.m_private_key_path_string.c_str(),\n            allocator);\n",
                    "rendered": {
                      "text": "\n    Aws::Iot::Mqtt5ClientBuilder *subscribe_builder2 =\n        Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n            mqtt5TestVars.m_hostname_string,\n            mqtt5TestVars.m_certificate_path_string.c_str(),\n            mqtt5TestVars.m_private_key_path_string.c_str(),\n            allocator);\n",
                      "markdown": "`\n    Aws::Iot::Mqtt5ClientBuilder *subscribe_builder2 =\n        Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n            mqtt5TestVars.m_hostname_string,\n            mqtt5TestVars.m_certificate_path_string.c_str(),\n            mqtt5TestVars.m_private_key_path_string.c_str(),\n            allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1990,
                  "startColumn": 28,
                  "endLine": 1990,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    Aws::Iot::Mqtt5ClientBuilder *subscribe_builder =\n        Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n            mqtt5TestVars.m_hostname_string,\n            mqtt5TestVars.m_certificate_path_string.c_str(),\n            mqtt5TestVars.m_private_key_path_string.c_str(),\n            allocator);\n",
                    "rendered": {
                      "text": "\n    Aws::Iot::Mqtt5ClientBuilder *subscribe_builder =\n        Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n            mqtt5TestVars.m_hostname_string,\n            mqtt5TestVars.m_certificate_path_string.c_str(),\n            mqtt5TestVars.m_private_key_path_string.c_str(),\n            allocator);\n",
                      "markdown": "`\n    Aws::Iot::Mqtt5ClientBuilder *subscribe_builder =\n        Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsFromPath(\n            mqtt5TestVars.m_hostname_string,\n            mqtt5TestVars.m_certificate_path_string.c_str(),\n            mqtt5TestVars.m_private_key_path_string.c_str(),\n            allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1889,
                  "startColumn": 46,
                  "endLine": 1889,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    const String TEST_TOPIC = \"test/MQTT5_Binding_CPP\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> subscriberConnectionPromise;\n",
                    "rendered": {
                      "text": "    const String TEST_TOPIC = \"test/MQTT5_Binding_CPP\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> subscriberConnectionPromise;\n",
                      "markdown": "`    const String TEST_TOPIC = \"test/MQTT5_Binding_CPP\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> subscriberConnectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1809,
                  "startColumn": 46,
                  "endLine": 1809,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    const String TEST_TOPIC = \"test/MQTT5_Binding_CPP\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n    std::promise<void> stoppedPromise;\n",
                    "rendered": {
                      "text": "    const String TEST_TOPIC = \"test/MQTT5_Binding_CPP\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n    std::promise<void> stoppedPromise;\n",
                      "markdown": "`    const String TEST_TOPIC = \"test/MQTT5_Binding_CPP\" + Aws::Crt::UUID().ToString();\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n    std::promise<void> stoppedPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1730,
                  "startColumn": 46,
                  "endLine": 1730,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1672,
                  "startColumn": 46,
                  "endLine": 1672,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1611,
                  "startColumn": 46,
                  "endLine": 1611,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect =\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect =\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect =\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1558,
                  "startColumn": 46,
                  "endLine": 1558,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    const uint32_t SESSION_EXPIRY_INTERVAL_SEC = 600;\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n",
                    "rendered": {
                      "text": "    const uint32_t SESSION_EXPIRY_INTERVAL_SEC = 600;\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n",
                      "markdown": "`    const uint32_t SESSION_EXPIRY_INTERVAL_SEC = 600;\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1478,
                  "startColumn": 46,
                  "endLine": 1478,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1431,
                  "startColumn": 46,
                  "endLine": 1431,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1394,
                  "startColumn": 46,
                  "endLine": 1394,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1292,
                  "startColumn": 46,
                  "endLine": 1292,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    std::promise<bool> connectionPromise;\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    std::promise<bool> connectionPromise;\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    std::promise<bool> connectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1259,
                  "startColumn": 46,
                  "endLine": 1259,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443); // 443 is for mutual TLS, not for direct connect\n\n    std::promise<bool> connectionPromise;\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443); // 443 is for mutual TLS, not for direct connect\n\n    std::promise<bool> connectionPromise;\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443); // 443 is for mutual TLS, not for direct connect\n\n    std::promise<bool> connectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1118,
                  "startColumn": 46,
                  "endLine": 1118,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    Aws::Crt::Io::SocketOptions socketOptions;\n    socketOptions.SetConnectTimeoutMs(3000);\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    Aws::Crt::Io::SocketOptions socketOptions;\n    socketOptions.SetConnectTimeoutMs(3000);\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    Aws::Crt::Io::SocketOptions socketOptions;\n    socketOptions.SetConnectTimeoutMs(3000);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1049,
                  "startColumn": 54,
                  "endLine": 1049,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        return AWS_OP_SUCCESS;\n    }\n    Aws::Crt::Http::HttpClientConnectionProxyOptions proxyOptions;\n    proxyOptions.HostName = mqtt5TestVars.m_httpproxy_hostname_string;\n    proxyOptions.Port = mqtt5TestVars.m_httpproxy_port_value;\n    proxyOptions.AuthType = Aws::Crt::Http::AwsHttpProxyAuthenticationType::None;\n    proxyOptions.ProxyConnectionType = Aws::Crt::Http::AwsHttpProxyConnectionType::Tunneling;\n",
                    "rendered": {
                      "text": "        return AWS_OP_SUCCESS;\n    }\n    Aws::Crt::Http::HttpClientConnectionProxyOptions proxyOptions;\n    proxyOptions.HostName = mqtt5TestVars.m_httpproxy_hostname_string;\n    proxyOptions.Port = mqtt5TestVars.m_httpproxy_port_value;\n    proxyOptions.AuthType = Aws::Crt::Http::AwsHttpProxyAuthenticationType::None;\n    proxyOptions.ProxyConnectionType = Aws::Crt::Http::AwsHttpProxyConnectionType::Tunneling;\n",
                      "markdown": "`        return AWS_OP_SUCCESS;\n    }\n    Aws::Crt::Http::HttpClientConnectionProxyOptions proxyOptions;\n    proxyOptions.HostName = mqtt5TestVars.m_httpproxy_hostname_string;\n    proxyOptions.Port = mqtt5TestVars.m_httpproxy_port_value;\n    proxyOptions.AuthType = Aws::Crt::Http::AwsHttpProxyAuthenticationType::None;\n    proxyOptions.ProxyConnectionType = Aws::Crt::Http::AwsHttpProxyConnectionType::Tunneling;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1043,
                  "startColumn": 34,
                  "endLine": 1043,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    mqtt5Options.WithPort(443);\n\n    // HTTP PROXY\n    if (mqtt5TestVars.m_httpproxy_hostname->len == 0)\n    {\n        printf(\"HTTP PROXY Environment Variables are not set for the test, skip the test\");\n        return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    mqtt5Options.WithPort(443);\n\n    // HTTP PROXY\n    if (mqtt5TestVars.m_httpproxy_hostname->len == 0)\n    {\n        printf(\"HTTP PROXY Environment Variables are not set for the test, skip the test\");\n        return AWS_OP_SUCCESS;\n",
                      "markdown": "`    mqtt5Options.WithPort(443);\n\n    // HTTP PROXY\n    if (mqtt5TestVars.m_httpproxy_hostname->len == 0)\n    {\n        printf(\"HTTP PROXY Environment Variables are not set for the test, skip the test\");\n        return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 1039,
                  "startColumn": 46,
                  "endLine": 1039,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    // HTTP PROXY\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    // HTTP PROXY\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    // HTTP PROXY\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 974,
                  "startColumn": 46,
                  "endLine": 974,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    std::promise<bool> connectionPromise;\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    std::promise<bool> connectionPromise;\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    std::promise<bool> connectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 910,
                  "startColumn": 46,
                  "endLine": 910,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 850,
                  "startColumn": 46,
                  "endLine": 850,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 46,
                  "endLine": 796,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 710,
                  "startColumn": 46,
                  "endLine": 710,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    Aws::Crt::Io::SocketOptions socketOptions;\n    socketOptions.SetConnectTimeoutMs(3000);\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    Aws::Crt::Io::SocketOptions socketOptions;\n    socketOptions.SetConnectTimeoutMs(3000);\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    Aws::Crt::Io::SocketOptions socketOptions;\n    socketOptions.SetConnectTimeoutMs(3000);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 665,
                  "startColumn": 54,
                  "endLine": 665,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        return AWS_OP_SUCCESS;\n    }\n    Aws::Crt::Http::HttpClientConnectionProxyOptions proxyOptions;\n    proxyOptions.HostName = mqtt5TestVars.m_httpproxy_hostname_string;\n    proxyOptions.Port = mqtt5TestVars.m_httpproxy_port_value;\n    proxyOptions.ProxyConnectionType = Aws::Crt::Http::AwsHttpProxyConnectionType::Tunneling;\n    mqtt5Options.WithHttpProxyOptions(proxyOptions);\n",
                    "rendered": {
                      "text": "        return AWS_OP_SUCCESS;\n    }\n    Aws::Crt::Http::HttpClientConnectionProxyOptions proxyOptions;\n    proxyOptions.HostName = mqtt5TestVars.m_httpproxy_hostname_string;\n    proxyOptions.Port = mqtt5TestVars.m_httpproxy_port_value;\n    proxyOptions.ProxyConnectionType = Aws::Crt::Http::AwsHttpProxyConnectionType::Tunneling;\n    mqtt5Options.WithHttpProxyOptions(proxyOptions);\n",
                      "markdown": "`        return AWS_OP_SUCCESS;\n    }\n    Aws::Crt::Http::HttpClientConnectionProxyOptions proxyOptions;\n    proxyOptions.HostName = mqtt5TestVars.m_httpproxy_hostname_string;\n    proxyOptions.Port = mqtt5TestVars.m_httpproxy_port_value;\n    proxyOptions.ProxyConnectionType = Aws::Crt::Http::AwsHttpProxyConnectionType::Tunneling;\n    mqtt5Options.WithHttpProxyOptions(proxyOptions);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 659,
                  "startColumn": 34,
                  "endLine": 659,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    // HTTP PROXY\n    if (mqtt5TestVars.m_httpproxy_hostname->len == 0)\n    {\n        printf(\"HTTP PROXY Environment Variables are not set for the test, skip the test\");\n        return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    // HTTP PROXY\n    if (mqtt5TestVars.m_httpproxy_hostname->len == 0)\n    {\n        printf(\"HTTP PROXY Environment Variables are not set for the test, skip the test\");\n        return AWS_OP_SUCCESS;\n",
                      "markdown": "`    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    // HTTP PROXY\n    if (mqtt5TestVars.m_httpproxy_hostname->len == 0)\n    {\n        printf(\"HTTP PROXY Environment Variables are not set for the test, skip the test\");\n        return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 656,
                  "startColumn": 46,
                  "endLine": 656,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    // HTTP PROXY\n    if (mqtt5TestVars.m_httpproxy_hostname->len == 0)\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    // HTTP PROXY\n    if (mqtt5TestVars.m_httpproxy_hostname->len == 0)\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string).WithPort(mqtt5TestVars.m_port_value);\n\n    // HTTP PROXY\n    if (mqtt5TestVars.m_httpproxy_hostname->len == 0)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 613,
                  "startColumn": 46,
                  "endLine": 613,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    std::promise<bool> connectionPromise;\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    std::promise<bool> connectionPromise;\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(443);\n\n    std::promise<bool> connectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 46,
                  "endLine": 569,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 46,
                  "endLine": 530,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::shared_ptr<Aws::Crt::Mqtt5::ConnectPacket> packetConnect = std::make_shared<Aws::Crt::Mqtt5::ConnectPacket>();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 46,
                  "endLine": 497,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n",
                    "rendered": {
                      "text": "    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n",
                      "markdown": "`    ApiHandle apiHandle(allocator);\n\n    Mqtt5::Mqtt5ClientOptions mqtt5Options(allocator);\n    mqtt5Options.WithHostName(mqtt5TestVars.m_hostname_string);\n    mqtt5Options.WithPort(mqtt5TestVars.m_port_value);\n\n    std::promise<bool> connectionPromise;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 33,
                  "endLine": 443,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    Aws::Crt::ByteCursor m_password_cursor;\n    Aws::Crt::String m_certificate_path_string;\n    Aws::Crt::String m_private_key_path_string;\n    Aws::Crt::String m_httpproxy_hostname_string;\n    uint32_t m_httpproxy_port_value;\n};\n\n",
                    "rendered": {
                      "text": "    Aws::Crt::ByteCursor m_password_cursor;\n    Aws::Crt::String m_certificate_path_string;\n    Aws::Crt::String m_private_key_path_string;\n    Aws::Crt::String m_httpproxy_hostname_string;\n    uint32_t m_httpproxy_port_value;\n};\n\n",
                      "markdown": "`    Aws::Crt::ByteCursor m_password_cursor;\n    Aws::Crt::String m_certificate_path_string;\n    Aws::Crt::String m_private_key_path_string;\n    Aws::Crt::String m_httpproxy_hostname_string;\n    uint32_t m_httpproxy_port_value;\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 23,
                  "endLine": 437,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    struct aws_string *m_httpproxy_hostname = NULL;\n    struct aws_string *m_httpproxy_port = NULL;\n\n    Aws::Crt::String m_hostname_string;\n    uint32_t m_port_value;\n    Aws::Crt::String m_username_string;\n    Aws::Crt::ByteCursor m_password_cursor;\n",
                    "rendered": {
                      "text": "    struct aws_string *m_httpproxy_hostname = NULL;\n    struct aws_string *m_httpproxy_port = NULL;\n\n    Aws::Crt::String m_hostname_string;\n    uint32_t m_port_value;\n    Aws::Crt::String m_username_string;\n    Aws::Crt::ByteCursor m_password_cursor;\n",
                      "markdown": "`    struct aws_string *m_httpproxy_hostname = NULL;\n    struct aws_string *m_httpproxy_port = NULL;\n\n    Aws::Crt::String m_hostname_string;\n    uint32_t m_port_value;\n    Aws::Crt::String m_username_string;\n    Aws::Crt::ByteCursor m_password_cursor;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 434,
                  "startColumn": 35,
                  "endLine": 434,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    struct aws_string *m_password = NULL;\n    struct aws_string *m_certificate_path = NULL;\n    struct aws_string *m_private_key_path = NULL;\n    struct aws_string *m_httpproxy_hostname = NULL;\n    struct aws_string *m_httpproxy_port = NULL;\n\n    Aws::Crt::String m_hostname_string;\n",
                    "rendered": {
                      "text": "    struct aws_string *m_password = NULL;\n    struct aws_string *m_certificate_path = NULL;\n    struct aws_string *m_private_key_path = NULL;\n    struct aws_string *m_httpproxy_hostname = NULL;\n    struct aws_string *m_httpproxy_port = NULL;\n\n    Aws::Crt::String m_hostname_string;\n",
                      "markdown": "`    struct aws_string *m_password = NULL;\n    struct aws_string *m_certificate_path = NULL;\n    struct aws_string *m_private_key_path = NULL;\n    struct aws_string *m_httpproxy_hostname = NULL;\n    struct aws_string *m_httpproxy_port = NULL;\n\n    Aws::Crt::String m_hostname_string;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 25,
                  "endLine": 428,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    int m_error;\n    struct aws_allocator *m_allocator;\n\n    struct aws_string *m_hostname = NULL;\n    struct aws_string *m_port = NULL;\n    struct aws_string *m_username = NULL;\n    struct aws_string *m_password = NULL;\n",
                    "rendered": {
                      "text": "    int m_error;\n    struct aws_allocator *m_allocator;\n\n    struct aws_string *m_hostname = NULL;\n    struct aws_string *m_port = NULL;\n    struct aws_string *m_username = NULL;\n    struct aws_string *m_password = NULL;\n",
                      "markdown": "`    int m_error;\n    struct aws_allocator *m_allocator;\n\n    struct aws_string *m_hostname = NULL;\n    struct aws_string *m_port = NULL;\n    struct aws_string *m_username = NULL;\n    struct aws_string *m_password = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 24,
                  "endLine": 415,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        if (m_httpproxy_hostname != NULL)\n        {\n            aws_string_destroy(m_httpproxy_hostname);\n            m_httpproxy_hostname = NULL;\n        }\n\n        if (m_httpproxy_port != NULL)\n",
                    "rendered": {
                      "text": "        if (m_httpproxy_hostname != NULL)\n        {\n            aws_string_destroy(m_httpproxy_hostname);\n            m_httpproxy_hostname = NULL;\n        }\n\n        if (m_httpproxy_port != NULL)\n",
                      "markdown": "`        if (m_httpproxy_hostname != NULL)\n        {\n            aws_string_destroy(m_httpproxy_hostname);\n            m_httpproxy_hostname = NULL;\n        }\n\n        if (m_httpproxy_port != NULL)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 414,
                  "startColumn": 43,
                  "endLine": 414,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n        if (m_httpproxy_hostname != NULL)\n        {\n            aws_string_destroy(m_httpproxy_hostname);\n            m_httpproxy_hostname = NULL;\n        }\n\n",
                    "rendered": {
                      "text": "\n        if (m_httpproxy_hostname != NULL)\n        {\n            aws_string_destroy(m_httpproxy_hostname);\n            m_httpproxy_hostname = NULL;\n        }\n\n",
                      "markdown": "`\n        if (m_httpproxy_hostname != NULL)\n        {\n            aws_string_destroy(m_httpproxy_hostname);\n            m_httpproxy_hostname = NULL;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 24,
                  "endLine": 412,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            m_private_key_path = NULL;\n        }\n\n        if (m_httpproxy_hostname != NULL)\n        {\n            aws_string_destroy(m_httpproxy_hostname);\n            m_httpproxy_hostname = NULL;\n",
                    "rendered": {
                      "text": "            m_private_key_path = NULL;\n        }\n\n        if (m_httpproxy_hostname != NULL)\n        {\n            aws_string_destroy(m_httpproxy_hostname);\n            m_httpproxy_hostname = NULL;\n",
                      "markdown": "`            m_private_key_path = NULL;\n        }\n\n        if (m_httpproxy_hostname != NULL)\n        {\n            aws_string_destroy(m_httpproxy_hostname);\n            m_httpproxy_hostname = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 14,
                  "endLine": 379,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        if (m_hostname != NULL)\n        {\n            aws_string_destroy(m_hostname);\n            m_hostname = NULL;\n        }\n\n        if (m_port != NULL)\n",
                    "rendered": {
                      "text": "        if (m_hostname != NULL)\n        {\n            aws_string_destroy(m_hostname);\n            m_hostname = NULL;\n        }\n\n        if (m_port != NULL)\n",
                      "markdown": "`        if (m_hostname != NULL)\n        {\n            aws_string_destroy(m_hostname);\n            m_hostname = NULL;\n        }\n\n        if (m_port != NULL)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 33,
                  "endLine": 378,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    {\n        if (m_hostname != NULL)\n        {\n            aws_string_destroy(m_hostname);\n            m_hostname = NULL;\n        }\n\n",
                    "rendered": {
                      "text": "    {\n        if (m_hostname != NULL)\n        {\n            aws_string_destroy(m_hostname);\n            m_hostname = NULL;\n        }\n\n",
                      "markdown": "`    {\n        if (m_hostname != NULL)\n        {\n            aws_string_destroy(m_hostname);\n            m_hostname = NULL;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 14,
                  "endLine": 376,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n    ~Mqtt5TestEnvVars()\n    {\n        if (m_hostname != NULL)\n        {\n            aws_string_destroy(m_hostname);\n            m_hostname = NULL;\n",
                    "rendered": {
                      "text": "\n    ~Mqtt5TestEnvVars()\n    {\n        if (m_hostname != NULL)\n        {\n            aws_string_destroy(m_hostname);\n            m_hostname = NULL;\n",
                      "markdown": "`\n    ~Mqtt5TestEnvVars()\n    {\n        if (m_hostname != NULL)\n        {\n            aws_string_destroy(m_hostname);\n            m_hostname = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 71,
                  "endLine": 367,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\n        if (m_error == AWS_OP_SUCCESS && m_httpproxy_hostname != NULL && m_httpproxy_port != NULL)\n        {\n            m_httpproxy_hostname_string = aws_string_c_str(m_httpproxy_hostname);\n            m_httpproxy_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_httpproxy_port)));\n        }\n    }\n",
                    "rendered": {
                      "text": "\n        if (m_error == AWS_OP_SUCCESS && m_httpproxy_hostname != NULL && m_httpproxy_port != NULL)\n        {\n            m_httpproxy_hostname_string = aws_string_c_str(m_httpproxy_hostname);\n            m_httpproxy_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_httpproxy_port)));\n        }\n    }\n",
                      "markdown": "`\n        if (m_error == AWS_OP_SUCCESS && m_httpproxy_hostname != NULL && m_httpproxy_port != NULL)\n        {\n            m_httpproxy_hostname_string = aws_string_c_str(m_httpproxy_hostname);\n            m_httpproxy_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_httpproxy_port)));\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 24,
                  "endLine": 367,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n        if (m_error == AWS_OP_SUCCESS && m_httpproxy_hostname != NULL && m_httpproxy_port != NULL)\n        {\n            m_httpproxy_hostname_string = aws_string_c_str(m_httpproxy_hostname);\n            m_httpproxy_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_httpproxy_port)));\n        }\n    }\n",
                    "rendered": {
                      "text": "\n        if (m_error == AWS_OP_SUCCESS && m_httpproxy_hostname != NULL && m_httpproxy_port != NULL)\n        {\n            m_httpproxy_hostname_string = aws_string_c_str(m_httpproxy_hostname);\n            m_httpproxy_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_httpproxy_port)));\n        }\n    }\n",
                      "markdown": "`\n        if (m_error == AWS_OP_SUCCESS && m_httpproxy_hostname != NULL && m_httpproxy_port != NULL)\n        {\n            m_httpproxy_hostname_string = aws_string_c_str(m_httpproxy_hostname);\n            m_httpproxy_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_httpproxy_port)));\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 53,
                  "endLine": 365,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_hostname, &m_httpproxy_hostname);\n        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_port, &m_httpproxy_port);\n\n        if (m_error == AWS_OP_SUCCESS && m_httpproxy_hostname != NULL && m_httpproxy_port != NULL)\n        {\n            m_httpproxy_hostname_string = aws_string_c_str(m_httpproxy_hostname);\n            m_httpproxy_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_httpproxy_port)));\n",
                    "rendered": {
                      "text": "        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_hostname, &m_httpproxy_hostname);\n        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_port, &m_httpproxy_port);\n\n        if (m_error == AWS_OP_SUCCESS && m_httpproxy_hostname != NULL && m_httpproxy_port != NULL)\n        {\n            m_httpproxy_hostname_string = aws_string_c_str(m_httpproxy_hostname);\n            m_httpproxy_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_httpproxy_port)));\n",
                      "markdown": "`        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_hostname, &m_httpproxy_hostname);\n        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_port, &m_httpproxy_port);\n\n        if (m_error == AWS_OP_SUCCESS && m_httpproxy_hostname != NULL && m_httpproxy_port != NULL)\n        {\n            m_httpproxy_hostname_string = aws_string_c_str(m_httpproxy_hostname);\n            m_httpproxy_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_httpproxy_port)));\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 106,
                  "endLine": 362,
                  "endColumn": 114,
                  "snippet": {
                    "text": "        }\n\n        // Setup Http Proxy\n        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_hostname, &m_httpproxy_hostname);\n        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_port, &m_httpproxy_port);\n\n        if (m_error == AWS_OP_SUCCESS && m_httpproxy_hostname != NULL && m_httpproxy_port != NULL)\n",
                    "rendered": {
                      "text": "        }\n\n        // Setup Http Proxy\n        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_hostname, &m_httpproxy_hostname);\n        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_port, &m_httpproxy_port);\n\n        if (m_error == AWS_OP_SUCCESS && m_httpproxy_hostname != NULL && m_httpproxy_port != NULL)\n",
                      "markdown": "`        }\n\n        // Setup Http Proxy\n        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_hostname, &m_httpproxy_hostname);\n        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_port, &m_httpproxy_port);\n\n        if (m_error == AWS_OP_SUCCESS && m_httpproxy_hostname != NULL && m_httpproxy_port != NULL)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 83,
                  "endLine": 362,
                  "endColumn": 91,
                  "snippet": {
                    "text": "        }\n\n        // Setup Http Proxy\n        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_hostname, &m_httpproxy_hostname);\n        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_port, &m_httpproxy_port);\n\n        if (m_error == AWS_OP_SUCCESS && m_httpproxy_hostname != NULL && m_httpproxy_port != NULL)\n",
                    "rendered": {
                      "text": "        }\n\n        // Setup Http Proxy\n        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_hostname, &m_httpproxy_hostname);\n        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_port, &m_httpproxy_port);\n\n        if (m_error == AWS_OP_SUCCESS && m_httpproxy_hostname != NULL && m_httpproxy_port != NULL)\n",
                      "markdown": "`        }\n\n        // Setup Http Proxy\n        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_hostname, &m_httpproxy_hostname);\n        m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_proxy_port, &m_httpproxy_port);\n\n        if (m_error == AWS_OP_SUCCESS && m_httpproxy_hostname != NULL && m_httpproxy_port != NULL)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 59,
                  "endLine": 349,
                  "endColumn": 67,
                  "snippet": {
                    "text": "                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n",
                    "rendered": {
                      "text": "                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n",
                      "markdown": "`                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 22,
                  "endLine": 349,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n",
                    "rendered": {
                      "text": "                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n",
                      "markdown": "`                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n                }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 22,
                  "endLine": 343,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                    "rendered": {
                      "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                      "markdown": "`                {\n                    return;\n                }\n                if (m_hostname == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 102,
                  "endLine": 334,
                  "endColumn": 110,
                  "snippet": {
                    "text": "            }\n            case MQTT5CONNECT_IOT_CORE:\n            {\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_hostname, &m_hostname);\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_key, &m_private_key_path);\n",
                    "rendered": {
                      "text": "            }\n            case MQTT5CONNECT_IOT_CORE:\n            {\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_hostname, &m_hostname);\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_key, &m_private_key_path);\n",
                      "markdown": "`            }\n            case MQTT5CONNECT_IOT_CORE:\n            {\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_hostname, &m_hostname);\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_key, &m_private_key_path);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 89,
                  "endLine": 334,
                  "endColumn": 97,
                  "snippet": {
                    "text": "            }\n            case MQTT5CONNECT_IOT_CORE:\n            {\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_hostname, &m_hostname);\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_key, &m_private_key_path);\n",
                    "rendered": {
                      "text": "            }\n            case MQTT5CONNECT_IOT_CORE:\n            {\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_hostname, &m_hostname);\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_key, &m_private_key_path);\n",
                      "markdown": "`            }\n            case MQTT5CONNECT_IOT_CORE:\n            {\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_hostname, &m_hostname);\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_iot_key, &m_private_key_path);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 59,
                  "endLine": 325,
                  "endColumn": 67,
                  "snippet": {
                    "text": "                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n",
                    "rendered": {
                      "text": "                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n",
                      "markdown": "`                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 22,
                  "endLine": 325,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n",
                    "rendered": {
                      "text": "                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n",
                      "markdown": "`                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                    m_private_key_path_string = aws_string_c_str(m_private_key_path);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 22,
                  "endLine": 319,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                    "rendered": {
                      "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                      "markdown": "`                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 105,
                  "endLine": 310,
                  "endColumn": 113,
                  "snippet": {
                    "text": "            case MQTT5CONNECT_WS_TLS:\n            {\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n",
                    "rendered": {
                      "text": "            case MQTT5CONNECT_WS_TLS:\n            {\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n",
                      "markdown": "`            case MQTT5CONNECT_WS_TLS:\n            {\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 59,
                  "endLine": 300,
                  "endColumn": 67,
                  "snippet": {
                    "text": "                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_username_string = aws_string_c_str(m_username);\n                    m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n",
                    "rendered": {
                      "text": "                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_username_string = aws_string_c_str(m_username);\n                    m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n",
                      "markdown": "`                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_username_string = aws_string_c_str(m_username);\n                    m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 22,
                  "endLine": 300,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_username_string = aws_string_c_str(m_username);\n                    m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n",
                    "rendered": {
                      "text": "                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_username_string = aws_string_c_str(m_username);\n                    m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n",
                      "markdown": "`                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                    m_username_string = aws_string_c_str(m_username);\n                    m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 22,
                  "endLine": 294,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_username == NULL || m_password == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                    "rendered": {
                      "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_username == NULL || m_password == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                      "markdown": "`                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_username == NULL || m_password == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 86,
                  "endLine": 284,
                  "endColumn": 94,
                  "snippet": {
                    "text": "            case MQTT5CONNECT_WS_BASIC_AUTH:\n            {\n                m_error |= aws_get_environment_value(\n                    allocator, s_mqtt5_test_envName_websocket_basic_auth_hostName, &m_hostname);\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_basic_auth_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n",
                    "rendered": {
                      "text": "            case MQTT5CONNECT_WS_BASIC_AUTH:\n            {\n                m_error |= aws_get_environment_value(\n                    allocator, s_mqtt5_test_envName_websocket_basic_auth_hostName, &m_hostname);\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_basic_auth_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n",
                      "markdown": "`            case MQTT5CONNECT_WS_BASIC_AUTH:\n            {\n                m_error |= aws_get_environment_value(\n                    allocator, s_mqtt5_test_envName_websocket_basic_auth_hostName, &m_hostname);\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_basic_auth_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 59,
                  "endLine": 276,
                  "endColumn": 67,
                  "snippet": {
                    "text": "                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                }\n                break;\n",
                    "rendered": {
                      "text": "                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                }\n                break;\n",
                      "markdown": "`                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                }\n                break;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 22,
                  "endLine": 276,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                }\n                break;\n",
                    "rendered": {
                      "text": "                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                }\n                break;\n",
                      "markdown": "`                    return;\n                }\n                {\n                    m_hostname_string = aws_string_c_str(m_hostname);\n                    m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                }\n                break;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 22,
                  "endLine": 270,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                    "rendered": {
                      "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                      "markdown": "`                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 108,
                  "endLine": 263,
                  "endColumn": 116,
                  "snippet": {
                    "text": "            }\n            case MQTT5CONNECT_WS:\n            {\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_port, &m_port);\n\n                if (m_error != AWS_OP_SUCCESS)\n",
                    "rendered": {
                      "text": "            }\n            case MQTT5CONNECT_WS:\n            {\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_port, &m_port);\n\n                if (m_error != AWS_OP_SUCCESS)\n",
                      "markdown": "`            }\n            case MQTT5CONNECT_WS:\n            {\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_websocket_port, &m_port);\n\n                if (m_error != AWS_OP_SUCCESS)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 55,
                  "endLine": 255,
                  "endColumn": 63,
                  "snippet": {
                    "text": "                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                m_private_key_path_string = aws_string_c_str(m_private_key_path);\n",
                    "rendered": {
                      "text": "                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                m_private_key_path_string = aws_string_c_str(m_private_key_path);\n",
                      "markdown": "`                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                m_private_key_path_string = aws_string_c_str(m_private_key_path);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 18,
                  "endLine": 255,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                m_private_key_path_string = aws_string_c_str(m_private_key_path);\n",
                    "rendered": {
                      "text": "                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                m_private_key_path_string = aws_string_c_str(m_private_key_path);\n",
                      "markdown": "`                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_certificate_path_string = aws_string_c_str(m_certificate_path);\n                m_private_key_path_string = aws_string_c_str(m_private_key_path);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 22,
                  "endLine": 250,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                    "rendered": {
                      "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                      "markdown": "`                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_certificate_path == NULL || m_private_key_path == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 109,
                  "endLine": 241,
                  "endColumn": 117,
                  "snippet": {
                    "text": "            }\n            case MQTT5CONNECT_DIRECT_TLS:\n            {\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n",
                    "rendered": {
                      "text": "            }\n            case MQTT5CONNECT_DIRECT_TLS:\n            {\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n",
                      "markdown": "`            }\n            case MQTT5CONNECT_DIRECT_TLS:\n            {\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_tls_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_certificate, &m_certificate_path);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_private_key, &m_private_key_path);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 55,
                  "endLine": 233,
                  "endColumn": 63,
                  "snippet": {
                    "text": "                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_username_string = aws_string_c_str(m_username);\n                m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n",
                    "rendered": {
                      "text": "                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_username_string = aws_string_c_str(m_username);\n                m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n",
                      "markdown": "`                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_username_string = aws_string_c_str(m_username);\n                m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 18,
                  "endLine": 233,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_username_string = aws_string_c_str(m_username);\n                m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n",
                    "rendered": {
                      "text": "                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_username_string = aws_string_c_str(m_username);\n                m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n",
                      "markdown": "`                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                m_username_string = aws_string_c_str(m_username);\n                m_password_cursor = ByteCursorFromArray(m_password->bytes, m_password->len);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 22,
                  "endLine": 228,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_username == NULL || m_password == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                    "rendered": {
                      "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_username == NULL || m_password == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                      "markdown": "`                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL || m_username == NULL || m_password == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 104,
                  "endLine": 219,
                  "endColumn": 112,
                  "snippet": {
                    "text": "            case MQTT5CONNECT_DIRECT_BASIC_AUTH:\n            {\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_password, &m_password);\n",
                    "rendered": {
                      "text": "            case MQTT5CONNECT_DIRECT_BASIC_AUTH:\n            {\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_password, &m_password);\n",
                      "markdown": "`            case MQTT5CONNECT_DIRECT_BASIC_AUTH:\n            {\n                m_error |=\n                    aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_basic_port, &m_port);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_username, &m_username);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_basic_password, &m_password);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 55,
                  "endLine": 212,
                  "endColumn": 63,
                  "snippet": {
                    "text": "                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                break;\n            }\n",
                    "rendered": {
                      "text": "                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                break;\n            }\n",
                      "markdown": "`                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                break;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 18,
                  "endLine": 212,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                break;\n            }\n",
                    "rendered": {
                      "text": "                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                break;\n            }\n",
                      "markdown": "`                    m_error = AWS_OP_ERR;\n                    return;\n                }\n                m_hostname_string = aws_string_c_str(m_hostname);\n                m_port_value = static_cast<uint32_t>(atoi(aws_string_c_str(m_port)));\n                break;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 22,
                  "endLine": 207,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                    "rendered": {
                      "text": "                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n",
                      "markdown": "`                {\n                    return;\n                }\n                if (m_hostname == NULL || m_port == NULL)\n                {\n                    m_error = AWS_OP_ERR;\n                    return;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 105,
                  "endLine": 201,
                  "endColumn": 113,
                  "snippet": {
                    "text": "        {\n            case MQTT5CONNECT_DIRECT:\n            {\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_port, &m_port);\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                    "rendered": {
                      "text": "        {\n            case MQTT5CONNECT_DIRECT:\n            {\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_port, &m_port);\n                if (m_error != AWS_OP_SUCCESS)\n                {\n",
                      "markdown": "`        {\n            case MQTT5CONNECT_DIRECT:\n            {\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_hostName, &m_hostname);\n                m_error |= aws_get_environment_value(allocator, s_mqtt5_test_envName_direct_port, &m_port);\n                if (m_error != AWS_OP_SUCCESS)\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 56,
                  "endLine": 177,
                  "endColumn": 64,
                  "snippet": {
                    "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_certificate, \"AWS_TEST_MQTT5_CERTIFICATE_FILE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_private_key, \"AWS_TEST_MQTT5_KEY_FILE\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_hostname, \"AWS_TEST_MQTT5_IOT_CORE_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_certificate, \"AWS_TEST_MQTT5_IOT_CORE_RSA_CERT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_key, \"AWS_TEST_MQTT5_IOT_CORE_RSA_KEY\");\n\n",
                    "rendered": {
                      "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_certificate, \"AWS_TEST_MQTT5_CERTIFICATE_FILE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_private_key, \"AWS_TEST_MQTT5_KEY_FILE\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_hostname, \"AWS_TEST_MQTT5_IOT_CORE_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_certificate, \"AWS_TEST_MQTT5_IOT_CORE_RSA_CERT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_key, \"AWS_TEST_MQTT5_IOT_CORE_RSA_KEY\");\n\n",
                      "markdown": "`AWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_certificate, \"AWS_TEST_MQTT5_CERTIFICATE_FILE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_private_key, \"AWS_TEST_MQTT5_KEY_FILE\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_hostname, \"AWS_TEST_MQTT5_IOT_CORE_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_certificate, \"AWS_TEST_MQTT5_IOT_CORE_RSA_CERT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_key, \"AWS_TEST_MQTT5_IOT_CORE_RSA_KEY\");\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientTest.cpp"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 58,
                  "endLine": 171,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_username, \"AWS_TEST_MQTT5_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_password, \"AWS_TEST_MQTT5_BASIC_AUTH_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_hostname, \"AWS_TEST_MQTT5_PROXY_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_port, \"AWS_TEST_MQTT5_PROXY_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_certificate, \"AWS_TEST_MQTT5_CERTIFICATE_FILE\");\n",
                    "rendered": {
                      "text": "\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_username, \"AWS_TEST_MQTT5_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_password, \"AWS_TEST_MQTT5_BASIC_AUTH_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_hostname, \"AWS_TEST_MQTT5_PROXY_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_port, \"AWS_TEST_MQTT5_PROXY_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_certificate, \"AWS_TEST_MQTT5_CERTIFICATE_FILE\");\n",
                      "markdown": "`\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_username, \"AWS_TEST_MQTT5_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_basic_password, \"AWS_TEST_MQTT5_BASIC_AUTH_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_hostname, \"AWS_TEST_MQTT5_PROXY_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_proxy_port, \"AWS_TEST_MQTT5_PROXY_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_certificate, \"AWS_TEST_MQTT5_CERTIFICATE_FILE\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 47,
                  "endLine": 174,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        printf(\"Failed to connect\");\n        return AWS_OP_ERR;\n    }\n    if (connectionCompletedPromise.get_future().get() == false)\n    {\n        printf(\"Connection failed\");\n        return AWS_OP_ERR;\n",
                    "rendered": {
                      "text": "        printf(\"Failed to connect\");\n        return AWS_OP_ERR;\n    }\n    if (connectionCompletedPromise.get_future().get() == false)\n    {\n        printf(\"Connection failed\");\n        return AWS_OP_ERR;\n",
                      "markdown": "`        printf(\"Failed to connect\");\n        return AWS_OP_ERR;\n    }\n    if (connectionCompletedPromise.get_future().get() == false)\n    {\n        printf(\"Connection failed\");\n        return AWS_OP_ERR;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 23,
                  "endLine": 466,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(port);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt311WSConnectionWithBasicAuth, s_TestMqtt311WSConnectionWithBasicAuth)\n",
                    "rendered": {
                      "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(port);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt311WSConnectionWithBasicAuth, s_TestMqtt311WSConnectionWithBasicAuth)\n",
                      "markdown": "`    aws_string_destroy(endpoint);\n    aws_string_destroy(port);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt311WSConnectionWithBasicAuth, s_TestMqtt311WSConnectionWithBasicAuth)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 460,
                  "startColumn": 70,
                  "endLine": 460,
                  "endColumn": 78,
                  "snippet": {
                    "text": "    socketOptions.SetConnectTimeoutMs(3000);\n    std::shared_ptr<Aws::Crt::Mqtt::MqttConnection> connection = client.NewConnection(\n        aws_string_c_str(endpoint), (uint32_t)std::stoi(aws_string_c_str(port)), socketOptions, true);\n    connection->SetLogin(aws_string_c_str(username), aws_string_c_str(password));\n    int connectResult = s_ConnectAndDisconnect(connection);\n    ASSERT_SUCCESS(connectResult);\n    aws_string_destroy(endpoint);\n",
                    "rendered": {
                      "text": "    socketOptions.SetConnectTimeoutMs(3000);\n    std::shared_ptr<Aws::Crt::Mqtt::MqttConnection> connection = client.NewConnection(\n        aws_string_c_str(endpoint), (uint32_t)std::stoi(aws_string_c_str(port)), socketOptions, true);\n    connection->SetLogin(aws_string_c_str(username), aws_string_c_str(password));\n    int connectResult = s_ConnectAndDisconnect(connection);\n    ASSERT_SUCCESS(connectResult);\n    aws_string_destroy(endpoint);\n",
                      "markdown": "`    socketOptions.SetConnectTimeoutMs(3000);\n    std::shared_ptr<Aws::Crt::Mqtt::MqttConnection> connection = client.NewConnection(\n        aws_string_c_str(endpoint), (uint32_t)std::stoi(aws_string_c_str(port)), socketOptions, true);\n    connection->SetLogin(aws_string_c_str(username), aws_string_c_str(password));\n    int connectResult = s_ConnectAndDisconnect(connection);\n    ASSERT_SUCCESS(connectResult);\n    aws_string_destroy(endpoint);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 450,
                  "startColumn": 27,
                  "endLine": 450,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(port);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        return AWS_OP_SKIP;\n    }\n\n",
                    "rendered": {
                      "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(port);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        return AWS_OP_SKIP;\n    }\n\n",
                      "markdown": "`        aws_string_destroy(endpoint);\n        aws_string_destroy(port);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        return AWS_OP_SKIP;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 85,
                  "endLine": 443,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                    "rendered": {
                      "text": "    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                      "markdown": "`    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 74,
                  "endLine": 443,
                  "endColumn": 82,
                  "snippet": {
                    "text": "    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                    "rendered": {
                      "text": "    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                      "markdown": "`    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 23,
                  "endLine": 438,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_port, &port);\n",
                    "rendered": {
                      "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_port, &port);\n",
                      "markdown": "`    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_port, &port);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 23,
                  "endLine": 254,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(port);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt311DirectConnectionWithBasicAuth, s_TestMqtt311DirectConnectionWithBasicAuth)\n",
                    "rendered": {
                      "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(port);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt311DirectConnectionWithBasicAuth, s_TestMqtt311DirectConnectionWithBasicAuth)\n",
                      "markdown": "`    aws_string_destroy(endpoint);\n    aws_string_destroy(port);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(Mqtt311DirectConnectionWithBasicAuth, s_TestMqtt311DirectConnectionWithBasicAuth)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 70,
                  "endLine": 248,
                  "endColumn": 78,
                  "snippet": {
                    "text": "    socketOptions.SetConnectTimeoutMs(3000);\n    std::shared_ptr<Aws::Crt::Mqtt::MqttConnection> connection = client.NewConnection(\n        aws_string_c_str(endpoint), (uint32_t)std::stoi(aws_string_c_str(port)), socketOptions, false);\n    connection->SetLogin(aws_string_c_str(username), aws_string_c_str(password));\n    int connectResult = s_ConnectAndDisconnect(connection);\n    ASSERT_SUCCESS(connectResult);\n    aws_string_destroy(endpoint);\n",
                    "rendered": {
                      "text": "    socketOptions.SetConnectTimeoutMs(3000);\n    std::shared_ptr<Aws::Crt::Mqtt::MqttConnection> connection = client.NewConnection(\n        aws_string_c_str(endpoint), (uint32_t)std::stoi(aws_string_c_str(port)), socketOptions, false);\n    connection->SetLogin(aws_string_c_str(username), aws_string_c_str(password));\n    int connectResult = s_ConnectAndDisconnect(connection);\n    ASSERT_SUCCESS(connectResult);\n    aws_string_destroy(endpoint);\n",
                      "markdown": "`    socketOptions.SetConnectTimeoutMs(3000);\n    std::shared_ptr<Aws::Crt::Mqtt::MqttConnection> connection = client.NewConnection(\n        aws_string_c_str(endpoint), (uint32_t)std::stoi(aws_string_c_str(port)), socketOptions, false);\n    connection->SetLogin(aws_string_c_str(username), aws_string_c_str(password));\n    int connectResult = s_ConnectAndDisconnect(connection);\n    ASSERT_SUCCESS(connectResult);\n    aws_string_destroy(endpoint);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 27,
                  "endLine": 238,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(port);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        return AWS_OP_SKIP;\n    }\n\n",
                    "rendered": {
                      "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(port);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        return AWS_OP_SKIP;\n    }\n\n",
                      "markdown": "`        aws_string_destroy(endpoint);\n        aws_string_destroy(port);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        return AWS_OP_SKIP;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 85,
                  "endLine": 231,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                    "rendered": {
                      "text": "    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                      "markdown": "`    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 74,
                  "endLine": 231,
                  "endColumn": 82,
                  "snippet": {
                    "text": "    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                    "rendered": {
                      "text": "    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                      "markdown": "`    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 23,
                  "endLine": 226,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_port, &port);\n",
                    "rendered": {
                      "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_port, &port);\n",
                      "markdown": "`    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_port, &port);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 103,
                  "endLine": 29,
                  "endColumn": 111,
                  "snippet": {
                    "text": "    s_mqtt311_test_envName_direct_basicauth_port,\n    \"AWS_TEST_MQTT311_DIRECT_MQTT_BASIC_AUTH_PORT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_username, \"AWS_TEST_MQTT311_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_password, \"AWS_TEST_MQTT311_BASIC_AUTH_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_hostname, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_PORT\");\n",
                    "rendered": {
                      "text": "    s_mqtt311_test_envName_direct_basicauth_port,\n    \"AWS_TEST_MQTT311_DIRECT_MQTT_BASIC_AUTH_PORT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_username, \"AWS_TEST_MQTT311_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_password, \"AWS_TEST_MQTT311_BASIC_AUTH_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_hostname, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_PORT\");\n",
                      "markdown": "`    s_mqtt311_test_envName_direct_basicauth_port,\n    \"AWS_TEST_MQTT311_DIRECT_MQTT_BASIC_AUTH_PORT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_username, \"AWS_TEST_MQTT311_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_password, \"AWS_TEST_MQTT311_BASIC_AUTH_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_hostname, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_PORT\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 64,
                  "endLine": 29,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    s_mqtt311_test_envName_direct_basicauth_port,\n    \"AWS_TEST_MQTT311_DIRECT_MQTT_BASIC_AUTH_PORT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_username, \"AWS_TEST_MQTT311_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_password, \"AWS_TEST_MQTT311_BASIC_AUTH_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_hostname, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_PORT\");\n",
                    "rendered": {
                      "text": "    s_mqtt311_test_envName_direct_basicauth_port,\n    \"AWS_TEST_MQTT311_DIRECT_MQTT_BASIC_AUTH_PORT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_username, \"AWS_TEST_MQTT311_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_password, \"AWS_TEST_MQTT311_BASIC_AUTH_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_hostname, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_PORT\");\n",
                      "markdown": "`    s_mqtt311_test_envName_direct_basicauth_port,\n    \"AWS_TEST_MQTT311_DIRECT_MQTT_BASIC_AUTH_PORT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_username, \"AWS_TEST_MQTT311_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_password, \"AWS_TEST_MQTT311_BASIC_AUTH_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_hostname, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_PORT\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 70,
                  "endLine": 523,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_hostname, &proxy_endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_port, &proxy_port);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_hostname, &proxy_endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_port, &proxy_port);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_hostname, &proxy_endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_port, &proxy_port);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 74,
                  "endLine": 521,
                  "endColumn": 82,
                  "snippet": {
                    "text": "    struct aws_string *proxy_endpoint = NULL;\n    struct aws_string *proxy_port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_hostname, &proxy_endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_port, &proxy_port);\n",
                    "rendered": {
                      "text": "    struct aws_string *proxy_endpoint = NULL;\n    struct aws_string *proxy_port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_hostname, &proxy_endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_port, &proxy_port);\n",
                      "markdown": "`    struct aws_string *proxy_endpoint = NULL;\n    struct aws_string *proxy_port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_hostname, &proxy_endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_port, &proxy_port);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 479,
                  "startColumn": 74,
                  "endLine": 479,
                  "endColumn": 82,
                  "snippet": {
                    "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_port, &port);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_port, &port);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_tls_port, &port);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 80,
                  "endLine": 440,
                  "endColumn": 88,
                  "snippet": {
                    "text": "    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n",
                    "rendered": {
                      "text": "    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n",
                      "markdown": "`    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 70,
                  "endLine": 406,
                  "endColumn": 78,
                  "snippet": {
                    "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_port, &port);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_port, &port);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_ws_port, &port);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 70,
                  "endLine": 353,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_hostname, &proxy_endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_port, &proxy_port);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_hostname, &proxy_endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_port, &proxy_port);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_hostname, &proxy_endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_port, &proxy_port);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 78,
                  "endLine": 351,
                  "endColumn": 86,
                  "snippet": {
                    "text": "    struct aws_string *proxy_endpoint = NULL;\n    struct aws_string *proxy_port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_hostname, &proxy_endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_port, &proxy_port);\n",
                    "rendered": {
                      "text": "    struct aws_string *proxy_endpoint = NULL;\n    struct aws_string *proxy_port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_hostname, &proxy_endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_port, &proxy_port);\n",
                      "markdown": "`    struct aws_string *proxy_endpoint = NULL;\n    struct aws_string *proxy_port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_hostname, &proxy_endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_proxy_port, &proxy_port);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 71,
                  "endLine": 308,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    struct aws_string *cert_path = NULL;\n    struct aws_string *key_path = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_cert, &cert_path);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_key, &key_path);\n    if (error != AWS_OP_SUCCESS)\n",
                    "rendered": {
                      "text": "    struct aws_string *cert_path = NULL;\n    struct aws_string *key_path = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_cert, &cert_path);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_key, &key_path);\n    if (error != AWS_OP_SUCCESS)\n",
                      "markdown": "`    struct aws_string *cert_path = NULL;\n    struct aws_string *key_path = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_cert, &cert_path);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_key, &key_path);\n    if (error != AWS_OP_SUCCESS)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 78,
                  "endLine": 267,
                  "endColumn": 86,
                  "snippet": {
                    "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_port, &port);\n\n    if (error != AWS_OP_SUCCESS)\n",
                    "rendered": {
                      "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_port, &port);\n\n    if (error != AWS_OP_SUCCESS)\n",
                      "markdown": "`    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_tls_port, &port);\n\n    if (error != AWS_OP_SUCCESS)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 84,
                  "endLine": 228,
                  "endColumn": 92,
                  "snippet": {
                    "text": "    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n",
                    "rendered": {
                      "text": "    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n",
                      "markdown": "`    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_basicauth_port, &port);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_basicauth_password, &password);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 74,
                  "endLine": 194,
                  "endColumn": 82,
                  "snippet": {
                    "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_port, &port);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_port, &port);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`    struct aws_string *endpoint = NULL;\n    struct aws_string *port = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt311_test_envName_direct_port, &port);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 61,
                  "endLine": 49,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    \"AWS_TEST_MQTT311_WS_MQTT_BASIC_AUTH_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_basicauth_port, \"AWS_TEST_MQTT311_WS_MQTT_BASIC_AUTH_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_tls_hostname, \"AWS_TEST_MQTT311_WS_MQTT_TLS_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_tls_port, \"AWS_TEST_MQTT311_WS_MQTT_TLS_PORT\");\n\nstatic int s_GetEnvVariable(Aws::Crt::Allocator *allocator, const aws_string *variableName, aws_string **output)\n",
                    "rendered": {
                      "text": "    \"AWS_TEST_MQTT311_WS_MQTT_BASIC_AUTH_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_basicauth_port, \"AWS_TEST_MQTT311_WS_MQTT_BASIC_AUTH_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_tls_hostname, \"AWS_TEST_MQTT311_WS_MQTT_TLS_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_tls_port, \"AWS_TEST_MQTT311_WS_MQTT_TLS_PORT\");\n\nstatic int s_GetEnvVariable(Aws::Crt::Allocator *allocator, const aws_string *variableName, aws_string **output)\n",
                      "markdown": "`    \"AWS_TEST_MQTT311_WS_MQTT_BASIC_AUTH_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_basicauth_port, \"AWS_TEST_MQTT311_WS_MQTT_BASIC_AUTH_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_tls_hostname, \"AWS_TEST_MQTT311_WS_MQTT_TLS_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_tls_port, \"AWS_TEST_MQTT311_WS_MQTT_TLS_PORT\");\n\nstatic int s_GetEnvVariable(Aws::Crt::Allocator *allocator, const aws_string *variableName, aws_string **output)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 40,
                  "endLine": 45,
                  "endColumn": 48,
                  "snippet": {
                    "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_port, \"AWS_TEST_MQTT311_WS_MQTT_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_ws_basicauth_hostname,\n    \"AWS_TEST_MQTT311_WS_MQTT_BASIC_AUTH_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_basicauth_port, \"AWS_TEST_MQTT311_WS_MQTT_BASIC_AUTH_PORT\");\n\n",
                    "rendered": {
                      "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_port, \"AWS_TEST_MQTT311_WS_MQTT_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_ws_basicauth_hostname,\n    \"AWS_TEST_MQTT311_WS_MQTT_BASIC_AUTH_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_basicauth_port, \"AWS_TEST_MQTT311_WS_MQTT_BASIC_AUTH_PORT\");\n\n",
                      "markdown": "`AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_port, \"AWS_TEST_MQTT311_WS_MQTT_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_ws_basicauth_hostname,\n    \"AWS_TEST_MQTT311_WS_MQTT_BASIC_AUTH_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_basicauth_port, \"AWS_TEST_MQTT311_WS_MQTT_BASIC_AUTH_PORT\");\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 57,
                  "endLine": 41,
                  "endColumn": 65,
                  "snippet": {
                    "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_proxy_hostname, \"AWS_TEST_MQTT311_PROXY_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_proxy_port, \"AWS_TEST_MQTT311_PROXY_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_hostname, \"AWS_TEST_MQTT311_WS_MQTT_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_port, \"AWS_TEST_MQTT311_WS_MQTT_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n",
                    "rendered": {
                      "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_proxy_hostname, \"AWS_TEST_MQTT311_PROXY_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_proxy_port, \"AWS_TEST_MQTT311_PROXY_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_hostname, \"AWS_TEST_MQTT311_WS_MQTT_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_port, \"AWS_TEST_MQTT311_WS_MQTT_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n",
                      "markdown": "`AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_proxy_hostname, \"AWS_TEST_MQTT311_PROXY_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_proxy_port, \"AWS_TEST_MQTT311_PROXY_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_hostname, \"AWS_TEST_MQTT311_WS_MQTT_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_port, \"AWS_TEST_MQTT311_WS_MQTT_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 60,
                  "endLine": 38,
                  "endColumn": 68,
                  "snippet": {
                    "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_cert, \"AWS_TEST_MQTT311_IOT_CORE_RSA_CERT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_key, \"AWS_TEST_MQTT311_IOT_CORE_RSA_KEY\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_proxy_hostname, \"AWS_TEST_MQTT311_PROXY_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_proxy_port, \"AWS_TEST_MQTT311_PROXY_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_hostname, \"AWS_TEST_MQTT311_WS_MQTT_HOST\");\n",
                    "rendered": {
                      "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_cert, \"AWS_TEST_MQTT311_IOT_CORE_RSA_CERT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_key, \"AWS_TEST_MQTT311_IOT_CORE_RSA_KEY\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_proxy_hostname, \"AWS_TEST_MQTT311_PROXY_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_proxy_port, \"AWS_TEST_MQTT311_PROXY_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_hostname, \"AWS_TEST_MQTT311_WS_MQTT_HOST\");\n",
                      "markdown": "`AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_cert, \"AWS_TEST_MQTT311_IOT_CORE_RSA_CERT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_key, \"AWS_TEST_MQTT311_IOT_CORE_RSA_KEY\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_proxy_hostname, \"AWS_TEST_MQTT311_PROXY_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_proxy_port, \"AWS_TEST_MQTT311_PROXY_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_ws_hostname, \"AWS_TEST_MQTT311_WS_MQTT_HOST\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 66,
                  "snippet": {
                    "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_hostname, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_hostname, \"AWS_TEST_MQTT311_IOT_CORE_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_cert, \"AWS_TEST_MQTT311_IOT_CORE_RSA_CERT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_key, \"AWS_TEST_MQTT311_IOT_CORE_RSA_KEY\");\n\n",
                    "rendered": {
                      "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_hostname, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_hostname, \"AWS_TEST_MQTT311_IOT_CORE_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_cert, \"AWS_TEST_MQTT311_IOT_CORE_RSA_CERT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_key, \"AWS_TEST_MQTT311_IOT_CORE_RSA_KEY\");\n\n",
                      "markdown": "`AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_hostname, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_hostname, \"AWS_TEST_MQTT311_IOT_CORE_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_cert, \"AWS_TEST_MQTT311_IOT_CORE_RSA_CERT\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_key, \"AWS_TEST_MQTT311_IOT_CORE_RSA_KEY\");\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 65,
                  "endLine": 31,
                  "endColumn": 73,
                  "snippet": {
                    "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_username, \"AWS_TEST_MQTT311_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_password, \"AWS_TEST_MQTT311_BASIC_AUTH_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_hostname, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_hostname, \"AWS_TEST_MQTT311_IOT_CORE_HOST\");\n",
                    "rendered": {
                      "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_username, \"AWS_TEST_MQTT311_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_password, \"AWS_TEST_MQTT311_BASIC_AUTH_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_hostname, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_hostname, \"AWS_TEST_MQTT311_IOT_CORE_HOST\");\n",
                      "markdown": "`AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_username, \"AWS_TEST_MQTT311_BASIC_AUTH_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_basicauth_password, \"AWS_TEST_MQTT311_BASIC_AUTH_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_hostname, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_tls_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_TLS_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_iot_hostname, \"AWS_TEST_MQTT311_IOT_CORE_HOST\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 44,
                  "endLine": 23,
                  "endColumn": 52,
                  "snippet": {
                    "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_direct_basicauth_hostname,\n    \"AWS_TEST_MQTT311_DIRECT_MQTT_BASIC_AUTH_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_direct_basicauth_port,\n",
                    "rendered": {
                      "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_direct_basicauth_hostname,\n    \"AWS_TEST_MQTT311_DIRECT_MQTT_BASIC_AUTH_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_direct_basicauth_port,\n",
                      "markdown": "`AWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_direct_basicauth_hostname,\n    \"AWS_TEST_MQTT311_DIRECT_MQTT_BASIC_AUTH_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt311_test_envName_direct_basicauth_port,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/MqttClientTest.cpp"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 61,
                  "endLine": 19,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n#if !BYO_CRYPTO\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_hostname, \"AWS_TEST_MQTT311_DIRECT_MQTT_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n",
                    "rendered": {
                      "text": "\n#if !BYO_CRYPTO\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_hostname, \"AWS_TEST_MQTT311_DIRECT_MQTT_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n",
                      "markdown": "`\n#if !BYO_CRYPTO\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_hostname, \"AWS_TEST_MQTT311_DIRECT_MQTT_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt311_test_envName_direct_port, \"AWS_TEST_MQTT311_DIRECT_MQTT_PORT\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/HashTest.cpp"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 39,
                  "endLine": 97,
                  "endColumn": 81,
                  "snippet": {
                    "text": "\n        Aws::Crt::ByteCursor input =\n            aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnop\"\n                                       \"jklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\");\n        uint8_t expected[] = {0xa4, 0x9b, 0x24, 0x46, 0xa0, 0x2c, 0x64, 0x5b, 0xf4, 0x19,\n                              0xf9, 0x95, 0xb6, 0x70, 0x91, 0x25, 0x3a, 0x04, 0xa2, 0x59};\n        Aws::Crt::ByteBuf expectedBuf = Aws::Crt::ByteBufFromArray(expected, sizeof(expected));\n",
                    "rendered": {
                      "text": "\n        Aws::Crt::ByteCursor input =\n            aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnop\"\n                                       \"jklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\");\n        uint8_t expected[] = {0xa4, 0x9b, 0x24, 0x46, 0xa0, 0x2c, 0x64, 0x5b, 0xf4, 0x19,\n                              0xf9, 0x95, 0xb6, 0x70, 0x91, 0x25, 0x3a, 0x04, 0xa2, 0x59};\n        Aws::Crt::ByteBuf expectedBuf = Aws::Crt::ByteBufFromArray(expected, sizeof(expected));\n",
                      "markdown": "`\n        Aws::Crt::ByteCursor input =\n            aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnop\"\n                                       \"jklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\");\n        uint8_t expected[] = {0xa4, 0x9b, 0x24, 0x46, 0xa0, 0x2c, 0x64, 0x5b, 0xf4, 0x19,\n                              0xf9, 0x95, 0xb6, 0x70, 0x91, 0x25, 0x3a, 0x04, 0xa2, 0x59};\n        Aws::Crt::ByteBuf expectedBuf = Aws::Crt::ByteBufFromArray(expected, sizeof(expected));\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/HashTest.cpp"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 39,
                  "endLine": 96,
                  "endColumn": 113,
                  "snippet": {
                    "text": "        ASSERT_TRUE(sha1);\n\n        Aws::Crt::ByteCursor input =\n            aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnop\"\n                                       \"jklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\");\n        uint8_t expected[] = {0xa4, 0x9b, 0x24, 0x46, 0xa0, 0x2c, 0x64, 0x5b, 0xf4, 0x19,\n                              0xf9, 0x95, 0xb6, 0x70, 0x91, 0x25, 0x3a, 0x04, 0xa2, 0x59};\n",
                    "rendered": {
                      "text": "        ASSERT_TRUE(sha1);\n\n        Aws::Crt::ByteCursor input =\n            aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnop\"\n                                       \"jklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\");\n        uint8_t expected[] = {0xa4, 0x9b, 0x24, 0x46, 0xa0, 0x2c, 0x64, 0x5b, 0xf4, 0x19,\n                              0xf9, 0x95, 0xb6, 0x70, 0x91, 0x25, 0x3a, 0x04, 0xa2, 0x59};\n",
                      "markdown": "`        ASSERT_TRUE(sha1);\n\n        Aws::Crt::ByteCursor input =\n            aws_byte_cursor_from_c_str(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnop\"\n                                       \"jklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\");\n        uint8_t expected[] = {0xa4, 0x9b, 0x24, 0x46, 0xa0, 0x2c, 0x64, 0x5b, 0xf4, 0x19,\n                              0xf9, 0x95, 0xb6, 0x70, 0x91, 0x25, 0x3a, 0x04, 0xa2, 0x59};\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/CredentialsTest.cpp"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 29,
                  "endLine": 540,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        GetCredentialsWaiter waiter(provider);\n\n        auto creds = waiter.GetCredentials();\n        ASSERT_NOT_NULL(creds.get());\n    }\n\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "        GetCredentialsWaiter waiter(provider);\n\n        auto creds = waiter.GetCredentials();\n        ASSERT_NOT_NULL(creds.get());\n    }\n\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`        GetCredentialsWaiter waiter(provider);\n\n        auto creds = waiter.GetCredentials();\n        ASSERT_NOT_NULL(creds.get());\n    }\n\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/CredentialsTest.cpp"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 32,
                  "endLine": 535,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        }\n\n        auto provider = CredentialsProvider::CreateCredentialsProviderSTS(config, allocator);\n        ASSERT_NOT_NULL(provider.get());\n\n        GetCredentialsWaiter waiter(provider);\n\n",
                    "rendered": {
                      "text": "        }\n\n        auto provider = CredentialsProvider::CreateCredentialsProviderSTS(config, allocator);\n        ASSERT_NOT_NULL(provider.get());\n\n        GetCredentialsWaiter waiter(provider);\n\n",
                      "markdown": "`        }\n\n        auto provider = CredentialsProvider::CreateCredentialsProviderSTS(config, allocator);\n        ASSERT_NOT_NULL(provider.get());\n\n        GetCredentialsWaiter waiter(provider);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/CredentialsTest.cpp"
                },
                "region": {
                  "startLine": 448,
                  "startColumn": 29,
                  "endLine": 448,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        GetCredentialsWaiter waiter(provider);\n\n        auto creds = waiter.GetCredentials();\n        ASSERT_NOT_NULL(creds.get());\n    }\n\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "        GetCredentialsWaiter waiter(provider);\n\n        auto creds = waiter.GetCredentials();\n        ASSERT_NOT_NULL(creds.get());\n    }\n\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`        GetCredentialsWaiter waiter(provider);\n\n        auto creds = waiter.GetCredentials();\n        ASSERT_NOT_NULL(creds.get());\n    }\n\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/CredentialsTest.cpp"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 32,
                  "endLine": 443,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        }\n\n        auto provider = CredentialsProvider::CreateCredentialsProviderCognito(config, allocator);\n        ASSERT_NOT_NULL(provider.get());\n\n        GetCredentialsWaiter waiter(provider);\n\n",
                    "rendered": {
                      "text": "        }\n\n        auto provider = CredentialsProvider::CreateCredentialsProviderCognito(config, allocator);\n        ASSERT_NOT_NULL(provider.get());\n\n        GetCredentialsWaiter waiter(provider);\n\n",
                      "markdown": "`        }\n\n        auto provider = CredentialsProvider::CreateCredentialsProviderCognito(config, allocator);\n        ASSERT_NOT_NULL(provider.get());\n\n        GetCredentialsWaiter waiter(provider);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/CredentialsTest.cpp"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 29,
                  "endLine": 352,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        GetCredentialsWaiter waiter(provider);\n\n        auto creds = waiter.GetCredentials();\n        ASSERT_NOT_NULL(creds.get());\n        auto emptyStr = \"\";\n        auto cursor = creds->GetAccessKeyId();\n        ASSERT_TRUE(aws_byte_cursor_eq_c_str(&cursor, emptyStr));\n",
                    "rendered": {
                      "text": "        GetCredentialsWaiter waiter(provider);\n\n        auto creds = waiter.GetCredentials();\n        ASSERT_NOT_NULL(creds.get());\n        auto emptyStr = \"\";\n        auto cursor = creds->GetAccessKeyId();\n        ASSERT_TRUE(aws_byte_cursor_eq_c_str(&cursor, emptyStr));\n",
                      "markdown": "`        GetCredentialsWaiter waiter(provider);\n\n        auto creds = waiter.GetCredentials();\n        ASSERT_NOT_NULL(creds.get());\n        auto emptyStr = \"\";\n        auto cursor = creds->GetAccessKeyId();\n        ASSERT_TRUE(aws_byte_cursor_eq_c_str(&cursor, emptyStr));\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/CredentialsTest.cpp"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 26,
                  "endLine": 195,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(TestProviderEnvironmentGet, s_TestProviderEnvironmentGet)\n\nstatic int s_TestProviderProfileGet(struct aws_allocator *allocator, void *ctx)\n{\n",
                    "rendered": {
                      "text": "    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(TestProviderEnvironmentGet, s_TestProviderEnvironmentGet)\n\nstatic int s_TestProviderProfileGet(struct aws_allocator *allocator, void *ctx)\n{\n",
                      "markdown": "`    return AWS_OP_SUCCESS;\n}\n\nAWS_TEST_CASE(TestProviderEnvironmentGet, s_TestProviderEnvironmentGet)\n\nstatic int s_TestProviderProfileGet(struct aws_allocator *allocator, void *ctx)\n{\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/CredentialsTest.cpp"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 25,
                  "endLine": 180,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\nAWS_TEST_CASE(TestProviderAnonymousGet, s_TestProviderAnonymousGet)\n\nstatic int s_TestProviderEnvironmentGet(struct aws_allocator *allocator, void *ctx)\n{\n    (void)ctx;\n    {\n",
                    "rendered": {
                      "text": "\nAWS_TEST_CASE(TestProviderAnonymousGet, s_TestProviderAnonymousGet)\n\nstatic int s_TestProviderEnvironmentGet(struct aws_allocator *allocator, void *ctx)\n{\n    (void)ctx;\n    {\n",
                      "markdown": "`\nAWS_TEST_CASE(TestProviderAnonymousGet, s_TestProviderAnonymousGet)\n\nstatic int s_TestProviderEnvironmentGet(struct aws_allocator *allocator, void *ctx)\n{\n    (void)ctx;\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 53,
                  "endLine": 751,
                  "endColumn": 61,
                  "snippet": {
                    "text": "            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n            return *this;\n        }\n\n",
                    "rendered": {
                      "text": "            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n            return *this;\n        }\n\n",
                      "markdown": "`            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n            return *this;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 14,
                  "endLine": 751,
                  "endColumn": 22,
                  "snippet": {
                    "text": "            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n            return *this;\n        }\n\n",
                    "rendered": {
                      "text": "            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n            return *this;\n        }\n\n",
                      "markdown": "`            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n            return *this;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 80,
                  "endLine": 750,
                  "endColumn": 88,
                  "snippet": {
                    "text": "        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n            return *this;\n        }\n",
                    "rendered": {
                      "text": "        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n            return *this;\n        }\n",
                      "markdown": "`        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n            return *this;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 50,
                  "endLine": 750,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n            return *this;\n        }\n",
                    "rendered": {
                      "text": "        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n            return *this;\n        }\n",
                      "markdown": "`        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n            return *this;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 749,
                  "startColumn": 30,
                  "endLine": 749,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        Mqtt5CustomAuthConfig &Aws::Iot::Mqtt5CustomAuthConfig::WithPassword(Crt::ByteCursor password)\n        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n            return *this;\n",
                    "rendered": {
                      "text": "        Mqtt5CustomAuthConfig &Aws::Iot::Mqtt5CustomAuthConfig::WithPassword(Crt::ByteCursor password)\n        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n            return *this;\n",
                      "markdown": "`        Mqtt5CustomAuthConfig &Aws::Iot::Mqtt5CustomAuthConfig::WithPassword(Crt::ByteCursor password)\n        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n            return *this;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 748,
                  "startColumn": 37,
                  "endLine": 748,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n        Mqtt5CustomAuthConfig &Aws::Iot::Mqtt5CustomAuthConfig::WithPassword(Crt::ByteCursor password)\n        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n",
                    "rendered": {
                      "text": "\n        Mqtt5CustomAuthConfig &Aws::Iot::Mqtt5CustomAuthConfig::WithPassword(Crt::ByteCursor password)\n        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n",
                      "markdown": "`\n        Mqtt5CustomAuthConfig &Aws::Iot::Mqtt5CustomAuthConfig::WithPassword(Crt::ByteCursor password)\n        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n            aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, password);\n            m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 746,
                  "startColumn": 93,
                  "endLine": 746,
                  "endColumn": 101,
                  "snippet": {
                    "text": "            return *this;\n        }\n\n        Mqtt5CustomAuthConfig &Aws::Iot::Mqtt5CustomAuthConfig::WithPassword(Crt::ByteCursor password)\n        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n",
                    "rendered": {
                      "text": "            return *this;\n        }\n\n        Mqtt5CustomAuthConfig &Aws::Iot::Mqtt5CustomAuthConfig::WithPassword(Crt::ByteCursor password)\n        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n",
                      "markdown": "`            return *this;\n        }\n\n        Mqtt5CustomAuthConfig &Aws::Iot::Mqtt5CustomAuthConfig::WithPassword(Crt::ByteCursor password)\n        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 746,
                  "startColumn": 68,
                  "endLine": 746,
                  "endColumn": 76,
                  "snippet": {
                    "text": "            return *this;\n        }\n\n        Mqtt5CustomAuthConfig &Aws::Iot::Mqtt5CustomAuthConfig::WithPassword(Crt::ByteCursor password)\n        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n",
                    "rendered": {
                      "text": "            return *this;\n        }\n\n        Mqtt5CustomAuthConfig &Aws::Iot::Mqtt5CustomAuthConfig::WithPassword(Crt::ByteCursor password)\n        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n",
                      "markdown": "`            return *this;\n        }\n\n        Mqtt5CustomAuthConfig &Aws::Iot::Mqtt5CustomAuthConfig::WithPassword(Crt::ByteCursor password)\n        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n            AWS_ZERO_STRUCT(m_passwordStorage);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 716,
                  "startColumn": 21,
                  "endLine": 716,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n        const Crt::Optional<Crt::ByteCursor> &Mqtt5CustomAuthConfig::GetPassword()\n        {\n            return m_password;\n        }\n\n        const Crt::Optional<Crt::String> &Mqtt5CustomAuthConfig::GetTokenKeyName()\n",
                    "rendered": {
                      "text": "\n        const Crt::Optional<Crt::ByteCursor> &Mqtt5CustomAuthConfig::GetPassword()\n        {\n            return m_password;\n        }\n\n        const Crt::Optional<Crt::String> &Mqtt5CustomAuthConfig::GetTokenKeyName()\n",
                      "markdown": "`\n        const Crt::Optional<Crt::ByteCursor> &Mqtt5CustomAuthConfig::GetPassword()\n        {\n            return m_password;\n        }\n\n        const Crt::Optional<Crt::String> &Mqtt5CustomAuthConfig::GetTokenKeyName()\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 72,
                  "endLine": 714,
                  "endColumn": 80,
                  "snippet": {
                    "text": "            return m_username;\n        }\n\n        const Crt::Optional<Crt::ByteCursor> &Mqtt5CustomAuthConfig::GetPassword()\n        {\n            return m_password;\n        }\n",
                    "rendered": {
                      "text": "            return m_username;\n        }\n\n        const Crt::Optional<Crt::ByteCursor> &Mqtt5CustomAuthConfig::GetPassword()\n        {\n            return m_password;\n        }\n",
                      "markdown": "`            return m_username;\n        }\n\n        const Crt::Optional<Crt::ByteCursor> &Mqtt5CustomAuthConfig::GetPassword()\n        {\n            return m_password;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 698,
                  "startColumn": 61,
                  "endLine": 698,
                  "endColumn": 69,
                  "snippet": {
                    "text": "                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n            return *this;\n",
                    "rendered": {
                      "text": "                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n            return *this;\n",
                      "markdown": "`                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n            return *this;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 698,
                  "startColumn": 22,
                  "endLine": 698,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n            return *this;\n",
                    "rendered": {
                      "text": "                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n            return *this;\n",
                      "markdown": "`                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n            return *this;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 697,
                  "startColumn": 94,
                  "endLine": 697,
                  "endColumn": 102,
                  "snippet": {
                    "text": "                {\n                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n",
                    "rendered": {
                      "text": "                {\n                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n",
                      "markdown": "`                {\n                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 697,
                  "startColumn": 58,
                  "endLine": 697,
                  "endColumn": 66,
                  "snippet": {
                    "text": "                {\n                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n",
                    "rendered": {
                      "text": "                {\n                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n",
                      "markdown": "`                {\n                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 696,
                  "startColumn": 38,
                  "endLine": 696,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                if (rhs.m_password.has_value())\n                {\n                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n",
                    "rendered": {
                      "text": "                if (rhs.m_password.has_value())\n                {\n                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n",
                      "markdown": "`                if (rhs.m_password.has_value())\n                {\n                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 695,
                  "startColumn": 45,
                  "endLine": 695,
                  "endColumn": 53,
                  "snippet": {
                    "text": "                }\n                if (rhs.m_password.has_value())\n                {\n                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n",
                    "rendered": {
                      "text": "                }\n                if (rhs.m_password.has_value())\n                {\n                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n",
                      "markdown": "`                }\n                if (rhs.m_password.has_value())\n                {\n                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 693,
                  "startColumn": 26,
                  "endLine": 693,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                {\n                    m_username = rhs.m_username.value();\n                }\n                if (rhs.m_password.has_value())\n                {\n                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n",
                    "rendered": {
                      "text": "                {\n                    m_username = rhs.m_username.value();\n                }\n                if (rhs.m_password.has_value())\n                {\n                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n",
                      "markdown": "`                {\n                    m_username = rhs.m_username.value();\n                }\n                if (rhs.m_password.has_value())\n                {\n                    aws_byte_buf_clean_up(&m_passwordStorage);\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 663,
                  "startColumn": 61,
                  "endLine": 663,
                  "endColumn": 69,
                  "snippet": {
                    "text": "                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n        }\n",
                    "rendered": {
                      "text": "                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n        }\n",
                      "markdown": "`                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 663,
                  "startColumn": 22,
                  "endLine": 663,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n        }\n",
                    "rendered": {
                      "text": "                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n        }\n",
                      "markdown": "`                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 662,
                  "startColumn": 94,
                  "endLine": 662,
                  "endColumn": 102,
                  "snippet": {
                    "text": "                if (rhs.m_password.has_value())\n                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n",
                    "rendered": {
                      "text": "                if (rhs.m_password.has_value())\n                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n",
                      "markdown": "`                if (rhs.m_password.has_value())\n                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 662,
                  "startColumn": 58,
                  "endLine": 662,
                  "endColumn": 66,
                  "snippet": {
                    "text": "                if (rhs.m_password.has_value())\n                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n",
                    "rendered": {
                      "text": "                if (rhs.m_password.has_value())\n                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n",
                      "markdown": "`                if (rhs.m_password.has_value())\n                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 38,
                  "endLine": 661,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                }\n                if (rhs.m_password.has_value())\n                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n",
                    "rendered": {
                      "text": "                }\n                if (rhs.m_password.has_value())\n                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n",
                      "markdown": "`                }\n                if (rhs.m_password.has_value())\n                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n                    m_password = aws_byte_cursor_from_buf(&m_passwordStorage);\n                }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 659,
                  "startColumn": 26,
                  "endLine": 659,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                {\n                    m_username = rhs.m_username.value();\n                }\n                if (rhs.m_password.has_value())\n                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n",
                    "rendered": {
                      "text": "                {\n                    m_username = rhs.m_username.value();\n                }\n                if (rhs.m_password.has_value())\n                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n",
                      "markdown": "`                {\n                    m_username = rhs.m_username.value();\n                }\n                if (rhs.m_password.has_value())\n                {\n                    AWS_ZERO_STRUCT(m_passwordStorage);\n                    aws_byte_buf_init_copy_from_cursor(&m_passwordStorage, m_allocator, rhs.m_password.value());\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 631,
                  "startColumn": 37,
                  "endLine": 631,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n        Aws::Iot::Mqtt5CustomAuthConfig::~Mqtt5CustomAuthConfig()\n        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n        }\n\n        Aws::Iot::Mqtt5CustomAuthConfig::Mqtt5CustomAuthConfig(const Mqtt5CustomAuthConfig &rhs)\n",
                    "rendered": {
                      "text": "\n        Aws::Iot::Mqtt5CustomAuthConfig::~Mqtt5CustomAuthConfig()\n        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n        }\n\n        Aws::Iot::Mqtt5CustomAuthConfig::Mqtt5CustomAuthConfig(const Mqtt5CustomAuthConfig &rhs)\n",
                      "markdown": "`\n        Aws::Iot::Mqtt5CustomAuthConfig::~Mqtt5CustomAuthConfig()\n        {\n            aws_byte_buf_clean_up(&m_passwordStorage);\n        }\n\n        Aws::Iot::Mqtt5CustomAuthConfig::Mqtt5CustomAuthConfig(const Mqtt5CustomAuthConfig &rhs)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 626,
                  "startColumn": 30,
                  "endLine": 626,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        Aws::Iot::Mqtt5CustomAuthConfig::Mqtt5CustomAuthConfig(Crt::Allocator *allocator) noexcept\n            : m_allocator(allocator)\n        {\n            AWS_ZERO_STRUCT(m_passwordStorage);\n        }\n\n        Aws::Iot::Mqtt5CustomAuthConfig::~Mqtt5CustomAuthConfig()\n",
                    "rendered": {
                      "text": "        Aws::Iot::Mqtt5CustomAuthConfig::Mqtt5CustomAuthConfig(Crt::Allocator *allocator) noexcept\n            : m_allocator(allocator)\n        {\n            AWS_ZERO_STRUCT(m_passwordStorage);\n        }\n\n        Aws::Iot::Mqtt5CustomAuthConfig::~Mqtt5CustomAuthConfig()\n",
                      "markdown": "`        Aws::Iot::Mqtt5CustomAuthConfig::Mqtt5CustomAuthConfig(Crt::Allocator *allocator) noexcept\n            : m_allocator(allocator)\n        {\n            AWS_ZERO_STRUCT(m_passwordStorage);\n        }\n\n        Aws::Iot::Mqtt5CustomAuthConfig::~Mqtt5CustomAuthConfig()\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 78,
                  "endLine": 554,
                  "endColumn": 86,
                  "snippet": {
                    "text": "                    }\n                    if (m_customAuthConfig->GetPassword().has_value())\n                    {\n                        m_connectOptions->WithPassword(m_customAuthConfig->GetPassword().value());\n                    }\n                }\n\n",
                    "rendered": {
                      "text": "                    }\n                    if (m_customAuthConfig->GetPassword().has_value())\n                    {\n                        m_connectOptions->WithPassword(m_customAuthConfig->GetPassword().value());\n                    }\n                }\n\n",
                      "markdown": "`                    }\n                    if (m_customAuthConfig->GetPassword().has_value())\n                    {\n                        m_connectOptions->WithPassword(m_customAuthConfig->GetPassword().value());\n                    }\n                }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 46,
                  "endLine": 554,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                    }\n                    if (m_customAuthConfig->GetPassword().has_value())\n                    {\n                        m_connectOptions->WithPassword(m_customAuthConfig->GetPassword().value());\n                    }\n                }\n\n",
                    "rendered": {
                      "text": "                    }\n                    if (m_customAuthConfig->GetPassword().has_value())\n                    {\n                        m_connectOptions->WithPassword(m_customAuthConfig->GetPassword().value());\n                    }\n                }\n\n",
                      "markdown": "`                    }\n                    if (m_customAuthConfig->GetPassword().has_value())\n                    {\n                        m_connectOptions->WithPassword(m_customAuthConfig->GetPassword().value());\n                    }\n                }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 47,
                  "endLine": 552,
                  "endColumn": 55,
                  "snippet": {
                    "text": "                            \"correctly.\");\n                        return nullptr;\n                    }\n                    if (m_customAuthConfig->GetPassword().has_value())\n                    {\n                        m_connectOptions->WithPassword(m_customAuthConfig->GetPassword().value());\n                    }\n",
                    "rendered": {
                      "text": "                            \"correctly.\");\n                        return nullptr;\n                    }\n                    if (m_customAuthConfig->GetPassword().has_value())\n                    {\n                        m_connectOptions->WithPassword(m_customAuthConfig->GetPassword().value());\n                    }\n",
                      "markdown": "`                            \"correctly.\");\n                        return nullptr;\n                    }\n                    if (m_customAuthConfig->GetPassword().has_value())\n                    {\n                        m_connectOptions->WithPassword(m_customAuthConfig->GetPassword().value());\n                    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 60,
                  "endLine": 195,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        {\n            Mqtt5ClientBuilder *result = new Mqtt5ClientBuilder(allocator);\n            result->m_tlsConnectionOptions = Crt::Io::TlsContextOptions::InitClientWithMtlsPkcs12(\n                options.pkcs12_file.c_str(), options.pkcs12_password.c_str(), allocator);\n            if (!result->m_tlsConnectionOptions.value())\n            {\n                int error_code = result->m_tlsConnectionOptions->LastError();\n",
                    "rendered": {
                      "text": "        {\n            Mqtt5ClientBuilder *result = new Mqtt5ClientBuilder(allocator);\n            result->m_tlsConnectionOptions = Crt::Io::TlsContextOptions::InitClientWithMtlsPkcs12(\n                options.pkcs12_file.c_str(), options.pkcs12_password.c_str(), allocator);\n            if (!result->m_tlsConnectionOptions.value())\n            {\n                int error_code = result->m_tlsConnectionOptions->LastError();\n",
                      "markdown": "`        {\n            Mqtt5ClientBuilder *result = new Mqtt5ClientBuilder(allocator);\n            result->m_tlsConnectionOptions = Crt::Io::TlsContextOptions::InitClientWithMtlsPkcs12(\n                options.pkcs12_file.c_str(), options.pkcs12_password.c_str(), allocator);\n            if (!result->m_tlsConnectionOptions.value())\n            {\n                int error_code = result->m_tlsConnectionOptions->LastError();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 44,
                  "endLine": 54,
                  "endColumn": 90,
                  "snippet": {
                    "text": "            {\n                /* If we're using token-signing authentication, then all token properties must be set */\n                bool usingSigning = false;\n                if (customAuthConfig->GetTokenValue().has_value() || customAuthConfig->GetTokenKeyName().has_value() ||\n                    customAuthConfig->GetTokenSignature().has_value())\n                {\n                    usingSigning = true;\n",
                    "rendered": {
                      "text": "            {\n                /* If we're using token-signing authentication, then all token properties must be set */\n                bool usingSigning = false;\n                if (customAuthConfig->GetTokenValue().has_value() || customAuthConfig->GetTokenKeyName().has_value() ||\n                    customAuthConfig->GetTokenSignature().has_value())\n                {\n                    usingSigning = true;\n",
                      "markdown": "`            {\n                /* If we're using token-signing authentication, then all token properties must be set */\n                bool usingSigning = false;\n                if (customAuthConfig->GetTokenValue().has_value() || customAuthConfig->GetTokenKeyName().has_value() ||\n                    customAuthConfig->GetTokenSignature().has_value())\n                {\n                    usingSigning = true;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 599,
                  "startColumn": 81,
                  "endLine": 599,
                  "endColumn": 89,
                  "snippet": {
                    "text": "\n            if (!config.m_username.empty() || !config.m_password.empty())\n            {\n                if (!newConnection->SetLogin(config.m_username.c_str(), config.m_password.c_str()))\n                {\n                    m_lastError = newConnection->LastError();\n                    return nullptr;\n",
                    "rendered": {
                      "text": "\n            if (!config.m_username.empty() || !config.m_password.empty())\n            {\n                if (!newConnection->SetLogin(config.m_username.c_str(), config.m_password.c_str()))\n                {\n                    m_lastError = newConnection->LastError();\n                    return nullptr;\n",
                      "markdown": "`\n            if (!config.m_username.empty() || !config.m_password.empty())\n            {\n                if (!newConnection->SetLogin(config.m_username.c_str(), config.m_password.c_str()))\n                {\n                    m_lastError = newConnection->LastError();\n                    return nullptr;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 597,
                  "startColumn": 56,
                  "endLine": 597,
                  "endColumn": 64,
                  "snippet": {
                    "text": "                return nullptr;\n            }\n\n            if (!config.m_username.empty() || !config.m_password.empty())\n            {\n                if (!newConnection->SetLogin(config.m_username.c_str(), config.m_password.c_str()))\n                {\n",
                    "rendered": {
                      "text": "                return nullptr;\n            }\n\n            if (!config.m_username.empty() || !config.m_password.empty())\n            {\n                if (!newConnection->SetLogin(config.m_username.c_str(), config.m_password.c_str()))\n                {\n",
                      "markdown": "`                return nullptr;\n            }\n\n            if (!config.m_username.empty() || !config.m_password.empty())\n            {\n                if (!newConnection->SetLogin(config.m_username.c_str(), config.m_password.c_str()))\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 32,
                  "endLine": 554,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                signerTransform,\n                useWebsocketProxyOptions ? m_websocketConfig->ProxyOptions : m_proxyOptions);\n            config.m_username = username;\n            config.m_password = password;\n            return config;\n        }\n\n",
                    "rendered": {
                      "text": "                signerTransform,\n                useWebsocketProxyOptions ? m_websocketConfig->ProxyOptions : m_proxyOptions);\n            config.m_username = username;\n            config.m_password = password;\n            return config;\n        }\n\n",
                      "markdown": "`                signerTransform,\n                useWebsocketProxyOptions ? m_websocketConfig->ProxyOptions : m_proxyOptions);\n            config.m_username = username;\n            config.m_password = password;\n            return config;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 21,
                  "endLine": 554,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                signerTransform,\n                useWebsocketProxyOptions ? m_websocketConfig->ProxyOptions : m_proxyOptions);\n            config.m_username = username;\n            config.m_password = password;\n            return config;\n        }\n\n",
                    "rendered": {
                      "text": "                signerTransform,\n                useWebsocketProxyOptions ? m_websocketConfig->ProxyOptions : m_proxyOptions);\n            config.m_username = username;\n            config.m_password = password;\n            return config;\n        }\n\n",
                      "markdown": "`                signerTransform,\n                useWebsocketProxyOptions ? m_websocketConfig->ProxyOptions : m_proxyOptions);\n            config.m_username = username;\n            config.m_password = password;\n            return config;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 36,
                  "endLine": 524,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                auto config = MqttClientConnectionConfig(\n                    m_endpoint, port, m_socketOptions, std::move(tlsContext), m_proxyOptions);\n                config.m_username = username;\n                config.m_password = password;\n                return config;\n            }\n\n",
                    "rendered": {
                      "text": "                auto config = MqttClientConnectionConfig(\n                    m_endpoint, port, m_socketOptions, std::move(tlsContext), m_proxyOptions);\n                config.m_username = username;\n                config.m_password = password;\n                return config;\n            }\n\n",
                      "markdown": "`                auto config = MqttClientConnectionConfig(\n                    m_endpoint, port, m_socketOptions, std::move(tlsContext), m_proxyOptions);\n                config.m_username = username;\n                config.m_password = password;\n                return config;\n            }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 25,
                  "endLine": 524,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                auto config = MqttClientConnectionConfig(\n                    m_endpoint, port, m_socketOptions, std::move(tlsContext), m_proxyOptions);\n                config.m_username = username;\n                config.m_password = password;\n                return config;\n            }\n\n",
                    "rendered": {
                      "text": "                auto config = MqttClientConnectionConfig(\n                    m_endpoint, port, m_socketOptions, std::move(tlsContext), m_proxyOptions);\n                config.m_username = username;\n                config.m_password = password;\n                return config;\n            }\n\n",
                      "markdown": "`                auto config = MqttClientConnectionConfig(\n                    m_endpoint, port, m_socketOptions, std::move(tlsContext), m_proxyOptions);\n                config.m_username = username;\n                config.m_password = password;\n                return config;\n            }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 461,
                  "startColumn": 37,
                  "endLine": 461,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            }\n\n            Crt::String username = m_username;\n            Crt::String password = m_password;\n\n            // Check to see if a custom authorizer is being used but not through the builder\n            if (!m_isUsingCustomAuthorizer)\n",
                    "rendered": {
                      "text": "            }\n\n            Crt::String username = m_username;\n            Crt::String password = m_password;\n\n            // Check to see if a custom authorizer is being used but not through the builder\n            if (!m_isUsingCustomAuthorizer)\n",
                      "markdown": "`            }\n\n            Crt::String username = m_username;\n            Crt::String password = m_password;\n\n            // Check to see if a custom authorizer is being used but not through the builder\n            if (!m_isUsingCustomAuthorizer)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 461,
                  "startColumn": 24,
                  "endLine": 461,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            }\n\n            Crt::String username = m_username;\n            Crt::String password = m_password;\n\n            // Check to see if a custom authorizer is being used but not through the builder\n            if (!m_isUsingCustomAuthorizer)\n",
                    "rendered": {
                      "text": "            }\n\n            Crt::String username = m_username;\n            Crt::String password = m_password;\n\n            // Check to see if a custom authorizer is being used but not through the builder\n            if (!m_isUsingCustomAuthorizer)\n",
                      "markdown": "`            }\n\n            Crt::String username = m_username;\n            Crt::String password = m_password;\n\n            // Check to see if a custom authorizer is being used but not through the builder\n            if (!m_isUsingCustomAuthorizer)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 25,
                  "endLine": 435,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        MqttClientConnectionConfigBuilder &MqttClientConnectionConfigBuilder::WithPassword(\n            const Crt::String &password) noexcept\n        {\n            m_password = password;\n            return *this;\n        }\n\n",
                    "rendered": {
                      "text": "        MqttClientConnectionConfigBuilder &MqttClientConnectionConfigBuilder::WithPassword(\n            const Crt::String &password) noexcept\n        {\n            m_password = password;\n            return *this;\n        }\n\n",
                      "markdown": "`        MqttClientConnectionConfigBuilder &MqttClientConnectionConfigBuilder::WithPassword(\n            const Crt::String &password) noexcept\n        {\n            m_password = password;\n            return *this;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 14,
                  "endLine": 435,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        MqttClientConnectionConfigBuilder &MqttClientConnectionConfigBuilder::WithPassword(\n            const Crt::String &password) noexcept\n        {\n            m_password = password;\n            return *this;\n        }\n\n",
                    "rendered": {
                      "text": "        MqttClientConnectionConfigBuilder &MqttClientConnectionConfigBuilder::WithPassword(\n            const Crt::String &password) noexcept\n        {\n            m_password = password;\n            return *this;\n        }\n\n",
                      "markdown": "`        MqttClientConnectionConfigBuilder &MqttClientConnectionConfigBuilder::WithPassword(\n            const Crt::String &password) noexcept\n        {\n            m_password = password;\n            return *this;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 433,
                  "startColumn": 31,
                  "endLine": 433,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        }\n\n        MqttClientConnectionConfigBuilder &MqttClientConnectionConfigBuilder::WithPassword(\n            const Crt::String &password) noexcept\n        {\n            m_password = password;\n            return *this;\n",
                    "rendered": {
                      "text": "        }\n\n        MqttClientConnectionConfigBuilder &MqttClientConnectionConfigBuilder::WithPassword(\n            const Crt::String &password) noexcept\n        {\n            m_password = password;\n            return *this;\n",
                      "markdown": "`        }\n\n        MqttClientConnectionConfigBuilder &MqttClientConnectionConfigBuilder::WithPassword(\n            const Crt::String &password) noexcept\n        {\n            m_password = password;\n            return *this;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 82,
                  "endLine": 432,
                  "endColumn": 90,
                  "snippet": {
                    "text": "            return *this;\n        }\n\n        MqttClientConnectionConfigBuilder &MqttClientConnectionConfigBuilder::WithPassword(\n            const Crt::String &password) noexcept\n        {\n            m_password = password;\n",
                    "rendered": {
                      "text": "            return *this;\n        }\n\n        MqttClientConnectionConfigBuilder &MqttClientConnectionConfigBuilder::WithPassword(\n            const Crt::String &password) noexcept\n        {\n            m_password = password;\n",
                      "markdown": "`            return *this;\n        }\n\n        MqttClientConnectionConfigBuilder &MqttClientConnectionConfigBuilder::WithPassword(\n            const Crt::String &password) noexcept\n        {\n            m_password = password;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 25,
                  "endLine": 412,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            }\n\n            m_username = usernameString;\n            m_password = password;\n\n            if (!m_websocketConfig)\n            {\n",
                    "rendered": {
                      "text": "            }\n\n            m_username = usernameString;\n            m_password = password;\n\n            if (!m_websocketConfig)\n            {\n",
                      "markdown": "`            }\n\n            m_username = usernameString;\n            m_password = password;\n\n            if (!m_websocketConfig)\n            {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 14,
                  "endLine": 412,
                  "endColumn": 22,
                  "snippet": {
                    "text": "            }\n\n            m_username = usernameString;\n            m_password = password;\n\n            if (!m_websocketConfig)\n            {\n",
                    "rendered": {
                      "text": "            }\n\n            m_username = usernameString;\n            m_password = password;\n\n            if (!m_websocketConfig)\n            {\n",
                      "markdown": "`            }\n\n            m_username = usernameString;\n            m_password = password;\n\n            if (!m_websocketConfig)\n            {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 31,
                  "endLine": 340,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            const Crt::String &username,\n            const Crt::String &authorizerName,\n            const Crt::String &authorizerSignature,\n            const Crt::String &password,\n            const Crt::String &tokenKeyName,\n            const Crt::String &tokenValue) noexcept\n        {\n",
                    "rendered": {
                      "text": "            const Crt::String &username,\n            const Crt::String &authorizerName,\n            const Crt::String &authorizerSignature,\n            const Crt::String &password,\n            const Crt::String &tokenKeyName,\n            const Crt::String &tokenValue) noexcept\n        {\n",
                      "markdown": "`            const Crt::String &username,\n            const Crt::String &authorizerName,\n            const Crt::String &authorizerSignature,\n            const Crt::String &password,\n            const Crt::String &tokenKeyName,\n            const Crt::String &tokenValue) noexcept\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 93,
                  "endLine": 333,
                  "endColumn": 101,
                  "snippet": {
                    "text": "            const Crt::String &authorizerSignature,\n            const Crt::String &password) noexcept\n        {\n            return this->WithCustomAuthorizer(username, authorizerName, authorizerSignature, password, \"\", \"\");\n        }\n\n        MqttClientConnectionConfigBuilder &MqttClientConnectionConfigBuilder::WithCustomAuthorizer(\n",
                    "rendered": {
                      "text": "            const Crt::String &authorizerSignature,\n            const Crt::String &password) noexcept\n        {\n            return this->WithCustomAuthorizer(username, authorizerName, authorizerSignature, password, \"\", \"\");\n        }\n\n        MqttClientConnectionConfigBuilder &MqttClientConnectionConfigBuilder::WithCustomAuthorizer(\n",
                      "markdown": "`            const Crt::String &authorizerSignature,\n            const Crt::String &password) noexcept\n        {\n            return this->WithCustomAuthorizer(username, authorizerName, authorizerSignature, password, \"\", \"\");\n        }\n\n        MqttClientConnectionConfigBuilder &MqttClientConnectionConfigBuilder::WithCustomAuthorizer(\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 31,
                  "endLine": 331,
                  "endColumn": 39,
                  "snippet": {
                    "text": "            const Crt::String &username,\n            const Crt::String &authorizerName,\n            const Crt::String &authorizerSignature,\n            const Crt::String &password) noexcept\n        {\n            return this->WithCustomAuthorizer(username, authorizerName, authorizerSignature, password, \"\", \"\");\n        }\n",
                    "rendered": {
                      "text": "            const Crt::String &username,\n            const Crt::String &authorizerName,\n            const Crt::String &authorizerSignature,\n            const Crt::String &password) noexcept\n        {\n            return this->WithCustomAuthorizer(username, authorizerName, authorizerSignature, password, \"\", \"\");\n        }\n",
                      "markdown": "`            const Crt::String &username,\n            const Crt::String &authorizerName,\n            const Crt::String &authorizerSignature,\n            const Crt::String &password) noexcept\n        {\n            return this->WithCustomAuthorizer(username, authorizerName, authorizerSignature, password, \"\", \"\");\n        }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/iot/MqttClient.cpp"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 60,
                  "endLine": 139,
                  "endColumn": 68,
                  "snippet": {
                    "text": "            : MqttClientConnectionConfigBuilder(allocator)\n        {\n            m_contextOptions = Crt::Io::TlsContextOptions::InitClientWithMtlsPkcs12(\n                options.pkcs12_file.c_str(), options.pkcs12_password.c_str(), allocator);\n            if (!m_contextOptions)\n            {\n                m_lastError = m_contextOptions.LastError();\n",
                    "rendered": {
                      "text": "            : MqttClientConnectionConfigBuilder(allocator)\n        {\n            m_contextOptions = Crt::Io::TlsContextOptions::InitClientWithMtlsPkcs12(\n                options.pkcs12_file.c_str(), options.pkcs12_password.c_str(), allocator);\n            if (!m_contextOptions)\n            {\n                m_lastError = m_contextOptions.LastError();\n",
                      "markdown": "`            : MqttClientConnectionConfigBuilder(allocator)\n        {\n            m_contextOptions = Crt::Io::TlsContextOptions::InitClientWithMtlsPkcs12(\n                options.pkcs12_file.c_str(), options.pkcs12_password.c_str(), allocator);\n            if (!m_contextOptions)\n            {\n                m_lastError = m_contextOptions.LastError();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/Mqtt5ClientCore.cpp"
                },
                "region": {
                  "startLine": 632,
                  "startColumn": 76,
                  "endLine": 632,
                  "endColumn": 84,
                  "snippet": {
                    "text": "                    [allocator](Mqtt5to3AdapterOptions *options) { Crt::Delete(options, allocator); });\n                adapterOptions->m_mqtt3Options.allocator = options.m_allocator;\n                adapterOptions->m_hostname = options.m_hostName;\n                adapterOptions->m_mqtt3Options.hostName = adapterOptions->m_hostname.c_str();\n                adapterOptions->m_mqtt3Options.port = options.m_port;\n                adapterOptions->m_mqtt3Options.socketOptions = options.m_socketOptions;\n                if (options.m_proxyOptions.has_value())\n",
                    "rendered": {
                      "text": "                    [allocator](Mqtt5to3AdapterOptions *options) { Crt::Delete(options, allocator); });\n                adapterOptions->m_mqtt3Options.allocator = options.m_allocator;\n                adapterOptions->m_hostname = options.m_hostName;\n                adapterOptions->m_mqtt3Options.hostName = adapterOptions->m_hostname.c_str();\n                adapterOptions->m_mqtt3Options.port = options.m_port;\n                adapterOptions->m_mqtt3Options.socketOptions = options.m_socketOptions;\n                if (options.m_proxyOptions.has_value())\n",
                      "markdown": "`                    [allocator](Mqtt5to3AdapterOptions *options) { Crt::Delete(options, allocator); });\n                adapterOptions->m_mqtt3Options.allocator = options.m_allocator;\n                adapterOptions->m_hostname = options.m_hostName;\n                adapterOptions->m_mqtt3Options.hostName = adapterOptions->m_hostname.c_str();\n                adapterOptions->m_mqtt3Options.port = options.m_port;\n                adapterOptions->m_mqtt3Options.socketOptions = options.m_socketOptions;\n                if (options.m_proxyOptions.has_value())\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/Mqtt5ClientCore.cpp"
                },
                "region": {
                  "startLine": 631,
                  "startColumn": 34,
                  "endLine": 631,
                  "endColumn": 42,
                  "snippet": {
                    "text": "                    Crt::New<Mqtt5to3AdapterOptions>(allocator),\n                    [allocator](Mqtt5to3AdapterOptions *options) { Crt::Delete(options, allocator); });\n                adapterOptions->m_mqtt3Options.allocator = options.m_allocator;\n                adapterOptions->m_hostname = options.m_hostName;\n                adapterOptions->m_mqtt3Options.hostName = adapterOptions->m_hostname.c_str();\n                adapterOptions->m_mqtt3Options.port = options.m_port;\n                adapterOptions->m_mqtt3Options.socketOptions = options.m_socketOptions;\n",
                    "rendered": {
                      "text": "                    Crt::New<Mqtt5to3AdapterOptions>(allocator),\n                    [allocator](Mqtt5to3AdapterOptions *options) { Crt::Delete(options, allocator); });\n                adapterOptions->m_mqtt3Options.allocator = options.m_allocator;\n                adapterOptions->m_hostname = options.m_hostName;\n                adapterOptions->m_mqtt3Options.hostName = adapterOptions->m_hostname.c_str();\n                adapterOptions->m_mqtt3Options.port = options.m_port;\n                adapterOptions->m_mqtt3Options.socketOptions = options.m_socketOptions;\n",
                      "markdown": "`                    Crt::New<Mqtt5to3AdapterOptions>(allocator),\n                    [allocator](Mqtt5to3AdapterOptions *options) { Crt::Delete(options, allocator); });\n                adapterOptions->m_mqtt3Options.allocator = options.m_allocator;\n                adapterOptions->m_hostname = options.m_hostName;\n                adapterOptions->m_mqtt3Options.hostName = adapterOptions->m_hostname.c_str();\n                adapterOptions->m_mqtt3Options.port = options.m_port;\n                adapterOptions->m_mqtt3Options.socketOptions = options.m_socketOptions;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/Mqtt5Packets.cpp"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 25,
                  "endLine": 381,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n            const Crt::Optional<Crt::ByteCursor> &ConnectPacket::getPassword() const noexcept\n            {\n                return m_password;\n            }\n\n            const Crt::Optional<uint32_t> &ConnectPacket::getSessionExpiryIntervalSec() const noexcept\n",
                    "rendered": {
                      "text": "\n            const Crt::Optional<Crt::ByteCursor> &ConnectPacket::getPassword() const noexcept\n            {\n                return m_password;\n            }\n\n            const Crt::Optional<uint32_t> &ConnectPacket::getSessionExpiryIntervalSec() const noexcept\n",
                      "markdown": "`\n            const Crt::Optional<Crt::ByteCursor> &ConnectPacket::getPassword() const noexcept\n            {\n                return m_password;\n            }\n\n            const Crt::Optional<uint32_t> &ConnectPacket::getSessionExpiryIntervalSec() const noexcept\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/Mqtt5Packets.cpp"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 68,
                  "endLine": 379,
                  "endColumn": 76,
                  "snippet": {
                    "text": "                return m_username;\n            }\n\n            const Crt::Optional<Crt::ByteCursor> &ConnectPacket::getPassword() const noexcept\n            {\n                return m_password;\n            }\n",
                    "rendered": {
                      "text": "                return m_username;\n            }\n\n            const Crt::Optional<Crt::ByteCursor> &ConnectPacket::getPassword() const noexcept\n            {\n                return m_password;\n            }\n",
                      "markdown": "`                return m_username;\n            }\n\n            const Crt::Optional<Crt::ByteCursor> &ConnectPacket::getPassword() const noexcept\n            {\n                return m_password;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/Mqtt5Packets.cpp"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 46,
                  "endLine": 307,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n                if (m_password.has_value())\n                {\n                    raw_options.password = &m_password.value();\n                }\n\n                if (m_sessionExpiryIntervalSec.has_value())\n",
                    "rendered": {
                      "text": "\n                if (m_password.has_value())\n                {\n                    raw_options.password = &m_password.value();\n                }\n\n                if (m_sessionExpiryIntervalSec.has_value())\n",
                      "markdown": "`\n                if (m_password.has_value())\n                {\n                    raw_options.password = &m_password.value();\n                }\n\n                if (m_sessionExpiryIntervalSec.has_value())\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/Mqtt5Packets.cpp"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 32,
                  "endLine": 307,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n                if (m_password.has_value())\n                {\n                    raw_options.password = &m_password.value();\n                }\n\n                if (m_sessionExpiryIntervalSec.has_value())\n",
                    "rendered": {
                      "text": "\n                if (m_password.has_value())\n                {\n                    raw_options.password = &m_password.value();\n                }\n\n                if (m_sessionExpiryIntervalSec.has_value())\n",
                      "markdown": "`\n                if (m_password.has_value())\n                {\n                    raw_options.password = &m_password.value();\n                }\n\n                if (m_sessionExpiryIntervalSec.has_value())\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/Mqtt5Packets.cpp"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 22,
                  "endLine": 305,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                    raw_options.username = &m_usernameCursor;\n                }\n\n                if (m_password.has_value())\n                {\n                    raw_options.password = &m_password.value();\n                }\n",
                    "rendered": {
                      "text": "                    raw_options.username = &m_usernameCursor;\n                }\n\n                if (m_password.has_value())\n                {\n                    raw_options.password = &m_password.value();\n                }\n",
                      "markdown": "`                    raw_options.username = &m_usernameCursor;\n                }\n\n                if (m_password.has_value())\n                {\n                    raw_options.password = &m_password.value();\n                }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/Mqtt5Packets.cpp"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 86,
                  "endLine": 226,
                  "endColumn": 94,
                  "snippet": {
                    "text": "\n            ConnectPacket &ConnectPacket::WithPassword(Crt::ByteCursor password) noexcept\n            {\n                setPacketByteBufOptional(m_password, m_passowrdStorage, m_allocator, &password);\n                return *this;\n            }\n\n",
                    "rendered": {
                      "text": "\n            ConnectPacket &ConnectPacket::WithPassword(Crt::ByteCursor password) noexcept\n            {\n                setPacketByteBufOptional(m_password, m_passowrdStorage, m_allocator, &password);\n                return *this;\n            }\n\n",
                      "markdown": "`\n            ConnectPacket &ConnectPacket::WithPassword(Crt::ByteCursor password) noexcept\n            {\n                setPacketByteBufOptional(m_password, m_passowrdStorage, m_allocator, &password);\n                return *this;\n            }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/Mqtt5Packets.cpp"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 43,
                  "endLine": 226,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n            ConnectPacket &ConnectPacket::WithPassword(Crt::ByteCursor password) noexcept\n            {\n                setPacketByteBufOptional(m_password, m_passowrdStorage, m_allocator, &password);\n                return *this;\n            }\n\n",
                    "rendered": {
                      "text": "\n            ConnectPacket &ConnectPacket::WithPassword(Crt::ByteCursor password) noexcept\n            {\n                setPacketByteBufOptional(m_password, m_passowrdStorage, m_allocator, &password);\n                return *this;\n            }\n\n",
                      "markdown": "`\n            ConnectPacket &ConnectPacket::WithPassword(Crt::ByteCursor password) noexcept\n            {\n                setPacketByteBufOptional(m_password, m_passowrdStorage, m_allocator, &password);\n                return *this;\n            }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/Mqtt5Packets.cpp"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 71,
                  "endLine": 224,
                  "endColumn": 79,
                  "snippet": {
                    "text": "                return *this;\n            }\n\n            ConnectPacket &ConnectPacket::WithPassword(Crt::ByteCursor password) noexcept\n            {\n                setPacketByteBufOptional(m_password, m_passowrdStorage, m_allocator, &password);\n                return *this;\n",
                    "rendered": {
                      "text": "                return *this;\n            }\n\n            ConnectPacket &ConnectPacket::WithPassword(Crt::ByteCursor password) noexcept\n            {\n                setPacketByteBufOptional(m_password, m_passowrdStorage, m_allocator, &password);\n                return *this;\n",
                      "markdown": "`                return *this;\n            }\n\n            ConnectPacket &ConnectPacket::WithPassword(Crt::ByteCursor password) noexcept\n            {\n                setPacketByteBufOptional(m_password, m_passowrdStorage, m_allocator, &password);\n                return *this;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/Mqtt5Packets.cpp"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 46,
                  "endLine": 224,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                return *this;\n            }\n\n            ConnectPacket &ConnectPacket::WithPassword(Crt::ByteCursor password) noexcept\n            {\n                setPacketByteBufOptional(m_password, m_passowrdStorage, m_allocator, &password);\n                return *this;\n",
                    "rendered": {
                      "text": "                return *this;\n            }\n\n            ConnectPacket &ConnectPacket::WithPassword(Crt::ByteCursor password) noexcept\n            {\n                setPacketByteBufOptional(m_password, m_passowrdStorage, m_allocator, &password);\n                return *this;\n",
                      "markdown": "`                return *this;\n            }\n\n            ConnectPacket &ConnectPacket::WithPassword(Crt::ByteCursor password) noexcept\n            {\n                setPacketByteBufOptional(m_password, m_passowrdStorage, m_allocator, &password);\n                return *this;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 39,
                  "endLine": 247,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n            Mqtt5ClientOptions &Mqtt5ClientOptions::WithHostName(Crt::String hostname)\n            {\n                m_hostName = std::move(hostname);\n                return *this;\n            }\n\n",
                    "rendered": {
                      "text": "\n            Mqtt5ClientOptions &Mqtt5ClientOptions::WithHostName(Crt::String hostname)\n            {\n                m_hostName = std::move(hostname);\n                return *this;\n            }\n\n",
                      "markdown": "`\n            Mqtt5ClientOptions &Mqtt5ClientOptions::WithHostName(Crt::String hostname)\n            {\n                m_hostName = std::move(hostname);\n                return *this;\n            }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/Mqtt5Client.cpp"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 77,
                  "endLine": 245,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\n            Mqtt5ClientOptions::~Mqtt5ClientOptions() {}\n\n            Mqtt5ClientOptions &Mqtt5ClientOptions::WithHostName(Crt::String hostname)\n            {\n                m_hostName = std::move(hostname);\n                return *this;\n",
                    "rendered": {
                      "text": "\n            Mqtt5ClientOptions::~Mqtt5ClientOptions() {}\n\n            Mqtt5ClientOptions &Mqtt5ClientOptions::WithHostName(Crt::String hostname)\n            {\n                m_hostName = std::move(hostname);\n                return *this;\n",
                      "markdown": "`\n            Mqtt5ClientOptions::~Mqtt5ClientOptions() {}\n\n            Mqtt5ClientOptions &Mqtt5ClientOptions::WithHostName(Crt::String hostname)\n            {\n                m_hostName = std::move(hostname);\n                return *this;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/MqttConnection.cpp"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 72,
                  "endLine": 37,
                  "endColumn": 77,
                  "snippet": {
                    "text": "                }\n\n                Mqtt5::Mqtt5to3AdapterOptions *adapterOptions =\n                    mqtt5client->m_client_core->m_mqtt5to3AdapterOptions.get();\n                /**\n                 * As we passed the std::shared_ptr<Mqtt5Client> by value, this function scope would  keep a reference\n                 * of the Mqtt5Client thus the underlying c client. Therefore we directly access the c client here.\n",
                    "rendered": {
                      "text": "                }\n\n                Mqtt5::Mqtt5to3AdapterOptions *adapterOptions =\n                    mqtt5client->m_client_core->m_mqtt5to3AdapterOptions.get();\n                /**\n                 * As we passed the std::shared_ptr<Mqtt5Client> by value, this function scope would  keep a reference\n                 * of the Mqtt5Client thus the underlying c client. Therefore we directly access the c client here.\n",
                      "markdown": "`                }\n\n                Mqtt5::Mqtt5to3AdapterOptions *adapterOptions =\n                    mqtt5client->m_client_core->m_mqtt5to3AdapterOptions.get();\n                /**\n                 * As we passed the std::shared_ptr<Mqtt5Client> by value, this function scope would  keep a reference\n                 * of the Mqtt5Client thus the underlying c client. Therefore we directly access the c client here.\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/MqttConnection.cpp"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 60,
                  "endLine": 150,
                  "endColumn": 68,
                  "snippet": {
                    "text": "            bool MqttConnection::SetLogin(const char *username, const char *password) noexcept\n            {\n                AWS_ASSERT(m_connectionCore != nullptr);\n                return m_connectionCore->SetLogin(username, password);\n            }\n\n            bool MqttConnection::SetWebsocketProxyOptions(\n",
                    "rendered": {
                      "text": "            bool MqttConnection::SetLogin(const char *username, const char *password) noexcept\n            {\n                AWS_ASSERT(m_connectionCore != nullptr);\n                return m_connectionCore->SetLogin(username, password);\n            }\n\n            bool MqttConnection::SetWebsocketProxyOptions(\n",
                      "markdown": "`            bool MqttConnection::SetLogin(const char *username, const char *password) noexcept\n            {\n                AWS_ASSERT(m_connectionCore != nullptr);\n                return m_connectionCore->SetLogin(username, password);\n            }\n\n            bool MqttConnection::SetWebsocketProxyOptions(\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/MqttConnection.cpp"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 76,
                  "endLine": 147,
                  "endColumn": 84,
                  "snippet": {
                    "text": "                return m_connectionCore->SetWill(topic, qos, retain, payload);\n            }\n\n            bool MqttConnection::SetLogin(const char *username, const char *password) noexcept\n            {\n                AWS_ASSERT(m_connectionCore != nullptr);\n                return m_connectionCore->SetLogin(username, password);\n",
                    "rendered": {
                      "text": "                return m_connectionCore->SetWill(topic, qos, retain, payload);\n            }\n\n            bool MqttConnection::SetLogin(const char *username, const char *password) noexcept\n            {\n                AWS_ASSERT(m_connectionCore != nullptr);\n                return m_connectionCore->SetLogin(username, password);\n",
                      "markdown": "`                return m_connectionCore->SetWill(topic, qos, retain, payload);\n            }\n\n            bool MqttConnection::SetLogin(const char *username, const char *password) noexcept\n            {\n                AWS_ASSERT(m_connectionCore != nullptr);\n                return m_connectionCore->SetLogin(username, password);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/MqttConnectionCore.cpp"
                },
                "region": {
                  "startLine": 585,
                  "startColumn": 51,
                  "endLine": 585,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\n                if (password != nullptr)\n                {\n                    pwdCur = ByteCursorFromCString(password);\n                    pwdCurPtr = &pwdCur;\n                }\n                return aws_mqtt_client_connection_set_login(m_underlyingConnection, &usernameCur, pwdCurPtr) == 0;\n",
                    "rendered": {
                      "text": "\n                if (password != nullptr)\n                {\n                    pwdCur = ByteCursorFromCString(password);\n                    pwdCurPtr = &pwdCur;\n                }\n                return aws_mqtt_client_connection_set_login(m_underlyingConnection, &usernameCur, pwdCurPtr) == 0;\n",
                      "markdown": "`\n                if (password != nullptr)\n                {\n                    pwdCur = ByteCursorFromCString(password);\n                    pwdCurPtr = &pwdCur;\n                }\n                return aws_mqtt_client_connection_set_login(m_underlyingConnection, &usernameCur, pwdCurPtr) == 0;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/MqttConnectionCore.cpp"
                },
                "region": {
                  "startLine": 583,
                  "startColumn": 20,
                  "endLine": 583,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                ByteCursor *pwdCurPtr = nullptr;\n                ByteCursor pwdCur;\n\n                if (password != nullptr)\n                {\n                    pwdCur = ByteCursorFromCString(password);\n                    pwdCurPtr = &pwdCur;\n",
                    "rendered": {
                      "text": "                ByteCursor *pwdCurPtr = nullptr;\n                ByteCursor pwdCur;\n\n                if (password != nullptr)\n                {\n                    pwdCur = ByteCursorFromCString(password);\n                    pwdCurPtr = &pwdCur;\n",
                      "markdown": "`                ByteCursor *pwdCurPtr = nullptr;\n                ByteCursor pwdCur;\n\n                if (password != nullptr)\n                {\n                    pwdCur = ByteCursorFromCString(password);\n                    pwdCurPtr = &pwdCur;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/MqttConnectionCore.cpp"
                },
                "region": {
                  "startLine": 575,
                  "startColumn": 80,
                  "endLine": 575,
                  "endColumn": 88,
                  "snippet": {
                    "text": "                           m_underlyingConnection, &topicCur, qos, retain, &payloadCur) == 0;\n            }\n\n            bool MqttConnectionCore::SetLogin(const char *username, const char *password) noexcept\n            {\n                ByteBuf usernameBuf = aws_byte_buf_from_c_str(username);\n                ByteCursor usernameCur = aws_byte_cursor_from_buf(&usernameBuf);\n",
                    "rendered": {
                      "text": "                           m_underlyingConnection, &topicCur, qos, retain, &payloadCur) == 0;\n            }\n\n            bool MqttConnectionCore::SetLogin(const char *username, const char *password) noexcept\n            {\n                ByteBuf usernameBuf = aws_byte_buf_from_c_str(username);\n                ByteCursor usernameCur = aws_byte_cursor_from_buf(&usernameBuf);\n",
                      "markdown": "`                           m_underlyingConnection, &topicCur, qos, retain, &payloadCur) == 0;\n            }\n\n            bool MqttConnectionCore::SetLogin(const char *username, const char *password) noexcept\n            {\n                ByteBuf usernameBuf = aws_byte_buf_from_c_str(username);\n                ByteCursor usernameCur = aws_byte_cursor_from_buf(&usernameBuf);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/MqttConnectionCore.cpp"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 18,
                  "endLine": 517,
                  "endColumn": 22,
                  "snippet": {
                    "text": "                    return;\n                }\n\n                // At this point we ensured that the MqttConnection object will be alive for the duration of the\n                // callback execution, so no critical section is needed.\n\n                Allocator *allocator = connectionCore->m_allocator;\n",
                    "rendered": {
                      "text": "                    return;\n                }\n\n                // At this point we ensured that the MqttConnection object will be alive for the duration of the\n                // callback execution, so no critical section is needed.\n\n                Allocator *allocator = connectionCore->m_allocator;\n",
                      "markdown": "`                    return;\n                }\n\n                // At this point we ensured that the MqttConnection object will be alive for the duration of the\n                // callback execution, so no critical section is needed.\n\n                Allocator *allocator = connectionCore->m_allocator;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/mqtt/MqttConnectionCore.cpp"
                },
                "region": {
                  "startLine": 483,
                  "startColumn": 105,
                  "endLine": 483,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n            std::shared_ptr<MqttConnection> MqttConnectionCore::obtainConnectionInstance()\n            {\n                // std::weak_ptr::lock will return std::shared_ptr of the managed object ONLY IF there is at least one\n                // other alive instance.\n                // If the last alive shared_ptr (on the user side) is being destroyed in parallel with this code, they\n                // will try to atomically increment/decrement the shared ref counter (equal to 1). So, the two following\n",
                    "rendered": {
                      "text": "\n            std::shared_ptr<MqttConnection> MqttConnectionCore::obtainConnectionInstance()\n            {\n                // std::weak_ptr::lock will return std::shared_ptr of the managed object ONLY IF there is at least one\n                // other alive instance.\n                // If the last alive shared_ptr (on the user side) is being destroyed in parallel with this code, they\n                // will try to atomically increment/decrement the shared ref counter (equal to 1). So, the two following\n",
                      "markdown": "`\n            std::shared_ptr<MqttConnection> MqttConnectionCore::obtainConnectionInstance()\n            {\n                // std::weak_ptr::lock will return std::shared_ptr of the managed object ONLY IF there is at least one\n                // other alive instance.\n                // If the last alive shared_ptr (on the user side) is being destroyed in parallel with this code, they\n                // will try to atomically increment/decrement the shared ref counter (equal to 1). So, the two following\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/auth/Sigv4Signing.cpp"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 55,
                  "endLine": 294,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n                return aws_sign_request_aws(\n                           m_allocator,\n                           signerCallbackData->Signable.get(),\n                           (aws_signing_config_base *)awsSigningConfig->GetUnderlyingHandle(),\n                           s_http_signing_complete_fn,\n                           signerCallbackData) == AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "\n                return aws_sign_request_aws(\n                           m_allocator,\n                           signerCallbackData->Signable.get(),\n                           (aws_signing_config_base *)awsSigningConfig->GetUnderlyingHandle(),\n                           s_http_signing_complete_fn,\n                           signerCallbackData) == AWS_OP_SUCCESS;\n",
                      "markdown": "`\n                return aws_sign_request_aws(\n                           m_allocator,\n                           signerCallbackData->Signable.get(),\n                           (aws_signing_config_base *)awsSigningConfig->GetUnderlyingHandle(),\n                           s_http_signing_complete_fn,\n                           signerCallbackData) == AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/auth/Sigv4Signing.cpp"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 42,
                  "endLine": 23,
                  "endColumn": 108,
                  "snippet": {
                    "text": "        {\n            namespace SignedBodyValue\n            {\n                const char *EmptySha256 = \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n                const char *EmptySha256Str()\n                {\n                    return EmptySha256;\n",
                    "rendered": {
                      "text": "        {\n            namespace SignedBodyValue\n            {\n                const char *EmptySha256 = \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n                const char *EmptySha256Str()\n                {\n                    return EmptySha256;\n",
                      "markdown": "`        {\n            namespace SignedBodyValue\n            {\n                const char *EmptySha256 = \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n                const char *EmptySha256Str()\n                {\n                    return EmptySha256;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/http/HttpConnectionManager.cpp"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 50,
                  "endLine": 147,
                  "endColumn": 55,
                  "snippet": {
                    "text": "                if (!m_releaseInvoked)\n                {\n                    aws_http_connection_manager_release(m_connectionManager);\n                    m_shutdownPromise.get_future().get();\n                }\n                m_connectionManager = nullptr;\n            }\n",
                    "rendered": {
                      "text": "                if (!m_releaseInvoked)\n                {\n                    aws_http_connection_manager_release(m_connectionManager);\n                    m_shutdownPromise.get_future().get();\n                }\n                m_connectionManager = nullptr;\n            }\n",
                      "markdown": "`                if (!m_releaseInvoked)\n                {\n                    aws_http_connection_manager_release(m_connectionManager);\n                    m_shutdownPromise.get_future().get();\n                }\n                m_connectionManager = nullptr;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/http/HttpProxyStrategy.cpp"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 75,
                  "endLine": 171,
                  "endColumn": 80,
                  "snippet": {
                    "text": "                AWS_ZERO_STRUCT(ntlmConfig);\n                ntlmConfig.get_challenge_token = AdaptiveHttpProxyStrategy::NtlmGetToken;\n                ntlmConfig.get_token = AdaptiveHttpProxyStrategy::NtlmGetCredential;\n                ntlmConfig.get_challenge_token_user_data = adaptiveStrategy.get();\n\n                struct aws_http_proxy_strategy_tunneling_adaptive_options adaptiveConfig;\n                AWS_ZERO_STRUCT(adaptiveConfig);\n",
                    "rendered": {
                      "text": "                AWS_ZERO_STRUCT(ntlmConfig);\n                ntlmConfig.get_challenge_token = AdaptiveHttpProxyStrategy::NtlmGetToken;\n                ntlmConfig.get_token = AdaptiveHttpProxyStrategy::NtlmGetCredential;\n                ntlmConfig.get_challenge_token_user_data = adaptiveStrategy.get();\n\n                struct aws_http_proxy_strategy_tunneling_adaptive_options adaptiveConfig;\n                AWS_ZERO_STRUCT(adaptiveConfig);\n",
                      "markdown": "`                AWS_ZERO_STRUCT(ntlmConfig);\n                ntlmConfig.get_challenge_token = AdaptiveHttpProxyStrategy::NtlmGetToken;\n                ntlmConfig.get_token = AdaptiveHttpProxyStrategy::NtlmGetCredential;\n                ntlmConfig.get_challenge_token_user_data = adaptiveStrategy.get();\n\n                struct aws_http_proxy_strategy_tunneling_adaptive_options adaptiveConfig;\n                AWS_ZERO_STRUCT(adaptiveConfig);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/http/HttpProxyStrategy.cpp"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 69,
                  "endLine": 165,
                  "endColumn": 74,
                  "snippet": {
                    "text": "                struct aws_http_proxy_strategy_tunneling_kerberos_options kerberosConfig;\n                AWS_ZERO_STRUCT(kerberosConfig);\n                kerberosConfig.get_token = AdaptiveHttpProxyStrategy::KerberosGetToken;\n                kerberosConfig.get_token_user_data = adaptiveStrategy.get();\n\n                struct aws_http_proxy_strategy_tunneling_ntlm_options ntlmConfig;\n                AWS_ZERO_STRUCT(ntlmConfig);\n",
                    "rendered": {
                      "text": "                struct aws_http_proxy_strategy_tunneling_kerberos_options kerberosConfig;\n                AWS_ZERO_STRUCT(kerberosConfig);\n                kerberosConfig.get_token = AdaptiveHttpProxyStrategy::KerberosGetToken;\n                kerberosConfig.get_token_user_data = adaptiveStrategy.get();\n\n                struct aws_http_proxy_strategy_tunneling_ntlm_options ntlmConfig;\n                AWS_ZERO_STRUCT(ntlmConfig);\n",
                      "markdown": "`                struct aws_http_proxy_strategy_tunneling_kerberos_options kerberosConfig;\n                AWS_ZERO_STRUCT(kerberosConfig);\n                kerberosConfig.get_token = AdaptiveHttpProxyStrategy::KerberosGetToken;\n                kerberosConfig.get_token_user_data = adaptiveStrategy.get();\n\n                struct aws_http_proxy_strategy_tunneling_ntlm_options ntlmConfig;\n                AWS_ZERO_STRUCT(ntlmConfig);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/http/HttpProxyStrategy.cpp"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 73,
                  "endLine": 37,
                  "endColumn": 81,
                  "snippet": {
                    "text": "                AWS_ZERO_STRUCT(basicConfig);\n                basicConfig.proxy_connection_type = (enum aws_http_proxy_connection_type)config.ConnectionType;\n                basicConfig.user_name = aws_byte_cursor_from_c_str(config.Username.c_str());\n                basicConfig.password = aws_byte_cursor_from_c_str(config.Password.c_str());\n\n                struct aws_http_proxy_strategy *strategy =\n                    aws_http_proxy_strategy_new_basic_auth(allocator, &basicConfig);\n",
                    "rendered": {
                      "text": "                AWS_ZERO_STRUCT(basicConfig);\n                basicConfig.proxy_connection_type = (enum aws_http_proxy_connection_type)config.ConnectionType;\n                basicConfig.user_name = aws_byte_cursor_from_c_str(config.Username.c_str());\n                basicConfig.password = aws_byte_cursor_from_c_str(config.Password.c_str());\n\n                struct aws_http_proxy_strategy *strategy =\n                    aws_http_proxy_strategy_new_basic_auth(allocator, &basicConfig);\n",
                      "markdown": "`                AWS_ZERO_STRUCT(basicConfig);\n                basicConfig.proxy_connection_type = (enum aws_http_proxy_connection_type)config.ConnectionType;\n                basicConfig.user_name = aws_byte_cursor_from_c_str(config.Username.c_str());\n                basicConfig.password = aws_byte_cursor_from_c_str(config.Password.c_str());\n\n                struct aws_http_proxy_strategy *strategy =\n                    aws_http_proxy_strategy_new_basic_auth(allocator, &basicConfig);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/http/HttpProxyStrategy.cpp"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 28,
                  "endLine": 37,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                AWS_ZERO_STRUCT(basicConfig);\n                basicConfig.proxy_connection_type = (enum aws_http_proxy_connection_type)config.ConnectionType;\n                basicConfig.user_name = aws_byte_cursor_from_c_str(config.Username.c_str());\n                basicConfig.password = aws_byte_cursor_from_c_str(config.Password.c_str());\n\n                struct aws_http_proxy_strategy *strategy =\n                    aws_http_proxy_strategy_new_basic_auth(allocator, &basicConfig);\n",
                    "rendered": {
                      "text": "                AWS_ZERO_STRUCT(basicConfig);\n                basicConfig.proxy_connection_type = (enum aws_http_proxy_connection_type)config.ConnectionType;\n                basicConfig.user_name = aws_byte_cursor_from_c_str(config.Username.c_str());\n                basicConfig.password = aws_byte_cursor_from_c_str(config.Password.c_str());\n\n                struct aws_http_proxy_strategy *strategy =\n                    aws_http_proxy_strategy_new_basic_auth(allocator, &basicConfig);\n",
                      "markdown": "`                AWS_ZERO_STRUCT(basicConfig);\n                basicConfig.proxy_connection_type = (enum aws_http_proxy_connection_type)config.ConnectionType;\n                basicConfig.user_name = aws_byte_cursor_from_c_str(config.Username.c_str());\n                basicConfig.password = aws_byte_cursor_from_c_str(config.Password.c_str());\n\n                struct aws_http_proxy_strategy *strategy =\n                    aws_http_proxy_strategy_new_basic_auth(allocator, &basicConfig);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/http/HttpProxyStrategy.cpp"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 82,
                  "endLine": 25,
                  "endColumn": 90,
                  "snippet": {
                    "text": "            }\n\n            HttpProxyStrategyBasicAuthConfig::HttpProxyStrategyBasicAuthConfig()\n                : ConnectionType(AwsHttpProxyConnectionType::Legacy), Username(), Password()\n            {\n            }\n\n",
                    "rendered": {
                      "text": "            }\n\n            HttpProxyStrategyBasicAuthConfig::HttpProxyStrategyBasicAuthConfig()\n                : ConnectionType(AwsHttpProxyConnectionType::Legacy), Username(), Password()\n            {\n            }\n\n",
                      "markdown": "`            }\n\n            HttpProxyStrategyBasicAuthConfig::HttpProxyStrategyBasicAuthConfig()\n                : ConnectionType(AwsHttpProxyConnectionType::Legacy), Username(), Password()\n            {\n            }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/http/HttpConnection.cpp"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 78,
                  "endLine": 397,
                  "endColumn": 86,
                  "snippet": {
                    "text": "                {\n                    rawOptions.auth_type = AWS_HPAT_BASIC;\n                    rawOptions.auth_username = ByteCursorFromCString(BasicAuthUsername.c_str());\n                    rawOptions.auth_password = ByteCursorFromCString(BasicAuthPassword.c_str());\n                }\n            }\n\n",
                    "rendered": {
                      "text": "                {\n                    rawOptions.auth_type = AWS_HPAT_BASIC;\n                    rawOptions.auth_username = ByteCursorFromCString(BasicAuthUsername.c_str());\n                    rawOptions.auth_password = ByteCursorFromCString(BasicAuthPassword.c_str());\n                }\n            }\n\n",
                      "markdown": "`                {\n                    rawOptions.auth_type = AWS_HPAT_BASIC;\n                    rawOptions.auth_username = ByteCursorFromCString(BasicAuthUsername.c_str());\n                    rawOptions.auth_password = ByteCursorFromCString(BasicAuthPassword.c_str());\n                }\n            }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/http/HttpConnection.cpp"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 36,
                  "endLine": 397,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                {\n                    rawOptions.auth_type = AWS_HPAT_BASIC;\n                    rawOptions.auth_username = ByteCursorFromCString(BasicAuthUsername.c_str());\n                    rawOptions.auth_password = ByteCursorFromCString(BasicAuthPassword.c_str());\n                }\n            }\n\n",
                    "rendered": {
                      "text": "                {\n                    rawOptions.auth_type = AWS_HPAT_BASIC;\n                    rawOptions.auth_username = ByteCursorFromCString(BasicAuthUsername.c_str());\n                    rawOptions.auth_password = ByteCursorFromCString(BasicAuthPassword.c_str());\n                }\n            }\n\n",
                      "markdown": "`                {\n                    rawOptions.auth_type = AWS_HPAT_BASIC;\n                    rawOptions.auth_username = ByteCursorFromCString(BasicAuthUsername.c_str());\n                    rawOptions.auth_password = ByteCursorFromCString(BasicAuthPassword.c_str());\n                }\n            }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/crypto/SymmetricCipher.cpp"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 60,
                  "endLine": 141,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n            void SymmetricCipher::SetTag(ByteCursor tag) const noexcept\n            {\n                return aws_symmetric_cipher_set_tag(m_cipher.get(), tag);\n            }\n\n            SymmetricCipher SymmetricCipher::CreateAES_256_CBC_Cipher(\n",
                    "rendered": {
                      "text": "\n            void SymmetricCipher::SetTag(ByteCursor tag) const noexcept\n            {\n                return aws_symmetric_cipher_set_tag(m_cipher.get(), tag);\n            }\n\n            SymmetricCipher SymmetricCipher::CreateAES_256_CBC_Cipher(\n",
                      "markdown": "`\n            void SymmetricCipher::SetTag(ByteCursor tag) const noexcept\n            {\n                return aws_symmetric_cipher_set_tag(m_cipher.get(), tag);\n            }\n\n            SymmetricCipher SymmetricCipher::CreateAES_256_CBC_Cipher(\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/crypto/SymmetricCipher.cpp"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 60,
                  "endLine": 136,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n            ByteCursor SymmetricCipher::GetTag() const noexcept\n            {\n                return aws_symmetric_cipher_get_tag(m_cipher.get());\n            }\n\n            void SymmetricCipher::SetTag(ByteCursor tag) const noexcept\n",
                    "rendered": {
                      "text": "\n            ByteCursor SymmetricCipher::GetTag() const noexcept\n            {\n                return aws_symmetric_cipher_get_tag(m_cipher.get());\n            }\n\n            void SymmetricCipher::SetTag(ByteCursor tag) const noexcept\n",
                      "markdown": "`\n            ByteCursor SymmetricCipher::GetTag() const noexcept\n            {\n                return aws_symmetric_cipher_get_tag(m_cipher.get());\n            }\n\n            void SymmetricCipher::SetTag(ByteCursor tag) const noexcept\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/crypto/SymmetricCipher.cpp"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 78,
                  "endLine": 131,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n            ByteCursor SymmetricCipher::GetIV() const noexcept\n            {\n                return aws_symmetric_cipher_get_initialization_vector(m_cipher.get());\n            }\n\n            ByteCursor SymmetricCipher::GetTag() const noexcept\n",
                    "rendered": {
                      "text": "\n            ByteCursor SymmetricCipher::GetIV() const noexcept\n            {\n                return aws_symmetric_cipher_get_initialization_vector(m_cipher.get());\n            }\n\n            ByteCursor SymmetricCipher::GetTag() const noexcept\n",
                      "markdown": "`\n            ByteCursor SymmetricCipher::GetIV() const noexcept\n            {\n                return aws_symmetric_cipher_get_initialization_vector(m_cipher.get());\n            }\n\n            ByteCursor SymmetricCipher::GetTag() const noexcept\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/crypto/SymmetricCipher.cpp"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 60,
                  "endLine": 126,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n            ByteCursor SymmetricCipher::GetKey() const noexcept\n            {\n                return aws_symmetric_cipher_get_key(m_cipher.get());\n            }\n\n            ByteCursor SymmetricCipher::GetIV() const noexcept\n",
                    "rendered": {
                      "text": "\n            ByteCursor SymmetricCipher::GetKey() const noexcept\n            {\n                return aws_symmetric_cipher_get_key(m_cipher.get());\n            }\n\n            ByteCursor SymmetricCipher::GetIV() const noexcept\n",
                      "markdown": "`\n            ByteCursor SymmetricCipher::GetKey() const noexcept\n            {\n                return aws_symmetric_cipher_get_key(m_cipher.get());\n            }\n\n            ByteCursor SymmetricCipher::GetIV() const noexcept\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/crypto/SymmetricCipher.cpp"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 55,
                  "endLine": 113,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                    return false;\n                }\n\n                if (aws_symmetric_cipher_reset(m_cipher.get()) != AWS_OP_SUCCESS)\n                {\n                    m_lastError = Aws::Crt::LastError();\n                    return false;\n",
                    "rendered": {
                      "text": "                    return false;\n                }\n\n                if (aws_symmetric_cipher_reset(m_cipher.get()) != AWS_OP_SUCCESS)\n                {\n                    m_lastError = Aws::Crt::LastError();\n                    return false;\n",
                      "markdown": "`                    return false;\n                }\n\n                if (aws_symmetric_cipher_reset(m_cipher.get()) != AWS_OP_SUCCESS)\n                {\n                    m_lastError = Aws::Crt::LastError();\n                    return false;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/crypto/SymmetricCipher.cpp"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 28,
                  "endLine": 107,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n            bool SymmetricCipher::Reset() noexcept\n            {\n                if (m_cipher.get() == nullptr)\n                {\n                    m_lastError = AWS_ERROR_INVALID_STATE;\n                    return false;\n",
                    "rendered": {
                      "text": "\n            bool SymmetricCipher::Reset() noexcept\n            {\n                if (m_cipher.get() == nullptr)\n                {\n                    m_lastError = AWS_ERROR_INVALID_STATE;\n                    return false;\n",
                      "markdown": "`\n            bool SymmetricCipher::Reset() noexcept\n            {\n                if (m_cipher.get() == nullptr)\n                {\n                    m_lastError = AWS_ERROR_INVALID_STATE;\n                    return false;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/crypto/SymmetricCipher.cpp"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 69,
                  "endLine": 96,
                  "endColumn": 74,
                  "snippet": {
                    "text": "                    return false;\n                }\n\n                if (aws_symmetric_cipher_finalize_decryption(m_cipher.get(), &out) != AWS_OP_SUCCESS)\n                {\n                    m_lastError = Aws::Crt::LastError();\n                    return false;\n",
                    "rendered": {
                      "text": "                    return false;\n                }\n\n                if (aws_symmetric_cipher_finalize_decryption(m_cipher.get(), &out) != AWS_OP_SUCCESS)\n                {\n                    m_lastError = Aws::Crt::LastError();\n                    return false;\n",
                      "markdown": "`                    return false;\n                }\n\n                if (aws_symmetric_cipher_finalize_decryption(m_cipher.get(), &out) != AWS_OP_SUCCESS)\n                {\n                    m_lastError = Aws::Crt::LastError();\n                    return false;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/crypto/SymmetricCipher.cpp"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 57,
                  "endLine": 79,
                  "endColumn": 62,
                  "snippet": {
                    "text": "                    return false;\n                }\n\n                if (aws_symmetric_cipher_decrypt(m_cipher.get(), toDecrypt, &out) != AWS_OP_SUCCESS)\n                {\n                    m_lastError = Aws::Crt::LastError();\n                    return false;\n",
                    "rendered": {
                      "text": "                    return false;\n                }\n\n                if (aws_symmetric_cipher_decrypt(m_cipher.get(), toDecrypt, &out) != AWS_OP_SUCCESS)\n                {\n                    m_lastError = Aws::Crt::LastError();\n                    return false;\n",
                      "markdown": "`                    return false;\n                }\n\n                if (aws_symmetric_cipher_decrypt(m_cipher.get(), toDecrypt, &out) != AWS_OP_SUCCESS)\n                {\n                    m_lastError = Aws::Crt::LastError();\n                    return false;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/crypto/SymmetricCipher.cpp"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 69,
                  "endLine": 62,
                  "endColumn": 74,
                  "snippet": {
                    "text": "                    return false;\n                }\n\n                if (aws_symmetric_cipher_finalize_encryption(m_cipher.get(), &out) != AWS_OP_SUCCESS)\n                {\n                    m_lastError = Aws::Crt::LastError();\n                    return false;\n",
                    "rendered": {
                      "text": "                    return false;\n                }\n\n                if (aws_symmetric_cipher_finalize_encryption(m_cipher.get(), &out) != AWS_OP_SUCCESS)\n                {\n                    m_lastError = Aws::Crt::LastError();\n                    return false;\n",
                      "markdown": "`                    return false;\n                }\n\n                if (aws_symmetric_cipher_finalize_encryption(m_cipher.get(), &out) != AWS_OP_SUCCESS)\n                {\n                    m_lastError = Aws::Crt::LastError();\n                    return false;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/crypto/SymmetricCipher.cpp"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 57,
                  "endLine": 45,
                  "endColumn": 62,
                  "snippet": {
                    "text": "                    return false;\n                }\n\n                if (aws_symmetric_cipher_encrypt(m_cipher.get(), toEncrypt, &out) != AWS_OP_SUCCESS)\n                {\n                    m_lastError = Aws::Crt::LastError();\n                    return false;\n",
                    "rendered": {
                      "text": "                    return false;\n                }\n\n                if (aws_symmetric_cipher_encrypt(m_cipher.get(), toEncrypt, &out) != AWS_OP_SUCCESS)\n                {\n                    m_lastError = Aws::Crt::LastError();\n                    return false;\n",
                      "markdown": "`                    return false;\n                }\n\n                if (aws_symmetric_cipher_encrypt(m_cipher.get(), toEncrypt, &out) != AWS_OP_SUCCESS)\n                {\n                    m_lastError = Aws::Crt::LastError();\n                    return false;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/crypto/SymmetricCipher.cpp"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 96,
                  "endLine": 34,
                  "endColumn": 101,
                  "snippet": {
                    "text": "                {\n                    return SymmetricCipherState::Error;\n                }\n                return static_cast<SymmetricCipherState>(aws_symmetric_cipher_get_state(m_cipher.get()));\n            }\n\n            bool SymmetricCipher::Encrypt(const ByteCursor &toEncrypt, ByteBuf &out) noexcept\n",
                    "rendered": {
                      "text": "                {\n                    return SymmetricCipherState::Error;\n                }\n                return static_cast<SymmetricCipherState>(aws_symmetric_cipher_get_state(m_cipher.get()));\n            }\n\n            bool SymmetricCipher::Encrypt(const ByteCursor &toEncrypt, ByteBuf &out) noexcept\n",
                      "markdown": "`                {\n                    return SymmetricCipherState::Error;\n                }\n                return static_cast<SymmetricCipherState>(aws_symmetric_cipher_get_state(m_cipher.get()));\n            }\n\n            bool SymmetricCipher::Encrypt(const ByteCursor &toEncrypt, ByteBuf &out) noexcept\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/crypto/SymmetricCipher.cpp"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 82,
                  "endLine": 25,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\n            SymmetricCipher::operator bool() const noexcept\n            {\n                return m_cipher != nullptr ? aws_symmetric_cipher_is_good(m_cipher.get()) : false;\n            }\n\n            SymmetricCipherState SymmetricCipher::GetState() const noexcept\n",
                    "rendered": {
                      "text": "\n            SymmetricCipher::operator bool() const noexcept\n            {\n                return m_cipher != nullptr ? aws_symmetric_cipher_is_good(m_cipher.get()) : false;\n            }\n\n            SymmetricCipherState SymmetricCipher::GetState() const noexcept\n",
                      "markdown": "`\n            SymmetricCipher::operator bool() const noexcept\n            {\n                return m_cipher != nullptr ? aws_symmetric_cipher_is_good(m_cipher.get()) : false;\n            }\n\n            SymmetricCipherState SymmetricCipher::GetState() const noexcept\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/crypto/HMAC.cpp"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 48,
                  "endLine": 159,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n            aws_hmac *ByoHMAC::SeatForCInterop(const std::shared_ptr<ByoHMAC> &selfRef)\n            {\n                AWS_FATAL_ASSERT(this == selfRef.get());\n                m_selfReference = selfRef;\n                return &m_hmacValue;\n            }\n",
                    "rendered": {
                      "text": "\n            aws_hmac *ByoHMAC::SeatForCInterop(const std::shared_ptr<ByoHMAC> &selfRef)\n            {\n                AWS_FATAL_ASSERT(this == selfRef.get());\n                m_selfReference = selfRef;\n                return &m_hmacValue;\n            }\n",
                      "markdown": "`\n            aws_hmac *ByoHMAC::SeatForCInterop(const std::shared_ptr<ByoHMAC> &selfRef)\n            {\n                AWS_FATAL_ASSERT(this == selfRef.get());\n                m_selfReference = selfRef;\n                return &m_hmacValue;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/crypto/Hash.cpp"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 48,
                  "endLine": 177,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n            aws_hash *ByoHash::SeatForCInterop(const std::shared_ptr<ByoHash> &selfRef)\n            {\n                AWS_FATAL_ASSERT(this == selfRef.get());\n                m_selfReference = selfRef;\n                return &m_hashValue;\n            }\n",
                    "rendered": {
                      "text": "\n            aws_hash *ByoHash::SeatForCInterop(const std::shared_ptr<ByoHash> &selfRef)\n            {\n                AWS_FATAL_ASSERT(this == selfRef.get());\n                m_selfReference = selfRef;\n                return &m_hashValue;\n            }\n",
                      "markdown": "`\n            aws_hash *ByoHash::SeatForCInterop(const std::shared_ptr<ByoHash> &selfRef)\n            {\n                AWS_FATAL_ASSERT(this == selfRef.get());\n                m_selfReference = selfRef;\n                return &m_hashValue;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/io/ChannelHandler.cpp"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 48,
                  "endLine": 113,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n            struct aws_channel_handler *ChannelHandler::SeatForCInterop(const std::shared_ptr<ChannelHandler> &selfRef)\n            {\n                AWS_FATAL_ASSERT(this == selfRef.get());\n                m_selfReference = selfRef;\n                return &m_handler;\n            }\n",
                    "rendered": {
                      "text": "\n            struct aws_channel_handler *ChannelHandler::SeatForCInterop(const std::shared_ptr<ChannelHandler> &selfRef)\n            {\n                AWS_FATAL_ASSERT(this == selfRef.get());\n                m_selfReference = selfRef;\n                return &m_handler;\n            }\n",
                      "markdown": "`\n            struct aws_channel_handler *ChannelHandler::SeatForCInterop(const std::shared_ptr<ChannelHandler> &selfRef)\n            {\n                AWS_FATAL_ASSERT(this == selfRef.get());\n                m_selfReference = selfRef;\n                return &m_handler;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/io/Bootstrap.cpp"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 50,
                  "endLine": 68,
                  "endColumn": 55,
                  "snippet": {
                    "text": "                options.host_resolution_config = resolver.GetConfig();\n                options.host_resolver = resolver.GetUnderlyingHandle();\n                options.on_shutdown_complete = ClientBootstrapCallbackData::OnShutdownComplete;\n                options.user_data = m_callbackData.get();\n                m_bootstrap = aws_client_bootstrap_new(allocator, &options);\n                if (!m_bootstrap)\n                {\n",
                    "rendered": {
                      "text": "                options.host_resolution_config = resolver.GetConfig();\n                options.host_resolver = resolver.GetUnderlyingHandle();\n                options.on_shutdown_complete = ClientBootstrapCallbackData::OnShutdownComplete;\n                options.user_data = m_callbackData.get();\n                m_bootstrap = aws_client_bootstrap_new(allocator, &options);\n                if (!m_bootstrap)\n                {\n",
                      "markdown": "`                options.host_resolution_config = resolver.GetConfig();\n                options.host_resolver = resolver.GetUnderlyingHandle();\n                options.on_shutdown_complete = ClientBootstrapCallbackData::OnShutdownComplete;\n                options.user_data = m_callbackData.get();\n                m_bootstrap = aws_client_bootstrap_new(allocator, &options);\n                if (!m_bootstrap)\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/io/TlsOptions.cpp"
                },
                "region": {
                  "startLine": 481,
                  "startColumn": 49,
                  "endLine": 481,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                    return TlsConnectionOptions();\n                }\n\n                return TlsConnectionOptions(m_ctx.get(), m_ctx->alloc);\n            }\n\n            TlsChannelHandler::TlsChannelHandler(\n",
                    "rendered": {
                      "text": "                    return TlsConnectionOptions();\n                }\n\n                return TlsConnectionOptions(m_ctx.get(), m_ctx->alloc);\n            }\n\n            TlsChannelHandler::TlsChannelHandler(\n",
                      "markdown": "`                    return TlsConnectionOptions();\n                }\n\n                return TlsConnectionOptions(m_ctx.get(), m_ctx->alloc);\n            }\n\n            TlsChannelHandler::TlsChannelHandler(\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/io/TlsOptions.cpp"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 79,
                  "endLine": 255,
                  "endColumn": 89,
                  "snippet": {
                    "text": "\n                if (m_privateKeyObjectLabel)\n                {\n                    options.private_key_object_label = ByteCursorFromString(*m_privateKeyObjectLabel);\n                }\n\n                if (m_certificateFilePath)\n",
                    "rendered": {
                      "text": "\n                if (m_privateKeyObjectLabel)\n                {\n                    options.private_key_object_label = ByteCursorFromString(*m_privateKeyObjectLabel);\n                }\n\n                if (m_certificateFilePath)\n",
                      "markdown": "`\n                if (m_privateKeyObjectLabel)\n                {\n                    options.private_key_object_label = ByteCursorFromString(*m_privateKeyObjectLabel);\n                }\n\n                if (m_certificateFilePath)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/io/TlsOptions.cpp"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 28,
                  "endLine": 255,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n                if (m_privateKeyObjectLabel)\n                {\n                    options.private_key_object_label = ByteCursorFromString(*m_privateKeyObjectLabel);\n                }\n\n                if (m_certificateFilePath)\n",
                    "rendered": {
                      "text": "\n                if (m_privateKeyObjectLabel)\n                {\n                    options.private_key_object_label = ByteCursorFromString(*m_privateKeyObjectLabel);\n                }\n\n                if (m_certificateFilePath)\n",
                      "markdown": "`\n                if (m_privateKeyObjectLabel)\n                {\n                    options.private_key_object_label = ByteCursorFromString(*m_privateKeyObjectLabel);\n                }\n\n                if (m_certificateFilePath)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/io/TlsOptions.cpp"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 22,
                  "endLine": 253,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                    options.token_label = ByteCursorFromString(*m_tokenLabel);\n                }\n\n                if (m_privateKeyObjectLabel)\n                {\n                    options.private_key_object_label = ByteCursorFromString(*m_privateKeyObjectLabel);\n                }\n",
                    "rendered": {
                      "text": "                    options.token_label = ByteCursorFromString(*m_tokenLabel);\n                }\n\n                if (m_privateKeyObjectLabel)\n                {\n                    options.private_key_object_label = ByteCursorFromString(*m_privateKeyObjectLabel);\n                }\n",
                      "markdown": "`                    options.token_label = ByteCursorFromString(*m_tokenLabel);\n                }\n\n                if (m_privateKeyObjectLabel)\n                {\n                    options.private_key_object_label = ByteCursorFromString(*m_privateKeyObjectLabel);\n                }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/io/TlsOptions.cpp"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 18,
                  "endLine": 215,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n            void TlsContextPkcs11Options::SetPrivateKeyObjectLabel(const String &label) noexcept\n            {\n                m_privateKeyObjectLabel = label;\n            }\n\n            void TlsContextPkcs11Options::SetCertificateFilePath(const String &path) noexcept\n",
                    "rendered": {
                      "text": "\n            void TlsContextPkcs11Options::SetPrivateKeyObjectLabel(const String &label) noexcept\n            {\n                m_privateKeyObjectLabel = label;\n            }\n\n            void TlsContextPkcs11Options::SetCertificateFilePath(const String &path) noexcept\n",
                      "markdown": "`\n            void TlsContextPkcs11Options::SetPrivateKeyObjectLabel(const String &label) noexcept\n            {\n                m_privateKeyObjectLabel = label;\n            }\n\n            void TlsContextPkcs11Options::SetCertificateFilePath(const String &path) noexcept\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/io/TlsOptions.cpp"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 45,
                  "endLine": 213,
                  "endColumn": 55,
                  "snippet": {
                    "text": "                m_tokenLabel = label;\n            }\n\n            void TlsContextPkcs11Options::SetPrivateKeyObjectLabel(const String &label) noexcept\n            {\n                m_privateKeyObjectLabel = label;\n            }\n",
                    "rendered": {
                      "text": "                m_tokenLabel = label;\n            }\n\n            void TlsContextPkcs11Options::SetPrivateKeyObjectLabel(const String &label) noexcept\n            {\n                m_privateKeyObjectLabel = label;\n            }\n",
                      "markdown": "`                m_tokenLabel = label;\n            }\n\n            void TlsContextPkcs11Options::SetPrivateKeyObjectLabel(const String &label) noexcept\n            {\n                m_privateKeyObjectLabel = label;\n            }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/io/TlsOptions.cpp"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 71,
                  "endLine": 119,
                  "endColumn": 79,
                  "snippet": {
                    "text": "                TlsContextOptions ctxOptions;\n                struct aws_byte_cursor password = aws_byte_cursor_from_c_str(pkcs12Pwd);\n                if (!aws_tls_ctx_options_init_client_mtls_pkcs12_from_path(\n                        &ctxOptions.m_options, allocator, pkcs12Path, &password))\n                {\n                    ctxOptions.m_isInit = true;\n                }\n",
                    "rendered": {
                      "text": "                TlsContextOptions ctxOptions;\n                struct aws_byte_cursor password = aws_byte_cursor_from_c_str(pkcs12Pwd);\n                if (!aws_tls_ctx_options_init_client_mtls_pkcs12_from_path(\n                        &ctxOptions.m_options, allocator, pkcs12Path, &password))\n                {\n                    ctxOptions.m_isInit = true;\n                }\n",
                      "markdown": "`                TlsContextOptions ctxOptions;\n                struct aws_byte_cursor password = aws_byte_cursor_from_c_str(pkcs12Pwd);\n                if (!aws_tls_ctx_options_init_client_mtls_pkcs12_from_path(\n                        &ctxOptions.m_options, allocator, pkcs12Path, &password))\n                {\n                    ctxOptions.m_isInit = true;\n                }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/io/TlsOptions.cpp"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 39,
                  "endLine": 117,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                Allocator *allocator) noexcept\n            {\n                TlsContextOptions ctxOptions;\n                struct aws_byte_cursor password = aws_byte_cursor_from_c_str(pkcs12Pwd);\n                if (!aws_tls_ctx_options_init_client_mtls_pkcs12_from_path(\n                        &ctxOptions.m_options, allocator, pkcs12Path, &password))\n                {\n",
                    "rendered": {
                      "text": "                Allocator *allocator) noexcept\n            {\n                TlsContextOptions ctxOptions;\n                struct aws_byte_cursor password = aws_byte_cursor_from_c_str(pkcs12Pwd);\n                if (!aws_tls_ctx_options_init_client_mtls_pkcs12_from_path(\n                        &ctxOptions.m_options, allocator, pkcs12Path, &password))\n                {\n",
                      "markdown": "`                Allocator *allocator) noexcept\n            {\n                TlsContextOptions ctxOptions;\n                struct aws_byte_cursor password = aws_byte_cursor_from_c_str(pkcs12Pwd);\n                if (!aws_tls_ctx_options_init_client_mtls_pkcs12_from_path(\n                        &ctxOptions.m_options, allocator, pkcs12Path, &password))\n                {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/source/DateTime.cpp"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 16,
                  "endLine": 217,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n        std::chrono::milliseconds DateTime::operator-(const DateTime &other) const noexcept\n        {\n            auto diff = aws_date_time_diff(&m_date_time, &other.m_date_time);\n            return std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::seconds(diff));\n        }\n    } // namespace Crt\n",
                    "rendered": {
                      "text": "\n        std::chrono::milliseconds DateTime::operator-(const DateTime &other) const noexcept\n        {\n            auto diff = aws_date_time_diff(&m_date_time, &other.m_date_time);\n            return std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::seconds(diff));\n        }\n    } // namespace Crt\n",
                      "markdown": "`\n        std::chrono::milliseconds DateTime::operator-(const DateTime &other) const noexcept\n        {\n            auto diff = aws_date_time_diff(&m_date_time, &other.m_date_time);\n            return std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::seconds(diff));\n        }\n    } // namespace Crt\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.builder/actions/crt-ci-prep.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 21,
                  "endLine": 5,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\nclass CrtCiPrep(Builder.Action):\n    def run(self, env):\n        env.shell.setenv(\"AWS_TESTING_STS_ROLE_ARN\", env.shell.get_secret(\"aws-c-auth-testing/sts-role-arn\"))\n        actions = [\n            Builder.SetupCrossCICrtEnvironment()\n        ]\n",
                    "rendered": {
                      "text": "\nclass CrtCiPrep(Builder.Action):\n    def run(self, env):\n        env.shell.setenv(\"AWS_TESTING_STS_ROLE_ARN\", env.shell.get_secret(\"aws-c-auth-testing/sts-role-arn\"))\n        actions = [\n            Builder.SetupCrossCICrtEnvironment()\n        ]\n",
                      "markdown": "`\nclass CrtCiPrep(Builder.Action):\n    def run(self, env):\n        env.shell.setenv(\"AWS_TESTING_STS_ROLE_ARN\", env.shell.get_secret(\"aws-c-auth-testing/sts-role-arn\"))\n        actions = [\n            Builder.SetupCrossCICrtEnvironment()\n        ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.builder/actions/elasticurl_tests.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 39,
                  "endLine": 7,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\nclass ElasticurlTests(Builder.Action):\n    def run(self, env):\n        elasticurl_path = os.path.join(env.install_dir, 'bin', 'elasticurl_cpp')\n        if sys.platform == 'win32':\n            elasticurl_path += '.exe'\n\n",
                    "rendered": {
                      "text": "\nclass ElasticurlTests(Builder.Action):\n    def run(self, env):\n        elasticurl_path = os.path.join(env.install_dir, 'bin', 'elasticurl_cpp')\n        if sys.platform == 'win32':\n            elasticurl_path += '.exe'\n\n",
                      "markdown": "`\nclass ElasticurlTests(Builder.Action):\n    def run(self, env):\n        elasticurl_path = os.path.join(env.install_dir, 'bin', 'elasticurl_cpp')\n        if sys.platform == 'win32':\n            elasticurl_path += '.exe'\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.builder/actions/build_crt.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 49,
                  "endLine": 36,
                  "snippet": {
                    "text": "            new_args.append(arg)\n\n        # If we are using OpenSSL on Linux, then we want to make sure our CI container has the latest version\n        # for that platform, therefore we need to update\n        if (is_using_openssl):\n            self._setenv(env, \"AWS_TEST_PKCS11_USE_OPENSSL_SET\", \"true\")\n            print(\n                \"Trying to install a SSL development library (either libssl-dev or openssl-devel)\")\n",
                    "rendered": {
                      "text": "            new_args.append(arg)\n\n        # If we are using OpenSSL on Linux, then we want to make sure our CI container has the latest version\n        # for that platform, therefore we need to update\n        if (is_using_openssl):\n            self._setenv(env, \"AWS_TEST_PKCS11_USE_OPENSSL_SET\", \"true\")\n            print(\n                \"Trying to install a SSL development library (either libssl-dev or openssl-devel)\")\n",
                      "markdown": "`            new_args.append(arg)\n\n        # If we are using OpenSSL on Linux, then we want to make sure our CI container has the latest version\n        # for that platform, therefore we need to update\n        if (is_using_openssl):\n            self._setenv(env, \"AWS_TEST_PKCS11_USE_OPENSSL_SET\", \"true\")\n            print(\n                \"Trying to install a SSL development library (either libssl-dev or openssl-devel)\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.builder/actions/build_crt.py"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 25,
                  "endLine": 34,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n            new_args.append(arg)\n\n        # If we are using OpenSSL on Linux, then we want to make sure our CI container has the latest version\n        # for that platform, therefore we need to update\n        if (is_using_openssl):\n            self._setenv(env, \"AWS_TEST_PKCS11_USE_OPENSSL_SET\", \"true\")\n",
                    "rendered": {
                      "text": "\n            new_args.append(arg)\n\n        # If we are using OpenSSL on Linux, then we want to make sure our CI container has the latest version\n        # for that platform, therefore we need to update\n        if (is_using_openssl):\n            self._setenv(env, \"AWS_TEST_PKCS11_USE_OPENSSL_SET\", \"true\")\n",
                      "markdown": "`\n            new_args.append(arg)\n\n        # If we are using OpenSSL on Linux, then we want to make sure our CI container has the latest version\n        # for that platform, therefore we need to update\n        if (is_using_openssl):\n            self._setenv(env, \"AWS_TEST_PKCS11_USE_OPENSSL_SET\", \"true\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/HttpClientConnectionManagerTest.cpp"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 45,
                  "endLine": 439,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                connectionsCpy.clear();\n            }\n        }\n        connectionManager->InitiateShutdown().get();\n    }\n\n    /* now let everything tear down and make sure we don't leak or deadlock.*/\n",
                    "rendered": {
                      "text": "                connectionsCpy.clear();\n            }\n        }\n        connectionManager->InitiateShutdown().get();\n    }\n\n    /* now let everything tear down and make sure we don't leak or deadlock.*/\n",
                      "markdown": "`                connectionsCpy.clear();\n            }\n        }\n        connectionManager->InitiateShutdown().get();\n    }\n\n    /* now let everything tear down and make sure we don't leak or deadlock.*/\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/HttpClientConnectionManagerTest.cpp"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 45,
                  "endLine": 308,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                connectionsCpy.clear();\n            }\n        }\n        connectionManager->InitiateShutdown().get();\n    }\n\n    /* now let everything tear down and make sure we don't leak or deadlock.*/\n",
                    "rendered": {
                      "text": "                connectionsCpy.clear();\n            }\n        }\n        connectionManager->InitiateShutdown().get();\n    }\n\n    /* now let everything tear down and make sure we don't leak or deadlock.*/\n",
                      "markdown": "`                connectionsCpy.clear();\n            }\n        }\n        connectionManager->InitiateShutdown().get();\n    }\n\n    /* now let everything tear down and make sure we don't leak or deadlock.*/\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/HttpClientConnectionManagerTest.cpp"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 45,
                  "endLine": 137,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                connectionsCpy.clear();\n            }\n        }\n        connectionManager->InitiateShutdown().get();\n    }\n\n    /* now let everything tear down and make sure we don't leak or deadlock.*/\n",
                    "rendered": {
                      "text": "                connectionsCpy.clear();\n            }\n        }\n        connectionManager->InitiateShutdown().get();\n    }\n\n    /* now let everything tear down and make sure we don't leak or deadlock.*/\n",
                      "markdown": "`                connectionsCpy.clear();\n            }\n        }\n        connectionManager->InitiateShutdown().get();\n    }\n\n    /* now let everything tear down and make sure we don't leak or deadlock.*/\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/RuleEngineTest.cpp"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 42,
                  "endLine": 83,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            },\n            {\n              \"type\": \"endpoint\",\n              \"documentation\": \"the single service global endpoint\",\n              \"conditions\": [],\n              \"endpoint\": {\n                \"url\": \"https://example.amazonaws.com\"\n",
                    "rendered": {
                      "text": "            },\n            {\n              \"type\": \"endpoint\",\n              \"documentation\": \"the single service global endpoint\",\n              \"conditions\": [],\n              \"endpoint\": {\n                \"url\": \"https://example.amazonaws.com\"\n",
                      "markdown": "`            },\n            {\n              \"type\": \"endpoint\",\n              \"documentation\": \"the single service global endpoint\",\n              \"conditions\": [],\n              \"endpoint\": {\n                \"url\": \"https://example.amazonaws.com\"\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 1138,
                  "startColumn": 48,
                  "endLine": 1138,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        Aws::Crt::MakeShared<Aws::Crt::Io::ClientBootstrap>(allocator, *m_eventLoopGroup, *m_hostResolver, allocator);\n\n    Aws::Crt::Auth::CredentialsProviderX509Config providerConfig;\n    providerConfig.Bootstrap = m_clientBootstrap.get();\n    providerConfig.Endpoint = aws_string_c_str(x509Endpoint);\n    providerConfig.RoleAlias = aws_string_c_str(x509RoleAlias);\n    providerConfig.ThingName = aws_string_c_str(x509ThingName);\n",
                    "rendered": {
                      "text": "        Aws::Crt::MakeShared<Aws::Crt::Io::ClientBootstrap>(allocator, *m_eventLoopGroup, *m_hostResolver, allocator);\n\n    Aws::Crt::Auth::CredentialsProviderX509Config providerConfig;\n    providerConfig.Bootstrap = m_clientBootstrap.get();\n    providerConfig.Endpoint = aws_string_c_str(x509Endpoint);\n    providerConfig.RoleAlias = aws_string_c_str(x509RoleAlias);\n    providerConfig.ThingName = aws_string_c_str(x509ThingName);\n",
                      "markdown": "`        Aws::Crt::MakeShared<Aws::Crt::Io::ClientBootstrap>(allocator, *m_eventLoopGroup, *m_hostResolver, allocator);\n\n    Aws::Crt::Auth::CredentialsProviderX509Config providerConfig;\n    providerConfig.Bootstrap = m_clientBootstrap.get();\n    providerConfig.Endpoint = aws_string_c_str(x509Endpoint);\n    providerConfig.RoleAlias = aws_string_c_str(x509RoleAlias);\n    providerConfig.ThingName = aws_string_c_str(x509ThingName);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 32,
                  "endLine": 157,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise->get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise->get_future().get();\n    return AWS_OP_SUCCESS;\n}\n\n",
                    "rendered": {
                      "text": "    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise->get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise->get_future().get();\n    return AWS_OP_SUCCESS;\n}\n\n",
                      "markdown": "`    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise->get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise->get_future().get();\n    return AWS_OP_SUCCESS;\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 47,
                  "endLine": 155,
                  "endColumn": 52,
                  "snippet": {
                    "text": "{\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise->get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise->get_future().get();\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "{\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise->get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise->get_future().get();\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`{\n    ASSERT_TRUE(mqtt5Client);\n    ASSERT_TRUE(mqtt5Client->Start());\n    ASSERT_TRUE(connectionPromise->get_future().get());\n    ASSERT_TRUE(mqtt5Client->Stop());\n    stoppedPromise->get_future().get();\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 30,
                  "endLine": 798,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    delete builder;\n    aws_string_destroy(endpoint);\n    aws_string_destroy(pkcs12_key);\n    aws_string_destroy(pkcs12_password);\n    aws_string_destroy(codebuild_buildID);\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    delete builder;\n    aws_string_destroy(endpoint);\n    aws_string_destroy(pkcs12_key);\n    aws_string_destroy(pkcs12_password);\n    aws_string_destroy(codebuild_buildID);\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    delete builder;\n    aws_string_destroy(endpoint);\n    aws_string_destroy(pkcs12_key);\n    aws_string_destroy(pkcs12_password);\n    aws_string_destroy(codebuild_buildID);\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 779,
                  "startColumn": 64,
                  "endLine": 779,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n    Aws::Iot::Pkcs12Options testPkcs12Options;\n    testPkcs12Options.pkcs12_file = aws_string_c_str(pkcs12_key);\n    testPkcs12Options.pkcs12_password = aws_string_c_str(pkcs12_password);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsPkcs12(\n        aws_string_c_str(endpoint), testPkcs12Options, allocator);\n",
                    "rendered": {
                      "text": "\n    Aws::Iot::Pkcs12Options testPkcs12Options;\n    testPkcs12Options.pkcs12_file = aws_string_c_str(pkcs12_key);\n    testPkcs12Options.pkcs12_password = aws_string_c_str(pkcs12_password);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsPkcs12(\n        aws_string_c_str(endpoint), testPkcs12Options, allocator);\n",
                      "markdown": "`\n    Aws::Iot::Pkcs12Options testPkcs12Options;\n    testPkcs12Options.pkcs12_file = aws_string_c_str(pkcs12_key);\n    testPkcs12Options.pkcs12_password = aws_string_c_str(pkcs12_password);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsPkcs12(\n        aws_string_c_str(endpoint), testPkcs12Options, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 779,
                  "startColumn": 29,
                  "endLine": 779,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n    Aws::Iot::Pkcs12Options testPkcs12Options;\n    testPkcs12Options.pkcs12_file = aws_string_c_str(pkcs12_key);\n    testPkcs12Options.pkcs12_password = aws_string_c_str(pkcs12_password);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsPkcs12(\n        aws_string_c_str(endpoint), testPkcs12Options, allocator);\n",
                    "rendered": {
                      "text": "\n    Aws::Iot::Pkcs12Options testPkcs12Options;\n    testPkcs12Options.pkcs12_file = aws_string_c_str(pkcs12_key);\n    testPkcs12Options.pkcs12_password = aws_string_c_str(pkcs12_password);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsPkcs12(\n        aws_string_c_str(endpoint), testPkcs12Options, allocator);\n",
                      "markdown": "`\n    Aws::Iot::Pkcs12Options testPkcs12Options;\n    testPkcs12Options.pkcs12_file = aws_string_c_str(pkcs12_key);\n    testPkcs12Options.pkcs12_password = aws_string_c_str(pkcs12_password);\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsPkcs12(\n        aws_string_c_str(endpoint), testPkcs12Options, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 762,
                  "startColumn": 34,
                  "endLine": 762,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        printf(\"Environment Variables are not set for the test, skip the test\");\n        aws_string_destroy(endpoint);\n        aws_string_destroy(pkcs12_key);\n        aws_string_destroy(pkcs12_password);\n\n        // If in Codebuild, return as a 'success' even though it is a skip\n        if (codebuild_buildID && aws_string_is_valid(codebuild_buildID))\n",
                    "rendered": {
                      "text": "        printf(\"Environment Variables are not set for the test, skip the test\");\n        aws_string_destroy(endpoint);\n        aws_string_destroy(pkcs12_key);\n        aws_string_destroy(pkcs12_password);\n\n        // If in Codebuild, return as a 'success' even though it is a skip\n        if (codebuild_buildID && aws_string_is_valid(codebuild_buildID))\n",
                      "markdown": "`        printf(\"Environment Variables are not set for the test, skip the test\");\n        aws_string_destroy(endpoint);\n        aws_string_destroy(pkcs12_key);\n        aws_string_destroy(pkcs12_password);\n\n        // If in Codebuild, return as a 'success' even though it is a skip\n        if (codebuild_buildID && aws_string_is_valid(codebuild_buildID))\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 755,
                  "startColumn": 95,
                  "endLine": 755,
                  "endColumn": 103,
                  "snippet": {
                    "text": "\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt5_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt5_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt5_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 755,
                  "startColumn": 77,
                  "endLine": 755,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt5_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt5_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt5_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 30,
                  "endLine": 750,
                  "endColumn": 38,
                  "snippet": {
                    "text": "{\n    struct aws_string *endpoint = NULL;\n    struct aws_string *pkcs12_key = NULL;\n    struct aws_string *pkcs12_password = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n",
                    "rendered": {
                      "text": "{\n    struct aws_string *endpoint = NULL;\n    struct aws_string *pkcs12_key = NULL;\n    struct aws_string *pkcs12_password = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n",
                      "markdown": "`{\n    struct aws_string *endpoint = NULL;\n    struct aws_string *pkcs12_key = NULL;\n    struct aws_string *pkcs12_password = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 736,
                  "startColumn": 30,
                  "endLine": 736,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    aws_string_destroy(pkcs11_cert);\n    aws_string_destroy(pkcs11_userPin);\n    aws_string_destroy(pkcs11_tokenLabel);\n    aws_string_destroy(pkcs11_privateKeyLabel);\n    aws_string_destroy(pkcs11_ca);\n    aws_string_destroy(pkcs11_use_openssl);\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    aws_string_destroy(pkcs11_cert);\n    aws_string_destroy(pkcs11_userPin);\n    aws_string_destroy(pkcs11_tokenLabel);\n    aws_string_destroy(pkcs11_privateKeyLabel);\n    aws_string_destroy(pkcs11_ca);\n    aws_string_destroy(pkcs11_use_openssl);\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    aws_string_destroy(pkcs11_cert);\n    aws_string_destroy(pkcs11_userPin);\n    aws_string_destroy(pkcs11_tokenLabel);\n    aws_string_destroy(pkcs11_privateKeyLabel);\n    aws_string_destroy(pkcs11_ca);\n    aws_string_destroy(pkcs11_use_openssl);\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 711,
                  "startColumn": 67,
                  "endLine": 711,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    pkcs11Options.SetCertificateFilePath(aws_string_c_str(pkcs11_cert));\n    pkcs11Options.SetUserPin(aws_string_c_str(pkcs11_userPin));\n    pkcs11Options.SetTokenLabel(aws_string_c_str(pkcs11_tokenLabel));\n    pkcs11Options.SetPrivateKeyObjectLabel(aws_string_c_str(pkcs11_privateKeyLabel));\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsPkcs11(\n        aws_string_c_str(endpoint), pkcs11Options, allocator);\n",
                    "rendered": {
                      "text": "    pkcs11Options.SetCertificateFilePath(aws_string_c_str(pkcs11_cert));\n    pkcs11Options.SetUserPin(aws_string_c_str(pkcs11_userPin));\n    pkcs11Options.SetTokenLabel(aws_string_c_str(pkcs11_tokenLabel));\n    pkcs11Options.SetPrivateKeyObjectLabel(aws_string_c_str(pkcs11_privateKeyLabel));\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsPkcs11(\n        aws_string_c_str(endpoint), pkcs11Options, allocator);\n",
                      "markdown": "`    pkcs11Options.SetCertificateFilePath(aws_string_c_str(pkcs11_cert));\n    pkcs11Options.SetUserPin(aws_string_c_str(pkcs11_userPin));\n    pkcs11Options.SetTokenLabel(aws_string_c_str(pkcs11_tokenLabel));\n    pkcs11Options.SetPrivateKeyObjectLabel(aws_string_c_str(pkcs11_privateKeyLabel));\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsPkcs11(\n        aws_string_c_str(endpoint), pkcs11Options, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 711,
                  "startColumn": 21,
                  "endLine": 711,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    pkcs11Options.SetCertificateFilePath(aws_string_c_str(pkcs11_cert));\n    pkcs11Options.SetUserPin(aws_string_c_str(pkcs11_userPin));\n    pkcs11Options.SetTokenLabel(aws_string_c_str(pkcs11_tokenLabel));\n    pkcs11Options.SetPrivateKeyObjectLabel(aws_string_c_str(pkcs11_privateKeyLabel));\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsPkcs11(\n        aws_string_c_str(endpoint), pkcs11Options, allocator);\n",
                    "rendered": {
                      "text": "    pkcs11Options.SetCertificateFilePath(aws_string_c_str(pkcs11_cert));\n    pkcs11Options.SetUserPin(aws_string_c_str(pkcs11_userPin));\n    pkcs11Options.SetTokenLabel(aws_string_c_str(pkcs11_tokenLabel));\n    pkcs11Options.SetPrivateKeyObjectLabel(aws_string_c_str(pkcs11_privateKeyLabel));\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsPkcs11(\n        aws_string_c_str(endpoint), pkcs11Options, allocator);\n",
                      "markdown": "`    pkcs11Options.SetCertificateFilePath(aws_string_c_str(pkcs11_cert));\n    pkcs11Options.SetUserPin(aws_string_c_str(pkcs11_userPin));\n    pkcs11Options.SetTokenLabel(aws_string_c_str(pkcs11_tokenLabel));\n    pkcs11Options.SetPrivateKeyObjectLabel(aws_string_c_str(pkcs11_privateKeyLabel));\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithMtlsPkcs11(\n        aws_string_c_str(endpoint), pkcs11Options, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 692,
                  "startColumn": 34,
                  "endLine": 692,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        aws_string_destroy(pkcs11_cert);\n        aws_string_destroy(pkcs11_userPin);\n        aws_string_destroy(pkcs11_tokenLabel);\n        aws_string_destroy(pkcs11_privateKeyLabel);\n        aws_string_destroy(pkcs11_ca);\n        aws_string_destroy(pkcs11_use_openssl);\n        return AWS_OP_SKIP;\n",
                    "rendered": {
                      "text": "        aws_string_destroy(pkcs11_cert);\n        aws_string_destroy(pkcs11_userPin);\n        aws_string_destroy(pkcs11_tokenLabel);\n        aws_string_destroy(pkcs11_privateKeyLabel);\n        aws_string_destroy(pkcs11_ca);\n        aws_string_destroy(pkcs11_use_openssl);\n        return AWS_OP_SKIP;\n",
                      "markdown": "`        aws_string_destroy(pkcs11_cert);\n        aws_string_destroy(pkcs11_userPin);\n        aws_string_destroy(pkcs11_tokenLabel);\n        aws_string_destroy(pkcs11_privateKeyLabel);\n        aws_string_destroy(pkcs11_ca);\n        aws_string_destroy(pkcs11_use_openssl);\n        return AWS_OP_SKIP;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 680,
                  "startColumn": 100,
                  "endLine": 680,
                  "endColumn": 110,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_cert, &pkcs11_cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_token_label, &pkcs11_tokenLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_private_key_label, &pkcs11_privateKeyLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_ca, &pkcs11_ca);\n    s_GetEnvVariable(allocator, s_test_envName_iot_pkcs11_use_openssl, &pkcs11_use_openssl);\n\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_cert, &pkcs11_cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_token_label, &pkcs11_tokenLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_private_key_label, &pkcs11_privateKeyLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_ca, &pkcs11_ca);\n    s_GetEnvVariable(allocator, s_test_envName_iot_pkcs11_use_openssl, &pkcs11_use_openssl);\n\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_cert, &pkcs11_cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_token_label, &pkcs11_tokenLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_private_key_label, &pkcs11_privateKeyLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_ca, &pkcs11_ca);\n    s_GetEnvVariable(allocator, s_test_envName_iot_pkcs11_use_openssl, &pkcs11_use_openssl);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 680,
                  "startColumn": 73,
                  "endLine": 680,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_cert, &pkcs11_cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_token_label, &pkcs11_tokenLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_private_key_label, &pkcs11_privateKeyLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_ca, &pkcs11_ca);\n    s_GetEnvVariable(allocator, s_test_envName_iot_pkcs11_use_openssl, &pkcs11_use_openssl);\n\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_cert, &pkcs11_cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_token_label, &pkcs11_tokenLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_private_key_label, &pkcs11_privateKeyLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_ca, &pkcs11_ca);\n    s_GetEnvVariable(allocator, s_test_envName_iot_pkcs11_use_openssl, &pkcs11_use_openssl);\n\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_cert, &pkcs11_cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_token_label, &pkcs11_tokenLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_private_key_label, &pkcs11_privateKeyLabel);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_ca, &pkcs11_ca);\n    s_GetEnvVariable(allocator, s_test_envName_iot_pkcs11_use_openssl, &pkcs11_use_openssl);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 671,
                  "startColumn": 30,
                  "endLine": 671,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    struct aws_string *pkcs11_cert = NULL;\n    struct aws_string *pkcs11_userPin = NULL;\n    struct aws_string *pkcs11_tokenLabel = NULL;\n    struct aws_string *pkcs11_privateKeyLabel = NULL;\n    struct aws_string *pkcs11_ca = NULL;\n    struct aws_string *pkcs11_use_openssl = NULL;\n\n",
                    "rendered": {
                      "text": "    struct aws_string *pkcs11_cert = NULL;\n    struct aws_string *pkcs11_userPin = NULL;\n    struct aws_string *pkcs11_tokenLabel = NULL;\n    struct aws_string *pkcs11_privateKeyLabel = NULL;\n    struct aws_string *pkcs11_ca = NULL;\n    struct aws_string *pkcs11_use_openssl = NULL;\n\n",
                      "markdown": "`    struct aws_string *pkcs11_cert = NULL;\n    struct aws_string *pkcs11_userPin = NULL;\n    struct aws_string *pkcs11_tokenLabel = NULL;\n    struct aws_string *pkcs11_privateKeyLabel = NULL;\n    struct aws_string *pkcs11_ca = NULL;\n    struct aws_string *pkcs11_use_openssl = NULL;\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 23,
                  "endLine": 649,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    aws_string_destroy(region);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n    aws_string_destroy(unencodedSignature);\n",
                    "rendered": {
                      "text": "    aws_string_destroy(region);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n    aws_string_destroy(unencodedSignature);\n",
                      "markdown": "`    aws_string_destroy(region);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n    aws_string_destroy(unencodedSignature);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 625,
                  "startColumn": 66,
                  "endLine": 625,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(unencodedSignature));\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(unencodedSignature));\n",
                      "markdown": "`    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(unencodedSignature));\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 625,
                  "startColumn": 19,
                  "endLine": 625,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(unencodedSignature));\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(unencodedSignature));\n",
                      "markdown": "`    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(unencodedSignature));\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 613,
                  "startColumn": 27,
                  "endLine": 613,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        aws_string_destroy(region);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(unencodedSignature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n",
                    "rendered": {
                      "text": "        aws_string_destroy(region);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(unencodedSignature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n",
                      "markdown": "`        aws_string_destroy(region);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(unencodedSignature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 605,
                  "startColumn": 78,
                  "endLine": 605,
                  "endColumn": 88,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                      "markdown": "`    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 78,
                  "endLine": 604,
                  "endColumn": 88,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 603,
                  "startColumn": 56,
                  "endLine": 603,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 601,
                  "startColumn": 94,
                  "endLine": 601,
                  "endColumn": 102,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 601,
                  "startColumn": 83,
                  "endLine": 601,
                  "endColumn": 91,
                  "snippet": {
                    "text": " &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocat",
                    "rendered": {
                      "text": " &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocat",
                      "markdown": "` &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocat`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 592,
                  "startColumn": 23,
                  "endLine": 592,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    struct aws_string *region = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *unencodedSignature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n",
                    "rendered": {
                      "text": "    struct aws_string *region = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *unencodedSignature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n",
                      "markdown": "`    struct aws_string *region = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *unencodedSignature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 573,
                  "startColumn": 23,
                  "endLine": 573,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    aws_string_destroy(region);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n    aws_string_destroy(signature);\n",
                    "rendered": {
                      "text": "    aws_string_destroy(region);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n    aws_string_destroy(signature);\n",
                      "markdown": "`    aws_string_destroy(region);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n    aws_string_destroy(signature);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 549,
                  "startColumn": 66,
                  "endLine": 549,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(signature));\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(signature));\n",
                      "markdown": "`    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(signature));\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 549,
                  "startColumn": 19,
                  "endLine": 549,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(signature));\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(signature));\n",
                      "markdown": "`    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(signature));\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 537,
                  "startColumn": 27,
                  "endLine": 537,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        aws_string_destroy(region);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(signature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n",
                    "rendered": {
                      "text": "        aws_string_destroy(region);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(signature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n",
                      "markdown": "`        aws_string_destroy(region);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(signature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 78,
                  "endLine": 529,
                  "endColumn": 88,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 78,
                  "endLine": 528,
                  "endColumn": 88,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 527,
                  "startColumn": 78,
                  "endLine": 527,
                  "endColumn": 88,
                  "snippet": {
                    "text": "&authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Env",
                    "rendered": {
                      "text": "&authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Env",
                      "markdown": "`&authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Env`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 526,
                  "startColumn": 94,
                  "endLine": 526,
                  "endColumn": 102,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custo",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custo",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custo`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 526,
                  "startColumn": 83,
                  "endLine": 526,
                  "endColumn": 91,
                  "snippet": {
                    "text": " &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot",
                    "rendered": {
                      "text": " &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot",
                      "markdown": "` &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 23,
                  "endLine": 517,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    struct aws_string *region = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *signature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n",
                    "rendered": {
                      "text": "    struct aws_string *region = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *signature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n",
                      "markdown": "`    struct aws_string *region = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *signature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 501,
                  "startColumn": 23,
                  "endLine": 501,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    aws_string_destroy(region);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    aws_string_destroy(region);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    aws_string_destroy(region);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 66,
                  "endLine": 480,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n\n    Aws::Iot::WebsocketConfig websocketConfig(aws_string_c_str(region));\n\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n\n    Aws::Iot::WebsocketConfig websocketConfig(aws_string_c_str(region));\n\n",
                      "markdown": "`    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n\n    Aws::Iot::WebsocketConfig websocketConfig(aws_string_c_str(region));\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 19,
                  "endLine": 480,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n\n    Aws::Iot::WebsocketConfig websocketConfig(aws_string_c_str(region));\n\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n\n    Aws::Iot::WebsocketConfig websocketConfig(aws_string_c_str(region));\n\n",
                      "markdown": "`    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n\n    Aws::Iot::WebsocketConfig websocketConfig(aws_string_c_str(region));\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 27,
                  "endLine": 471,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        aws_string_destroy(region);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        return AWS_OP_SKIP;\n    }\n\n",
                    "rendered": {
                      "text": "        aws_string_destroy(region);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        return AWS_OP_SKIP;\n    }\n\n",
                      "markdown": "`        aws_string_destroy(region);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        return AWS_OP_SKIP;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 96,
                  "endLine": 463,
                  "endColumn": 104,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 85,
                  "endLine": 463,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 457,
                  "startColumn": 23,
                  "endLine": 457,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    struct aws_string *region = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n",
                    "rendered": {
                      "text": "    struct aws_string *region = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n",
                      "markdown": "`    struct aws_string *region = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 23,
                  "endLine": 441,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n\n    delete builder;\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 66,
                  "endLine": 424,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithCustomAuthorizer(\n        aws_string_c_str(endpoint), authConfig, allocator);\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithCustomAuthorizer(\n        aws_string_c_str(endpoint), authConfig, allocator);\n",
                      "markdown": "`    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithCustomAuthorizer(\n        aws_string_c_str(endpoint), authConfig, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 19,
                  "endLine": 424,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithCustomAuthorizer(\n        aws_string_c_str(endpoint), authConfig, allocator);\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithCustomAuthorizer(\n        aws_string_c_str(endpoint), authConfig, allocator);\n",
                      "markdown": "`    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n\n    Aws::Iot::Mqtt5ClientBuilder *builder = Aws::Iot::Mqtt5ClientBuilder::NewMqtt5ClientBuilderWithCustomAuthorizer(\n        aws_string_c_str(endpoint), authConfig, allocator);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 27,
                  "endLine": 415,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        return AWS_OP_SKIP;\n    }\n\n",
                    "rendered": {
                      "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        return AWS_OP_SKIP;\n    }\n\n",
                      "markdown": "`        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        return AWS_OP_SKIP;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 96,
                  "endLine": 408,
                  "endColumn": 104,
                  "snippet": {
                    "text": "    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                    "rendered": {
                      "text": "    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                      "markdown": "`    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 85,
                  "endLine": 408,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                    "rendered": {
                      "text": "    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n",
                      "markdown": "`    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_password, &password);\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"Environment Variables are not set for the test, skip the test\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 23,
                  "endLine": 403,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n",
                    "rendered": {
                      "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n",
                      "markdown": "`    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 23,
                  "endLine": 385,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(unencodedSignature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n",
                    "rendered": {
                      "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(unencodedSignature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n",
                      "markdown": "`    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(unencodedSignature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 66,
                  "endLine": 364,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(unencodedSignature));\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(unencodedSignature));\n",
                      "markdown": "`    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(unencodedSignature));\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 19,
                  "endLine": 364,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(unencodedSignature));\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(unencodedSignature));\n",
                      "markdown": "`    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(unencodedSignature));\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 27,
                  "endLine": 352,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(unencodedSignature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n",
                    "rendered": {
                      "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(unencodedSignature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n",
                      "markdown": "`        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(unencodedSignature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 78,
                  "endLine": 344,
                  "endColumn": 88,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 78,
                  "endLine": 343,
                  "endColumn": 88,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n    if (error != AWS_OP_SUCCESS)\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n    if (error != AWS_OP_SUCCESS)\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n    if (error != AWS_OP_SUCCESS)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 56,
                  "endLine": 342,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 94,
                  "endLine": 340,
                  "endColumn": 102,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 83,
                  "endLine": 340,
                  "endColumn": 91,
                  "snippet": {
                    "text": "endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocat",
                    "rendered": {
                      "text": "endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocat",
                      "markdown": "`endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocat`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 23,
                  "endLine": 332,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *unencodedSignature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n",
                    "rendered": {
                      "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *unencodedSignature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n",
                      "markdown": "`    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *unencodedSignature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 23,
                  "endLine": 314,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(signature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n",
                    "rendered": {
                      "text": "    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(signature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n",
                      "markdown": "`    aws_string_destroy(endpoint);\n    aws_string_destroy(authname);\n    aws_string_destroy(username);\n    aws_string_destroy(password);\n    aws_string_destroy(signature);\n    aws_string_destroy(tokenKeyName);\n    aws_string_destroy(tokenValue);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 66,
                  "endLine": 293,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(signature));\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(signature));\n",
                      "markdown": "`    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(signature));\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 19,
                  "endLine": 293,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(signature));\n",
                    "rendered": {
                      "text": "    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(signature));\n",
                      "markdown": "`    Aws::Iot::Mqtt5CustomAuthConfig authConfig(allocator);\n    authConfig.WithAuthorizerName(aws_string_c_str(authname));\n    authConfig.WithUsername(aws_string_c_str(username));\n    authConfig.WithPassword(ByteCursorFromString(aws_string_c_str(password)));\n    authConfig.WithTokenKeyName(aws_string_c_str(tokenKeyName));\n    authConfig.WithTokenValue(aws_string_c_str(tokenValue));\n    authConfig.WithTokenSignature(aws_string_c_str(signature));\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 27,
                  "endLine": 281,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(signature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n",
                    "rendered": {
                      "text": "        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(signature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n",
                      "markdown": "`        aws_string_destroy(endpoint);\n        aws_string_destroy(authname);\n        aws_string_destroy(username);\n        aws_string_destroy(password);\n        aws_string_destroy(signature);\n        aws_string_destroy(tokenKeyName);\n        aws_string_destroy(tokenValue);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 78,
                  "endLine": 273,
                  "endColumn": 88,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 78,
                  "endLine": 272,
                  "endColumn": 88,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n    if (error != AWS_OP_SUCCESS)\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n    if (error != AWS_OP_SUCCESS)\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n    if (error != AWS_OP_SUCCESS)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 78,
                  "endLine": 271,
                  "endColumn": 88,
                  "snippet": {
                    "text": "&authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"En",
                    "rendered": {
                      "text": "&authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"En",
                      "markdown": "`&authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n    if (error != AWS_OP_SUCCESS)\n    {\n        printf(\"En`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 94,
                  "endLine": 270,
                  "endColumn": 102,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custo",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custo",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custo`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 83,
                  "endLine": 270,
                  "endColumn": 91,
                  "snippet": {
                    "text": "endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot",
                    "rendered": {
                      "text": "endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot",
                      "markdown": "`endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature, &signature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 23,
                  "endLine": 262,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *signature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n",
                    "rendered": {
                      "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *signature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n",
                      "markdown": "`    struct aws_string *endpoint = NULL;\n    struct aws_string *authname = NULL;\n    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n    struct aws_string *signature = NULL;\n    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 40,
                  "endLine": 72,
                  "endColumn": 48,
                  "snippet": {
                    "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs12_key, \"AWS_TEST_MQTT5_IOT_CORE_PKCS12_KEY\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_pkcs12_key_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_PKCS12_KEY_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_windows_cert, \"AWS_TEST_MQTT5_IOT_CORE_WINDOWS_CERT_STORE\");\n\n",
                    "rendered": {
                      "text": "AWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs12_key, \"AWS_TEST_MQTT5_IOT_CORE_PKCS12_KEY\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_pkcs12_key_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_PKCS12_KEY_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_windows_cert, \"AWS_TEST_MQTT5_IOT_CORE_WINDOWS_CERT_STORE\");\n\n",
                      "markdown": "`AWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs12_key, \"AWS_TEST_MQTT5_IOT_CORE_PKCS12_KEY\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_pkcs12_key_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_PKCS12_KEY_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_windows_cert, \"AWS_TEST_MQTT5_IOT_CORE_WINDOWS_CERT_STORE\");\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 40,
                  "endLine": 71,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs12_key, \"AWS_TEST_MQTT5_IOT_CORE_PKCS12_KEY\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_pkcs12_key_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_PKCS12_KEY_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_windows_cert, \"AWS_TEST_MQTT5_IOT_CORE_WINDOWS_CERT_STORE\");\n",
                    "rendered": {
                      "text": "\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs12_key, \"AWS_TEST_MQTT5_IOT_CORE_PKCS12_KEY\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_pkcs12_key_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_PKCS12_KEY_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_windows_cert, \"AWS_TEST_MQTT5_IOT_CORE_WINDOWS_CERT_STORE\");\n",
                      "markdown": "`\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs12_key, \"AWS_TEST_MQTT5_IOT_CORE_PKCS12_KEY\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_pkcs12_key_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_PKCS12_KEY_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_windows_cert, \"AWS_TEST_MQTT5_IOT_CORE_WINDOWS_CERT_STORE\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 63,
                  "endLine": 63,
                  "endColumn": 74,
                  "snippet": {
                    "text": "_pkcs11_lib, \"AWS_TEST_PKCS11_LIB\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_token_label, \"AWS_TEST_PKCS11_TOKEN_LABEL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_pin, \"AWS_TEST_PKCS11_PIN\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_private_key_label, \"AWS_TEST_PKCS11_PKEY_LABEL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_cert, \"AWS_TEST_PKCS11_CERT_FILE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_ca, \"AWS_TEST_PKCS11_CA_FILE\");\n// C++ specific PKCS11 check: only runs PKCS11 if 'DUSE_OPENSSL=ON'",
                    "rendered": {
                      "text": "_pkcs11_lib, \"AWS_TEST_PKCS11_LIB\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_token_label, \"AWS_TEST_PKCS11_TOKEN_LABEL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_pin, \"AWS_TEST_PKCS11_PIN\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_private_key_label, \"AWS_TEST_PKCS11_PKEY_LABEL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_cert, \"AWS_TEST_PKCS11_CERT_FILE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_ca, \"AWS_TEST_PKCS11_CA_FILE\");\n// C++ specific PKCS11 check: only runs PKCS11 if 'DUSE_OPENSSL=ON'",
                      "markdown": "`_pkcs11_lib, \"AWS_TEST_PKCS11_LIB\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_token_label, \"AWS_TEST_PKCS11_TOKEN_LABEL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_pin, \"AWS_TEST_PKCS11_PIN\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_private_key_label, \"AWS_TEST_PKCS11_PKEY_LABEL\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_cert, \"AWS_TEST_PKCS11_CERT_FILE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_ca, \"AWS_TEST_PKCS11_CA_FILE\");\n// C++ specific PKCS11 check: only runs PKCS11 if 'DUSE_OPENSSL=ON'`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 41,
                  "endLine": 57,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE_UNENCODED\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_lib, \"AWS_TEST_PKCS11_LIB\");\n",
                    "rendered": {
                      "text": "    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE_UNENCODED\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_lib, \"AWS_TEST_PKCS11_LIB\");\n",
                      "markdown": "`    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE_UNENCODED\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_lib, \"AWS_TEST_PKCS11_LIB\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 41,
                  "endLine": 54,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_KEY_NAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n",
                    "rendered": {
                      "text": "    s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_KEY_NAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n",
                      "markdown": "`    s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_KEY_NAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 41,
                  "endLine": 51,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_KEY_NAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature,\n",
                    "rendered": {
                      "text": "    s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_KEY_NAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature,\n",
                      "markdown": "`    s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_KEY_NAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 41,
                  "endLine": 48,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    s_mqtt5_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey,\n",
                    "rendered": {
                      "text": "    s_mqtt5_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey,\n",
                      "markdown": "`    s_mqtt5_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 48,
                  "endLine": 46,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\n",
                    "rendered": {
                      "text": "    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\n",
                      "markdown": "`    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 46,
                  "endLine": 45,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    s_mqtt5_test_envName_iot_sign_custom_auth_username,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue,\n",
                    "rendered": {
                      "text": "    s_mqtt5_test_envName_iot_sign_custom_auth_username,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue,\n",
                      "markdown": "`    s_mqtt5_test_envName_iot_sign_custom_auth_username,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_PASSWORD\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 51,
                  "endLine": 36,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    \"AWS_TEST_MQTT5_IOT_CORE_NO_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_nosign_custom_auth_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_NO_SIGNING_AUTHORIZER_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_name,\n",
                    "rendered": {
                      "text": "    \"AWS_TEST_MQTT5_IOT_CORE_NO_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_nosign_custom_auth_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_NO_SIGNING_AUTHORIZER_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_name,\n",
                      "markdown": "`    \"AWS_TEST_MQTT5_IOT_CORE_NO_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_nosign_custom_auth_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_NO_SIGNING_AUTHORIZER_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_name,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 48,
                  "endLine": 35,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    s_mqtt5_test_envName_iot_nosign_custom_auth_username,\n    \"AWS_TEST_MQTT5_IOT_CORE_NO_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_nosign_custom_auth_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_NO_SIGNING_AUTHORIZER_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n",
                    "rendered": {
                      "text": "    s_mqtt5_test_envName_iot_nosign_custom_auth_username,\n    \"AWS_TEST_MQTT5_IOT_CORE_NO_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_nosign_custom_auth_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_NO_SIGNING_AUTHORIZER_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n",
                      "markdown": "`    s_mqtt5_test_envName_iot_nosign_custom_auth_username,\n    \"AWS_TEST_MQTT5_IOT_CORE_NO_SIGNING_AUTHORIZER_USERNAME\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_nosign_custom_auth_password,\n    \"AWS_TEST_MQTT5_IOT_CORE_NO_SIGNING_AUTHORIZER_PASSWORD\");\n\nAWS_STATIC_STRING_FROM_LITERAL(\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 603,
                  "startColumn": 32,
                  "endLine": 603,
                  "endColumn": 81,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n    if (error != AWS_OP_SUCCESS)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 32,
                  "endLine": 342,
                  "endColumn": 81,
                  "snippet": {
                    "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n",
                    "rendered": {
                      "text": "    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n",
                      "markdown": "`    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n    error |= s_GetEnvVariable(\n        allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded, &unencodedSignature);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenkey, &tokenKeyName);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_tokenvalue, &tokenValue);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 17,
                  "endLine": 57,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE_UNENCODED\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_lib, \"AWS_TEST_PKCS11_LIB\");\n",
                    "rendered": {
                      "text": "    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE_UNENCODED\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_lib, \"AWS_TEST_PKCS11_LIB\");\n",
                      "markdown": "`    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_mqtt5_test_envName_iot_sign_custom_auth_tokensignature_unencoded,\n    \"AWS_TEST_MQTT5_IOT_CORE_SIGNING_AUTHORIZER_TOKEN_SIGNATURE_UNENCODED\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_pkcs11_lib, \"AWS_TEST_PKCS11_LIB\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 1106,
                  "startColumn": 69,
                  "endLine": 1106,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    struct aws_string *x509KeyPath = NULL;\n    struct aws_string *x509RootCAPath = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_x509_endpoint, &x509Endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_x509_role_alias, &x509RoleAlias);\n",
                    "rendered": {
                      "text": "    struct aws_string *x509KeyPath = NULL;\n    struct aws_string *x509RootCAPath = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_x509_endpoint, &x509Endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_x509_role_alias, &x509RoleAlias);\n",
                      "markdown": "`    struct aws_string *x509KeyPath = NULL;\n    struct aws_string *x509RootCAPath = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_x509_endpoint, &x509Endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_x509_role_alias, &x509RoleAlias);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 1045,
                  "startColumn": 69,
                  "endLine": 1045,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    struct aws_string *secretAccessKey = NULL;\n    struct aws_string *sessionToken = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt_cred_access_key, &accessKey);\n    error |= s_GetEnvVariable(allocator, s_mqtt_cred_secret_access_key, &secretAccessKey);\n",
                    "rendered": {
                      "text": "    struct aws_string *secretAccessKey = NULL;\n    struct aws_string *sessionToken = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt_cred_access_key, &accessKey);\n    error |= s_GetEnvVariable(allocator, s_mqtt_cred_secret_access_key, &secretAccessKey);\n",
                      "markdown": "`    struct aws_string *secretAccessKey = NULL;\n    struct aws_string *sessionToken = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt_cred_access_key, &accessKey);\n    error |= s_GetEnvVariable(allocator, s_mqtt_cred_secret_access_key, &secretAccessKey);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 987,
                  "startColumn": 69,
                  "endLine": 987,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    struct aws_string *profileCredentials = NULL;\n    struct aws_string *profileConfig = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_profile_credentials, &profileCredentials);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_profile_config, &profileConfig);\n",
                    "rendered": {
                      "text": "    struct aws_string *profileCredentials = NULL;\n    struct aws_string *profileConfig = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_profile_credentials, &profileCredentials);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_profile_config, &profileConfig);\n",
                      "markdown": "`    struct aws_string *profileCredentials = NULL;\n    struct aws_string *profileConfig = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_profile_credentials, &profileCredentials);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_profile_config, &profileConfig);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 928,
                  "startColumn": 69,
                  "endLine": 928,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    struct aws_string *cognitoEndpoint = NULL;\n    struct aws_string *cognitoIdentity = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_cognito_endpoint, &cognitoEndpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_cognito_identity, &cognitoIdentity);\n",
                    "rendered": {
                      "text": "    struct aws_string *cognitoEndpoint = NULL;\n    struct aws_string *cognitoIdentity = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_cognito_endpoint, &cognitoEndpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_cognito_identity, &cognitoIdentity);\n",
                      "markdown": "`    struct aws_string *cognitoEndpoint = NULL;\n    struct aws_string *cognitoIdentity = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_cognito_endpoint, &cognitoEndpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_cognito_identity, &cognitoIdentity);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 868,
                  "startColumn": 69,
                  "endLine": 868,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    struct aws_string *secretAccessKey = NULL;\n    struct aws_string *sessionToken = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_credential_access_key, &accessKeyId);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_credential_secret_access_key, &secretAccessKey);\n",
                    "rendered": {
                      "text": "    struct aws_string *secretAccessKey = NULL;\n    struct aws_string *sessionToken = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_credential_access_key, &accessKeyId);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_credential_secret_access_key, &secretAccessKey);\n",
                      "markdown": "`    struct aws_string *secretAccessKey = NULL;\n    struct aws_string *sessionToken = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_credential_access_key, &accessKeyId);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_credential_secret_access_key, &secretAccessKey);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 813,
                  "startColumn": 69,
                  "endLine": 813,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    struct aws_string *windows_cert = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_windows_cert, &windows_cert);\n    s_GetEnvVariable(allocator, s_mqtt5_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n",
                    "rendered": {
                      "text": "    struct aws_string *windows_cert = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_windows_cert, &windows_cert);\n    s_GetEnvVariable(allocator, s_mqtt5_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n",
                      "markdown": "`    struct aws_string *windows_cert = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_windows_cert, &windows_cert);\n    s_GetEnvVariable(allocator, s_mqtt5_test_envName_codebuild, &codebuild_buildID);\n    if (error != AWS_OP_SUCCESS)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 753,
                  "startColumn": 69,
                  "endLine": 753,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    struct aws_string *pkcs12_password = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt5_test_envName_codebuild, &codebuild_buildID);\n",
                    "rendered": {
                      "text": "    struct aws_string *pkcs12_password = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt5_test_envName_codebuild, &codebuild_buildID);\n",
                      "markdown": "`    struct aws_string *pkcs12_password = NULL;\n    struct aws_string *codebuild_buildID = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key, &pkcs12_key);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs12_key_password, &pkcs12_password);\n    s_GetEnvVariable(allocator, s_mqtt5_test_envName_codebuild, &codebuild_buildID);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 675,
                  "startColumn": 69,
                  "endLine": 675,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    struct aws_string *pkcs11_ca = NULL;\n    struct aws_string *pkcs11_use_openssl = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_lib, &pkcs11_lib);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_cert, &pkcs11_cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n",
                    "rendered": {
                      "text": "    struct aws_string *pkcs11_ca = NULL;\n    struct aws_string *pkcs11_use_openssl = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_lib, &pkcs11_lib);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_cert, &pkcs11_cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n",
                      "markdown": "`    struct aws_string *pkcs11_ca = NULL;\n    struct aws_string *pkcs11_use_openssl = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_lib, &pkcs11_lib);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_cert, &pkcs11_cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_pkcs11_pin, &pkcs11_userPin);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 597,
                  "startColumn": 69,
                  "endLine": 597,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n",
                    "rendered": {
                      "text": "    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n",
                      "markdown": "`    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 69,
                  "endLine": 522,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n",
                    "rendered": {
                      "text": "    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n",
                      "markdown": "`    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 69,
                  "endLine": 459,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n",
                    "rendered": {
                      "text": "    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n",
                      "markdown": "`    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 69,
                  "endLine": 405,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_password, &password);\n",
                    "rendered": {
                      "text": "    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_password, &password);\n",
                      "markdown": "`    struct aws_string *username = NULL;\n    struct aws_string *password = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_nosign_custom_auth_password, &password);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 69,
                  "endLine": 337,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n",
                    "rendered": {
                      "text": "    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n",
                      "markdown": "`    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 69,
                  "endLine": 267,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n",
                    "rendered": {
                      "text": "    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n",
                      "markdown": "`    struct aws_string *tokenKeyName = NULL;\n    struct aws_string *tokenValue = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_name, &authname);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_username, &username);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_sign_custom_auth_password, &password);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 69,
                  "endLine": 214,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *region = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                    "rendered": {
                      "text": "    struct aws_string *endpoint = NULL;\n    struct aws_string *region = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    if (error != AWS_OP_SUCCESS)\n    {\n",
                      "markdown": "`    struct aws_string *endpoint = NULL;\n    struct aws_string *region = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_region, &region);\n    if (error != AWS_OP_SUCCESS)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 69,
                  "endLine": 170,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    struct aws_string *cert = NULL;\n    struct aws_string *key = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_rsa_cert, &cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_rsa_key, &key);\n    if (error != AWS_OP_SUCCESS)\n",
                    "rendered": {
                      "text": "    struct aws_string *cert = NULL;\n    struct aws_string *key = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_rsa_cert, &cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_rsa_key, &key);\n    if (error != AWS_OP_SUCCESS)\n",
                      "markdown": "`    struct aws_string *cert = NULL;\n    struct aws_string *key = NULL;\n\n    int error = s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_hostname, &endpoint);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_rsa_cert, &cert);\n    error |= s_GetEnvVariable(allocator, s_mqtt5_test_envName_iot_rsa_key, &key);\n    if (error != AWS_OP_SUCCESS)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Mqtt5ClientCredentialsTest.cpp"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 56,
                  "endLine": 22,
                  "endColumn": 64,
                  "snippet": {
                    "text": "using namespace Aws::Crt;\nusing namespace Aws::Crt::Mqtt5;\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_hostname, \"AWS_TEST_MQTT5_IOT_CORE_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_region, \"AWS_TEST_MQTT5_IOT_CORE_REGION\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_rsa_cert, \"AWS_TEST_MQTT311_IOT_CORE_RSA_CERT\");\n",
                    "rendered": {
                      "text": "using namespace Aws::Crt;\nusing namespace Aws::Crt::Mqtt5;\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_hostname, \"AWS_TEST_MQTT5_IOT_CORE_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_region, \"AWS_TEST_MQTT5_IOT_CORE_REGION\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_rsa_cert, \"AWS_TEST_MQTT311_IOT_CORE_RSA_CERT\");\n",
                      "markdown": "`using namespace Aws::Crt;\nusing namespace Aws::Crt::Mqtt5;\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_hostname, \"AWS_TEST_MQTT5_IOT_CORE_HOST\");\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_region, \"AWS_TEST_MQTT5_IOT_CORE_REGION\");\n\nAWS_STATIC_STRING_FROM_LITERAL(s_mqtt5_test_envName_iot_rsa_cert, \"AWS_TEST_MQTT311_IOT_CORE_RSA_CERT\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttCommon.h"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 31,
                  "endLine": 107,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        struct Pkcs12Options\n        {\n            Crt::String pkcs12_file;\n            Crt::String pkcs12_password;\n        };\n\n    } // namespace Iot\n",
                    "rendered": {
                      "text": "        struct Pkcs12Options\n        {\n            Crt::String pkcs12_file;\n            Crt::String pkcs12_password;\n        };\n\n    } // namespace Iot\n",
                      "markdown": "`        struct Pkcs12Options\n        {\n            Crt::String pkcs12_file;\n            Crt::String pkcs12_password;\n        };\n\n    } // namespace Iot\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 26,
                  "endLine": 449,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            Crt::String m_sdkName = \"CPPv2\";\n            Crt::String m_sdkVersion;\n            Crt::String m_username = \"\";\n            Crt::String m_password = \"\";\n            bool m_isUsingCustomAuthorizer = false;\n\n            int m_lastError;\n",
                    "rendered": {
                      "text": "            Crt::String m_sdkName = \"CPPv2\";\n            Crt::String m_sdkVersion;\n            Crt::String m_username = \"\";\n            Crt::String m_password = \"\";\n            bool m_isUsingCustomAuthorizer = false;\n\n            int m_lastError;\n",
                      "markdown": "`            Crt::String m_sdkName = \"CPPv2\";\n            Crt::String m_sdkVersion;\n            Crt::String m_username = \"\";\n            Crt::String m_password = \"\";\n            bool m_isUsingCustomAuthorizer = false;\n\n            int m_lastError;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 79,
                  "endLine": 409,
                  "endColumn": 87,
                  "snippet": {
                    "text": "             *\n             * @return this builder object\n             */\n            MqttClientConnectionConfigBuilder &WithPassword(const Crt::String &password) noexcept;\n\n            /**\n             * Builds a client configuration object from the set options.\n",
                    "rendered": {
                      "text": "             *\n             * @return this builder object\n             */\n            MqttClientConnectionConfigBuilder &WithPassword(const Crt::String &password) noexcept;\n\n            /**\n             * Builds a client configuration object from the set options.\n",
                      "markdown": "`             *\n             * @return this builder object\n             */\n            MqttClientConnectionConfigBuilder &WithPassword(const Crt::String &password) noexcept;\n\n            /**\n             * Builds a client configuration object from the set options.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 51,
                  "endLine": 409,
                  "endColumn": 59,
                  "snippet": {
                    "text": "             *\n             * @return this builder object\n             */\n            MqttClientConnectionConfigBuilder &WithPassword(const Crt::String &password) noexcept;\n\n            /**\n             * Builds a client configuration object from the set options.\n",
                    "rendered": {
                      "text": "             *\n             * @return this builder object\n             */\n            MqttClientConnectionConfigBuilder &WithPassword(const Crt::String &password) noexcept;\n\n            /**\n             * Builds a client configuration object from the set options.\n",
                      "markdown": "`             *\n             * @return this builder object\n             */\n            MqttClientConnectionConfigBuilder &WithPassword(const Crt::String &password) noexcept;\n\n            /**\n             * Builds a client configuration object from the set options.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 35,
                  "endLine": 405,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            /**\n             * Sets password for the connection\n             *\n             * @param password the password that will be passed with the MQTT connection\n             *\n             * @return this builder object\n             */\n",
                    "rendered": {
                      "text": "            /**\n             * Sets password for the connection\n             *\n             * @param password the password that will be passed with the MQTT connection\n             *\n             * @return this builder object\n             */\n",
                      "markdown": "`            /**\n             * Sets password for the connection\n             *\n             * @param password the password that will be passed with the MQTT connection\n             *\n             * @return this builder object\n             */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 22,
                  "endLine": 405,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            /**\n             * Sets password for the connection\n             *\n             * @param password the password that will be passed with the MQTT connection\n             *\n             * @return this builder object\n             */\n",
                    "rendered": {
                      "text": "            /**\n             * Sets password for the connection\n             *\n             * @param password the password that will be passed with the MQTT connection\n             *\n             * @return this builder object\n             */\n",
                      "markdown": "`            /**\n             * Sets password for the connection\n             *\n             * @param password the password that will be passed with the MQTT connection\n             *\n             * @return this builder object\n             */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 20,
                  "endLine": 403,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            MqttClientConnectionConfigBuilder &WithUsername(const Crt::String &username) noexcept;\n\n            /**\n             * Sets password for the connection\n             *\n             * @param password the password that will be passed with the MQTT connection\n             *\n",
                    "rendered": {
                      "text": "            MqttClientConnectionConfigBuilder &WithUsername(const Crt::String &username) noexcept;\n\n            /**\n             * Sets password for the connection\n             *\n             * @param password the password that will be passed with the MQTT connection\n             *\n",
                      "markdown": "`            MqttClientConnectionConfigBuilder &WithUsername(const Crt::String &username) noexcept;\n\n            /**\n             * Sets password for the connection\n             *\n             * @param password the password that will be passed with the MQTT connection\n             *\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 35,
                  "endLine": 389,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                const Crt::String &username,\n                const Crt::String &authorizerName,\n                const Crt::String &authorizerSignature,\n                const Crt::String &password,\n                const Crt::String &tokenKeyName,\n                const Crt::String &tokenValue) noexcept;\n\n",
                    "rendered": {
                      "text": "                const Crt::String &username,\n                const Crt::String &authorizerName,\n                const Crt::String &authorizerSignature,\n                const Crt::String &password,\n                const Crt::String &tokenKeyName,\n                const Crt::String &tokenValue) noexcept;\n\n",
                      "markdown": "`                const Crt::String &username,\n                const Crt::String &authorizerName,\n                const Crt::String &authorizerSignature,\n                const Crt::String &password,\n                const Crt::String &tokenKeyName,\n                const Crt::String &tokenValue) noexcept;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 106,
                  "endLine": 375,
                  "endColumn": 114,
                  "snippet": {
                    "text": "                            The signature must be based on the private key associated with the custom\n             *                            authorizer. The signature must be base64 encoded.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             * @param tokenKeyName Used to extract the custom authorizer token from MQTT username query-string\n             *                     properties. Required if the custom authorizer has signing enabled. It is strongly\n             *             ",
                    "rendered": {
                      "text": "                            The signature must be based on the private key associated with the custom\n             *                            authorizer. The signature must be base64 encoded.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             * @param tokenKeyName Used to extract the custom authorizer token from MQTT username query-string\n             *                     properties. Required if the custom authorizer has signing enabled. It is strongly\n             *             ",
                      "markdown": "`                            The signature must be based on the private key associated with the custom\n             *                            authorizer. The signature must be base64 encoded.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             * @param tokenKeyName Used to extract the custom authorizer token from MQTT username query-string\n             *                     properties. Required if the custom authorizer has signing enabled. It is strongly\n             *             `"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 35,
                  "endLine": 375,
                  "endColumn": 43,
                  "snippet": {
                    "text": "r-signature' will not be added with the MQTT connection.\n             *                            The signature must be based on the private key associated with the custom\n             *                            authorizer. The signature must be base64 encoded.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             * @param tokenKeyName Used to extract the custom authorizer token from MQTT username query-string\n             *                     properties. Required if the custom aut",
                    "rendered": {
                      "text": "r-signature' will not be added with the MQTT connection.\n             *                            The signature must be based on the private key associated with the custom\n             *                            authorizer. The signature must be base64 encoded.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             * @param tokenKeyName Used to extract the custom authorizer token from MQTT username query-string\n             *                     properties. Required if the custom aut",
                      "markdown": "`r-signature' will not be added with the MQTT connection.\n             *                            The signature must be based on the private key associated with the custom\n             *                            authorizer. The signature must be base64 encoded.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             * @param tokenKeyName Used to extract the custom authorizer token from MQTT username query-string\n             *                     properties. Required if the custom aut`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 22,
                  "endLine": 375,
                  "endColumn": 30,
                  "snippet": {
                    "text": "stomauthorizer-signature' will not be added with the MQTT connection.\n             *                            The signature must be based on the private key associated with the custom\n             *                            authorizer. The signature must be base64 encoded.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             * @param tokenKeyName Used to extract the custom authorizer token from MQTT username query-string\n             *                     properties. Required if t",
                    "rendered": {
                      "text": "stomauthorizer-signature' will not be added with the MQTT connection.\n             *                            The signature must be based on the private key associated with the custom\n             *                            authorizer. The signature must be base64 encoded.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             * @param tokenKeyName Used to extract the custom authorizer token from MQTT username query-string\n             *                     properties. Required if t",
                      "markdown": "`stomauthorizer-signature' will not be added with the MQTT connection.\n             *                            The signature must be based on the private key associated with the custom\n             *                            authorizer. The signature must be base64 encoded.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             * @param tokenKeyName Used to extract the custom authorizer token from MQTT username query-string\n             *                     properties. Required if t`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 35,
                  "endLine": 361,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                const Crt::String &username,\n                const Crt::String &authorizerName,\n                const Crt::String &authorizerSignature,\n                const Crt::String &password) noexcept;\n\n            /**\n             * Sets the custom authorizer settings. This function will modify the username, port, and TLS options.\n",
                    "rendered": {
                      "text": "                const Crt::String &username,\n                const Crt::String &authorizerName,\n                const Crt::String &authorizerSignature,\n                const Crt::String &password) noexcept;\n\n            /**\n             * Sets the custom authorizer settings. This function will modify the username, port, and TLS options.\n",
                      "markdown": "`                const Crt::String &username,\n                const Crt::String &authorizerName,\n                const Crt::String &authorizerSignature,\n                const Crt::String &password) noexcept;\n\n            /**\n             * Sets the custom authorizer settings. This function will modify the username, port, and TLS options.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 106,
                  "endLine": 349,
                  "endColumn": 114,
                  "snippet": {
                    "text": "             * @param authorizerSignature The signature of the custom authorizer.\n             *                            NOTE: This will NOT work without the token key name and token value, which\n             * requires using the non-depreciated API.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             *\n             * @deprecated Please use the full WithCustomAuthorizer function that includes `tokenKeyName` and\n",
                    "rendered": {
                      "text": "             * @param authorizerSignature The signature of the custom authorizer.\n             *                            NOTE: This will NOT work without the token key name and token value, which\n             * requires using the non-depreciated API.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             *\n             * @deprecated Please use the full WithCustomAuthorizer function that includes `tokenKeyName` and\n",
                      "markdown": "`             * @param authorizerSignature The signature of the custom authorizer.\n             *                            NOTE: This will NOT work without the token key name and token value, which\n             * requires using the non-depreciated API.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             *\n             * @deprecated Please use the full WithCustomAuthorizer function that includes `tokenKeyName` and\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 35,
                  "endLine": 349,
                  "endColumn": 43,
                  "snippet": {
                    "text": "             * @param authorizerSignature The signature of the custom authorizer.\n             *                            NOTE: This will NOT work without the token key name and token value, which\n             * requires using the non-depreciated API.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             *\n             * @deprecated Please use the full WithCustomAuthorizer function that includes `tokenKeyName` and\n",
                    "rendered": {
                      "text": "             * @param authorizerSignature The signature of the custom authorizer.\n             *                            NOTE: This will NOT work without the token key name and token value, which\n             * requires using the non-depreciated API.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             *\n             * @deprecated Please use the full WithCustomAuthorizer function that includes `tokenKeyName` and\n",
                      "markdown": "`             * @param authorizerSignature The signature of the custom authorizer.\n             *                            NOTE: This will NOT work without the token key name and token value, which\n             * requires using the non-depreciated API.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             *\n             * @deprecated Please use the full WithCustomAuthorizer function that includes `tokenKeyName` and\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 22,
                  "endLine": 349,
                  "endColumn": 30,
                  "snippet": {
                    "text": "             * @param authorizerSignature The signature of the custom authorizer.\n             *                            NOTE: This will NOT work without the token key name and token value, which\n             * requires using the non-depreciated API.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             *\n             * @deprecated Please use the full WithCustomAuthorizer function that includes `tokenKeyName` and\n",
                    "rendered": {
                      "text": "             * @param authorizerSignature The signature of the custom authorizer.\n             *                            NOTE: This will NOT work without the token key name and token value, which\n             * requires using the non-depreciated API.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             *\n             * @deprecated Please use the full WithCustomAuthorizer function that includes `tokenKeyName` and\n",
                      "markdown": "`             * @param authorizerSignature The signature of the custom authorizer.\n             *                            NOTE: This will NOT work without the token key name and token value, which\n             * requires using the non-depreciated API.\n             * @param password The password to use with the custom authorizer. If null is passed, then no password will\n             *                 be set.\n             *\n             * @deprecated Please use the full WithCustomAuthorizer function that includes `tokenKeyName` and\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 94,
                  "endLine": 157,
                  "endColumn": 102,
                  "snippet": {
                    "text": "             *\n             * NOTE: This only works on MacOS devices.\n             *\n             * @param options The PKCS12 options to use. Has to contain a PKCS12 filepath and password.\n             * @param allocator memory allocator to use\n             */\n            MqttClientConnectionConfigBuilder(\n",
                    "rendered": {
                      "text": "             *\n             * NOTE: This only works on MacOS devices.\n             *\n             * @param options The PKCS12 options to use. Has to contain a PKCS12 filepath and password.\n             * @param allocator memory allocator to use\n             */\n            MqttClientConnectionConfigBuilder(\n",
                      "markdown": "`             *\n             * NOTE: This only works on MacOS devices.\n             *\n             * @param options The PKCS12 options to use. Has to contain a PKCS12 filepath and password.\n             * @param allocator memory allocator to use\n             */\n            MqttClientConnectionConfigBuilder(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 68,
                  "endLine": 152,
                  "endColumn": 76,
                  "snippet": {
                    "text": "                Crt::Allocator *allocator = Crt::ApiAllocator()) noexcept;\n\n            /**\n             * Sets the builder up for MTLS using a PKCS12 file and password. These are files on disk and must be in the\n             * PEM format.\n             *\n             * NOTE: This only works on MacOS devices.\n",
                    "rendered": {
                      "text": "                Crt::Allocator *allocator = Crt::ApiAllocator()) noexcept;\n\n            /**\n             * Sets the builder up for MTLS using a PKCS12 file and password. These are files on disk and must be in the\n             * PEM format.\n             *\n             * NOTE: This only works on MacOS devices.\n",
                      "markdown": "`                Crt::Allocator *allocator = Crt::ApiAllocator()) noexcept;\n\n            /**\n             * Sets the builder up for MTLS using a PKCS12 file and password. These are files on disk and must be in the\n             * PEM format.\n             *\n             * NOTE: This only works on MacOS devices.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/MqttClient.h"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 26,
                  "endLine": 95,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            Crt::Io::SocketOptions m_socketOptions;\n            Crt::Mqtt::OnWebSocketHandshakeIntercept m_webSocketInterceptor;\n            Crt::String m_username;\n            Crt::String m_password;\n            Crt::Optional<Crt::Http::HttpClientConnectionProxyOptions> m_proxyOptions;\n            int m_lastError;\n\n",
                    "rendered": {
                      "text": "            Crt::Io::SocketOptions m_socketOptions;\n            Crt::Mqtt::OnWebSocketHandshakeIntercept m_webSocketInterceptor;\n            Crt::String m_username;\n            Crt::String m_password;\n            Crt::Optional<Crt::Http::HttpClientConnectionProxyOptions> m_proxyOptions;\n            int m_lastError;\n\n",
                      "markdown": "`            Crt::Io::SocketOptions m_socketOptions;\n            Crt::Mqtt::OnWebSocketHandshakeIntercept m_webSocketInterceptor;\n            Crt::String m_username;\n            Crt::String m_password;\n            Crt::Optional<Crt::Http::HttpClientConnectionProxyOptions> m_proxyOptions;\n            int m_lastError;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/Mqtt5Client.h"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 27,
                  "endLine": 114,
                  "endColumn": 35,
                  "snippet": {
                    "text": "             */\n            Crt::Optional<Crt::String> m_tokenSignature;\n\n            Crt::ByteBuf m_passwordStorage;\n            Crt::Allocator *m_allocator;\n        };\n\n",
                    "rendered": {
                      "text": "             */\n            Crt::Optional<Crt::String> m_tokenSignature;\n\n            Crt::ByteBuf m_passwordStorage;\n            Crt::Allocator *m_allocator;\n        };\n\n",
                      "markdown": "`             */\n            Crt::Optional<Crt::String> m_tokenSignature;\n\n            Crt::ByteBuf m_passwordStorage;\n            Crt::Allocator *m_allocator;\n        };\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/Mqtt5Client.h"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 45,
                  "endLine": 88,
                  "endColumn": 53,
                  "snippet": {
                    "text": "             * The password to use with the custom authorizer.  Becomes the MQTT5 CONNECT packet's password property.\n             * AWS IoT Core will base64 encode this binary data before passing it to the authorizer's lambda function.\n             */\n            Crt::Optional<Crt::ByteCursor> m_password;\n\n            /**\n             * Key used to extract the custom authorizer token from MQTT username query-string properties.\n",
                    "rendered": {
                      "text": "             * The password to use with the custom authorizer.  Becomes the MQTT5 CONNECT packet's password property.\n             * AWS IoT Core will base64 encode this binary data before passing it to the authorizer's lambda function.\n             */\n            Crt::Optional<Crt::ByteCursor> m_password;\n\n            /**\n             * Key used to extract the custom authorizer token from MQTT username query-string properties.\n",
                      "markdown": "`             * The password to use with the custom authorizer.  Becomes the MQTT5 CONNECT packet's password property.\n             * AWS IoT Core will base64 encode this binary data before passing it to the authorizer's lambda function.\n             */\n            Crt::Optional<Crt::ByteCursor> m_password;\n\n            /**\n             * Key used to extract the custom authorizer token from MQTT username query-string properties.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/Mqtt5Client.h"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 99,
                  "endLine": 85,
                  "endColumn": 107,
                  "snippet": {
                    "text": "            Crt::Optional<Crt::String> m_username;\n\n            /**\n             * The password to use with the custom authorizer.  Becomes the MQTT5 CONNECT packet's password property.\n             * AWS IoT Core will base64 encode this binary data before passing it to the authorizer's lambda function.\n             */\n            Crt::Optional<Crt::ByteCursor> m_password;\n",
                    "rendered": {
                      "text": "            Crt::Optional<Crt::String> m_username;\n\n            /**\n             * The password to use with the custom authorizer.  Becomes the MQTT5 CONNECT packet's password property.\n             * AWS IoT Core will base64 encode this binary data before passing it to the authorizer's lambda function.\n             */\n            Crt::Optional<Crt::ByteCursor> m_password;\n",
                      "markdown": "`            Crt::Optional<Crt::String> m_username;\n\n            /**\n             * The password to use with the custom authorizer.  Becomes the MQTT5 CONNECT packet's password property.\n             * AWS IoT Core will base64 encode this binary data before passing it to the authorizer's lambda function.\n             */\n            Crt::Optional<Crt::ByteCursor> m_password;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/Mqtt5Client.h"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 19,
                  "endLine": 85,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            Crt::Optional<Crt::String> m_username;\n\n            /**\n             * The password to use with the custom authorizer.  Becomes the MQTT5 CONNECT packet's password property.\n             * AWS IoT Core will base64 encode this binary data before passing it to the authorizer's lambda function.\n             */\n            Crt::Optional<Crt::ByteCursor> m_password;\n",
                    "rendered": {
                      "text": "            Crt::Optional<Crt::String> m_username;\n\n            /**\n             * The password to use with the custom authorizer.  Becomes the MQTT5 CONNECT packet's password property.\n             * AWS IoT Core will base64 encode this binary data before passing it to the authorizer's lambda function.\n             */\n            Crt::Optional<Crt::ByteCursor> m_password;\n",
                      "markdown": "`            Crt::Optional<Crt::String> m_username;\n\n            /**\n             * The password to use with the custom authorizer.  Becomes the MQTT5 CONNECT packet's password property.\n             * AWS IoT Core will base64 encode this binary data before passing it to the authorizer's lambda function.\n             */\n            Crt::Optional<Crt::ByteCursor> m_password;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/Mqtt5Client.h"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 53,
                  "endLine": 56,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n            const Crt::Optional<Crt::String> &GetAuthorizerName();\n            const Crt::Optional<Crt::String> &GetUsername();\n            const Crt::Optional<Crt::ByteCursor> &GetPassword();\n            const Crt::Optional<Crt::String> &GetTokenKeyName();\n            const Crt::Optional<Crt::String> &GetTokenValue();\n            const Crt::Optional<Crt::String> &GetTokenSignature();\n",
                    "rendered": {
                      "text": "\n            const Crt::Optional<Crt::String> &GetAuthorizerName();\n            const Crt::Optional<Crt::String> &GetUsername();\n            const Crt::Optional<Crt::ByteCursor> &GetPassword();\n            const Crt::Optional<Crt::String> &GetTokenKeyName();\n            const Crt::Optional<Crt::String> &GetTokenValue();\n            const Crt::Optional<Crt::String> &GetTokenSignature();\n",
                      "markdown": "`\n            const Crt::Optional<Crt::String> &GetAuthorizerName();\n            const Crt::Optional<Crt::String> &GetUsername();\n            const Crt::Optional<Crt::ByteCursor> &GetPassword();\n            const Crt::Optional<Crt::String> &GetTokenKeyName();\n            const Crt::Optional<Crt::String> &GetTokenValue();\n            const Crt::Optional<Crt::String> &GetTokenSignature();\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/Mqtt5Client.h"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 64,
                  "endLine": 49,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n            Mqtt5CustomAuthConfig &WithAuthorizerName(Crt::String authName);\n            Mqtt5CustomAuthConfig &WithUsername(Crt::String username);\n            Mqtt5CustomAuthConfig &WithPassword(Crt::ByteCursor password);\n            Mqtt5CustomAuthConfig &WithTokenKeyName(Crt::String tokenKeyName);\n            Mqtt5CustomAuthConfig &WithTokenValue(Crt::String tokenValue);\n            Mqtt5CustomAuthConfig &WithTokenSignature(Crt::String tokenSignature);\n",
                    "rendered": {
                      "text": "\n            Mqtt5CustomAuthConfig &WithAuthorizerName(Crt::String authName);\n            Mqtt5CustomAuthConfig &WithUsername(Crt::String username);\n            Mqtt5CustomAuthConfig &WithPassword(Crt::ByteCursor password);\n            Mqtt5CustomAuthConfig &WithTokenKeyName(Crt::String tokenKeyName);\n            Mqtt5CustomAuthConfig &WithTokenValue(Crt::String tokenValue);\n            Mqtt5CustomAuthConfig &WithTokenSignature(Crt::String tokenSignature);\n",
                      "markdown": "`\n            Mqtt5CustomAuthConfig &WithAuthorizerName(Crt::String authName);\n            Mqtt5CustomAuthConfig &WithUsername(Crt::String username);\n            Mqtt5CustomAuthConfig &WithPassword(Crt::ByteCursor password);\n            Mqtt5CustomAuthConfig &WithTokenKeyName(Crt::String tokenKeyName);\n            Mqtt5CustomAuthConfig &WithTokenValue(Crt::String tokenValue);\n            Mqtt5CustomAuthConfig &WithTokenSignature(Crt::String tokenSignature);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/Mqtt5Client.h"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 39,
                  "endLine": 49,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n            Mqtt5CustomAuthConfig &WithAuthorizerName(Crt::String authName);\n            Mqtt5CustomAuthConfig &WithUsername(Crt::String username);\n            Mqtt5CustomAuthConfig &WithPassword(Crt::ByteCursor password);\n            Mqtt5CustomAuthConfig &WithTokenKeyName(Crt::String tokenKeyName);\n            Mqtt5CustomAuthConfig &WithTokenValue(Crt::String tokenValue);\n            Mqtt5CustomAuthConfig &WithTokenSignature(Crt::String tokenSignature);\n",
                    "rendered": {
                      "text": "\n            Mqtt5CustomAuthConfig &WithAuthorizerName(Crt::String authName);\n            Mqtt5CustomAuthConfig &WithUsername(Crt::String username);\n            Mqtt5CustomAuthConfig &WithPassword(Crt::ByteCursor password);\n            Mqtt5CustomAuthConfig &WithTokenKeyName(Crt::String tokenKeyName);\n            Mqtt5CustomAuthConfig &WithTokenValue(Crt::String tokenValue);\n            Mqtt5CustomAuthConfig &WithTokenSignature(Crt::String tokenSignature);\n",
                      "markdown": "`\n            Mqtt5CustomAuthConfig &WithAuthorizerName(Crt::String authName);\n            Mqtt5CustomAuthConfig &WithUsername(Crt::String username);\n            Mqtt5CustomAuthConfig &WithPassword(Crt::ByteCursor password);\n            Mqtt5CustomAuthConfig &WithTokenKeyName(Crt::String tokenKeyName);\n            Mqtt5CustomAuthConfig &WithTokenValue(Crt::String tokenValue);\n            Mqtt5CustomAuthConfig &WithTokenSignature(Crt::String tokenSignature);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/iot/Mqtt5Client.h"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 57,
                  "endLine": 260,
                  "endColumn": 65,
                  "snippet": {
                    "text": "             *\n             * @return this option object\n             */\n            Mqtt5ClientBuilder &WithHostName(Crt::String hostname);\n\n            /**\n             * Set port to connect to\n",
                    "rendered": {
                      "text": "             *\n             * @return this option object\n             */\n            Mqtt5ClientBuilder &WithHostName(Crt::String hostname);\n\n            /**\n             * Set port to connect to\n",
                      "markdown": "`             *\n             * @return this option object\n             */\n            Mqtt5ClientBuilder &WithHostName(Crt::String hostname);\n\n            /**\n             * Set port to connect to\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/io/TlsOptions.h"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 80,
                  "endLine": 377,
                  "endColumn": 85,
                  "snippet": {
                    "text": "                int GetInitializationError() const noexcept { return m_initializationError; }\n\n                /// @private\n                aws_tls_ctx *GetUnderlyingHandle() const noexcept { return m_ctx.get(); }\n\n              private:\n                bool isValid() const noexcept { return m_ctx && m_initializationError == AWS_ERROR_SUCCESS; }\n",
                    "rendered": {
                      "text": "                int GetInitializationError() const noexcept { return m_initializationError; }\n\n                /// @private\n                aws_tls_ctx *GetUnderlyingHandle() const noexcept { return m_ctx.get(); }\n\n              private:\n                bool isValid() const noexcept { return m_ctx && m_initializationError == AWS_ERROR_SUCCESS; }\n",
                      "markdown": "`                int GetInitializationError() const noexcept { return m_initializationError; }\n\n                /// @private\n                aws_tls_ctx *GetUnderlyingHandle() const noexcept { return m_ctx.get(); }\n\n              private:\n                bool isValid() const noexcept { return m_ctx && m_initializationError == AWS_ERROR_SUCCESS; }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/io/TlsOptions.h"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 35,
                  "endLine": 284,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                Optional<uint64_t> m_slotId;\n                Optional<String> m_userPin;\n                Optional<String> m_tokenLabel;\n                Optional<String> m_privateKeyObjectLabel;\n                Optional<String> m_certificateFilePath;\n                Optional<String> m_certificateFileContents;\n            };\n",
                    "rendered": {
                      "text": "                Optional<uint64_t> m_slotId;\n                Optional<String> m_userPin;\n                Optional<String> m_tokenLabel;\n                Optional<String> m_privateKeyObjectLabel;\n                Optional<String> m_certificateFilePath;\n                Optional<String> m_certificateFileContents;\n            };\n",
                      "markdown": "`                Optional<uint64_t> m_slotId;\n                Optional<String> m_userPin;\n                Optional<String> m_tokenLabel;\n                Optional<String> m_privateKeyObjectLabel;\n                Optional<String> m_certificateFilePath;\n                Optional<String> m_certificateFileContents;\n            };\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/io/TlsOptions.h"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 24,
                  "endLine": 258,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                 *\n                 * @param label label of private key object\n                 */\n                void SetPrivateKeyObjectLabel(const String &label) noexcept;\n\n                /**\n                 * Use this X.509 certificate (file on disk).\n",
                    "rendered": {
                      "text": "                 *\n                 * @param label label of private key object\n                 */\n                void SetPrivateKeyObjectLabel(const String &label) noexcept;\n\n                /**\n                 * Use this X.509 certificate (file on disk).\n",
                      "markdown": "`                 *\n                 * @param label label of private key object\n                 */\n                void SetPrivateKeyObjectLabel(const String &label) noexcept;\n\n                /**\n                 * Use this X.509 certificate (file on disk).\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/io/TlsOptions.h"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 29,
                  "endLine": 131,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                 * By default the certificates and private keys are stored in the default keychain\n                 * of the account of the process. If you instead wish to provide your own keychain\n                 * for storing them, this makes the TlsContext to use that instead.\n                 * NOTE: The password of your keychain must be empty.\n                 *\n                 * NOTE: This only works on MacOS.\n                 */\n",
                    "rendered": {
                      "text": "                 * By default the certificates and private keys are stored in the default keychain\n                 * of the account of the process. If you instead wish to provide your own keychain\n                 * for storing them, this makes the TlsContext to use that instead.\n                 * NOTE: The password of your keychain must be empty.\n                 *\n                 * NOTE: This only works on MacOS.\n                 */\n",
                      "markdown": "`                 * By default the certificates and private keys are stored in the default keychain\n                 * of the account of the process. If you instead wish to provide your own keychain\n                 * for storing them, this makes the TlsContext to use that instead.\n                 * NOTE: The password of your keychain must be empty.\n                 *\n                 * NOTE: This only works on MacOS.\n                 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/io/TlsOptions.h"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 38,
                  "endLine": 116,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                 *\n                 * @param pkcs12_path: Path to PKCS #12 file. The file is loaded from disk and stored internally. It\n                 * must remain in memory for the lifetime of the returned object.\n                 * @param pkcs12_pwd: Password to PKCS #12 file. It must remain in memory for the lifetime of the\n                 * returned object.\n                 * @param allocator Memory allocator to use.\n                 */\n",
                    "rendered": {
                      "text": "                 *\n                 * @param pkcs12_path: Path to PKCS #12 file. The file is loaded from disk and stored internally. It\n                 * must remain in memory for the lifetime of the returned object.\n                 * @param pkcs12_pwd: Password to PKCS #12 file. It must remain in memory for the lifetime of the\n                 * returned object.\n                 * @param allocator Memory allocator to use.\n                 */\n",
                      "markdown": "`                 *\n                 * @param pkcs12_path: Path to PKCS #12 file. The file is loaded from disk and stored internally. It\n                 * must remain in memory for the lifetime of the returned object.\n                 * @param pkcs12_pwd: Password to PKCS #12 file. It must remain in memory for the lifetime of the\n                 * returned object.\n                 * @param allocator Memory allocator to use.\n                 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/bin/mqtt5_canary/main.cpp"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 49,
                  "endLine": 91,
                  "endColumn": 55,
                  "snippet": {
                    "text": " \"      --cacert FILE: path to a CA certficate file.\\n\");\n    fprintf(stderr, \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -l, --log FILE: dumps logs to FILE instead of stderr.\\n\");\n    fprintf(stderr, \"  -v, --verbose: ERROR|INFO|DEBUG|TRACE: log level to configure. Default is none.\\n\");\n    fprintf(stderr, \"  -w, --websockets: use mqtt-over-websocke",
                    "rendered": {
                      "text": " \"      --cacert FILE: path to a CA certficate file.\\n\");\n    fprintf(stderr, \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -l, --log FILE: dumps logs to FILE instead of stderr.\\n\");\n    fprintf(stderr, \"  -v, --verbose: ERROR|INFO|DEBUG|TRACE: log level to configure. Default is none.\\n\");\n    fprintf(stderr, \"  -w, --websockets: use mqtt-over-websocke",
                      "markdown": "` \"      --cacert FILE: path to a CA certficate file.\\n\");\n    fprintf(stderr, \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\");\n    fprintf(stderr, \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\");\n    fprintf(stderr, \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\");\n    fprintf(stderr, \"  -l, --log FILE: dumps logs to FILE instead of stderr.\\n\");\n    fprintf(stderr, \"  -v, --verbose: ERROR|INFO|DEBUG|TRACE: log level to configure. Default is none.\\n\");\n    fprintf(stderr, \"  -w, --websockets: use mqtt-over-websocke`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 1325,
                  "startColumn": 55,
                  "endLine": 1325,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                    "rendered": {
                      "text": "    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                      "markdown": "`    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 1226,
                  "startColumn": 55,
                  "endLine": 1226,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                    "rendered": {
                      "text": "    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                      "markdown": "`    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 1144,
                  "startColumn": 55,
                  "endLine": 1144,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                    "rendered": {
                      "text": "    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                      "markdown": "`    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 1041,
                  "startColumn": 55,
                  "endLine": 1041,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                    "rendered": {
                      "text": "    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                      "markdown": "`    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 959,
                  "startColumn": 55,
                  "endLine": 959,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                    "rendered": {
                      "text": "    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                      "markdown": "`    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 821,
                  "startColumn": 59,
                  "endLine": 821,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        Aws::Crt::ApiHandle apiHandle(allocator);\n\n        Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n            envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n        tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n        Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n        ASSERT_TRUE(tlsContext);\n",
                    "rendered": {
                      "text": "        Aws::Crt::ApiHandle apiHandle(allocator);\n\n        Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n            envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n        tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n        Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n        ASSERT_TRUE(tlsContext);\n",
                      "markdown": "`        Aws::Crt::ApiHandle apiHandle(allocator);\n\n        Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n            envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n        tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n        Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n        ASSERT_TRUE(tlsContext);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 688,
                  "startColumn": 59,
                  "endLine": 688,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        Aws::Crt::ApiHandle apiHandle(allocator);\n\n        Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n            envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n        tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n        Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n        ASSERT_TRUE(tlsContext);\n",
                    "rendered": {
                      "text": "        Aws::Crt::ApiHandle apiHandle(allocator);\n\n        Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n            envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n        tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n        Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n        ASSERT_TRUE(tlsContext);\n",
                      "markdown": "`        Aws::Crt::ApiHandle apiHandle(allocator);\n\n        Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n            envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n        tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n        Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n        ASSERT_TRUE(tlsContext);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 478,
                  "startColumn": 59,
                  "endLine": 478,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        Aws::Crt::ApiHandle apiHandle(allocator);\n\n        Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n            envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n        tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n        Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n        ASSERT_TRUE(tlsContext);\n",
                    "rendered": {
                      "text": "        Aws::Crt::ApiHandle apiHandle(allocator);\n\n        Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n            envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n        tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n        Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n        ASSERT_TRUE(tlsContext);\n",
                      "markdown": "`        Aws::Crt::ApiHandle apiHandle(allocator);\n\n        Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n            envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n        tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n        Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n        ASSERT_TRUE(tlsContext);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 55,
                  "endLine": 401,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                    "rendered": {
                      "text": "    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                      "markdown": "`    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 55,
                  "endLine": 301,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                    "rendered": {
                      "text": "    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n",
                      "markdown": "`    Aws::Crt::ApiHandle apiHandle(allocator);\n\n    Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n    tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n    Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n    ASSERT_TRUE(tlsContext);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 59,
                  "endLine": 134,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        Aws::Crt::ApiHandle apiHandle(allocator);\n\n        Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n            envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n        tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n        Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n        ASSERT_TRUE(tlsContext);\n",
                    "rendered": {
                      "text": "        Aws::Crt::ApiHandle apiHandle(allocator);\n\n        Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n            envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n        tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n        Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n        ASSERT_TRUE(tlsContext);\n",
                      "markdown": "`        Aws::Crt::ApiHandle apiHandle(allocator);\n\n        Aws::Crt::Io::TlsContextOptions tlsCtxOptions = Aws::Crt::Io::TlsContextOptions::InitClientWithMtls(\n            envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str());\n        tlsCtxOptions.OverrideDefaultTrustStore(nullptr, envVars.inputRootCa.c_str());\n        Aws::Crt::Io::TlsContext tlsContext(tlsCtxOptions, Aws::Crt::Io::TlsMode::CLIENT, allocator);\n        ASSERT_TRUE(tlsContext);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 55,
                  "endLine": 94,
                  "endColumn": 65,
                  "snippet": {
                    "text": "static int s_ValidateCredentialFiles(const IotServiceTestEnvVars &envVars)\n{\n    const char *credentialFiles[] = {\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str(), envVars.inputRootCa.c_str()};\n    for (size_t fileIdx = 0; fileIdx < AWS_ARRAY_SIZE(credentialFiles); ++fileIdx)\n    {\n        std::ifstream file;\n",
                    "rendered": {
                      "text": "static int s_ValidateCredentialFiles(const IotServiceTestEnvVars &envVars)\n{\n    const char *credentialFiles[] = {\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str(), envVars.inputRootCa.c_str()};\n    for (size_t fileIdx = 0; fileIdx < AWS_ARRAY_SIZE(credentialFiles); ++fileIdx)\n    {\n        std::ifstream file;\n",
                      "markdown": "`static int s_ValidateCredentialFiles(const IotServiceTestEnvVars &envVars)\n{\n    const char *credentialFiles[] = {\n        envVars.inputCertificate.c_str(), envVars.inputPrivateKey.c_str(), envVars.inputRootCa.c_str()};\n    for (size_t fileIdx = 0; fileIdx < AWS_ARRAY_SIZE(credentialFiles); ++fileIdx)\n    {\n        std::ifstream file;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 45,
                  "endLine": 85,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n    envVars.inputHost = std::move(inputHost.value());\n    envVars.inputCertificate = std::move(inputCertificate.value());\n    envVars.inputPrivateKey = std::move(inputPrivateKey.value());\n    envVars.inputRootCa = std::move(inputRootCa.value());\n\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "\n    envVars.inputHost = std::move(inputHost.value());\n    envVars.inputCertificate = std::move(inputCertificate.value());\n    envVars.inputPrivateKey = std::move(inputPrivateKey.value());\n    envVars.inputRootCa = std::move(inputRootCa.value());\n\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`\n    envVars.inputHost = std::move(inputHost.value());\n    envVars.inputCertificate = std::move(inputCertificate.value());\n    envVars.inputPrivateKey = std::move(inputPrivateKey.value());\n    envVars.inputRootCa = std::move(inputRootCa.value());\n\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 17,
                  "endLine": 85,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    envVars.inputHost = std::move(inputHost.value());\n    envVars.inputCertificate = std::move(inputCertificate.value());\n    envVars.inputPrivateKey = std::move(inputPrivateKey.value());\n    envVars.inputRootCa = std::move(inputRootCa.value());\n\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "\n    envVars.inputHost = std::move(inputHost.value());\n    envVars.inputCertificate = std::move(inputCertificate.value());\n    envVars.inputPrivateKey = std::move(inputPrivateKey.value());\n    envVars.inputRootCa = std::move(inputRootCa.value());\n\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`\n    envVars.inputHost = std::move(inputHost.value());\n    envVars.inputCertificate = std::move(inputCertificate.value());\n    envVars.inputPrivateKey = std::move(inputPrivateKey.value());\n    envVars.inputRootCa = std::move(inputRootCa.value());\n\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 49,
                  "endLine": 78,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_key);\n    Aws::Crt::Optional<Aws::Crt::String> inputRootCa = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_ca);\n\n    if (!inputHost || !inputCertificate || !inputPrivateKey || !inputRootCa)\n    {\n        return AWS_OP_ERR;\n    }\n",
                    "rendered": {
                      "text": "        s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_key);\n    Aws::Crt::Optional<Aws::Crt::String> inputRootCa = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_ca);\n\n    if (!inputHost || !inputCertificate || !inputPrivateKey || !inputRootCa)\n    {\n        return AWS_OP_ERR;\n    }\n",
                      "markdown": "`        s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_key);\n    Aws::Crt::Optional<Aws::Crt::String> inputRootCa = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_ca);\n\n    if (!inputHost || !inputCertificate || !inputPrivateKey || !inputRootCa)\n    {\n        return AWS_OP_ERR;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 46,
                  "endLine": 74,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    Aws::Crt::Optional<Aws::Crt::String> inputHost = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_host);\n    Aws::Crt::Optional<Aws::Crt::String> inputCertificate =\n        s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_cert);\n    Aws::Crt::Optional<Aws::Crt::String> inputPrivateKey =\n        s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_key);\n    Aws::Crt::Optional<Aws::Crt::String> inputRootCa = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_ca);\n\n",
                    "rendered": {
                      "text": "    Aws::Crt::Optional<Aws::Crt::String> inputHost = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_host);\n    Aws::Crt::Optional<Aws::Crt::String> inputCertificate =\n        s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_cert);\n    Aws::Crt::Optional<Aws::Crt::String> inputPrivateKey =\n        s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_key);\n    Aws::Crt::Optional<Aws::Crt::String> inputRootCa = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_ca);\n\n",
                      "markdown": "`    Aws::Crt::Optional<Aws::Crt::String> inputHost = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_host);\n    Aws::Crt::Optional<Aws::Crt::String> inputCertificate =\n        s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_cert);\n    Aws::Crt::Optional<Aws::Crt::String> inputPrivateKey =\n        s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_key);\n    Aws::Crt::Optional<Aws::Crt::String> inputRootCa = s_GetEnvVariable(allocator, s_mqtt311_test_envName_iot_core_ca);\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 30,
                  "endLine": 31,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    {\n        Aws::Crt::String inputHost;\n        Aws::Crt::String inputCertificate;\n        Aws::Crt::String inputPrivateKey;\n        Aws::Crt::String inputRootCa;\n    };\n\n",
                    "rendered": {
                      "text": "    {\n        Aws::Crt::String inputHost;\n        Aws::Crt::String inputCertificate;\n        Aws::Crt::String inputPrivateKey;\n        Aws::Crt::String inputRootCa;\n    };\n\n",
                      "markdown": "`    {\n        Aws::Crt::String inputHost;\n        Aws::Crt::String inputCertificate;\n        Aws::Crt::String inputPrivateKey;\n        Aws::Crt::String inputRootCa;\n    };\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 920,
                  "startColumn": 109,
                  "endLine": 921,
                  "snippet": {
                    "text": "        statistics = mqttConnection->GetOperationStatistics();\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationCount);\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        mqttConnection->Disconnect();\n",
                    "rendered": {
                      "text": "        statistics = mqttConnection->GetOperationStatistics();\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationCount);\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        mqttConnection->Disconnect();\n",
                      "markdown": "`        statistics = mqttConnection->GetOperationStatistics();\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationCount);\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        mqttConnection->Disconnect();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 906,
                  "startColumn": 109,
                  "endLine": 907,
                  "snippet": {
                    "text": "        statistics = mqttConnection->GetOperationStatistics();\n        ASSERT_INT_EQUALS(1, statistics.incompleteOperationCount);\n        ASSERT_INT_EQUALS(expected_size, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        // wait for publish\n",
                    "rendered": {
                      "text": "        statistics = mqttConnection->GetOperationStatistics();\n        ASSERT_INT_EQUALS(1, statistics.incompleteOperationCount);\n        ASSERT_INT_EQUALS(expected_size, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        // wait for publish\n",
                      "markdown": "`        statistics = mqttConnection->GetOperationStatistics();\n        ASSERT_INT_EQUALS(1, statistics.incompleteOperationCount);\n        ASSERT_INT_EQUALS(expected_size, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        // wait for publish\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 781,
                  "startColumn": 109,
                  "endLine": 782,
                  "snippet": {
                    "text": "        statistics = mqttConnection->GetOperationStatistics();\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationCount);\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        mqttConnection->Disconnect();\n",
                    "rendered": {
                      "text": "        statistics = mqttConnection->GetOperationStatistics();\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationCount);\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        mqttConnection->Disconnect();\n",
                      "markdown": "`        statistics = mqttConnection->GetOperationStatistics();\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationCount);\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        mqttConnection->Disconnect();\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 764,
                  "startColumn": 109,
                  "endLine": 765,
                  "snippet": {
                    "text": "        Aws::Crt::Mqtt::MqttConnectionOperationStatistics statistics = mqttConnection->GetOperationStatistics();\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationCount);\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        Aws::Crt::ByteBuf payload = Aws::Crt::ByteBufFromCString(\"notice me pls\");\n",
                    "rendered": {
                      "text": "        Aws::Crt::Mqtt::MqttConnectionOperationStatistics statistics = mqttConnection->GetOperationStatistics();\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationCount);\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        Aws::Crt::ByteBuf payload = Aws::Crt::ByteBufFromCString(\"notice me pls\");\n",
                      "markdown": "`        Aws::Crt::Mqtt::MqttConnectionOperationStatistics statistics = mqttConnection->GetOperationStatistics();\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationCount);\n        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        Aws::Crt::ByteBuf payload = Aws::Crt::ByteBufFromCString(\"notice me pls\");\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 922,
                  "startColumn": 16,
                  "endLine": 922,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        mqttConnection->Disconnect();\n        {\n",
                    "rendered": {
                      "text": "        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        mqttConnection->Disconnect();\n        {\n",
                      "markdown": "`        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        mqttConnection->Disconnect();\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 908,
                  "startColumn": 16,
                  "endLine": 908,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        ASSERT_INT_EQUALS(expected_size, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        // wait for publish\n        {\n",
                    "rendered": {
                      "text": "        ASSERT_INT_EQUALS(expected_size, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        // wait for publish\n        {\n",
                      "markdown": "`        ASSERT_INT_EQUALS(expected_size, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        // wait for publish\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 783,
                  "startColumn": 16,
                  "endLine": 783,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        mqttConnection->Disconnect();\n        {\n",
                    "rendered": {
                      "text": "        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        mqttConnection->Disconnect();\n        {\n",
                      "markdown": "`        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        mqttConnection->Disconnect();\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/IotServiceTest.cpp"
                },
                "region": {
                  "startLine": 766,
                  "startColumn": 16,
                  "endLine": 766,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        Aws::Crt::ByteBuf payload = Aws::Crt::ByteBufFromCString(\"notice me pls\");\n        mqttConnection->Publish(\"/publish/me/senpai\", QOS::AWS_MQTT_QOS_AT_LEAST_ONCE, false, payload, onPubAck);\n",
                    "rendered": {
                      "text": "        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        Aws::Crt::ByteBuf payload = Aws::Crt::ByteBufFromCString(\"notice me pls\");\n        mqttConnection->Publish(\"/publish/me/senpai\", QOS::AWS_MQTT_QOS_AT_LEAST_ONCE, false, payload, onPubAck);\n",
                      "markdown": "`        ASSERT_INT_EQUALS(0, statistics.incompleteOperationSize);\n        // We skip the unacked beecause it is heavily socket-timing based and we (currently) do not have good control\n        // over that.\n        // TODO: Find a way to reliably test the unacked statistics\n\n        Aws::Crt::ByteBuf payload = Aws::Crt::ByteBufFromCString(\"notice me pls\");\n        mqttConnection->Publish(\"/publish/me/senpai\", QOS::AWS_MQTT_QOS_AT_LEAST_ONCE, false, payload, onPubAck);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1689,
                  "startColumn": 58,
                  "endLine": 1689,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\nEXT_LINKS_IN_WINDOW    = NO\n\n# If the OBFUSCATE_EMAILS tag is set to YES, doxygen will obfuscate email\n# addresses.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n",
                    "rendered": {
                      "text": "\nEXT_LINKS_IN_WINDOW    = NO\n\n# If the OBFUSCATE_EMAILS tag is set to YES, doxygen will obfuscate email\n# addresses.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n",
                      "markdown": "`\nEXT_LINKS_IN_WINDOW    = NO\n\n# If the OBFUSCATE_EMAILS tag is set to YES, doxygen will obfuscate email\n# addresses.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2727,
                  "startColumn": 64,
                  "endLine": 2727,
                  "endColumn": 69,
                  "snippet": {
                    "text": "# If the DOT_CLEANUP tag is set to YES, doxygen will remove the intermediate\n# files that are used to generate the various graphs.\n#\n# Note: This setting is not only used for dot files but also for msc temporary\n# files.\n# The default value is: YES.\n\n",
                    "rendered": {
                      "text": "# If the DOT_CLEANUP tag is set to YES, doxygen will remove the intermediate\n# files that are used to generate the various graphs.\n#\n# Note: This setting is not only used for dot files but also for msc temporary\n# files.\n# The default value is: YES.\n\n",
                      "markdown": "`# If the DOT_CLEANUP tag is set to YES, doxygen will remove the intermediate\n# files that are used to generate the various graphs.\n#\n# Note: This setting is not only used for dot files but also for msc temporary\n# files.\n# The default value is: YES.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2695,
                  "startColumn": 30,
                  "endLine": 2695,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the graphs\n# generated by dot. A depth value of 3 means that only nodes reachable from the\n# root by following a path via at most 3 edges will be shown. Nodes that lay\n# further from the root node will be omitted. Note that setting this option to 1\n# or 2 may greatly reduce the computation time needed for large code bases. Also\n# note that the size of a graph can be further restricted by\n",
                    "rendered": {
                      "text": "\n# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the graphs\n# generated by dot. A depth value of 3 means that only nodes reachable from the\n# root by following a path via at most 3 edges will be shown. Nodes that lay\n# further from the root node will be omitted. Note that setting this option to 1\n# or 2 may greatly reduce the computation time needed for large code bases. Also\n# note that the size of a graph can be further restricted by\n",
                      "markdown": "`\n# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the graphs\n# generated by dot. A depth value of 3 means that only nodes reachable from the\n# root by following a path via at most 3 edges will be shown. Nodes that lay\n# further from the root node will be omitted. Note that setting this option to 1\n# or 2 may greatly reduce the computation time needed for large code bases. Also\n# note that the size of a graph can be further restricted by\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2686,
                  "startColumn": 54,
                  "endLine": 2686,
                  "endColumn": 58,
                  "snippet": {
                    "text": "# larger than this value, doxygen will truncate the graph, which is visualized\n# by representing a node as a red box. Note that doxygen if the number of direct\n# children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that\n# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n# Minimum value: 0, maximum value: 10000, default value: 50.\n# This tag requires that the tag HAVE_DOT is set to YES.\n",
                    "rendered": {
                      "text": "# larger than this value, doxygen will truncate the graph, which is visualized\n# by representing a node as a red box. Note that doxygen if the number of direct\n# children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that\n# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n# Minimum value: 0, maximum value: 10000, default value: 50.\n# This tag requires that the tag HAVE_DOT is set to YES.\n",
                      "markdown": "`# larger than this value, doxygen will truncate the graph, which is visualized\n# by representing a node as a red box. Note that doxygen if the number of direct\n# children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that\n# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n# Minimum value: 0, maximum value: 10000, default value: 50.\n# This tag requires that the tag HAVE_DOT is set to YES.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2652,
                  "startColumn": 9,
                  "endLine": 2652,
                  "endColumn": 14,
                  "snippet": {
                    "text": "DOTFILE_DIRS           =\n\n# The MSCFILE_DIRS tag can be used to specify one or more directories that\n# contain msc files that are included in the documentation (see the \\mscfile\n# command).\n\nMSCFILE_DIRS           =\n",
                    "rendered": {
                      "text": "DOTFILE_DIRS           =\n\n# The MSCFILE_DIRS tag can be used to specify one or more directories that\n# contain msc files that are included in the documentation (see the \\mscfile\n# command).\n\nMSCFILE_DIRS           =\n",
                      "markdown": "`DOTFILE_DIRS           =\n\n# The MSCFILE_DIRS tag can be used to specify one or more directories that\n# contain msc files that are included in the documentation (see the \\mscfile\n# command).\n\nMSCFILE_DIRS           =\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2424,
                  "startColumn": 22,
                  "endLine": 2424,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is allowed\n# to run in parallel. When set to 0 doxygen will base this on the number of\n# processors available in the system. You can set it explicitly to a value\n# larger than 0 to get control over the balance between CPU load and processing\n# speed.\n# Minimum value: 0, maximum value: 32, default value: 0.\n# This tag requires that the tag HAVE_DOT is set to YES.\n",
                    "rendered": {
                      "text": "# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is allowed\n# to run in parallel. When set to 0 doxygen will base this on the number of\n# processors available in the system. You can set it explicitly to a value\n# larger than 0 to get control over the balance between CPU load and processing\n# speed.\n# Minimum value: 0, maximum value: 32, default value: 0.\n# This tag requires that the tag HAVE_DOT is set to YES.\n",
                      "markdown": "`# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is allowed\n# to run in parallel. When set to 0 doxygen will base this on the number of\n# processors available in the system. You can set it explicitly to a value\n# larger than 0 to get control over the balance between CPU load and processing\n# speed.\n# Minimum value: 0, maximum value: 32, default value: 0.\n# This tag requires that the tag HAVE_DOT is set to YES.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2280,
                  "startColumn": 56,
                  "endLine": 2280,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\nENABLE_PREPROCESSING   = YES\n\n# If the MACRO_EXPANSION tag is set to YES, doxygen will expand all macro names\n# in the source code. If set to NO, only conditional compilation will be\n# performed. Macro expansion can be done in a controlled way by setting\n# EXPAND_ONLY_PREDEF to YES.\n",
                    "rendered": {
                      "text": "\nENABLE_PREPROCESSING   = YES\n\n# If the MACRO_EXPANSION tag is set to YES, doxygen will expand all macro names\n# in the source code. If set to NO, only conditional compilation will be\n# performed. Macro expansion can be done in a controlled way by setting\n# EXPAND_ONLY_PREDEF to YES.\n",
                      "markdown": "`\nENABLE_PREPROCESSING   = YES\n\n# If the MACRO_EXPANSION tag is set to YES, doxygen will expand all macro names\n# in the source code. If set to NO, only conditional compilation will be\n# performed. Macro expansion can be done in a controlled way by setting\n# EXPAND_ONLY_PREDEF to YES.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2239,
                  "startColumn": 61,
                  "endLine": 2239,
                  "endColumn": 65,
                  "snippet": {
                    "text": "# If the GENERATE_PERLMOD tag is set to YES, doxygen will generate a Perl module\n# file that captures the structure of the code including all documentation.\n#\n# Note that this feature is still experimental and incomplete at the moment.\n# The default value is: NO.\n\nGENERATE_PERLMOD       = NO\n",
                    "rendered": {
                      "text": "# If the GENERATE_PERLMOD tag is set to YES, doxygen will generate a Perl module\n# file that captures the structure of the code including all documentation.\n#\n# Note that this feature is still experimental and incomplete at the moment.\n# The default value is: NO.\n\nGENERATE_PERLMOD       = NO\n",
                      "markdown": "`# If the GENERATE_PERLMOD tag is set to YES, doxygen will generate a Perl module\n# file that captures the structure of the code including all documentation.\n#\n# Note that this feature is still experimental and incomplete at the moment.\n# The default value is: NO.\n\nGENERATE_PERLMOD       = NO\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2227,
                  "startColumn": 38,
                  "endLine": 2227,
                  "endColumn": 42,
                  "snippet": {
                    "text": "# If the GENERATE_AUTOGEN_DEF tag is set to YES, doxygen will generate an\n# AutoGen Definitions (see http://autogen.sourceforge.net/) file that captures\n# the structure of the code including all documentation. Note that this feature\n# is still experimental and incomplete at the moment.\n# The default value is: NO.\n\nGENERATE_AUTOGEN_DEF   = NO\n",
                    "rendered": {
                      "text": "# If the GENERATE_AUTOGEN_DEF tag is set to YES, doxygen will generate an\n# AutoGen Definitions (see http://autogen.sourceforge.net/) file that captures\n# the structure of the code including all documentation. Note that this feature\n# is still experimental and incomplete at the moment.\n# The default value is: NO.\n\nGENERATE_AUTOGEN_DEF   = NO\n",
                      "markdown": "`# If the GENERATE_AUTOGEN_DEF tag is set to YES, doxygen will generate an\n# AutoGen Definitions (see http://autogen.sourceforge.net/) file that captures\n# the structure of the code including all documentation. Note that this feature\n# is still experimental and incomplete at the moment.\n# The default value is: NO.\n\nGENERATE_AUTOGEN_DEF   = NO\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2145,
                  "startColumn": 29,
                  "endLine": 2145,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n# The MAN_EXTENSION tag determines the extension that is added to the generated\n# man pages. In case the manual section does not start with a number, the number\n# 3 is prepended. The dot (.) at the beginning of the MAN_EXTENSION tag is\n# optional.\n# The default value is: .3.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n",
                    "rendered": {
                      "text": "\n# The MAN_EXTENSION tag determines the extension that is added to the generated\n# man pages. In case the manual section does not start with a number, the number\n# 3 is prepended. The dot (.) at the beginning of the MAN_EXTENSION tag is\n# optional.\n# The default value is: .3.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n",
                      "markdown": "`\n# The MAN_EXTENSION tag determines the extension that is added to the generated\n# man pages. In case the manual section does not start with a number, the number\n# 3 is prepended. The dot (.) at the beginning of the MAN_EXTENSION tag is\n# optional.\n# The default value is: .3.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1764,
                  "startColumn": 12,
                  "endLine": 1764,
                  "endColumn": 16,
                  "snippet": {
                    "text": "# When MathJax is enabled you need to specify the location relative to the HTML\n# output directory using the MATHJAX_RELPATH option. The destination directory\n# should contain the MathJax.js script. For instance, if the mathjax directory\n# is located at the same level as the HTML output directory, then\n# MATHJAX_RELPATH should be ../mathjax. The default value points to the MathJax\n# Content Delivery Network so you can quickly see the result without installing\n# MathJax. However, it is strongly recommended to install a local copy of\n",
                    "rendered": {
                      "text": "# When MathJax is enabled you need to specify the location relative to the HTML\n# output directory using the MATHJAX_RELPATH option. The destination directory\n# should contain the MathJax.js script. For instance, if the mathjax directory\n# is located at the same level as the HTML output directory, then\n# MATHJAX_RELPATH should be ../mathjax. The default value points to the MathJax\n# Content Delivery Network so you can quickly see the result without installing\n# MathJax. However, it is strongly recommended to install a local copy of\n",
                      "markdown": "`# When MathJax is enabled you need to specify the location relative to the HTML\n# output directory using the MATHJAX_RELPATH option. The destination directory\n# should contain the MathJax.js script. For instance, if the mathjax directory\n# is located at the same level as the HTML output directory, then\n# MATHJAX_RELPATH should be ../mathjax. The default value points to the MathJax\n# Content Delivery Network so you can quickly see the result without installing\n# MathJax. However, it is strongly recommended to install a local copy of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1699,
                  "startColumn": 57,
                  "endLine": 1699,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# If the HTML_FORMULA_FORMAT option is set to svg, doxygen will use the pdf2svg\n# tool (see https://github.com/dawbarton/pdf2svg) or inkscape (see\n# https://inkscape.org) to generate formulas as SVG images instead of PNGs for\n# the HTML output. These images will generally look nicer at scaled resolutions.\n# Possible values are: png (the default) and svg (looks nicer but requires the\n# pdf2svg or inkscape tool).\n# The default value is: png.\n",
                    "rendered": {
                      "text": "# If the HTML_FORMULA_FORMAT option is set to svg, doxygen will use the pdf2svg\n# tool (see https://github.com/dawbarton/pdf2svg) or inkscape (see\n# https://inkscape.org) to generate formulas as SVG images instead of PNGs for\n# the HTML output. These images will generally look nicer at scaled resolutions.\n# Possible values are: png (the default) and svg (looks nicer but requires the\n# pdf2svg or inkscape tool).\n# The default value is: png.\n",
                      "markdown": "`# If the HTML_FORMULA_FORMAT option is set to svg, doxygen will use the pdf2svg\n# tool (see https://github.com/dawbarton/pdf2svg) or inkscape (see\n# https://inkscape.org) to generate formulas as SVG images instead of PNGs for\n# the HTML output. These images will generally look nicer at scaled resolutions.\n# Possible values are: png (the default) and svg (looks nicer but requires the\n# pdf2svg or inkscape tool).\n# The default value is: png.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1645,
                  "startColumn": 27,
                  "endLine": 1645,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# HTML help feature. Via custom style sheets (see HTML_EXTRA_STYLESHEET) one can\n# further fine tune the look of the index (see \"Fine-tuning the output\"). As an\n# example, the default style sheet generated by doxygen has an example that\n# shows how to put an image at the root of the tree instead of the PROJECT_NAME.\n# Since the tree basically has the same information as the tab index, you could\n# consider setting DISABLE_INDEX to YES when enabling this option.\n# The default value is: NO.\n",
                    "rendered": {
                      "text": "# HTML help feature. Via custom style sheets (see HTML_EXTRA_STYLESHEET) one can\n# further fine tune the look of the index (see \"Fine-tuning the output\"). As an\n# example, the default style sheet generated by doxygen has an example that\n# shows how to put an image at the root of the tree instead of the PROJECT_NAME.\n# Since the tree basically has the same information as the tab index, you could\n# consider setting DISABLE_INDEX to YES when enabling this option.\n# The default value is: NO.\n",
                      "markdown": "`# HTML help feature. Via custom style sheets (see HTML_EXTRA_STYLESHEET) one can\n# further fine tune the look of the index (see \"Fine-tuning the output\"). As an\n# example, the default style sheet generated by doxygen has an example that\n# shows how to put an image at the root of the tree instead of the PROJECT_NAME.\n# Since the tree basically has the same information as the tab index, you could\n# consider setting DISABLE_INDEX to YES when enabling this option.\n# The default value is: NO.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1627,
                  "startColumn": 73,
                  "endLine": 1627,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\n# If you want full control over the layout of the generated HTML pages it might\n# be necessary to disable the index and replace it with your own. The\n# DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at top\n# of each HTML page. A value of NO enables the index and the value YES disables\n# it. Since the tabs in the index contain the same information as the navigation\n# tree, you can set this option to YES if you also set GENERATE_TREEVIEW to YES.\n",
                    "rendered": {
                      "text": "\n# If you want full control over the layout of the generated HTML pages it might\n# be necessary to disable the index and replace it with your own. The\n# DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at top\n# of each HTML page. A value of NO enables the index and the value YES disables\n# it. Since the tabs in the index contain the same information as the navigation\n# tree, you can set this option to YES if you also set GENERATE_TREEVIEW to YES.\n",
                      "markdown": "`\n# If you want full control over the layout of the generated HTML pages it might\n# be necessary to disable the index and replace it with your own. The\n# DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at top\n# of each HTML page. A value of NO enables the index and the value YES disables\n# it. Since the tabs in the index contain the same information as the navigation\n# tree, you can set this option to YES if you also set GENERATE_TREEVIEW to YES.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1625,
                  "startColumn": 18,
                  "endLine": 1625,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\nECLIPSE_DOC_ID         = org.doxygen.Project\n\n# If you want full control over the layout of the generated HTML pages it might\n# be necessary to disable the index and replace it with your own. The\n# DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at top\n# of each HTML page. A value of NO enables the index and the value YES disables\n",
                    "rendered": {
                      "text": "\nECLIPSE_DOC_ID         = org.doxygen.Project\n\n# If you want full control over the layout of the generated HTML pages it might\n# be necessary to disable the index and replace it with your own. The\n# DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at top\n# of each HTML page. A value of NO enables the index and the value YES disables\n",
                      "markdown": "`\nECLIPSE_DOC_ID         = org.doxygen.Project\n\n# If you want full control over the layout of the generated HTML pages it might\n# be necessary to disable the index and replace it with your own. The\n# DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at top\n# of each HTML page. A value of NO enables the index and the value YES disables\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1482,
                  "startColumn": 10,
                  "endLine": 1482,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# on Windows. In the beginning of 2021 Microsoft took the original page, with\n# a.o. the download links, offline the HTML help workshop was already many years\n# in maintenance mode). You can download the HTML help workshop from the web\n# archives at Installation executable (see:\n# http://web.archive.org/web/20160201063255/http://download.microsoft.com/downlo\n# ad/0/A/9/0A939EF6-E31C-430F-A3DF-DFAE7960D564/htmlhelp.exe).\n#\n",
                    "rendered": {
                      "text": "# on Windows. In the beginning of 2021 Microsoft took the original page, with\n# a.o. the download links, offline the HTML help workshop was already many years\n# in maintenance mode). You can download the HTML help workshop from the web\n# archives at Installation executable (see:\n# http://web.archive.org/web/20160201063255/http://download.microsoft.com/downlo\n# ad/0/A/9/0A939EF6-E31C-430F-A3DF-DFAE7960D564/htmlhelp.exe).\n#\n",
                      "markdown": "`# on Windows. In the beginning of 2021 Microsoft took the original page, with\n# a.o. the download links, offline the HTML help workshop was already many years\n# in maintenance mode). You can download the HTML help workshop from the web\n# archives at Installation executable (see:\n# http://web.archive.org/web/20160201063255/http://download.microsoft.com/downlo\n# ad/0/A/9/0A939EF6-E31C-430F-A3DF-DFAE7960D564/htmlhelp.exe).\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1431,
                  "startColumn": 77,
                  "endLine": 1432,
                  "snippet": {
                    "text": "# create a documentation set, doxygen will generate a Makefile in the HTML\n# output directory. Running make will produce the docset in that directory and\n# running make install will install the docset in\n# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find it at\n# startup. See https://developer.apple.com/library/archive/featuredarticles/Doxy\n# genXcode/_index.html for more information.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n",
                    "rendered": {
                      "text": "# create a documentation set, doxygen will generate a Makefile in the HTML\n# output directory. Running make will produce the docset in that directory and\n# running make install will install the docset in\n# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find it at\n# startup. See https://developer.apple.com/library/archive/featuredarticles/Doxy\n# genXcode/_index.html for more information.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n",
                      "markdown": "`# create a documentation set, doxygen will generate a Makefile in the HTML\n# output directory. Running make will produce the docset in that directory and\n# running make install will install the docset in\n# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find it at\n# startup. See https://developer.apple.com/library/archive/featuredarticles/Doxy\n# genXcode/_index.html for more information.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1414,
                  "startColumn": 19,
                  "endLine": 1414,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n# representing an infinite number of entries and will result in a full expanded\n",
                    "rendered": {
                      "text": "# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n# representing an infinite number of entries and will result in a full expanded\n",
                      "markdown": "`# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n# representing an infinite number of entries and will result in a full expanded\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1413,
                  "startColumn": 57,
                  "endLine": 1413,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n",
                    "rendered": {
                      "text": "\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n",
                      "markdown": "`\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1412,
                  "startColumn": 70,
                  "endLine": 1413,
                  "snippet": {
                    "text": "HTML_DYNAMIC_SECTIONS  = NO\n\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n",
                    "rendered": {
                      "text": "HTML_DYNAMIC_SECTIONS  = NO\n\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n",
                      "markdown": "`HTML_DYNAMIC_SECTIONS  = NO\n\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1411,
                  "startColumn": 37,
                  "endLine": 1411,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nHTML_DYNAMIC_SECTIONS  = NO\n\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n",
                    "rendered": {
                      "text": "\nHTML_DYNAMIC_SECTIONS  = NO\n\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n",
                      "markdown": "`\nHTML_DYNAMIC_SECTIONS  = NO\n\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 888,
                  "startColumn": 23,
                  "endLine": 888,
                  "endColumn": 27,
                  "snippet": {
                    "text": "# Example:\n# WARN_LINE_FORMAT = \"'vi $file +$line'\"\n# See also: WARN_FORMAT\n# The default value is: at line $line of file $file.\n\nWARN_LINE_FORMAT       = \"at line $line of file $file\"\n\n",
                    "rendered": {
                      "text": "# Example:\n# WARN_LINE_FORMAT = \"'vi $file +$line'\"\n# See also: WARN_FORMAT\n# The default value is: at line $line of file $file.\n\nWARN_LINE_FORMAT       = \"at line $line of file $file\"\n\n",
                      "markdown": "`# Example:\n# WARN_LINE_FORMAT = \"'vi $file +$line'\"\n# See also: WARN_FORMAT\n# The default value is: at line $line of file $file.\n\nWARN_LINE_FORMAT       = \"at line $line of file $file\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 865,
                  "startColumn": 1,
                  "endLine": 865,
                  "endColumn": 5,
                  "snippet": {
                    "text": "# If the WARN_AS_ERROR tag is set to YES then doxygen will immediately stop when\n# a warning is encountered. If the WARN_AS_ERROR tag is set to FAIL_ON_WARNINGS\n# then doxygen will continue running as if WARN_AS_ERROR tag is set to NO, but\n# at the end of the doxygen process doxygen will return with a non-zero status.\n# Possible values are: NO, YES and FAIL_ON_WARNINGS.\n# The default value is: NO.\n\n",
                    "rendered": {
                      "text": "# If the WARN_AS_ERROR tag is set to YES then doxygen will immediately stop when\n# a warning is encountered. If the WARN_AS_ERROR tag is set to FAIL_ON_WARNINGS\n# then doxygen will continue running as if WARN_AS_ERROR tag is set to NO, but\n# at the end of the doxygen process doxygen will return with a non-zero status.\n# Possible values are: NO, YES and FAIL_ON_WARNINGS.\n# The default value is: NO.\n\n",
                      "markdown": "`# If the WARN_AS_ERROR tag is set to YES then doxygen will immediately stop when\n# a warning is encountered. If the WARN_AS_ERROR tag is set to FAIL_ON_WARNINGS\n# then doxygen will continue running as if WARN_AS_ERROR tag is set to NO, but\n# at the end of the doxygen process doxygen will return with a non-zero status.\n# Possible values are: NO, YES and FAIL_ON_WARNINGS.\n# The default value is: NO.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 778,
                  "startColumn": 13,
                  "endLine": 778,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n# The FILE_VERSION_FILTER tag can be used to specify a program or script that\n# doxygen should invoke to get the current version for each file (typically from\n# the version control system). Doxygen will invoke the program by executing (via\n# popen()) the command command input-file, where command is the value of the\n# FILE_VERSION_FILTER tag, and input-file is the name of an input file provided\n# by doxygen. Whatever the program writes to standard output is used as the file\n",
                    "rendered": {
                      "text": "\n# The FILE_VERSION_FILTER tag can be used to specify a program or script that\n# doxygen should invoke to get the current version for each file (typically from\n# the version control system). Doxygen will invoke the program by executing (via\n# popen()) the command command input-file, where command is the value of the\n# FILE_VERSION_FILTER tag, and input-file is the name of an input file provided\n# by doxygen. Whatever the program writes to standard output is used as the file\n",
                      "markdown": "`\n# The FILE_VERSION_FILTER tag can be used to specify a program or script that\n# doxygen should invoke to get the current version for each file (typically from\n# the version control system). Doxygen will invoke the program by executing (via\n# popen()) the command command input-file, where command is the value of the\n# FILE_VERSION_FILTER tag, and input-file is the name of an input file provided\n# by doxygen. Whatever the program writes to standard output is used as the file\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 755,
                  "startColumn": 74,
                  "endLine": 756,
                  "snippet": {
                    "text": "\nMAX_INITIALIZER_LINES  = 30\n\n# Set the SHOW_USED_FILES tag to NO to disable the list of files generated at\n# the bottom of the documentation of classes and structs. If set to YES, the\n# list will mention the files that were used to generate the documentation.\n# The default value is: YES.\n\n",
                    "rendered": {
                      "text": "\nMAX_INITIALIZER_LINES  = 30\n\n# Set the SHOW_USED_FILES tag to NO to disable the list of files generated at\n# the bottom of the documentation of classes and structs. If set to YES, the\n# list will mention the files that were used to generate the documentation.\n# The default value is: YES.\n\n",
                      "markdown": "`\nMAX_INITIALIZER_LINES  = 30\n\n# Set the SHOW_USED_FILES tag to NO to disable the list of files generated at\n# the bottom of the documentation of classes and structs. If set to YES, the\n# list will mention the files that were used to generate the documentation.\n# The default value is: YES.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 481,
                  "startColumn": 8,
                  "endLine": 481,
                  "endColumn": 12,
                  "snippet": {
                    "text": "# during processing. When set to 0 doxygen will based this on the number of\n# cores available in the system. You can set it explicitly to a value larger\n# than 0 to get more control over the balance between CPU load and processing\n# speed. At this moment only the input processing can be done using multiple\n# threads. Since this is still an experimental feature the default is set to 1,\n# which effectively disables parallel processing. Please report any issues you\n# encounter. Generating dot graphs in parallel is controlled by the\n",
                    "rendered": {
                      "text": "# during processing. When set to 0 doxygen will based this on the number of\n# cores available in the system. You can set it explicitly to a value larger\n# than 0 to get more control over the balance between CPU load and processing\n# speed. At this moment only the input processing can be done using multiple\n# threads. Since this is still an experimental feature the default is set to 1,\n# which effectively disables parallel processing. Please report any issues you\n# encounter. Generating dot graphs in parallel is controlled by the\n",
                      "markdown": "`# during processing. When set to 0 doxygen will based this on the number of\n# cores available in the system. You can set it explicitly to a value larger\n# than 0 to get more control over the balance between CPU load and processing\n# speed. At this moment only the input processing can be done using multiple\n# threads. Since this is still an experimental feature the default is set to 1,\n# which effectively disables parallel processing. Please report any issues you\n# encounter. Generating dot graphs in parallel is controlled by the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 20,
                  "endLine": 480,
                  "endColumn": 29,
                  "snippet": {
                    "text": "# The NUM_PROC_THREADS specifies the number of threads doxygen is allowed to use\n# during processing. When set to 0 doxygen will based this on the number of\n# cores available in the system. You can set it explicitly to a value larger\n# than 0 to get more control over the balance between CPU load and processing\n# speed. At this moment only the input processing can be done using multiple\n# threads. Since this is still an experimental feature the default is set to 1,\n# which effectively disables parallel processing. Please report any issues you\n",
                    "rendered": {
                      "text": "# The NUM_PROC_THREADS specifies the number of threads doxygen is allowed to use\n# during processing. When set to 0 doxygen will based this on the number of\n# cores available in the system. You can set it explicitly to a value larger\n# than 0 to get more control over the balance between CPU load and processing\n# speed. At this moment only the input processing can be done using multiple\n# threads. Since this is still an experimental feature the default is set to 1,\n# which effectively disables parallel processing. Please report any issues you\n",
                      "markdown": "`# The NUM_PROC_THREADS specifies the number of threads doxygen is allowed to use\n# during processing. When set to 0 doxygen will based this on the number of\n# cores available in the system. You can set it explicitly to a value larger\n# than 0 to get more control over the balance between CPU load and processing\n# speed. At this moment only the input processing can be done using multiple\n# threads. Since this is still an experimental feature the default is set to 1,\n# which effectively disables parallel processing. Please report any issues you\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 10,
                  "endLine": 471,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# doxygen will become slower. If the cache is too large, memory is wasted. The\n# cache size is given by this formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range\n# is 0..9, the default is 0, corresponding to a cache size of 2^16=65536\n# symbols. At the end of a run doxygen will report the cache usage and suggest\n# the optimal cache size from a speed point of view.\n# Minimum value: 0, maximum value: 9, default value: 0.\n\n",
                    "rendered": {
                      "text": "# doxygen will become slower. If the cache is too large, memory is wasted. The\n# cache size is given by this formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range\n# is 0..9, the default is 0, corresponding to a cache size of 2^16=65536\n# symbols. At the end of a run doxygen will report the cache usage and suggest\n# the optimal cache size from a speed point of view.\n# Minimum value: 0, maximum value: 9, default value: 0.\n\n",
                      "markdown": "`# doxygen will become slower. If the cache is too large, memory is wasted. The\n# cache size is given by this formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range\n# is 0..9, the default is 0, corresponding to a cache size of 2^16=65536\n# symbols. At the end of a run doxygen will report the cache usage and suggest\n# the optimal cache size from a speed point of view.\n# Minimum value: 0, maximum value: 9, default value: 0.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 13,
                  "endLine": 87,
                  "endColumn": 17,
                  "snippet": {
                    "text": "# Controls the number of sub-directories that will be created when\n# CREATE_SUBDIRS tag is set to YES. Level 0 represents 16 directories, and every\n# level increment doubles the number of directories, resulting in 4096\n# directories at level 8 which is the default and also the maximum value. The\n# sub-directories are organized in 2 levels, the first level always has a fixed\n# numer of 16 directories.\n# Minimum value: 0, maximum value: 8, default value: 8.\n",
                    "rendered": {
                      "text": "# Controls the number of sub-directories that will be created when\n# CREATE_SUBDIRS tag is set to YES. Level 0 represents 16 directories, and every\n# level increment doubles the number of directories, resulting in 4096\n# directories at level 8 which is the default and also the maximum value. The\n# sub-directories are organized in 2 levels, the first level always has a fixed\n# numer of 16 directories.\n# Minimum value: 0, maximum value: 8, default value: 8.\n",
                      "markdown": "`# Controls the number of sub-directories that will be created when\n# CREATE_SUBDIRS tag is set to YES. Level 0 represents 16 directories, and every\n# level increment doubles the number of directories, resulting in 4096\n# directories at level 8 which is the default and also the maximum value. The\n# sub-directories are organized in 2 levels, the first level always has a fixed\n# numer of 16 directories.\n# Minimum value: 0, maximum value: 8, default value: 8.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 1,
                  "endLine": 79,
                  "endColumn": 10,
                  "snippet": {
                    "text": "# option can be useful when feeding doxygen a huge amount of source files, where\n# putting all generated files in the same directory would otherwise causes\n# performance problems for the file system. Adapt CREATE_SUBDIRS_LEVEL to\n# control the number of sub-directories.\n# The default value is: NO.\n\nCREATE_SUBDIRS         = NO\n",
                    "rendered": {
                      "text": "# option can be useful when feeding doxygen a huge amount of source files, where\n# putting all generated files in the same directory would otherwise causes\n# performance problems for the file system. Adapt CREATE_SUBDIRS_LEVEL to\n# control the number of sub-directories.\n# The default value is: NO.\n\nCREATE_SUBDIRS         = NO\n",
                      "markdown": "`# option can be useful when feeding doxygen a huge amount of source files, where\n# putting all generated files in the same directory would otherwise causes\n# performance problems for the file system. Adapt CREATE_SUBDIRS_LEVEL to\n# control the number of sub-directories.\n# The default value is: NO.\n\nCREATE_SUBDIRS         = NO\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 28,
                  "endLine": 54,
                  "endColumn": 32,
                  "snippet": {
                    "text": "PROJECT_NUMBER         =\n\n# Using the PROJECT_BRIEF tag one can provide an optional one line description\n# for a project that appears at the top of each page and should give viewer a\n# quick idea about the purpose of the project. Keep the description short.\n\nPROJECT_BRIEF          = \"C++ wrapper around the aws-c-* libraries. Provides Cross-Platform Transport Protocols and SSL/TLS implementations for C++.\"\n",
                    "rendered": {
                      "text": "PROJECT_NUMBER         =\n\n# Using the PROJECT_BRIEF tag one can provide an optional one line description\n# for a project that appears at the top of each page and should give viewer a\n# quick idea about the purpose of the project. Keep the description short.\n\nPROJECT_BRIEF          = \"C++ wrapper around the aws-c-* libraries. Provides Cross-Platform Transport Protocols and SSL/TLS implementations for C++.\"\n",
                      "markdown": "`PROJECT_NUMBER         =\n\n# Using the PROJECT_BRIEF tag one can provide an optional one line description\n# for a project that appears at the top of each page and should give viewer a\n# quick idea about the purpose of the project. Keep the description short.\n\nPROJECT_BRIEF          = \"C++ wrapper around the aws-c-* libraries. Provides Cross-Platform Transport Protocols and SSL/TLS implementations for C++.\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n# The PROJECT_NUMBER tag can be used to enter a project or revision number. This\n# could be handy for archiving the generated documentation or if some version\n# control system is used.\n\nPROJECT_NUMBER         =\n\n",
                    "rendered": {
                      "text": "\n# The PROJECT_NUMBER tag can be used to enter a project or revision number. This\n# could be handy for archiving the generated documentation or if some version\n# control system is used.\n\nPROJECT_NUMBER         =\n\n",
                      "markdown": "`\n# The PROJECT_NUMBER tag can be used to enter a project or revision number. This\n# could be handy for archiving the generated documentation or if some version\n# control system is used.\n\nPROJECT_NUMBER         =\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2697,
                  "startColumn": 41,
                  "endLine": 2697,
                  "endColumn": 47,
                  "snippet": {
                    "text": "# generated by dot. A depth value of 3 means that only nodes reachable from the\n# root by following a path via at most 3 edges will be shown. Nodes that lay\n# further from the root node will be omitted. Note that setting this option to 1\n# or 2 may greatly reduce the computation time needed for large code bases. Also\n# note that the size of a graph can be further restricted by\n# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.\n# Minimum value: 0, maximum value: 1000, default value: 0.\n",
                    "rendered": {
                      "text": "# generated by dot. A depth value of 3 means that only nodes reachable from the\n# root by following a path via at most 3 edges will be shown. Nodes that lay\n# further from the root node will be omitted. Note that setting this option to 1\n# or 2 may greatly reduce the computation time needed for large code bases. Also\n# note that the size of a graph can be further restricted by\n# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.\n# Minimum value: 0, maximum value: 1000, default value: 0.\n",
                      "markdown": "`# generated by dot. A depth value of 3 means that only nodes reachable from the\n# root by following a path via at most 3 edges will be shown. Nodes that lay\n# further from the root node will be omitted. Note that setting this option to 1\n# or 2 may greatly reduce the computation time needed for large code bases. Also\n# note that the size of a graph can be further restricted by\n# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.\n# Minimum value: 0, maximum value: 1000, default value: 0.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2696,
                  "startColumn": 23,
                  "endLine": 2696,
                  "endColumn": 29,
                  "snippet": {
                    "text": "# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the graphs\n# generated by dot. A depth value of 3 means that only nodes reachable from the\n# root by following a path via at most 3 edges will be shown. Nodes that lay\n# further from the root node will be omitted. Note that setting this option to 1\n# or 2 may greatly reduce the computation time needed for large code bases. Also\n# note that the size of a graph can be further restricted by\n# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.\n",
                    "rendered": {
                      "text": "# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the graphs\n# generated by dot. A depth value of 3 means that only nodes reachable from the\n# root by following a path via at most 3 edges will be shown. Nodes that lay\n# further from the root node will be omitted. Note that setting this option to 1\n# or 2 may greatly reduce the computation time needed for large code bases. Also\n# note that the size of a graph can be further restricted by\n# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.\n",
                      "markdown": "`# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the graphs\n# generated by dot. A depth value of 3 means that only nodes reachable from the\n# root by following a path via at most 3 edges will be shown. Nodes that lay\n# further from the root node will be omitted. Note that setting this option to 1\n# or 2 may greatly reduce the computation time needed for large code bases. Also\n# note that the size of a graph can be further restricted by\n# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2685,
                  "startColumn": 22,
                  "endLine": 2685,
                  "endColumn": 28,
                  "snippet": {
                    "text": "# that will be shown in the graph. If the number of nodes in a graph becomes\n# larger than this value, doxygen will truncate the graph, which is visualized\n# by representing a node as a red box. Note that doxygen if the number of direct\n# children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that\n# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n# Minimum value: 0, maximum value: 10000, default value: 50.\n",
                    "rendered": {
                      "text": "# that will be shown in the graph. If the number of nodes in a graph becomes\n# larger than this value, doxygen will truncate the graph, which is visualized\n# by representing a node as a red box. Note that doxygen if the number of direct\n# children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that\n# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n# Minimum value: 0, maximum value: 10000, default value: 50.\n",
                      "markdown": "`# that will be shown in the graph. If the number of nodes in a graph becomes\n# larger than this value, doxygen will truncate the graph, which is visualized\n# by representing a node as a red box. Note that doxygen if the number of direct\n# children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that\n# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n# Minimum value: 0, maximum value: 10000, default value: 50.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2684,
                  "startColumn": 29,
                  "endLine": 2684,
                  "endColumn": 34,
                  "snippet": {
                    "text": "# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of nodes\n# that will be shown in the graph. If the number of nodes in a graph becomes\n# larger than this value, doxygen will truncate the graph, which is visualized\n# by representing a node as a red box. Note that doxygen if the number of direct\n# children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that\n# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n",
                    "rendered": {
                      "text": "# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of nodes\n# that will be shown in the graph. If the number of nodes in a graph becomes\n# larger than this value, doxygen will truncate the graph, which is visualized\n# by representing a node as a red box. Note that doxygen if the number of direct\n# children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that\n# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n",
                      "markdown": "`# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of nodes\n# that will be shown in the graph. If the number of nodes in a graph becomes\n# larger than this value, doxygen will truncate the graph, which is visualized\n# by representing a node as a red box. Note that doxygen if the number of direct\n# children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that\n# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2684,
                  "startColumn": 19,
                  "endLine": 2684,
                  "endColumn": 25,
                  "snippet": {
                    "text": "# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of nodes\n# that will be shown in the graph. If the number of nodes in a graph becomes\n# larger than this value, doxygen will truncate the graph, which is visualized\n# by representing a node as a red box. Note that doxygen if the number of direct\n# children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that\n# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n",
                    "rendered": {
                      "text": "# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of nodes\n# that will be shown in the graph. If the number of nodes in a graph becomes\n# larger than this value, doxygen will truncate the graph, which is visualized\n# by representing a node as a red box. Note that doxygen if the number of direct\n# children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that\n# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n",
                      "markdown": "`# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of nodes\n# that will be shown in the graph. If the number of nodes in a graph becomes\n# larger than this value, doxygen will truncate the graph, which is visualized\n# by representing a node as a red box. Note that doxygen if the number of direct\n# children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that\n# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2664,
                  "startColumn": 21,
                  "endLine": 2664,
                  "endColumn": 27,
                  "snippet": {
                    "text": "DIAFILE_DIRS           =\n\n# When using plantuml, the PLANTUML_JAR_PATH tag should be used to specify the\n# path where java can find the plantuml.jar file or to the filename of jar file\n# to be used. If left blank, it is assumed PlantUML is not used or called during\n# a preprocessing step. Doxygen will generate a warning when it encounters a\n# \\startuml command in this case and will not generate output for the diagram.\n",
                    "rendered": {
                      "text": "DIAFILE_DIRS           =\n\n# When using plantuml, the PLANTUML_JAR_PATH tag should be used to specify the\n# path where java can find the plantuml.jar file or to the filename of jar file\n# to be used. If left blank, it is assumed PlantUML is not used or called during\n# a preprocessing step. Doxygen will generate a warning when it encounters a\n# \\startuml command in this case and will not generate output for the diagram.\n",
                      "markdown": "`DIAFILE_DIRS           =\n\n# When using plantuml, the PLANTUML_JAR_PATH tag should be used to specify the\n# path where java can find the plantuml.jar file or to the filename of jar file\n# to be used. If left blank, it is assumed PlantUML is not used or called during\n# a preprocessing step. Doxygen will generate a warning when it encounters a\n# \\startuml command in this case and will not generate output for the diagram.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2579,
                  "startColumn": 64,
                  "endLine": 2579,
                  "endColumn": 70,
                  "snippet": {
                    "text": "# If the CALLER_GRAPH tag is set to YES then doxygen will generate a caller\n# dependency graph for every global function or class method.\n#\n# Note that enabling this option will significantly increase the time of a run.\n# So in most cases it will be better to enable caller graphs for selected\n# functions only using the \\callergraph command. Disabling a caller graph can be\n# accomplished by means of the command \\hidecallergraph.\n",
                    "rendered": {
                      "text": "# If the CALLER_GRAPH tag is set to YES then doxygen will generate a caller\n# dependency graph for every global function or class method.\n#\n# Note that enabling this option will significantly increase the time of a run.\n# So in most cases it will be better to enable caller graphs for selected\n# functions only using the \\callergraph command. Disabling a caller graph can be\n# accomplished by means of the command \\hidecallergraph.\n",
                      "markdown": "`# If the CALLER_GRAPH tag is set to YES then doxygen will generate a caller\n# dependency graph for every global function or class method.\n#\n# Note that enabling this option will significantly increase the time of a run.\n# So in most cases it will be better to enable caller graphs for selected\n# functions only using the \\callergraph command. Disabling a caller graph can be\n# accomplished by means of the command \\hidecallergraph.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2567,
                  "startColumn": 64,
                  "endLine": 2567,
                  "endColumn": 70,
                  "snippet": {
                    "text": "# If the CALL_GRAPH tag is set to YES then doxygen will generate a call\n# dependency graph for every global function or class method.\n#\n# Note that enabling this option will significantly increase the time of a run.\n# So in most cases it will be better to enable call graphs for selected\n# functions only using the \\callgraph command. Disabling a call graph can be\n# accomplished by means of the command \\hidecallgraph.\n",
                    "rendered": {
                      "text": "# If the CALL_GRAPH tag is set to YES then doxygen will generate a call\n# dependency graph for every global function or class method.\n#\n# Note that enabling this option will significantly increase the time of a run.\n# So in most cases it will be better to enable call graphs for selected\n# functions only using the \\callgraph command. Disabling a call graph can be\n# accomplished by means of the command \\hidecallgraph.\n",
                      "markdown": "`# If the CALL_GRAPH tag is set to YES then doxygen will generate a call\n# dependency graph for every global function or class method.\n#\n# Note that enabling this option will significantly increase the time of a run.\n# So in most cases it will be better to enable call graphs for selected\n# functions only using the \\callgraph command. Disabling a call graph can be\n# accomplished by means of the command \\hidecallgraph.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2461,
                  "startColumn": 36,
                  "endLine": 2461,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nDOT_NODE_ATTR          = \"shape=box,height=0.2,width=0.4\"\n\n# You can set the path where dot can find font specified with fontname in\n# DOT_COMMON_ATTR and others dot attributes.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\n",
                    "rendered": {
                      "text": "\nDOT_NODE_ATTR          = \"shape=box,height=0.2,width=0.4\"\n\n# You can set the path where dot can find font specified with fontname in\n# DOT_COMMON_ATTR and others dot attributes.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\n",
                      "markdown": "`\nDOT_NODE_ATTR          = \"shape=box,height=0.2,width=0.4\"\n\n# You can set the path where dot can find font specified with fontname in\n# DOT_COMMON_ATTR and others dot attributes.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2436,
                  "startColumn": 4,
                  "endLine": 2436,
                  "endColumn": 10,
                  "snippet": {
                    "text": "# doxygen generates you can specify fontname, fontcolor and fontsize attributes.\n# For details please see <a href=https://graphviz.org/doc/info/attrs.html>Node,\n# Edge and Graph Attributes specification</a> You need to make sure dot is able\n# to find the font, which can be done by putting it in a standard location or by\n# setting the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the\n# directory containing the font. Default graphviz fontsize is 14.\n# The default value is: fontname=Helvetica,fontsize=10.\n",
                    "rendered": {
                      "text": "# doxygen generates you can specify fontname, fontcolor and fontsize attributes.\n# For details please see <a href=https://graphviz.org/doc/info/attrs.html>Node,\n# Edge and Graph Attributes specification</a> You need to make sure dot is able\n# to find the font, which can be done by putting it in a standard location or by\n# setting the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the\n# directory containing the font. Default graphviz fontsize is 14.\n# The default value is: fontname=Helvetica,fontsize=10.\n",
                      "markdown": "`# doxygen generates you can specify fontname, fontcolor and fontsize attributes.\n# For details please see <a href=https://graphviz.org/doc/info/attrs.html>Node,\n# Edge and Graph Attributes specification</a> You need to make sure dot is able\n# to find the font, which can be done by putting it in a standard location or by\n# setting the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the\n# directory containing the font. Default graphviz fontsize is 14.\n# The default value is: fontname=Helvetica,fontsize=10.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2280,
                  "startColumn": 56,
                  "endLine": 2280,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\nENABLE_PREPROCESSING   = YES\n\n# If the MACRO_EXPANSION tag is set to YES, doxygen will expand all macro names\n# in the source code. If set to NO, only conditional compilation will be\n# performed. Macro expansion can be done in a controlled way by setting\n# EXPAND_ONLY_PREDEF to YES.\n",
                    "rendered": {
                      "text": "\nENABLE_PREPROCESSING   = YES\n\n# If the MACRO_EXPANSION tag is set to YES, doxygen will expand all macro names\n# in the source code. If set to NO, only conditional compilation will be\n# performed. Macro expansion can be done in a controlled way by setting\n# EXPAND_ONLY_PREDEF to YES.\n",
                      "markdown": "`\nENABLE_PREPROCESSING   = YES\n\n# If the MACRO_EXPANSION tag is set to YES, doxygen will expand all macro names\n# in the source code. If set to NO, only conditional compilation will be\n# performed. Macro expansion can be done in a controlled way by setting\n# EXPAND_ONLY_PREDEF to YES.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2255,
                  "startColumn": 57,
                  "endLine": 2255,
                  "endColumn": 63,
                  "snippet": {
                    "text": "# If the PERLMOD_PRETTY tag is set to YES, the Perl module output will be nicely\n# formatted so it can be parsed by a human reader. This is useful if you want to\n# understand what is going on. On the other hand, if this tag is set to NO, the\n# size of the Perl module output will be much smaller and Perl will parse it\n# just the same.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n",
                    "rendered": {
                      "text": "# If the PERLMOD_PRETTY tag is set to YES, the Perl module output will be nicely\n# formatted so it can be parsed by a human reader. This is useful if you want to\n# understand what is going on. On the other hand, if this tag is set to NO, the\n# size of the Perl module output will be much smaller and Perl will parse it\n# just the same.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n",
                      "markdown": "`# If the PERLMOD_PRETTY tag is set to YES, the Perl module output will be nicely\n# formatted so it can be parsed by a human reader. This is useful if you want to\n# understand what is going on. On the other hand, if this tag is set to NO, the\n# size of the Perl module output will be much smaller and Perl will parse it\n# just the same.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2255,
                  "startColumn": 13,
                  "endLine": 2255,
                  "endColumn": 19,
                  "snippet": {
                    "text": "# If the PERLMOD_PRETTY tag is set to YES, the Perl module output will be nicely\n# formatted so it can be parsed by a human reader. This is useful if you want to\n# understand what is going on. On the other hand, if this tag is set to NO, the\n# size of the Perl module output will be much smaller and Perl will parse it\n# just the same.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n",
                    "rendered": {
                      "text": "# If the PERLMOD_PRETTY tag is set to YES, the Perl module output will be nicely\n# formatted so it can be parsed by a human reader. This is useful if you want to\n# understand what is going on. On the other hand, if this tag is set to NO, the\n# size of the Perl module output will be much smaller and Perl will parse it\n# just the same.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n",
                      "markdown": "`# If the PERLMOD_PRETTY tag is set to YES, the Perl module output will be nicely\n# formatted so it can be parsed by a human reader. This is useful if you want to\n# understand what is going on. On the other hand, if this tag is set to NO, the\n# size of the Perl module output will be much smaller and Perl will parse it\n# just the same.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2252,
                  "startColumn": 46,
                  "endLine": 2252,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\nPERLMOD_LATEX          = NO\n\n# If the PERLMOD_PRETTY tag is set to YES, the Perl module output will be nicely\n# formatted so it can be parsed by a human reader. This is useful if you want to\n# understand what is going on. On the other hand, if this tag is set to NO, the\n# size of the Perl module output will be much smaller and Perl will parse it\n",
                    "rendered": {
                      "text": "\nPERLMOD_LATEX          = NO\n\n# If the PERLMOD_PRETTY tag is set to YES, the Perl module output will be nicely\n# formatted so it can be parsed by a human reader. This is useful if you want to\n# understand what is going on. On the other hand, if this tag is set to NO, the\n# size of the Perl module output will be much smaller and Perl will parse it\n",
                      "markdown": "`\nPERLMOD_LATEX          = NO\n\n# If the PERLMOD_PRETTY tag is set to YES, the Perl module output will be nicely\n# formatted so it can be parsed by a human reader. This is useful if you want to\n# understand what is going on. On the other hand, if this tag is set to NO, the\n# size of the Perl module output will be much smaller and Perl will parse it\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2246,
                  "startColumn": 17,
                  "endLine": 2246,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n# If the PERLMOD_LATEX tag is set to YES, doxygen will generate the necessary\n# Makefile rules, Perl scripts and LaTeX code to be able to generate PDF and DVI\n# output from the Perl module output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n\n",
                    "rendered": {
                      "text": "\n# If the PERLMOD_LATEX tag is set to YES, doxygen will generate the necessary\n# Makefile rules, Perl scripts and LaTeX code to be able to generate PDF and DVI\n# output from the Perl module output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n\n",
                      "markdown": "`\n# If the PERLMOD_LATEX tag is set to YES, doxygen will generate the necessary\n# Makefile rules, Perl scripts and LaTeX code to be able to generate PDF and DVI\n# output from the Perl module output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2245,
                  "startColumn": 17,
                  "endLine": 2245,
                  "endColumn": 23,
                  "snippet": {
                    "text": "GENERATE_PERLMOD       = NO\n\n# If the PERLMOD_LATEX tag is set to YES, doxygen will generate the necessary\n# Makefile rules, Perl scripts and LaTeX code to be able to generate PDF and DVI\n# output from the Perl module output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n",
                    "rendered": {
                      "text": "GENERATE_PERLMOD       = NO\n\n# If the PERLMOD_LATEX tag is set to YES, doxygen will generate the necessary\n# Makefile rules, Perl scripts and LaTeX code to be able to generate PDF and DVI\n# output from the Perl module output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n",
                      "markdown": "`GENERATE_PERLMOD       = NO\n\n# If the PERLMOD_LATEX tag is set to YES, doxygen will generate the necessary\n# Makefile rules, Perl scripts and LaTeX code to be able to generate PDF and DVI\n# output from the Perl module output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2236,
                  "startColumn": 68,
                  "endLine": 2236,
                  "endColumn": 74,
                  "snippet": {
                    "text": "# Configuration options related to the Perl module output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_PERLMOD tag is set to YES, doxygen will generate a Perl module\n# file that captures the structure of the code including all documentation.\n#\n# Note that this feature is still experimental and incomplete at the moment.\n",
                    "rendered": {
                      "text": "# Configuration options related to the Perl module output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_PERLMOD tag is set to YES, doxygen will generate a Perl module\n# file that captures the structure of the code including all documentation.\n#\n# Note that this feature is still experimental and incomplete at the moment.\n",
                      "markdown": "`# Configuration options related to the Perl module output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_PERLMOD tag is set to YES, doxygen will generate a Perl module\n# file that captures the structure of the code including all documentation.\n#\n# Note that this feature is still experimental and incomplete at the moment.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2233,
                  "startColumn": 38,
                  "endLine": 2233,
                  "endColumn": 44,
                  "snippet": {
                    "text": "GENERATE_AUTOGEN_DEF   = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to the Perl module output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_PERLMOD tag is set to YES, doxygen will generate a Perl module\n",
                    "rendered": {
                      "text": "GENERATE_AUTOGEN_DEF   = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to the Perl module output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_PERLMOD tag is set to YES, doxygen will generate a Perl module\n",
                      "markdown": "`GENERATE_AUTOGEN_DEF   = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to the Perl module output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_PERLMOD tag is set to YES, doxygen will generate a Perl module\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2162,
                  "startColumn": 41,
                  "endLine": 2162,
                  "endColumn": 47,
                  "snippet": {
                    "text": "# If the MAN_LINKS tag is set to YES and doxygen generates man output, then it\n# will generate one additional man file for each entity documented in the real\n# man page(s). These additional files only source the real man page, but without\n# them the man command would be unable to find the correct page.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\n",
                    "rendered": {
                      "text": "# If the MAN_LINKS tag is set to YES and doxygen generates man output, then it\n# will generate one additional man file for each entity documented in the real\n# man page(s). These additional files only source the real man page, but without\n# them the man command would be unable to find the correct page.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\n",
                      "markdown": "`# If the MAN_LINKS tag is set to YES and doxygen generates man output, then it\n# will generate one additional man file for each entity documented in the real\n# man page(s). These additional files only source the real man page, but without\n# them the man command would be unable to find the correct page.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 2053,
                  "startColumn": 32,
                  "endLine": 2053,
                  "endColumn": 38,
                  "snippet": {
                    "text": "LATEX_BIB_STYLE        = plain\n\n# If the LATEX_TIMESTAMP tag is set to YES then the footer of each generated\n# page will contain the date and time when the page was generated. Setting this\n# to NO can help when comparing the output of multiple runs.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n",
                    "rendered": {
                      "text": "LATEX_BIB_STYLE        = plain\n\n# If the LATEX_TIMESTAMP tag is set to YES then the footer of each generated\n# page will contain the date and time when the page was generated. Setting this\n# to NO can help when comparing the output of multiple runs.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n",
                      "markdown": "`LATEX_BIB_STYLE        = plain\n\n# If the LATEX_TIMESTAMP tag is set to YES then the footer of each generated\n# page will contain the date and time when the page was generated. Setting this\n# to NO can help when comparing the output of multiple runs.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1830,
                  "startColumn": 1,
                  "endLine": 1830,
                  "endColumn": 9,
                  "snippet": {
                    "text": "SERVER_BASED_SEARCH    = NO\n\n# When EXTERNAL_SEARCH tag is enabled doxygen will no longer generate the PHP\n# script for searching. Instead the search results are written to an XML file\n# which needs to be processed by an external indexer. Doxygen will invoke an\n# external search engine pointed to by the SEARCHENGINE_URL option to obtain the\n# search results.\n",
                    "rendered": {
                      "text": "SERVER_BASED_SEARCH    = NO\n\n# When EXTERNAL_SEARCH tag is enabled doxygen will no longer generate the PHP\n# script for searching. Instead the search results are written to an XML file\n# which needs to be processed by an external indexer. Doxygen will invoke an\n# external search engine pointed to by the SEARCHENGINE_URL option to obtain the\n# search results.\n",
                      "markdown": "`SERVER_BASED_SEARCH    = NO\n\n# When EXTERNAL_SEARCH tag is enabled doxygen will no longer generate the PHP\n# script for searching. Instead the search results are written to an XML file\n# which needs to be processed by an external indexer. Doxygen will invoke an\n# external search engine pointed to by the SEARCHENGINE_URL option to obtain the\n# search results.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1829,
                  "startColumn": 73,
                  "endLine": 1830,
                  "snippet": {
                    "text": "\nSERVER_BASED_SEARCH    = NO\n\n# When EXTERNAL_SEARCH tag is enabled doxygen will no longer generate the PHP\n# script for searching. Instead the search results are written to an XML file\n# which needs to be processed by an external indexer. Doxygen will invoke an\n# external search engine pointed to by the SEARCHENGINE_URL option to obtain the\n# search results.\n",
                    "rendered": {
                      "text": "\nSERVER_BASED_SEARCH    = NO\n\n# When EXTERNAL_SEARCH tag is enabled doxygen will no longer generate the PHP\n# script for searching. Instead the search results are written to an XML file\n# which needs to be processed by an external indexer. Doxygen will invoke an\n# external search engine pointed to by the SEARCHENGINE_URL option to obtain the\n# search results.\n",
                      "markdown": "`\nSERVER_BASED_SEARCH    = NO\n\n# When EXTERNAL_SEARCH tag is enabled doxygen will no longer generate the PHP\n# script for searching. Instead the search results are written to an XML file\n# which needs to be processed by an external indexer. Doxygen will invoke an\n# external search engine pointed to by the SEARCHENGINE_URL option to obtain the\n# search results.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1820,
                  "startColumn": 49,
                  "endLine": 1820,
                  "endColumn": 54,
                  "snippet": {
                    "text": "# When the SERVER_BASED_SEARCH tag is enabled the search engine will be\n# implemented using a web server instead of a web client using JavaScript. There\n# are two flavors of web server based searching depending on the EXTERNAL_SEARCH\n# setting. When disabled, doxygen will generate a PHP script for searching and\n# an index file used by the script. When EXTERNAL_SEARCH is enabled the indexing\n# and searching needs to be provided by external tools. See the section\n# \"External Indexing and Searching\" for details.\n",
                    "rendered": {
                      "text": "# When the SERVER_BASED_SEARCH tag is enabled the search engine will be\n# implemented using a web server instead of a web client using JavaScript. There\n# are two flavors of web server based searching depending on the EXTERNAL_SEARCH\n# setting. When disabled, doxygen will generate a PHP script for searching and\n# an index file used by the script. When EXTERNAL_SEARCH is enabled the indexing\n# and searching needs to be provided by external tools. See the section\n# \"External Indexing and Searching\" for details.\n",
                      "markdown": "`# When the SERVER_BASED_SEARCH tag is enabled the search engine will be\n# implemented using a web server instead of a web client using JavaScript. There\n# are two flavors of web server based searching depending on the EXTERNAL_SEARCH\n# setting. When disabled, doxygen will generate a PHP script for searching and\n# an index file used by the script. When EXTERNAL_SEARCH is enabled the indexing\n# and searching needs to be provided by external tools. See the section\n# \"External Indexing and Searching\" for details.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1627,
                  "startColumn": 76,
                  "endLine": 1628,
                  "snippet": {
                    "text": "\n# If you want full control over the layout of the generated HTML pages it might\n# be necessary to disable the index and replace it with your own. The\n# DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at top\n# of each HTML page. A value of NO enables the index and the value YES disables\n# it. Since the tabs in the index contain the same information as the navigation\n# tree, you can set this option to YES if you also set GENERATE_TREEVIEW to YES.\n# The default value is: NO.\n",
                    "rendered": {
                      "text": "\n# If you want full control over the layout of the generated HTML pages it might\n# be necessary to disable the index and replace it with your own. The\n# DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at top\n# of each HTML page. A value of NO enables the index and the value YES disables\n# it. Since the tabs in the index contain the same information as the navigation\n# tree, you can set this option to YES if you also set GENERATE_TREEVIEW to YES.\n# The default value is: NO.\n",
                      "markdown": "`\n# If you want full control over the layout of the generated HTML pages it might\n# be necessary to disable the index and replace it with your own. The\n# DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at top\n# of each HTML page. A value of NO enables the index and the value YES disables\n# it. Since the tabs in the index contain the same information as the navigation\n# tree, you can set this option to YES if you also set GENERATE_TREEVIEW to YES.\n# The default value is: NO.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1431,
                  "startColumn": 69,
                  "endLine": 1431,
                  "endColumn": 75,
                  "snippet": {
                    "text": "# create a documentation set, doxygen will generate a Makefile in the HTML\n# output directory. Running make will produce the docset in that directory and\n# running make install will install the docset in\n# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find it at\n# startup. See https://developer.apple.com/library/archive/featuredarticles/Doxy\n# genXcode/_index.html for more information.\n# The default value is: NO.\n",
                    "rendered": {
                      "text": "# create a documentation set, doxygen will generate a Makefile in the HTML\n# output directory. Running make will produce the docset in that directory and\n# running make install will install the docset in\n# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find it at\n# startup. See https://developer.apple.com/library/archive/featuredarticles/Doxy\n# genXcode/_index.html for more information.\n# The default value is: NO.\n",
                      "markdown": "`# create a documentation set, doxygen will generate a Makefile in the HTML\n# output directory. Running make will produce the docset in that directory and\n# running make install will install the docset in\n# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find it at\n# startup. See https://developer.apple.com/library/archive/featuredarticles/Doxy\n# genXcode/_index.html for more information.\n# The default value is: NO.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1413,
                  "startColumn": 57,
                  "endLine": 1413,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n",
                    "rendered": {
                      "text": "\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n",
                      "markdown": "`\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1412,
                  "startColumn": 70,
                  "endLine": 1413,
                  "snippet": {
                    "text": "HTML_DYNAMIC_SECTIONS  = NO\n\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n",
                    "rendered": {
                      "text": "HTML_DYNAMIC_SECTIONS  = NO\n\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n",
                      "markdown": "`HTML_DYNAMIC_SECTIONS  = NO\n\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1384,
                  "startColumn": 32,
                  "endLine": 1384,
                  "endColumn": 38,
                  "snippet": {
                    "text": "HTML_COLORSTYLE_GAMMA  = 80\n\n# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML\n# page will contain the date and time when the page was generated. Setting this\n# to YES can help to show when doxygen was last run and thus if the\n# documentation is up to date.\n# The default value is: NO.\n",
                    "rendered": {
                      "text": "HTML_COLORSTYLE_GAMMA  = 80\n\n# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML\n# page will contain the date and time when the page was generated. Setting this\n# to YES can help to show when doxygen was last run and thus if the\n# documentation is up to date.\n# The default value is: NO.\n",
                      "markdown": "`HTML_COLORSTYLE_GAMMA  = 80\n\n# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML\n# page will contain the date and time when the page was generated. Setting this\n# to YES can help to show when doxygen was last run and thus if the\n# documentation is up to date.\n# The default value is: NO.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 1358,
                  "startColumn": 20,
                  "endLine": 1358,
                  "endColumn": 25,
                  "snippet": {
                    "text": "# this color. Hue is specified as an angle on a color-wheel, see\n# https://en.wikipedia.org/wiki/Hue for more information. For instance the value\n# 0 represents red, 60 is yellow, 120 is green, 180 is cyan, 240 is blue, 300\n# purple, and 360 is red again.\n# Minimum value: 0, maximum value: 359, default value: 220.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\n",
                    "rendered": {
                      "text": "# this color. Hue is specified as an angle on a color-wheel, see\n# https://en.wikipedia.org/wiki/Hue for more information. For instance the value\n# 0 represents red, 60 is yellow, 120 is green, 180 is cyan, 240 is blue, 300\n# purple, and 360 is red again.\n# Minimum value: 0, maximum value: 359, default value: 220.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\n",
                      "markdown": "`# this color. Hue is specified as an angle on a color-wheel, see\n# https://en.wikipedia.org/wiki/Hue for more information. For instance the value\n# 0 represents red, 60 is yellow, 120 is green, 180 is cyan, 240 is blue, 300\n# purple, and 360 is red again.\n# Minimum value: 0, maximum value: 359, default value: 220.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 805,
                  "startColumn": 58,
                  "endLine": 805,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# extension is automatically appended if omitted. This requires the bibtex tool\n# to be installed. See also https://en.wikipedia.org/wiki/BibTeX for more info.\n# For LaTeX the style of the bibliography can be controlled using\n# LATEX_BIB_STYLE. To use this feature you need bibtex and perl available in the\n# search path. See also \\cite for info how to create references.\n\nCITE_BIB_FILES         =\n",
                    "rendered": {
                      "text": "# extension is automatically appended if omitted. This requires the bibtex tool\n# to be installed. See also https://en.wikipedia.org/wiki/BibTeX for more info.\n# For LaTeX the style of the bibliography can be controlled using\n# LATEX_BIB_STYLE. To use this feature you need bibtex and perl available in the\n# search path. See also \\cite for info how to create references.\n\nCITE_BIB_FILES         =\n",
                      "markdown": "`# extension is automatically appended if omitted. This requires the bibtex tool\n# to be installed. See also https://en.wikipedia.org/wiki/BibTeX for more info.\n# For LaTeX the style of the bibliography can be controlled using\n# LATEX_BIB_STYLE. To use this feature you need bibtex and perl available in the\n# search path. See also \\cite for info how to create references.\n\nCITE_BIB_FILES         =\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 776,
                  "startColumn": 65,
                  "endLine": 776,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\nSHOW_NAMESPACES        = YES\n\n# The FILE_VERSION_FILTER tag can be used to specify a program or script that\n# doxygen should invoke to get the current version for each file (typically from\n# the version control system). Doxygen will invoke the program by executing (via\n# popen()) the command command input-file, where command is the value of the\n",
                    "rendered": {
                      "text": "\nSHOW_NAMESPACES        = YES\n\n# The FILE_VERSION_FILTER tag can be used to specify a program or script that\n# doxygen should invoke to get the current version for each file (typically from\n# the version control system). Doxygen will invoke the program by executing (via\n# popen()) the command command input-file, where command is the value of the\n",
                      "markdown": "`\nSHOW_NAMESPACES        = YES\n\n# The FILE_VERSION_FILTER tag can be used to specify a program or script that\n# doxygen should invoke to get the current version for each file (typically from\n# the version control system). Doxygen will invoke the program by executing (via\n# popen()) the command command input-file, where command is the value of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 686,
                  "startColumn": 61,
                  "endLine": 686,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\nSORT_MEMBERS_CTORS_1ST = NO\n\n# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the hierarchy\n# of group names into alphabetical order. If set to NO the group names will\n# appear in their defined order.\n# The default value is: NO.\n",
                    "rendered": {
                      "text": "\nSORT_MEMBERS_CTORS_1ST = NO\n\n# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the hierarchy\n# of group names into alphabetical order. If set to NO the group names will\n# appear in their defined order.\n# The default value is: NO.\n",
                      "markdown": "`\nSORT_MEMBERS_CTORS_1ST = NO\n\n# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the hierarchy\n# of group names into alphabetical order. If set to NO the group names will\n# appear in their defined order.\n# The default value is: NO.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 674,
                  "startColumn": 67,
                  "endLine": 674,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\nSORT_BRIEF_DOCS        = NO\n\n# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen will sort the\n# (brief and detailed) documentation of class members so that constructors and\n# destructors are listed first. If set to NO the constructors will appear in the\n# respective orders defined by SORT_BRIEF_DOCS and SORT_MEMBER_DOCS.\n",
                    "rendered": {
                      "text": "\nSORT_BRIEF_DOCS        = NO\n\n# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen will sort the\n# (brief and detailed) documentation of class members so that constructors and\n# destructors are listed first. If set to NO the constructors will appear in the\n# respective orders defined by SORT_BRIEF_DOCS and SORT_MEMBER_DOCS.\n",
                      "markdown": "`\nSORT_BRIEF_DOCS        = NO\n\n# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen will sort the\n# (brief and detailed) documentation of class members so that constructors and\n# destructors are listed first. If set to NO the constructors will appear in the\n# respective orders defined by SORT_BRIEF_DOCS and SORT_MEMBER_DOCS.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 666,
                  "startColumn": 60,
                  "endLine": 666,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\nSORT_MEMBER_DOCS       = YES\n\n# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the brief\n# descriptions of file, namespace and class members alphabetically by member\n# name. If set to NO, the members will appear in declaration order. Note that\n# this will also influence the order of the classes in the class list.\n",
                    "rendered": {
                      "text": "\nSORT_MEMBER_DOCS       = YES\n\n# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the brief\n# descriptions of file, namespace and class members alphabetically by member\n# name. If set to NO, the members will appear in declaration order. Note that\n# this will also influence the order of the classes in the class list.\n",
                      "markdown": "`\nSORT_MEMBER_DOCS       = YES\n\n# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the brief\n# descriptions of file, namespace and class members alphabetically by member\n# name. If set to NO, the members will appear in declaration order. Note that\n# this will also influence the order of the classes in the class list.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 659,
                  "startColumn": 61,
                  "endLine": 659,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\nINLINE_INFO            = YES\n\n# If the SORT_MEMBER_DOCS tag is set to YES then doxygen will sort the\n# (detailed) documentation of file and class members alphabetically by member\n# name. If set to NO, the members will appear in declaration order.\n# The default value is: YES.\n",
                    "rendered": {
                      "text": "\nINLINE_INFO            = YES\n\n# If the SORT_MEMBER_DOCS tag is set to YES then doxygen will sort the\n# (detailed) documentation of file and class members alphabetically by member\n# name. If set to NO, the members will appear in declaration order.\n# The default value is: YES.\n",
                      "markdown": "`\nINLINE_INFO            = YES\n\n# If the SORT_MEMBER_DOCS tag is set to YES then doxygen will sort the\n# (detailed) documentation of file and class members alphabetically by member\n# name. If set to NO, the members will appear in declaration order.\n# The default value is: YES.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/docsrc/Doxyfile"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 35,
                  "endLine": 54,
                  "endColumn": 40,
                  "snippet": {
                    "text": "PROJECT_NUMBER         =\n\n# Using the PROJECT_BRIEF tag one can provide an optional one line description\n# for a project that appears at the top of each page and should give viewer a\n# quick idea about the purpose of the project. Keep the description short.\n\nPROJECT_BRIEF          = \"C++ wrapper around the aws-c-* libraries. Provides Cross-Platform Transport Protocols and SSL/TLS implementations for C++.\"\n",
                    "rendered": {
                      "text": "PROJECT_NUMBER         =\n\n# Using the PROJECT_BRIEF tag one can provide an optional one line description\n# for a project that appears at the top of each page and should give viewer a\n# quick idea about the purpose of the project. Keep the description short.\n\nPROJECT_BRIEF          = \"C++ wrapper around the aws-c-* libraries. Provides Cross-Platform Transport Protocols and SSL/TLS implementations for C++.\"\n",
                      "markdown": "`PROJECT_NUMBER         =\n\n# Using the PROJECT_BRIEF tag one can provide an optional one line description\n# for a project that appears at the top of each page and should give viewer a\n# quick idea about the purpose of the project. Keep the description short.\n\nPROJECT_BRIEF          = \"C++ wrapper around the aws-c-* libraries. Provides Cross-Platform Transport Protocols and SSL/TLS implementations for C++.\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/create-projects.py"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 1,
                  "endLine": 142,
                  "endColumn": 7,
                  "snippet": {
                    "text": "session = boto3.Session(profile_name=args.profile, region_name='us-east-1')\ncodebuild = session.client('codebuild')\n\n# Find out which projects already exist and should be updated, and which must be created\nall_project_names = list(BUILDS.keys())\nexisting_projects = codebuild.batch_get_projects(names=all_project_names)\nnew_projects = existing_projects['projectsNotFound']\n",
                    "rendered": {
                      "text": "session = boto3.Session(profile_name=args.profile, region_name='us-east-1')\ncodebuild = session.client('codebuild')\n\n# Find out which projects already exist and should be updated, and which must be created\nall_project_names = list(BUILDS.keys())\nexisting_projects = codebuild.batch_get_projects(names=all_project_names)\nnew_projects = existing_projects['projectsNotFound']\n",
                      "markdown": "`session = boto3.Session(profile_name=args.profile, region_name='us-east-1')\ncodebuild = session.client('codebuild')\n\n# Find out which projects already exist and should be updated, and which must be created\nall_project_names = list(BUILDS.keys())\nexisting_projects = codebuild.batch_get_projects(names=all_project_names)\nnew_projects = existing_projects['projectsNotFound']\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/create-projects.py"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 26,
                  "endLine": 116,
                  "snippet": {
                    "text": "    env = dict(ENVIRONMENTS[config['env']])\n    if 'privileged' in config:\n        env['privilegedMode'] = config['privileged']\n    build['environment'] = env\n\n    sub_params = {\n        'project': args.project,\n        'build': build_name,\n",
                    "rendered": {
                      "text": "    env = dict(ENVIRONMENTS[config['env']])\n    if 'privileged' in config:\n        env['privilegedMode'] = config['privileged']\n    build['environment'] = env\n\n    sub_params = {\n        'project': args.project,\n        'build': build_name,\n",
                      "markdown": "`    env = dict(ENVIRONMENTS[config['env']])\n    if 'privileged' in config:\n        env['privilegedMode'] = config['privileged']\n    build['environment'] = env\n\n    sub_params = {\n        'project': args.project,\n        'build': build_name,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/create-projects.py"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 3,
                  "endLine": 112,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    build_name = config['build']\n\n    build = dict(CREATE_PARAM_TEMPLATE)\n    env = dict(ENVIRONMENTS[config['env']])\n    if 'privileged' in config:\n        env['privilegedMode'] = config['privileged']\n    build['environment'] = env\n",
                    "rendered": {
                      "text": "    build_name = config['build']\n\n    build = dict(CREATE_PARAM_TEMPLATE)\n    env = dict(ENVIRONMENTS[config['env']])\n    if 'privileged' in config:\n        env['privilegedMode'] = config['privileged']\n    build['environment'] = env\n",
                      "markdown": "`    build_name = config['build']\n\n    build = dict(CREATE_PARAM_TEMPLATE)\n    env = dict(ENVIRONMENTS[config['env']])\n    if 'privileged' in config:\n        env['privilegedMode'] = config['privileged']\n    build['environment'] = env\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 70,
                  "endLine": 308,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"Short Running Canary finished!\", flush=True)\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + command_parser_arguments.cloudwatch_region\n",
                    "rendered": {
                      "text": "    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"Short Running Canary finished!\", flush=True)\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + command_parser_arguments.cloudwatch_region\n",
                      "markdown": "`    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"Short Running Canary finished!\", flush=True)\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + command_parser_arguments.cloudwatch_region\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 53,
                  "endLine": 2,
                  "endColumn": 57,
                  "snippet": {
                    "text": "# Python wrapper script for collecting Canary metrics, setting-up/tearing-down alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and pushing the log to S3 if successful.\n\n# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\n",
                    "rendered": {
                      "text": "# Python wrapper script for collecting Canary metrics, setting-up/tearing-down alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and pushing the log to S3 if successful.\n\n# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\n",
                      "markdown": "`# Python wrapper script for collecting Canary metrics, setting-up/tearing-down alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and pushing the log to S3 if successful.\n\n# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 39,
                  "endLine": 308,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"Short Running Canary finished!\", flush=True)\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + command_parser_arguments.cloudwatch_region\n",
                    "rendered": {
                      "text": "    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"Short Running Canary finished!\", flush=True)\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + command_parser_arguments.cloudwatch_region\n",
                      "markdown": "`    application_monitor.cleanup_monitor(error_occurred=wrapper_error_occurred)\n    print (\"Short Running Canary finished!\", flush=True)\n\n    finished_email_body += \"\\n\\nYou can find the log file for this run at the following S3 location: \"\n    finished_email_body += \"https://s3.console.aws.amazon.com/s3/object/\"\n    finished_email_body += command_parser_arguments.s3_bucket_name\n    finished_email_body += \"?region=\" + command_parser_arguments.cloudwatch_region\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 43,
                  "endLine": 300,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            wrapper_error_occurred = True\n            finished_email_body += \"Failure due to unknown reason! This shouldn't happen and means something has gone wrong!\"\n    except Exception as e:\n        print (\"ERROR: Could not (possibly) cut ticket due to exception!\")\n        print (\"Exception: \" + str(e), flush=True)\n\n    # Clean everything up and stop\n",
                    "rendered": {
                      "text": "            wrapper_error_occurred = True\n            finished_email_body += \"Failure due to unknown reason! This shouldn't happen and means something has gone wrong!\"\n    except Exception as e:\n        print (\"ERROR: Could not (possibly) cut ticket due to exception!\")\n        print (\"Exception: \" + str(e), flush=True)\n\n    # Clean everything up and stop\n",
                      "markdown": "`            wrapper_error_occurred = True\n            finished_email_body += \"Failure due to unknown reason! This shouldn't happen and means something has gone wrong!\"\n    except Exception as e:\n        print (\"ERROR: Could not (possibly) cut ticket due to exception!\")\n        print (\"Exception: \" + str(e), flush=True)\n\n    # Clean everything up and stop\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 60,
                  "endLine": 226,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\", flush=True)\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n",
                    "rendered": {
                      "text": "        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\", flush=True)\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n",
                      "markdown": "`        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\", flush=True)\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 35,
                  "endLine": 226,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\", flush=True)\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n",
                    "rendered": {
                      "text": "        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\", flush=True)\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n",
                      "markdown": "`        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n                print (\"ERROR - Snapshot monitor stopped due to metric in alarm!\", flush=True)\n                finished_email_body += \"Failure due to required metrics being in alarm! A new ticket should have been cut!\"\n                finished_email_body += \"\\nMetrics in Alarm: \" + str(snapshot_monitor.cloudwatch_current_alarms_triggered)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 9,
                  "endLine": 223,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    finished_email_body += \"\\n\\n\"\n\n    try:\n        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n",
                    "rendered": {
                      "text": "    finished_email_body += \"\\n\\n\"\n\n    try:\n        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n",
                      "markdown": "`    finished_email_body += \"\\n\\n\"\n\n    try:\n        # Find out why we stopped\n        if (snapshot_monitor.had_internal_error == True):\n            if (snapshot_monitor.has_cut_ticket == True):\n                # We do not need to cut a ticket here - it's cut by the snapshot monitor!\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 35,
                  "endLine": 205,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    # Start the application going\n    snapshot_monitor.start_monitoring()\n    application_monitor.start_monitoring()\n    # Allow the snapshot monitor to cut tickets\n    snapshot_monitor.can_cut_ticket = True\n\n    # Start the execution loop\n",
                    "rendered": {
                      "text": "    # Start the application going\n    snapshot_monitor.start_monitoring()\n    application_monitor.start_monitoring()\n    # Allow the snapshot monitor to cut tickets\n    snapshot_monitor.can_cut_ticket = True\n\n    # Start the execution loop\n",
                      "markdown": "`    # Start the application going\n    snapshot_monitor.start_monitoring()\n    application_monitor.start_monitoring()\n    # Allow the snapshot monitor to cut tickets\n    snapshot_monitor.can_cut_ticket = True\n\n    # Start the execution loop\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 33,
                  "endLine": 67,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    exit (1) # cannot run without git hash\nif (command_parser_arguments.git_repo_name == \"\"):\n    print (\"ERROR - required git_repo_name is empty!\", flush=True)\n    exit (1) # cannot run without git repo name\nif (command_parser_arguments.git_hash_as_namespace is not True and command_parser_arguments.git_hash_as_namespace is not False):\n    command_parser_arguments.git_hash_as_namespace = False\nif (command_parser_arguments.output_log_filepath == \"\"):\n",
                    "rendered": {
                      "text": "    exit (1) # cannot run without git hash\nif (command_parser_arguments.git_repo_name == \"\"):\n    print (\"ERROR - required git_repo_name is empty!\", flush=True)\n    exit (1) # cannot run without git repo name\nif (command_parser_arguments.git_hash_as_namespace is not True and command_parser_arguments.git_hash_as_namespace is not False):\n    command_parser_arguments.git_hash_as_namespace = False\nif (command_parser_arguments.output_log_filepath == \"\"):\n",
                      "markdown": "`    exit (1) # cannot run without git hash\nif (command_parser_arguments.git_repo_name == \"\"):\n    print (\"ERROR - required git_repo_name is empty!\", flush=True)\n    exit (1) # cannot run without git repo name\nif (command_parser_arguments.git_hash_as_namespace is not True and command_parser_arguments.git_hash_as_namespace is not False):\n    command_parser_arguments.git_hash_as_namespace = False\nif (command_parser_arguments.output_log_filepath == \"\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 33,
                  "endLine": 64,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    exit (1) # cannot run without a canary executable\nif (command_parser_arguments.git_hash == \"\"):\n    print (\"ERROR - required git_hash is empty!\", flush=True)\n    exit (1) # cannot run without git hash\nif (command_parser_arguments.git_repo_name == \"\"):\n    print (\"ERROR - required git_repo_name is empty!\", flush=True)\n    exit (1) # cannot run without git repo name\n",
                    "rendered": {
                      "text": "    exit (1) # cannot run without a canary executable\nif (command_parser_arguments.git_hash == \"\"):\n    print (\"ERROR - required git_hash is empty!\", flush=True)\n    exit (1) # cannot run without git hash\nif (command_parser_arguments.git_repo_name == \"\"):\n    print (\"ERROR - required git_repo_name is empty!\", flush=True)\n    exit (1) # cannot run without git repo name\n",
                      "markdown": "`    exit (1) # cannot run without a canary executable\nif (command_parser_arguments.git_hash == \"\"):\n    print (\"ERROR - required git_hash is empty!\", flush=True)\n    exit (1) # cannot run without git hash\nif (command_parser_arguments.git_repo_name == \"\"):\n    print (\"ERROR - required git_repo_name is empty!\", flush=True)\n    exit (1) # cannot run without git repo name\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 25,
                  "endColumn": 53,
                  "snippet": {
                    "text": "command_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n    help=\"(OPTIONAL, default=False) If true, the git hash will be used as the name of the Cloudwatch namespace\")\ncommand_parser.add_argument(\"--output_log_filepath\", type=str, default=\"output.log\",\n    help=\"(OPTIONAL, default=output.log) The file to output log info to. Set to 'None' to disable\")\ncommand_parser.add_argument(\"--output_to_console\", type=bool, default=True,\n",
                    "rendered": {
                      "text": "command_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n    help=\"(OPTIONAL, default=False) If true, the git hash will be used as the name of the Cloudwatch namespace\")\ncommand_parser.add_argument(\"--output_log_filepath\", type=str, default=\"output.log\",\n    help=\"(OPTIONAL, default=output.log) The file to output log info to. Set to 'None' to disable\")\ncommand_parser.add_argument(\"--output_to_console\", type=bool, default=True,\n",
                      "markdown": "`command_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n    help=\"(OPTIONAL, default=False) If true, the git hash will be used as the name of the Cloudwatch namespace\")\ncommand_parser.add_argument(\"--output_log_filepath\", type=str, default=\"output.log\",\n    help=\"(OPTIONAL, default=output.log) The file to output log info to. Set to 'None' to disable\")\ncommand_parser.add_argument(\"--output_to_console\", type=bool, default=True,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 25,
                  "endLine": 23,
                  "endColumn": 30,
                  "snippet": {
                    "text": "command_parser.add_argument(\"--git_hash\", type=str, required=True,\n    help=\"The Git commit hash that we are running the canary with\")\ncommand_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n    help=\"(OPTIONAL, default=False) If true, the git hash will be used as the name of the Cloudwatch namespace\")\ncommand_parser.add_argument(\"--output_log_filepath\", type=str, default=\"output.log\",\n",
                    "rendered": {
                      "text": "command_parser.add_argument(\"--git_hash\", type=str, required=True,\n    help=\"The Git commit hash that we are running the canary with\")\ncommand_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n    help=\"(OPTIONAL, default=False) If true, the git hash will be used as the name of the Cloudwatch namespace\")\ncommand_parser.add_argument(\"--output_log_filepath\", type=str, default=\"output.log\",\n",
                      "markdown": "`command_parser.add_argument(\"--git_hash\", type=str, required=True,\n    help=\"The Git commit hash that we are running the canary with\")\ncommand_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n    help=\"(OPTIONAL, default=False) If true, the git hash will be used as the name of the Cloudwatch namespace\")\ncommand_parser.add_argument(\"--output_log_filepath\", type=str, default=\"output.log\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 13,
                  "endLine": 21,
                  "endColumn": 18,
                  "snippet": {
                    "text": "command_parser.add_argument(\"--canary_arguments\", type=str, default=\"\",\n    help=\"The arguments to pass/launch the canary executable with\")\ncommand_parser.add_argument(\"--git_hash\", type=str, required=True,\n    help=\"The Git commit hash that we are running the canary with\")\ncommand_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n",
                    "rendered": {
                      "text": "command_parser.add_argument(\"--canary_arguments\", type=str, default=\"\",\n    help=\"The arguments to pass/launch the canary executable with\")\ncommand_parser.add_argument(\"--git_hash\", type=str, required=True,\n    help=\"The Git commit hash that we are running the canary with\")\ncommand_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n",
                      "markdown": "`command_parser.add_argument(\"--canary_arguments\", type=str, default=\"\",\n    help=\"The arguments to pass/launch the canary executable with\")\ncommand_parser.add_argument(\"--git_hash\", type=str, required=True,\n    help=\"The Git commit hash that we are running the canary with\")\ncommand_parser.add_argument(\"--git_repo_name\", type=str, required=True,\n    help=\"The name of the Git repository\")\ncommand_parser.add_argument(\"--git_hash_as_namespace\", type=bool, default=False,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 6,
                  "endLine": 8,
                  "snippet": {
                    "text": "# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\nimport argparse\nimport time\nimport datetime\n# Dependencies in project folder\nfrom CanaryWrapper_Classes import *\nfrom CanaryWrapper_MetricFunctions import *\n",
                    "rendered": {
                      "text": "# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\nimport argparse\nimport time\nimport datetime\n# Dependencies in project folder\nfrom CanaryWrapper_Classes import *\nfrom CanaryWrapper_MetricFunctions import *\n",
                      "markdown": "`# Needs to be installed prior to running\n# Part of standard packages in Python 3.4+\nimport argparse\nimport time\nimport datetime\n# Dependencies in project folder\nfrom CanaryWrapper_Classes import *\nfrom CanaryWrapper_MetricFunctions import *\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper.py"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 16,
                  "endLine": 1,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# Python wrapper script for collecting Canary metrics, setting-up/tearing-down alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and pushing the log to S3 if successful.\n\n# Needs to be installed prior to running\n",
                    "rendered": {
                      "text": "# Python wrapper script for collecting Canary metrics, setting-up/tearing-down alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and pushing the log to S3 if successful.\n\n# Needs to be installed prior to running\n",
                      "markdown": "`# Python wrapper script for collecting Canary metrics, setting-up/tearing-down alarms, reporting metrics to Cloudwatch,\n# checking the alarms to ensure everything is correct at the end of the run, and pushing the log to S3 if successful.\n\n# Needs to be installed prior to running\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-4x-x86.yml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 20,
                  "endLine": 6,
                  "endColumn": 28,
                  "snippet": {
                    "text": "phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc gcc-multilib g++ g++-multilib cmake3 -y\n      - mkdir libcrypto-build\n      - cd libcrypto-build\n",
                    "rendered": {
                      "text": "phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc gcc-multilib g++ g++-multilib cmake3 -y\n      - mkdir libcrypto-build\n      - cd libcrypto-build\n",
                      "markdown": "`phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc gcc-multilib g++ g++-multilib cmake3 -y\n      - mkdir libcrypto-build\n      - cd libcrypto-build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-4x-x86.yml"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 7,
                  "endLine": 30,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  build:\n    commands:\n      - echo Build started on `date`\n      - setarch i386 ./codebuild/common-posix.sh -DCMAKE_INSTALL_PREFIX=/tmp/builds/install -DCMAKE_C_FLAGS=\"-m32\" -DCMAKE_CXX_FLAGS=\"-m32\" -DCMAKE_LINK_FLAGS=\"-m32\"\n  post_build:\n    commands:\n      - echo Build completed on `date`\n",
                    "rendered": {
                      "text": "  build:\n    commands:\n      - echo Build started on `date`\n      - setarch i386 ./codebuild/common-posix.sh -DCMAKE_INSTALL_PREFIX=/tmp/builds/install -DCMAKE_C_FLAGS=\"-m32\" -DCMAKE_CXX_FLAGS=\"-m32\" -DCMAKE_LINK_FLAGS=\"-m32\"\n  post_build:\n    commands:\n      - echo Build completed on `date`\n",
                      "markdown": "`  build:\n    commands:\n      - echo Build started on `date`\n      - setarch i386 ./codebuild/common-posix.sh -DCMAKE_INSTALL_PREFIX=/tmp/builds/install -DCMAKE_C_FLAGS=\"-m32\" -DCMAKE_CXX_FLAGS=\"-m32\" -DCMAKE_LINK_FLAGS=\"-m32\"\n  post_build:\n    commands:\n      - echo Build completed on `date`\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-4x-x86.yml"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 7,
                  "endLine": 13,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      - curl -LO https://www.openssl.org/source/openssl-1.1.0j.tar.gz\n      - tar -xzvf openssl-1.1.0j.tar.gz\n      - cd openssl-1.1.0j\n      - setarch i386 ./config -fPIC no-shared     \\\n        -m32 no-md2 no-rc5 no-rfc3779 no-sctp no-ssl-trace no-zlib     \\\n        no-hw no-mdc2 no-seed no-idea no-camellia\\\n        no-bf no-ripemd no-dsa no-ssl2 no-ssl3 no-capieng     \\\n",
                    "rendered": {
                      "text": "      - curl -LO https://www.openssl.org/source/openssl-1.1.0j.tar.gz\n      - tar -xzvf openssl-1.1.0j.tar.gz\n      - cd openssl-1.1.0j\n      - setarch i386 ./config -fPIC no-shared     \\\n        -m32 no-md2 no-rc5 no-rfc3779 no-sctp no-ssl-trace no-zlib     \\\n        no-hw no-mdc2 no-seed no-idea no-camellia\\\n        no-bf no-ripemd no-dsa no-ssl2 no-ssl3 no-capieng     \\\n",
                      "markdown": "`      - curl -LO https://www.openssl.org/source/openssl-1.1.0j.tar.gz\n      - tar -xzvf openssl-1.1.0j.tar.gz\n      - cd openssl-1.1.0j\n      - setarch i386 ./config -fPIC no-shared     \\\n        -m32 no-md2 no-rc5 no-rfc3779 no-sctp no-ssl-trace no-zlib     \\\n        no-hw no-mdc2 no-seed no-idea no-camellia\\\n        no-bf no-ripemd no-dsa no-ssl2 no-ssl3 no-capieng     \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-4x-x86.yml"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 7,
                  "endLine": 11,
                  "endColumn": 12,
                  "snippet": {
                    "text": "      - mkdir libcrypto-build\n      - cd libcrypto-build\n      - curl -LO https://www.openssl.org/source/openssl-1.1.0j.tar.gz\n      - tar -xzvf openssl-1.1.0j.tar.gz\n      - cd openssl-1.1.0j\n      - setarch i386 ./config -fPIC no-shared     \\\n        -m32 no-md2 no-rc5 no-rfc3779 no-sctp no-ssl-trace no-zlib     \\\n",
                    "rendered": {
                      "text": "      - mkdir libcrypto-build\n      - cd libcrypto-build\n      - curl -LO https://www.openssl.org/source/openssl-1.1.0j.tar.gz\n      - tar -xzvf openssl-1.1.0j.tar.gz\n      - cd openssl-1.1.0j\n      - setarch i386 ./config -fPIC no-shared     \\\n        -m32 no-md2 no-rc5 no-rfc3779 no-sctp no-ssl-trace no-zlib     \\\n",
                      "markdown": "`      - mkdir libcrypto-build\n      - cd libcrypto-build\n      - curl -LO https://www.openssl.org/source/openssl-1.1.0j.tar.gz\n      - tar -xzvf openssl-1.1.0j.tar.gz\n      - cd openssl-1.1.0j\n      - setarch i386 ./config -fPIC no-shared     \\\n        -m32 no-md2 no-rc5 no-rfc3779 no-sctp no-ssl-trace no-zlib     \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-4x-x86.yml"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 7,
                  "endLine": 10,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      - sudo apt-get install gcc gcc-multilib g++ g++-multilib cmake3 -y\n      - mkdir libcrypto-build\n      - cd libcrypto-build\n      - curl -LO https://www.openssl.org/source/openssl-1.1.0j.tar.gz\n      - tar -xzvf openssl-1.1.0j.tar.gz\n      - cd openssl-1.1.0j\n      - setarch i386 ./config -fPIC no-shared     \\\n",
                    "rendered": {
                      "text": "      - sudo apt-get install gcc gcc-multilib g++ g++-multilib cmake3 -y\n      - mkdir libcrypto-build\n      - cd libcrypto-build\n      - curl -LO https://www.openssl.org/source/openssl-1.1.0j.tar.gz\n      - tar -xzvf openssl-1.1.0j.tar.gz\n      - cd openssl-1.1.0j\n      - setarch i386 ./config -fPIC no-shared     \\\n",
                      "markdown": "`      - sudo apt-get install gcc gcc-multilib g++ g++-multilib cmake3 -y\n      - mkdir libcrypto-build\n      - cd libcrypto-build\n      - curl -LO https://www.openssl.org/source/openssl-1.1.0j.tar.gz\n      - tar -xzvf openssl-1.1.0j.tar.gz\n      - cd openssl-1.1.0j\n      - setarch i386 ./config -fPIC no-shared     \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-4x-x86.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 12,
                  "endLine": 7,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc gcc-multilib g++ g++-multilib cmake3 -y\n      - mkdir libcrypto-build\n      - cd libcrypto-build\n      - curl -LO https://www.openssl.org/source/openssl-1.1.0j.tar.gz\n",
                    "rendered": {
                      "text": "  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc gcc-multilib g++ g++-multilib cmake3 -y\n      - mkdir libcrypto-build\n      - cd libcrypto-build\n      - curl -LO https://www.openssl.org/source/openssl-1.1.0j.tar.gz\n",
                      "markdown": "`  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc gcc-multilib g++ g++-multilib cmake3 -y\n      - mkdir libcrypto-build\n      - cd libcrypto-build\n      - curl -LO https://www.openssl.org/source/openssl-1.1.0j.tar.gz\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-4x-x86.yml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 12,
                  "endLine": 6,
                  "endColumn": 21,
                  "snippet": {
                    "text": "phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc gcc-multilib g++ g++-multilib cmake3 -y\n      - mkdir libcrypto-build\n      - cd libcrypto-build\n",
                    "rendered": {
                      "text": "phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc gcc-multilib g++ g++-multilib cmake3 -y\n      - mkdir libcrypto-build\n      - cd libcrypto-build\n",
                      "markdown": "`phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc gcc-multilib g++ g++-multilib cmake3 -y\n      - mkdir libcrypto-build\n      - cd libcrypto-build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/common-posix.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 13,
                  "endLine": 9,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    source /tmp/setup_proxy_test_env.sh\nfi\n\ngit submodule update --init\nmkdir build\ncd build\n\n",
                    "rendered": {
                      "text": "    source /tmp/setup_proxy_test_env.sh\nfi\n\ngit submodule update --init\nmkdir build\ncd build\n\n",
                      "markdown": "`    source /tmp/setup_proxy_test_env.sh\nfi\n\ngit submodule update --init\nmkdir build\ncd build\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/common-posix.sh"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 9,
                  "endColumn": 4,
                  "snippet": {
                    "text": "if test -f \"/tmp/setup_proxy_test_env.sh\"; then\n    source /tmp/setup_proxy_test_env.sh\nfi\n\ngit submodule update --init\nmkdir build\ncd build\n\n",
                    "rendered": {
                      "text": "if test -f \"/tmp/setup_proxy_test_env.sh\"; then\n    source /tmp/setup_proxy_test_env.sh\nfi\n\ngit submodule update --init\nmkdir build\ncd build\n\n",
                      "markdown": "`if test -f \"/tmp/setup_proxy_test_env.sh\"; then\n    source /tmp/setup_proxy_test_env.sh\nfi\n\ngit submodule update --init\nmkdir build\ncd build\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-clang6-x64.yml"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 20,
                  "endLine": 9,
                  "endColumn": 28,
                  "snippet": {
                    "text": "      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install clang-6.0 cmake3 clang-tidy-6.0 clang-format-6.0 -y -f\n\n  pre_build:\n",
                    "rendered": {
                      "text": "      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install clang-6.0 cmake3 clang-tidy-6.0 clang-format-6.0 -y -f\n\n  pre_build:\n",
                      "markdown": "`      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install clang-6.0 cmake3 clang-tidy-6.0 clang-format-6.0 -y -f\n\n  pre_build:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-clang6-x64.yml"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 12,
                  "endLine": 10,
                  "endColumn": 21,
                  "snippet": {
                    "text": "      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install clang-6.0 cmake3 clang-tidy-6.0 clang-format-6.0 -y -f\n\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install clang-6.0 cmake3 clang-tidy-6.0 clang-format-6.0 -y -f\n\n  pre_build:\n    commands:\n",
                      "markdown": "`      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install clang-6.0 cmake3 clang-tidy-6.0 clang-format-6.0 -y -f\n\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-clang6-x64.yml"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 12,
                  "endLine": 9,
                  "endColumn": 21,
                  "snippet": {
                    "text": "      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install clang-6.0 cmake3 clang-tidy-6.0 clang-format-6.0 -y -f\n\n  pre_build:\n",
                    "rendered": {
                      "text": "      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install clang-6.0 cmake3 clang-tidy-6.0 clang-format-6.0 -y -f\n\n  pre_build:\n",
                      "markdown": "`      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install clang-6.0 cmake3 clang-tidy-6.0 clang-format-6.0 -y -f\n\n  pre_build:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-clang6-x64.yml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 7,
                  "endLine": 6,
                  "endColumn": 13,
                  "snippet": {
                    "text": "phases:\n  install:\n    commands:\n      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n",
                    "rendered": {
                      "text": "phases:\n  install:\n    commands:\n      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n",
                      "markdown": "`phases:\n  install:\n    commands:\n      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 47,
                  "endLine": 143,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n# Set IoT certificate and key paths\nexport AWS_TEST_MQTT5_IOT_CERTIFICATE_PATH=\"${PWD}/iot_certificate.pem\"\nexport AWS_TEST_MQTT5_IOT_KEY_PATH=\"${PWD}/iot_privatekey.pem\"\n\n# Everything is set\necho \"Success: Environment variables set!\"\n",
                    "rendered": {
                      "text": "\n# Set IoT certificate and key paths\nexport AWS_TEST_MQTT5_IOT_CERTIFICATE_PATH=\"${PWD}/iot_certificate.pem\"\nexport AWS_TEST_MQTT5_IOT_KEY_PATH=\"${PWD}/iot_privatekey.pem\"\n\n# Everything is set\necho \"Success: Environment variables set!\"\n",
                      "markdown": "`\n# Set IoT certificate and key paths\nexport AWS_TEST_MQTT5_IOT_CERTIFICATE_PATH=\"${PWD}/iot_certificate.pem\"\nexport AWS_TEST_MQTT5_IOT_KEY_PATH=\"${PWD}/iot_privatekey.pem\"\n\n# Everything is set\necho \"Success: Environment variables set!\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 19,
                  "endLine": 136,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n    return 1\nfi\n",
                    "rendered": {
                      "text": "    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n    return 1\nfi\n",
                      "markdown": "`    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n    return 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 19,
                  "endLine": 134,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n",
                    "rendered": {
                      "text": "    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n",
                      "markdown": "`    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 19,
                  "endLine": 118,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n    return 1\nfi\n",
                    "rendered": {
                      "text": "    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n    return 1\nfi\n",
                      "markdown": "`    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n    return 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 19,
                  "endLine": 116,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n",
                    "rendered": {
                      "text": "    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n",
                      "markdown": "`    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 212,
                  "endLine": 102,
                  "endColumn": 222,
                  "snippet": {
                    "text": "on} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_cert_file\" > ./iot_certificate.pem\niot_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_KEY_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_key_file\" > ./iot_privatekey.pem\n\n# Does the certificate file have data? If not, then abort!\nif [ \"${iot_cert_file}\" != \"\" ]; then\n    echo \"IoT Certificate secret found\"\nelse\n    echo \"Could not get IoT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    ",
                    "rendered": {
                      "text": "on} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_cert_file\" > ./iot_certificate.pem\niot_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_KEY_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_key_file\" > ./iot_privatekey.pem\n\n# Does the certificate file have data? If not, then abort!\nif [ \"${iot_cert_file}\" != \"\" ]; then\n    echo \"IoT Certificate secret found\"\nelse\n    echo \"Could not get IoT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    ",
                      "markdown": "`on} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_cert_file\" > ./iot_certificate.pem\niot_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_KEY_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_key_file\" > ./iot_privatekey.pem\n\n# Does the certificate file have data? If not, then abort!\nif [ \"${iot_cert_file}\" != \"\" ]; then\n    echo \"IoT Certificate secret found\"\nelse\n    echo \"Could not get IoT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    `"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 43,
                  "endLine": 96,
                  "endColumn": 53,
                  "snippet": {
                    "text": "fi\n# Set the certificate and key paths (absolute paths for best compatbility)\nexport AWS_TEST_MQTT5_CERTIFICATE_FILE=\"${PWD}/crt_certificate.pem\"\nexport AWS_TEST_MQTT5_KEY_FILE=\"${PWD}/crt_privatekey.pem\"\n\n\n# IoT/Builder certificate and key processing\n",
                    "rendered": {
                      "text": "fi\n# Set the certificate and key paths (absolute paths for best compatbility)\nexport AWS_TEST_MQTT5_CERTIFICATE_FILE=\"${PWD}/crt_certificate.pem\"\nexport AWS_TEST_MQTT5_KEY_FILE=\"${PWD}/crt_privatekey.pem\"\n\n\n# IoT/Builder certificate and key processing\n",
                      "markdown": "`fi\n# Set the certificate and key paths (absolute paths for best compatbility)\nexport AWS_TEST_MQTT5_CERTIFICATE_FILE=\"${PWD}/crt_certificate.pem\"\nexport AWS_TEST_MQTT5_KEY_FILE=\"${PWD}/crt_privatekey.pem\"\n\n\n# IoT/Builder certificate and key processing\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 19,
                  "endLine": 90,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n\n    return 1\nfi\n",
                    "rendered": {
                      "text": "    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n\n    return 1\nfi\n",
                      "markdown": "`    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n\n    return 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 19,
                  "endLine": 76,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n\n    return 1\nfi\n",
                    "rendered": {
                      "text": "    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n\n    return 1\nfi\n",
                      "markdown": "`    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n\n    return 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 213,
                  "endLine": 65,
                  "endColumn": 223,
                  "snippet": {
                    "text": "cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_cert_file\" > ${PWD}/crt_certificate.pem\ncrt_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_KEY_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_key_file\" > ${PWD}/crt_privatekey.pem\n# Does the certificate file have data? If not, then abort!\nif [ \"${crt_cert_file}\" != \"\" ]; then\n    echo \"CRT Certificate secret found\"\nelse\n    echo \"Could not get CRT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    r",
                    "rendered": {
                      "text": "cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_cert_file\" > ${PWD}/crt_certificate.pem\ncrt_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_KEY_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_key_file\" > ${PWD}/crt_privatekey.pem\n# Does the certificate file have data? If not, then abort!\nif [ \"${crt_cert_file}\" != \"\" ]; then\n    echo \"CRT Certificate secret found\"\nelse\n    echo \"Could not get CRT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    r",
                      "markdown": "`cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_cert_file\" > ${PWD}/crt_certificate.pem\ncrt_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_KEY_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_key_file\" > ${PWD}/crt_privatekey.pem\n# Does the certificate file have data? If not, then abort!\nif [ \"${crt_cert_file}\" != \"\" ]; then\n    echo \"CRT Certificate secret found\"\nelse\n    echo \"Could not get CRT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    r`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 19,
                  "endLine": 41,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n    echo \"Success!\"\n    return 0\n",
                    "rendered": {
                      "text": "    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n    echo \"Success!\"\n    return 0\n",
                      "markdown": "`    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n    echo \"Success!\"\n    return 0\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 19,
                  "endLine": 39,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    echo \"Cleaning up resources...\"\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n",
                    "rendered": {
                      "text": "    echo \"Cleaning up resources...\"\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n",
                      "markdown": "`    echo \"Cleaning up resources...\"\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n    rm \"${PWD}/iot_certificate.pem\"\n    rm \"${PWD}/iot_privatekey.pem\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 91,
                  "endLine": 3,
                  "endColumn": 97,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# Get the S3 URL containing all of the MQTT5 testing environment variables passed in to the bash script\ntesting_env_bucket=$1\nregion=$2\n\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# Get the S3 URL containing all of the MQTT5 testing environment variables passed in to the bash script\ntesting_env_bucket=$1\nregion=$2\n\n",
                      "markdown": "`#!/bin/sh\n\n# Get the S3 URL containing all of the MQTT5 testing environment variables passed in to the bash script\ntesting_env_bucket=$1\nregion=$2\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 56,
                  "endLine": 129,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    echo \"Could not get IoT private key from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n",
                    "rendered": {
                      "text": "    echo \"Could not get IoT private key from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n",
                      "markdown": "`    echo \"Could not get IoT private key from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 48,
                  "endLine": 129,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    echo \"Could not get IoT private key from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n",
                    "rendered": {
                      "text": "    echo \"Could not get IoT private key from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n",
                      "markdown": "`    echo \"Could not get IoT private key from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 56,
                  "endLine": 111,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    echo \"Could not get IoT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n",
                    "rendered": {
                      "text": "    echo \"Could not get IoT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n",
                      "markdown": "`    echo \"Could not get IoT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 48,
                  "endLine": 111,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    echo \"Could not get IoT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n",
                    "rendered": {
                      "text": "    echo \"Could not get IoT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n",
                      "markdown": "`    echo \"Could not get IoT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    rm \"${PWD}/environment_files.txt\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 162,
                  "endLine": 102,
                  "endColumn": 167,
                  "snippet": {
                    "text": "TH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_cert_file\" > ./iot_certificate.pem\niot_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_KEY_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_key_file\" > ./iot_privatekey.pem\n\n# Does the certificate file have data? If not, then abort!\nif [ \"${iot_cert_file}\" != \"\" ]; then\n    echo \"IoT Certificate secret found\"\nelse\n    echo \"Could not get IoT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#",
                    "rendered": {
                      "text": "TH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_cert_file\" > ./iot_certificate.pem\niot_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_KEY_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_key_file\" > ./iot_privatekey.pem\n\n# Does the certificate file have data? If not, then abort!\nif [ \"${iot_cert_file}\" != \"\" ]; then\n    echo \"IoT Certificate secret found\"\nelse\n    echo \"Could not get IoT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#",
                      "markdown": "`TH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_cert_file\" > ./iot_certificate.pem\niot_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_KEY_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_key_file\" > ./iot_privatekey.pem\n\n# Does the certificate file have data? If not, then abort!\nif [ \"${iot_cert_file}\" != \"\" ]; then\n    echo \"IoT Certificate secret found\"\nelse\n    echo \"Could not get IoT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 146,
                  "endLine": 102,
                  "endColumn": 151,
                  "snippet": {
                    "text": "T_CERTIFICATE_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_cert_file\" > ./iot_certificate.pem\niot_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_KEY_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_key_file\" > ./iot_privatekey.pem\n\n# Does the certificate file have data? If not, then abort!\nif [ \"${iot_cert_file}\" != \"\" ]; then\n    echo \"IoT Certificate secret found\"\nelse\n    echo \"Could not get IoT certificate from secrets!\"\n\n    # Clean up...\n    uns",
                    "rendered": {
                      "text": "T_CERTIFICATE_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_cert_file\" > ./iot_certificate.pem\niot_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_KEY_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_key_file\" > ./iot_privatekey.pem\n\n# Does the certificate file have data? If not, then abort!\nif [ \"${iot_cert_file}\" != \"\" ]; then\n    echo \"IoT Certificate secret found\"\nelse\n    echo \"Could not get IoT certificate from secrets!\"\n\n    # Clean up...\n    uns",
                      "markdown": "`T_CERTIFICATE_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_cert_file\" > ./iot_certificate.pem\niot_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_KEY_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_key_file\" > ./iot_privatekey.pem\n\n# Does the certificate file have data? If not, then abort!\nif [ \"${iot_cert_file}\" != \"\" ]; then\n    echo \"IoT Certificate secret found\"\nelse\n    echo \"Could not get IoT certificate from secrets!\"\n\n    # Clean up...\n    uns`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 171,
                  "endLine": 101,
                  "endColumn": 176,
                  "snippet": {
                    "text": "_privatekey.pem\"\n\n\n# IoT/Builder certificate and key processing\n# Get the certificate and key secrets (dumps straight to a file)\niot_cert_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_CERTIFICATE_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_cert_file\" > ./iot_certificate.pem\niot_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_KEY_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_key_file\" > ./iot_privatekey.pem\n\n# Does the",
                    "rendered": {
                      "text": "_privatekey.pem\"\n\n\n# IoT/Builder certificate and key processing\n# Get the certificate and key secrets (dumps straight to a file)\niot_cert_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_CERTIFICATE_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_cert_file\" > ./iot_certificate.pem\niot_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_KEY_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_key_file\" > ./iot_privatekey.pem\n\n# Does the",
                      "markdown": "`_privatekey.pem\"\n\n\n# IoT/Builder certificate and key processing\n# Get the certificate and key secrets (dumps straight to a file)\niot_cert_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_CERTIFICATE_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_cert_file\" > ./iot_certificate.pem\niot_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_KEY_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_key_file\" > ./iot_privatekey.pem\n\n# Does the`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 155,
                  "endLine": 101,
                  "endColumn": 160,
                  "snippet": {
                    "text": "FILE=\"${PWD}/crt_privatekey.pem\"\n\n\n# IoT/Builder certificate and key processing\n# Get the certificate and key secrets (dumps straight to a file)\niot_cert_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_CERTIFICATE_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_cert_file\" > ./iot_certificate.pem\niot_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_KEY_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_key_file\" > ./iot_privatekey",
                    "rendered": {
                      "text": "FILE=\"${PWD}/crt_privatekey.pem\"\n\n\n# IoT/Builder certificate and key processing\n# Get the certificate and key secrets (dumps straight to a file)\niot_cert_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_CERTIFICATE_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_cert_file\" > ./iot_certificate.pem\niot_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_KEY_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_key_file\" > ./iot_privatekey",
                      "markdown": "`FILE=\"${PWD}/crt_privatekey.pem\"\n\n\n# IoT/Builder certificate and key processing\n# Get the certificate and key secrets (dumps straight to a file)\niot_cert_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_CERTIFICATE_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_cert_file\" > ./iot_certificate.pem\niot_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_IOT_KEY_PATH_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$iot_key_file\" > ./iot_privatekey`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 56,
                  "endLine": 87,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    echo \"Could not get CRT private key from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n",
                    "rendered": {
                      "text": "    echo \"Could not get CRT private key from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n",
                      "markdown": "`    echo \"Could not get CRT private key from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 48,
                  "endLine": 87,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    echo \"Could not get CRT private key from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n",
                    "rendered": {
                      "text": "    echo \"Could not get CRT private key from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n",
                      "markdown": "`    echo \"Could not get CRT private key from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 56,
                  "endLine": 73,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    echo \"Could not get CRT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n",
                    "rendered": {
                      "text": "    echo \"Could not get CRT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n",
                      "markdown": "`    echo \"Could not get CRT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 48,
                  "endLine": 73,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    echo \"Could not get CRT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n",
                    "rendered": {
                      "text": "    echo \"Could not get CRT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n",
                      "markdown": "`    echo \"Could not get CRT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v '^#' environment_files.txt | xargs | cut -d \"=\" -f 1)\n    rm \"${PWD}/environment_files.txt\"\n    rm \"${PWD}/crt_certificate.pem\"\n    rm \"${PWD}/crt_privatekey.pem\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 158,
                  "endLine": 65,
                  "endColumn": 163,
                  "snippet": {
                    "text": "E_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_cert_file\" > ${PWD}/crt_certificate.pem\ncrt_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_KEY_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_key_file\" > ${PWD}/crt_privatekey.pem\n# Does the certificate file have data? If not, then abort!\nif [ \"${crt_cert_file}\" != \"\" ]; then\n    echo \"CRT Certificate secret found\"\nelse\n    echo \"Could not get CRT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v",
                    "rendered": {
                      "text": "E_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_cert_file\" > ${PWD}/crt_certificate.pem\ncrt_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_KEY_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_key_file\" > ${PWD}/crt_privatekey.pem\n# Does the certificate file have data? If not, then abort!\nif [ \"${crt_cert_file}\" != \"\" ]; then\n    echo \"CRT Certificate secret found\"\nelse\n    echo \"Could not get CRT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v",
                      "markdown": "`E_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_cert_file\" > ${PWD}/crt_certificate.pem\ncrt_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_KEY_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_key_file\" > ${PWD}/crt_privatekey.pem\n# Does the certificate file have data? If not, then abort!\nif [ \"${crt_cert_file}\" != \"\" ]; then\n    echo \"CRT Certificate secret found\"\nelse\n    echo \"Could not get CRT certificate from secrets!\"\n\n    # Clean up...\n    unset $(grep -v`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 142,
                  "endLine": 65,
                  "endColumn": 147,
                  "snippet": {
                    "text": "_CERTIFICATE_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_cert_file\" > ${PWD}/crt_certificate.pem\ncrt_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_KEY_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_key_file\" > ${PWD}/crt_privatekey.pem\n# Does the certificate file have data? If not, then abort!\nif [ \"${crt_cert_file}\" != \"\" ]; then\n    echo \"CRT Certificate secret found\"\nelse\n    echo \"Could not get CRT certificate from secrets!\"\n\n    # Clean up...\n   ",
                    "rendered": {
                      "text": "_CERTIFICATE_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_cert_file\" > ${PWD}/crt_certificate.pem\ncrt_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_KEY_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_key_file\" > ${PWD}/crt_privatekey.pem\n# Does the certificate file have data? If not, then abort!\nif [ \"${crt_cert_file}\" != \"\" ]; then\n    echo \"CRT Certificate secret found\"\nelse\n    echo \"Could not get CRT certificate from secrets!\"\n\n    # Clean up...\n   ",
                      "markdown": "`_CERTIFICATE_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_cert_file\" > ${PWD}/crt_certificate.pem\ncrt_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_KEY_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_key_file\" > ${PWD}/crt_privatekey.pem\n# Does the certificate file have data? If not, then abort!\nif [ \"${crt_cert_file}\" != \"\" ]; then\n    echo \"CRT Certificate secret found\"\nelse\n    echo \"Could not get CRT certificate from secrets!\"\n\n    # Clean up...\n   `"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 167,
                  "endLine": 64,
                  "endColumn": 172,
                  "snippet": {
                    "text": "iles.txt | xargs)\n\n# CRT/non-builder certificate and key processing\n# Get the certificate and key secrets (dumps straight to a file)\ncrt_cert_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_CERTIFICATE_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_cert_file\" > ${PWD}/crt_certificate.pem\ncrt_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_KEY_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_key_file\" > ${PWD}/crt_privatekey.pem\n# Doe",
                    "rendered": {
                      "text": "iles.txt | xargs)\n\n# CRT/non-builder certificate and key processing\n# Get the certificate and key secrets (dumps straight to a file)\ncrt_cert_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_CERTIFICATE_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_cert_file\" > ${PWD}/crt_certificate.pem\ncrt_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_KEY_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_key_file\" > ${PWD}/crt_privatekey.pem\n# Doe",
                      "markdown": "`iles.txt | xargs)\n\n# CRT/non-builder certificate and key processing\n# Get the certificate and key secrets (dumps straight to a file)\ncrt_cert_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_CERTIFICATE_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_cert_file\" > ${PWD}/crt_certificate.pem\ncrt_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_KEY_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_key_file\" > ${PWD}/crt_privatekey.pem\n# Doe`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 151,
                  "endLine": 64,
                  "endColumn": 156,
                  "snippet": {
                    "text": "#' environment_files.txt | xargs)\n\n# CRT/non-builder certificate and key processing\n# Get the certificate and key secrets (dumps straight to a file)\ncrt_cert_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_CERTIFICATE_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_cert_file\" > ${PWD}/crt_certificate.pem\ncrt_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_KEY_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_key_file\" > ${PWD}/crt_priv",
                    "rendered": {
                      "text": "#' environment_files.txt | xargs)\n\n# CRT/non-builder certificate and key processing\n# Get the certificate and key secrets (dumps straight to a file)\ncrt_cert_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_CERTIFICATE_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_cert_file\" > ${PWD}/crt_certificate.pem\ncrt_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_KEY_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_key_file\" > ${PWD}/crt_priv",
                      "markdown": "`#' environment_files.txt | xargs)\n\n# CRT/non-builder certificate and key processing\n# Get the certificate and key secrets (dumps straight to a file)\ncrt_cert_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_CERTIFICATE_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_cert_file\" > ${PWD}/crt_certificate.pem\ncrt_key_file=$(aws secretsmanager get-secret-value --secret-id \"${AWS_TEST_MQTT5_KEY_FILE_SECRET}\" --query \"SecretString\" --region ${region} | cut -f2 -d\":\" | cut -f2 -d\\\") && echo -e \"$crt_key_file\" > ${PWD}/crt_priv`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 19,
                  "endLine": 49,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n# Get the file from S3\naws s3 cp ${testing_env_bucket} ${PWD}/environment_files.txt\ntesting_env_file=$( cat environment_files.txt )\n# Make sure we have data of some form\nif [ \"${testing_env_file}\" != \"\" ]; then\n    echo \"Environment variables secret found\"\n",
                    "rendered": {
                      "text": "\n# Get the file from S3\naws s3 cp ${testing_env_bucket} ${PWD}/environment_files.txt\ntesting_env_file=$( cat environment_files.txt )\n# Make sure we have data of some form\nif [ \"${testing_env_file}\" != \"\" ]; then\n    echo \"Environment variables secret found\"\n",
                      "markdown": "`\n# Get the file from S3\naws s3 cp ${testing_env_bucket} ${PWD}/environment_files.txt\ntesting_env_file=$( cat environment_files.txt )\n# Make sure we have data of some form\nif [ \"${testing_env_file}\" != \"\" ]; then\n    echo \"Environment variables secret found\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 6,
                  "endLine": 48,
                  "endColumn": 10,
                  "snippet": {
                    "text": "fi\n\n# Get the file from S3\naws s3 cp ${testing_env_bucket} ${PWD}/environment_files.txt\ntesting_env_file=$( cat environment_files.txt )\n# Make sure we have data of some form\nif [ \"${testing_env_file}\" != \"\" ]; then\n",
                    "rendered": {
                      "text": "fi\n\n# Get the file from S3\naws s3 cp ${testing_env_bucket} ${PWD}/environment_files.txt\ntesting_env_file=$( cat environment_files.txt )\n# Make sure we have data of some form\nif [ \"${testing_env_file}\" != \"\" ]; then\n",
                      "markdown": "`fi\n\n# Get the file from S3\naws s3 cp ${testing_env_bucket} ${PWD}/environment_files.txt\ntesting_env_file=$( cat environment_files.txt )\n# Make sure we have data of some form\nif [ \"${testing_env_file}\" != \"\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 63,
                  "endLine": 30,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    sleep 0.1 # we have to do something to do an else...\nelse\n    echo \"Undoing environment variables\"\n    unset $(grep -v '^#' ${PWD}/environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    unset AWS_TEST_MQTT5_IOT_CERTIFICATE_PATH\n",
                    "rendered": {
                      "text": "    sleep 0.1 # we have to do something to do an else...\nelse\n    echo \"Undoing environment variables\"\n    unset $(grep -v '^#' ${PWD}/environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    unset AWS_TEST_MQTT5_IOT_CERTIFICATE_PATH\n",
                      "markdown": "`    sleep 0.1 # we have to do something to do an else...\nelse\n    echo \"Undoing environment variables\"\n    unset $(grep -v '^#' ${PWD}/environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    unset AWS_TEST_MQTT5_IOT_CERTIFICATE_PATH\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 55,
                  "endLine": 30,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    sleep 0.1 # we have to do something to do an else...\nelse\n    echo \"Undoing environment variables\"\n    unset $(grep -v '^#' ${PWD}/environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    unset AWS_TEST_MQTT5_IOT_CERTIFICATE_PATH\n",
                    "rendered": {
                      "text": "    sleep 0.1 # we have to do something to do an else...\nelse\n    echo \"Undoing environment variables\"\n    unset $(grep -v '^#' ${PWD}/environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    unset AWS_TEST_MQTT5_IOT_CERTIFICATE_PATH\n",
                      "markdown": "`    sleep 0.1 # we have to do something to do an else...\nelse\n    echo \"Undoing environment variables\"\n    unset $(grep -v '^#' ${PWD}/environment_files.txt | xargs | cut -d \"=\" -f 1)\n    unset AWS_TEST_MQTT5_CERTIFICATE_FILE\n    unset AWS_TEST_MQTT5_KEY_FILE\n    unset AWS_TEST_MQTT5_IOT_CERTIFICATE_PATH\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 30,
                  "endLine": 12,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    echo \"S3 bucket for environment variables found and region\"\nelse\n    echo \"Could not get S3 bucket for environment variables and/or region.\"\n    echo \"You need to run this script and pass the S3 URL of the file containing\"\n    echo \"all of the environment variables to set, as well as the secrets for certificates and private keys\"\n    echo \"\"\n    echo \"Example: mqtt5_test_setup.sh s3://<bucket>/<file> <region>\"\n",
                    "rendered": {
                      "text": "    echo \"S3 bucket for environment variables found and region\"\nelse\n    echo \"Could not get S3 bucket for environment variables and/or region.\"\n    echo \"You need to run this script and pass the S3 URL of the file containing\"\n    echo \"all of the environment variables to set, as well as the secrets for certificates and private keys\"\n    echo \"\"\n    echo \"Example: mqtt5_test_setup.sh s3://<bucket>/<file> <region>\"\n",
                      "markdown": "`    echo \"S3 bucket for environment variables found and region\"\nelse\n    echo \"Could not get S3 bucket for environment variables and/or region.\"\n    echo \"You need to run this script and pass the S3 URL of the file containing\"\n    echo \"all of the environment variables to set, as well as the secrets for certificates and private keys\"\n    echo \"\"\n    echo \"Example: mqtt5_test_setup.sh s3://<bucket>/<file> <region>\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5_test_setup.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 91,
                  "endLine": 3,
                  "endColumn": 97,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# Get the S3 URL containing all of the MQTT5 testing environment variables passed in to the bash script\ntesting_env_bucket=$1\nregion=$2\n\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# Get the S3 URL containing all of the MQTT5 testing environment variables passed in to the bash script\ntesting_env_bucket=$1\nregion=$2\n\n",
                      "markdown": "`#!/bin/sh\n\n# Get the S3 URL containing all of the MQTT5 testing environment variables passed in to the bash script\ntesting_env_bucket=$1\nregion=$2\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-5x-x64.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 20,
                  "endLine": 7,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-5 g++-5 cmake3 -y\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-5 g++-5 cmake3 -y\n  pre_build:\n    commands:\n",
                      "markdown": "`  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-5 g++-5 cmake3 -y\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-5x-x64.yml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 12,
                  "endLine": 8,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-5 g++-5 cmake3 -y\n  pre_build:\n    commands:\n      - export CC=gcc-5\n",
                    "rendered": {
                      "text": "    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-5 g++-5 cmake3 -y\n  pre_build:\n    commands:\n      - export CC=gcc-5\n",
                      "markdown": "`    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-5 g++-5 cmake3 -y\n  pre_build:\n    commands:\n      - export CC=gcc-5\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-5x-x64.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 12,
                  "endLine": 7,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-5 g++-5 cmake3 -y\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-5 g++-5 cmake3 -y\n  pre_build:\n    commands:\n",
                      "markdown": "`  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-5 g++-5 cmake3 -y\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5-cpp-canary-test.yml"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 21,
                  "endLine": 25,
                  "endColumn": 29,
                  "snippet": {
                    "text": "      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n",
                    "rendered": {
                      "text": "      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n",
                      "markdown": "`      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5-cpp-canary-test.yml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 15,
                  "endLine": 23,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      # install cmake for codebuild environment.\n      - add-apt-repository ppa:openjdk-r/ppa\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n",
                    "rendered": {
                      "text": "      # install cmake for codebuild environment.\n      - add-apt-repository ppa:openjdk-r/ppa\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n",
                      "markdown": "`      # install cmake for codebuild environment.\n      - add-apt-repository ppa:openjdk-r/ppa\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5-cpp-canary-test.yml"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 4,
                  "snippet": {
                    "text": "version: 0.2\nenv:\n  shell: bash\n  variables:\n    CANARY_DURATION: 25200\n    CANARY_THREADS: 3\n    CANARY_TPS: 50\n",
                    "rendered": {
                      "text": "version: 0.2\nenv:\n  shell: bash\n  variables:\n    CANARY_DURATION: 25200\n    CANARY_THREADS: 3\n    CANARY_TPS: 50\n",
                      "markdown": "`version: 0.2\nenv:\n  shell: bash\n  variables:\n    CANARY_DURATION: 25200\n    CANARY_THREADS: 3\n    CANARY_TPS: 50\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5-cpp-canary-test.yml"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 135,
                  "endLine": 36,
                  "endColumn": 140,
                  "snippet": {
                    "text": "    commands:\n      - export CANNARY_TEST_EXE=$CODEBUILD_SRC_DIR/$CANARY_TEST_EXE_PATH\n      - echo $CANNARY_TEST_EXE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n",
                    "rendered": {
                      "text": "    commands:\n      - export CANNARY_TEST_EXE=$CODEBUILD_SRC_DIR/$CANARY_TEST_EXE_PATH\n      - echo $CANNARY_TEST_EXE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n",
                      "markdown": "`    commands:\n      - export CANNARY_TEST_EXE=$CODEBUILD_SRC_DIR/$CANARY_TEST_EXE_PATH\n      - echo $CANNARY_TEST_EXE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5-cpp-canary-test.yml"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 119,
                  "endLine": 36,
                  "endColumn": 124,
                  "snippet": {
                    "text": "    commands:\n      - export CANNARY_TEST_EXE=$CODEBUILD_SRC_DIR/$CANARY_TEST_EXE_PATH\n      - echo $CANNARY_TEST_EXE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n",
                    "rendered": {
                      "text": "    commands:\n      - export CANNARY_TEST_EXE=$CODEBUILD_SRC_DIR/$CANARY_TEST_EXE_PATH\n      - echo $CANNARY_TEST_EXE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n",
                      "markdown": "`    commands:\n      - export CANNARY_TEST_EXE=$CODEBUILD_SRC_DIR/$CANARY_TEST_EXE_PATH\n      - echo $CANNARY_TEST_EXE\n      - export ENDPOINT=$(aws secretsmanager get-secret-value --secret-id \"$CANARY_SERVER_ARN\" --query \"SecretString\" | cut -f2 -d\":\" | sed -e 's/[\\\\\\\"\\}]//g')\n      - export GIT_HASH=$(git rev-parse HEAD)\n      # Build library and test\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5-cpp-canary-test.yml"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 18,
                  "endLine": 30,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n\n  build:\n    commands:\n",
                    "rendered": {
                      "text": "      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n\n  build:\n    commands:\n",
                      "markdown": "`      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n\n  build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5-cpp-canary-test.yml"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 18,
                  "endLine": 29,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n\n  build:\n",
                    "rendered": {
                      "text": "      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n\n  build:\n",
                      "markdown": "`      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n\n  build:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5-cpp-canary-test.yml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 28,
                  "endLine": 28,
                  "endColumn": 33,
                  "snippet": {
                    "text": "      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n\n",
                    "rendered": {
                      "text": "      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n\n",
                      "markdown": "`      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5-cpp-canary-test.yml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 12,
                  "endLine": 28,
                  "endColumn": 21,
                  "snippet": {
                    "text": "      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n\n",
                    "rendered": {
                      "text": "      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n\n",
                      "markdown": "`      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5-cpp-canary-test.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 12,
                  "endLine": 27,
                  "endColumn": 21,
                  "snippet": {
                    "text": "      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n",
                    "rendered": {
                      "text": "      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n",
                      "markdown": "`      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n      - python3 -m pip install psutil\n      - python3 -m pip install boto3\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5-cpp-canary-test.yml"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 7,
                  "endLine": 25,
                  "endColumn": 12,
                  "snippet": {
                    "text": "      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n",
                    "rendered": {
                      "text": "      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n",
                      "markdown": "`      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n      - sudo apt-get install pip -y -f\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5-cpp-canary-test.yml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 12,
                  "endLine": 24,
                  "endColumn": 21,
                  "snippet": {
                    "text": "      - add-apt-repository ppa:openjdk-r/ppa\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n",
                    "rendered": {
                      "text": "      - add-apt-repository ppa:openjdk-r/ppa\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n",
                      "markdown": "`      - add-apt-repository ppa:openjdk-r/ppa\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n      - sudo apt-get install gcc python3-dev -y -f\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5-cpp-canary-test.yml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 7,
                  "endLine": 23,
                  "endColumn": 16,
                  "snippet": {
                    "text": "      # install cmake for codebuild environment.\n      - add-apt-repository ppa:openjdk-r/ppa\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n",
                    "rendered": {
                      "text": "      # install cmake for codebuild environment.\n      - add-apt-repository ppa:openjdk-r/ppa\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n",
                      "markdown": "`      # install cmake for codebuild environment.\n      - add-apt-repository ppa:openjdk-r/ppa\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - sudo apt-get install cmake -y\n      - git submodule update --init --recursive\n      # Install necessary lib for canary wrapper\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/mqtt5-cpp-canary-test.yml"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 4,
                  "snippet": {
                    "text": "version: 0.2\nenv:\n  shell: bash\n  variables:\n    CANARY_DURATION: 25200\n    CANARY_THREADS: 3\n    CANARY_TPS: 50\n",
                    "rendered": {
                      "text": "version: 0.2\nenv:\n  shell: bash\n  variables:\n    CANARY_DURATION: 25200\n    CANARY_THREADS: 3\n    CANARY_TPS: 50\n",
                      "markdown": "`version: 0.2\nenv:\n  shell: bash\n  variables:\n    CANARY_DURATION: 25200\n    CANARY_THREADS: 3\n    CANARY_TPS: 50\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-4x-x64.yml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 20,
                  "endLine": 6,
                  "endColumn": 28,
                  "snippet": {
                    "text": "phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc g++ cmake3 -y\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc g++ cmake3 -y\n  pre_build:\n    commands:\n",
                      "markdown": "`phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc g++ cmake3 -y\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-4x-x64.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 12,
                  "endLine": 7,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc g++ cmake3 -y\n  pre_build:\n    commands:\n      - export CC=gcc\n",
                    "rendered": {
                      "text": "  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc g++ cmake3 -y\n  pre_build:\n    commands:\n      - export CC=gcc\n",
                      "markdown": "`  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc g++ cmake3 -y\n  pre_build:\n    commands:\n      - export CC=gcc\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-4x-x64.yml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 12,
                  "endLine": 6,
                  "endColumn": 21,
                  "snippet": {
                    "text": "phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc g++ cmake3 -y\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc g++ cmake3 -y\n  pre_build:\n    commands:\n",
                      "markdown": "`phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get install gcc g++ cmake3 -y\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-clang3-x64.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 20,
                  "endLine": 8,
                  "snippet": {
                    "text": "  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get update\n      - sudo apt-get install clang-3.9 cmake3 clang-tidy-3.9 -y\n\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get update\n      - sudo apt-get install clang-3.9 cmake3 clang-tidy-3.9 -y\n\n  pre_build:\n    commands:\n",
                      "markdown": "`  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get update\n      - sudo apt-get install clang-3.9 cmake3 clang-tidy-3.9 -y\n\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-clang3-x64.yml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 20,
                  "endLine": 6,
                  "endColumn": 28,
                  "snippet": {
                    "text": "phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get update\n      - sudo apt-get install clang-3.9 cmake3 clang-tidy-3.9 -y\n\n",
                    "rendered": {
                      "text": "phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get update\n      - sudo apt-get install clang-3.9 cmake3 clang-tidy-3.9 -y\n\n",
                      "markdown": "`phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get update\n      - sudo apt-get install clang-3.9 cmake3 clang-tidy-3.9 -y\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-clang3-x64.yml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 12,
                  "endLine": 8,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    commands:\n      - sudo apt-get update -y\n      - sudo apt-get update\n      - sudo apt-get install clang-3.9 cmake3 clang-tidy-3.9 -y\n\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "    commands:\n      - sudo apt-get update -y\n      - sudo apt-get update\n      - sudo apt-get install clang-3.9 cmake3 clang-tidy-3.9 -y\n\n  pre_build:\n    commands:\n",
                      "markdown": "`    commands:\n      - sudo apt-get update -y\n      - sudo apt-get update\n      - sudo apt-get install clang-3.9 cmake3 clang-tidy-3.9 -y\n\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-clang3-x64.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 12,
                  "endLine": 7,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get update\n      - sudo apt-get install clang-3.9 cmake3 clang-tidy-3.9 -y\n\n  pre_build:\n",
                    "rendered": {
                      "text": "  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get update\n      - sudo apt-get install clang-3.9 cmake3 clang-tidy-3.9 -y\n\n  pre_build:\n",
                      "markdown": "`  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get update\n      - sudo apt-get install clang-3.9 cmake3 clang-tidy-3.9 -y\n\n  pre_build:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-clang3-x64.yml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 12,
                  "endLine": 6,
                  "endColumn": 21,
                  "snippet": {
                    "text": "phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get update\n      - sudo apt-get install clang-3.9 cmake3 clang-tidy-3.9 -y\n\n",
                    "rendered": {
                      "text": "phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get update\n      - sudo apt-get install clang-3.9 cmake3 clang-tidy-3.9 -y\n\n",
                      "markdown": "`phases:\n  install:\n    commands:\n      - sudo apt-get update -y\n      - sudo apt-get update\n      - sudo apt-get install clang-3.9 cmake3 clang-tidy-3.9 -y\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/common-windows.bat"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 13,
                  "endLine": 2,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\ngit submodule update --init\nmkdir build\ncd build\n\n",
                    "rendered": {
                      "text": "\ngit submodule update --init\nmkdir build\ncd build\n\n",
                      "markdown": "`\ngit submodule update --init\nmkdir build\ncd build\n\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/common-windows.bat"
                },
                "region": {
                  "startLine": 1,
                  "endLine": 2,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\ngit submodule update --init\nmkdir build\ncd build\n\n",
                    "rendered": {
                      "text": "\ngit submodule update --init\nmkdir build\ncd build\n\n",
                      "markdown": "`\ngit submodule update --init\nmkdir build\ncd build\n\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-6x-x64.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 20,
                  "endLine": 7,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-6 g++-6 cmake3 -y\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-6 g++-6 cmake3 -y\n  pre_build:\n    commands:\n",
                      "markdown": "`  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-6 g++-6 cmake3 -y\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-6x-x64.yml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 12,
                  "endLine": 8,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-6 g++-6 cmake3 -y\n  pre_build:\n    commands:\n      - export CC=gcc-6\n",
                    "rendered": {
                      "text": "    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-6 g++-6 cmake3 -y\n  pre_build:\n    commands:\n      - export CC=gcc-6\n",
                      "markdown": "`    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-6 g++-6 cmake3 -y\n  pre_build:\n    commands:\n      - export CC=gcc-6\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-6x-x64.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 12,
                  "endLine": 7,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-6 g++-6 cmake3 -y\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-6 g++-6 cmake3 -y\n  pre_build:\n    commands:\n",
                      "markdown": "`  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-6 g++-6 cmake3 -y\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 635,
                  "startColumn": 91,
                  "endLine": 635,
                  "endColumn": 95,
                  "snippet": {
                    "text": "            if (len(self.metrics_numbers[i]) > self.metric_report_non_zero_count):\n                amount_to_delete = len(self.metrics_numbers[i]) - self.metric_report_non_zero_count\n                del self.metrics_numbers[i][-amount_to_delete:]\n            # If we have metric_report_non_zero_count amount of metrics, make sure there is at least one\n            # non-zero. If it is all zero, then print a log so we can easily find it\n            if (len(self.metrics_numbers[i]) == self.metric_report_non_zero_count):\n                non_zero_found = False\n",
                    "rendered": {
                      "text": "            if (len(self.metrics_numbers[i]) > self.metric_report_non_zero_count):\n                amount_to_delete = len(self.metrics_numbers[i]) - self.metric_report_non_zero_count\n                del self.metrics_numbers[i][-amount_to_delete:]\n            # If we have metric_report_non_zero_count amount of metrics, make sure there is at least one\n            # non-zero. If it is all zero, then print a log so we can easily find it\n            if (len(self.metrics_numbers[i]) == self.metric_report_non_zero_count):\n                non_zero_found = False\n",
                      "markdown": "`            if (len(self.metrics_numbers[i]) > self.metric_report_non_zero_count):\n                amount_to_delete = len(self.metrics_numbers[i]) - self.metric_report_non_zero_count\n                del self.metrics_numbers[i][-amount_to_delete:]\n            # If we have metric_report_non_zero_count amount of metrics, make sure there is at least one\n            # non-zero. If it is all zero, then print a log so we can easily find it\n            if (len(self.metrics_numbers[i]) == self.metric_report_non_zero_count):\n                non_zero_found = False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 626,
                  "startColumn": 9,
                  "endLine": 626,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            self.perform_final_initialization = False\n            self._init_cloudwatch_pre_first_run()\n\n        # Update the metric values internally\n        for i in range(0, len(self.metrics)):\n            metric_value = self.metrics[i].get_metric_value(psutil_process)\n            self.metrics_numbers[i].insert(0, metric_value)\n",
                    "rendered": {
                      "text": "            self.perform_final_initialization = False\n            self._init_cloudwatch_pre_first_run()\n\n        # Update the metric values internally\n        for i in range(0, len(self.metrics)):\n            metric_value = self.metrics[i].get_metric_value(psutil_process)\n            self.metrics_numbers[i].insert(0, metric_value)\n",
                      "markdown": "`            self.perform_final_initialization = False\n            self._init_cloudwatch_pre_first_run()\n\n        # Update the metric values internally\n        for i in range(0, len(self.metrics)):\n            metric_value = self.metrics[i].get_metric_value(psutil_process)\n            self.metrics_numbers[i].insert(0, metric_value)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 619,
                  "startColumn": 15,
                  "endLine": 619,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            self.abort_due_to_internal_error_reason = \"Could not export Cloudwatch metrics due to exception in Cloudwatch client!\"\n            return\n\n    # Call this at a set interval to post the metrics to Cloudwatch, etc.\n    # This is the function you want to call repeatedly after you have everything setup.\n    def post_metrics(self, psutil_process : psutil.Process):\n        if (self.perform_final_initialization == True):\n",
                    "rendered": {
                      "text": "            self.abort_due_to_internal_error_reason = \"Could not export Cloudwatch metrics due to exception in Cloudwatch client!\"\n            return\n\n    # Call this at a set interval to post the metrics to Cloudwatch, etc.\n    # This is the function you want to call repeatedly after you have everything setup.\n    def post_metrics(self, psutil_process : psutil.Process):\n        if (self.perform_final_initialization == True):\n",
                      "markdown": "`            self.abort_due_to_internal_error_reason = \"Could not export Cloudwatch metrics due to exception in Cloudwatch client!\"\n            return\n\n    # Call this at a set interval to post the metrics to Cloudwatch, etc.\n    # This is the function you want to call repeatedly after you have everything setup.\n    def post_metrics(self, psutil_process : psutil.Process):\n        if (self.perform_final_initialization == True):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 22,
                  "endLine": 253,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        self.print_message(\"[DataSnapshot] Data snapshot created!\")\n\n    # Cleans the class - closing any files, removing alarms, and sending data to S3.\n    # Should be called at the end when you are totally finished shadowing metrics\n    def cleanup(self, error_occurred=False):\n        if (self.s3_bucket_upload_on_complete == True):\n            self.export_result_to_s3_bucket(copy_output_log=True, log_is_error=error_occurred)\n",
                    "rendered": {
                      "text": "        self.print_message(\"[DataSnapshot] Data snapshot created!\")\n\n    # Cleans the class - closing any files, removing alarms, and sending data to S3.\n    # Should be called at the end when you are totally finished shadowing metrics\n    def cleanup(self, error_occurred=False):\n        if (self.s3_bucket_upload_on_complete == True):\n            self.export_result_to_s3_bucket(copy_output_log=True, log_is_error=error_occurred)\n",
                      "markdown": "`        self.print_message(\"[DataSnapshot] Data snapshot created!\")\n\n    # Cleans the class - closing any files, removing alarms, and sending data to S3.\n    # Should be called at the end when you are totally finished shadowing metrics\n    def cleanup(self, error_occurred=False):\n        if (self.s3_bucket_upload_on_complete == True):\n            self.export_result_to_s3_bucket(copy_output_log=True, log_is_error=error_occurred)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 1273,
                  "startColumn": 12,
                  "endLine": 1273,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    ticket_severity=6,\n    arguments=None):\n\n    # Do not cut a ticket for a severity of 6+\n    if (ticket_severity >= 6):\n        return\n\n",
                    "rendered": {
                      "text": "    ticket_severity=6,\n    arguments=None):\n\n    # Do not cut a ticket for a severity of 6+\n    if (ticket_severity >= 6):\n        return\n\n",
                      "markdown": "`    ticket_severity=6,\n    arguments=None):\n\n    # Do not cut a ticket for a severity of 6+\n    if (ticket_severity >= 6):\n        return\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 1251,
                  "startColumn": 33,
                  "endLine": 1251,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            StateValue=\"ALARM\",\n            StateReason=\"AUTO TICKET CUT\")\n    except Exception as e:\n        print (\"ERROR - could not cut ticket due to exception!\")\n        print (\"Exception: \" + str(e), flush=True)\n        return\n\n",
                    "rendered": {
                      "text": "            StateValue=\"ALARM\",\n            StateReason=\"AUTO TICKET CUT\")\n    except Exception as e:\n        print (\"ERROR - could not cut ticket due to exception!\")\n        print (\"Exception: \" + str(e), flush=True)\n        return\n\n",
                      "markdown": "`            StateValue=\"ALARM\",\n            StateReason=\"AUTO TICKET CUT\")\n    except Exception as e:\n        print (\"ERROR - could not cut ticket due to exception!\")\n        print (\"Exception: \" + str(e), flush=True)\n        return\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 1236,
                  "startColumn": 55,
                  "endLine": 1236,
                  "endColumn": 60,
                  "snippet": {
                    "text": "            Threshold=1,\n            ComparisonOperator=\"GreaterThanOrEqualToThreshold\",\n            # The data above does not really matter - it just needs to be valid input data.\n            # This is the part that tells Cloudwatch to cut the ticket\n            AlarmActions=[ticket_arn]\n        )\n    except Exception as e:\n",
                    "rendered": {
                      "text": "            Threshold=1,\n            ComparisonOperator=\"GreaterThanOrEqualToThreshold\",\n            # The data above does not really matter - it just needs to be valid input data.\n            # This is the part that tells Cloudwatch to cut the ticket\n            AlarmActions=[ticket_arn]\n        )\n    except Exception as e:\n",
                      "markdown": "`            Threshold=1,\n            ComparisonOperator=\"GreaterThanOrEqualToThreshold\",\n            # The data above does not really matter - it just needs to be valid input data.\n            # This is the part that tells Cloudwatch to cut the ticket\n            AlarmActions=[ticket_arn]\n        )\n    except Exception as e:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 1219,
                  "startColumn": 37,
                  "endLine": 1219,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    # In the ticket ARN, all spaces need to be replaced with +\n    ticket_arn = ticket_arn.replace(\" \", \"+\")\n\n    ticket_alarm_description = f\"AUTO CUT CANARY WRAPPER TICKET\\n\\nREASON: {ticket_reason}\\n\\nDESCRIPTION: {ticket_description}\\n\\n\"\n\n    # Register a metric alarm so it can auto-cut a ticket for us\n    try:\n",
                    "rendered": {
                      "text": "    # In the ticket ARN, all spaces need to be replaced with +\n    ticket_arn = ticket_arn.replace(\" \", \"+\")\n\n    ticket_alarm_description = f\"AUTO CUT CANARY WRAPPER TICKET\\n\\nREASON: {ticket_reason}\\n\\nDESCRIPTION: {ticket_description}\\n\\n\"\n\n    # Register a metric alarm so it can auto-cut a ticket for us\n    try:\n",
                      "markdown": "`    # In the ticket ARN, all spaces need to be replaced with +\n    ticket_arn = ticket_arn.replace(\" \", \"+\")\n\n    ticket_alarm_description = f\"AUTO CUT CANARY WRAPPER TICKET\\n\\nREASON: {ticket_reason}\\n\\nDESCRIPTION: {ticket_description}\\n\\n\"\n\n    # Register a metric alarm so it can auto-cut a ticket for us\n    try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 1214,
                  "startColumn": 77,
                  "endLine": 1214,
                  "endColumn": 82,
                  "snippet": {
                    "text": "\n    ticket_arn = f\"arn:aws:cloudwatch::cwa-internal:ticket:{ticket_severity}:{ticket_category}:{ticket_type}:{ticket_item}:{ticket_group}:\"\n    if (ticket_allow_duplicates == True):\n        # use \"DO-NOT-DEDUPE\" so we can run the same commit again and it will cut another ticket.\n        ticket_arn += \"DO-NOT-DEDUPE\"\n    # In the ticket ARN, all spaces need to be replaced with +\n    ticket_arn = ticket_arn.replace(\" \", \"+\")\n",
                    "rendered": {
                      "text": "\n    ticket_arn = f\"arn:aws:cloudwatch::cwa-internal:ticket:{ticket_severity}:{ticket_category}:{ticket_type}:{ticket_item}:{ticket_group}:\"\n    if (ticket_allow_duplicates == True):\n        # use \"DO-NOT-DEDUPE\" so we can run the same commit again and it will cut another ticket.\n        ticket_arn += \"DO-NOT-DEDUPE\"\n    # In the ticket ARN, all spaces need to be replaced with +\n    ticket_arn = ticket_arn.replace(\" \", \"+\")\n",
                      "markdown": "`\n    ticket_arn = f\"arn:aws:cloudwatch::cwa-internal:ticket:{ticket_severity}:{ticket_category}:{ticket_type}:{ticket_item}:{ticket_group}:\"\n    if (ticket_allow_duplicates == True):\n        # use \"DO-NOT-DEDUPE\" so we can run the same commit again and it will cut another ticket.\n        ticket_arn += \"DO-NOT-DEDUPE\"\n    # In the ticket ARN, all spaces need to be replaced with +\n    ticket_arn = ticket_arn.replace(\" \", \"+\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 904,
                  "startColumn": 80,
                  "endLine": 904,
                  "endColumn": 85,
                  "snippet": {
                    "text": "        if (self.application_process is None):\n            try:\n                canary_command = self.wrapper_application_path + \" \" + self.wrapper_application_arguments\n                self.application_process = subprocess.Popen(canary_command + \" | tee \" + self.stdout_file_path, shell=True)\n                self.application_process_psutil = psutil.Process(self.application_process.pid)\n                self.print_message (\"[ApplicationMonitor] Application started...\")\n            except Exception as e:\n",
                    "rendered": {
                      "text": "        if (self.application_process is None):\n            try:\n                canary_command = self.wrapper_application_path + \" \" + self.wrapper_application_arguments\n                self.application_process = subprocess.Popen(canary_command + \" | tee \" + self.stdout_file_path, shell=True)\n                self.application_process_psutil = psutil.Process(self.application_process.pid)\n                self.print_message (\"[ApplicationMonitor] Application started...\")\n            except Exception as e:\n",
                      "markdown": "`        if (self.application_process is None):\n            try:\n                canary_command = self.wrapper_application_path + \" \" + self.wrapper_application_arguments\n                self.application_process = subprocess.Popen(canary_command + \" | tee \" + self.stdout_file_path, shell=True)\n                self.application_process_psutil = psutil.Process(self.application_process.pid)\n                self.print_message (\"[ApplicationMonitor] Application started...\")\n            except Exception as e:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 773,
                  "startColumn": 73,
                  "endLine": 773,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                        new_alarm_ticket_description += \"\\n\"\n                        break\n\n                # If it is a new alarm, then add it to our list so we can cut a new ticket\n                if (new_alarm_found == True):\n                    self.data_snapshot.print_message('    (NEW) Alarm with name \"' + triggered_alarm[1] + '\" is in the ALARM state!')\n                    new_alarms.append(triggered_alarm[1])\n",
                    "rendered": {
                      "text": "                        new_alarm_ticket_description += \"\\n\"\n                        break\n\n                # If it is a new alarm, then add it to our list so we can cut a new ticket\n                if (new_alarm_found == True):\n                    self.data_snapshot.print_message('    (NEW) Alarm with name \"' + triggered_alarm[1] + '\" is in the ALARM state!')\n                    new_alarms.append(triggered_alarm[1])\n",
                      "markdown": "`                        new_alarm_ticket_description += \"\\n\"\n                        break\n\n                # If it is a new alarm, then add it to our list so we can cut a new ticket\n                if (new_alarm_found == True):\n                    self.data_snapshot.print_message('    (NEW) Alarm with name \"' + triggered_alarm[1] + '\" is in the ALARM state!')\n                    new_alarms.append(triggered_alarm[1])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 636,
                  "startColumn": 76,
                  "endLine": 636,
                  "endColumn": 82,
                  "snippet": {
                    "text": "                amount_to_delete = len(self.metrics_numbers[i]) - self.metric_report_non_zero_count\n                del self.metrics_numbers[i][-amount_to_delete:]\n            # If we have metric_report_non_zero_count amount of metrics, make sure there is at least one\n            # non-zero. If it is all zero, then print a log so we can easily find it\n            if (len(self.metrics_numbers[i]) == self.metric_report_non_zero_count):\n                non_zero_found = False\n                for j in range(0, len(self.metrics_numbers[i])):\n",
                    "rendered": {
                      "text": "                amount_to_delete = len(self.metrics_numbers[i]) - self.metric_report_non_zero_count\n                del self.metrics_numbers[i][-amount_to_delete:]\n            # If we have metric_report_non_zero_count amount of metrics, make sure there is at least one\n            # non-zero. If it is all zero, then print a log so we can easily find it\n            if (len(self.metrics_numbers[i]) == self.metric_report_non_zero_count):\n                non_zero_found = False\n                for j in range(0, len(self.metrics_numbers[i])):\n",
                      "markdown": "`                amount_to_delete = len(self.metrics_numbers[i]) - self.metric_report_non_zero_count\n                del self.metrics_numbers[i][-amount_to_delete:]\n            # If we have metric_report_non_zero_count amount of metrics, make sure there is at least one\n            # non-zero. If it is all zero, then print a log so we can easily find it\n            if (len(self.metrics_numbers[i]) == self.metric_report_non_zero_count):\n                non_zero_found = False\n                for j in range(0, len(self.metrics_numbers[i])):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 56,
                  "endLine": 558,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        if widget is None:\n            widget = self._find_cloudwatch_widget(name=widget_name)\n            if widget is None:\n                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n        widget.remove_metric_from_widget(existing_metric_name=metric_name)\n        return\n",
                    "rendered": {
                      "text": "        if widget is None:\n            widget = self._find_cloudwatch_widget(name=widget_name)\n            if widget is None:\n                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n        widget.remove_metric_from_widget(existing_metric_name=metric_name)\n        return\n",
                      "markdown": "`        if widget is None:\n            widget = self._find_cloudwatch_widget(name=widget_name)\n            if widget is None:\n                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n        widget.remove_metric_from_widget(existing_metric_name=metric_name)\n        return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 548,
                  "startColumn": 42,
                  "endLine": 548,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n\n        # Adjust metric name so it has the git hash, repo, etc\n        metric_name_formatted = metric_name\n\n        widget.add_metric_to_widget(new_metric_name=metric_name_formatted)\n",
                    "rendered": {
                      "text": "                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n\n        # Adjust metric name so it has the git hash, repo, etc\n        metric_name_formatted = metric_name\n\n        widget.add_metric_to_widget(new_metric_name=metric_name_formatted)\n",
                      "markdown": "`                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n\n        # Adjust metric name so it has the git hash, repo, etc\n        metric_name_formatted = metric_name\n\n        widget.add_metric_to_widget(new_metric_name=metric_name_formatted)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 545,
                  "startColumn": 56,
                  "endLine": 545,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        if widget is None:\n            widget = self._find_cloudwatch_widget(name=widget_name)\n            if widget is None:\n                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n\n        # Adjust metric name so it has the git hash, repo, etc\n",
                    "rendered": {
                      "text": "        if widget is None:\n            widget = self._find_cloudwatch_widget(name=widget_name)\n            if widget is None:\n                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n\n        # Adjust metric name so it has the git hash, repo, etc\n",
                      "markdown": "`        if widget is None:\n            widget = self._find_cloudwatch_widget(name=widget_name)\n            if widget is None:\n                print (\"[DataSnapshot] ERROR - could not find widget with name: \" + widget_name, flush=True)\n                return\n\n        # Adjust metric name so it has the git hash, repo, etc\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 64,
                  "endLine": 518,
                  "snippet": {
                    "text": "            is_percent=is_percent\n        )\n        self.metrics.append(new_metric)\n        # append an empty list so we can track it's metrics over time\n        self.metrics_numbers.append([])\n\n    def register_dashboard_widget(self, new_widget_name, metrics_to_add=[], new_widget_period=60):\n\n",
                    "rendered": {
                      "text": "            is_percent=is_percent\n        )\n        self.metrics.append(new_metric)\n        # append an empty list so we can track it's metrics over time\n        self.metrics_numbers.append([])\n\n    def register_dashboard_widget(self, new_widget_name, metrics_to_add=[], new_widget_period=60):\n\n",
                      "markdown": "`            is_percent=is_percent\n        )\n        self.metrics.append(new_metric)\n        # append an empty list so we can track it's metrics over time\n        self.metrics_numbers.append([])\n\n    def register_dashboard_widget(self, new_widget_name, metrics_to_add=[], new_widget_period=60):\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 49,
                  "endLine": 401,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        return return_result\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n        if (self.s3_client is None):\n",
                    "rendered": {
                      "text": "        return return_result\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n        if (self.s3_client is None):\n",
                      "markdown": "`        return return_result\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n        if (self.s3_client is None):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 99,
                  "endLine": 400,
                  "endColumn": 104,
                  "snippet": {
                    "text": "\n        return return_result\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n",
                    "rendered": {
                      "text": "\n        return return_result\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n",
                      "markdown": "`\n        return return_result\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 53,
                  "endLine": 400,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n        return return_result\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n",
                    "rendered": {
                      "text": "\n        return return_result\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n",
                      "markdown": "`\n        return return_result\n\n    # Exports a file with the same name as the commit Git hash to an S3 bucket in a folder with the Git repo name.\n    # By default, this file will only contain the Git hash.\n    # If copy_output_log is true, then the output log will be copied into this file, which may be useful for debugging.\n    def export_result_to_s3_bucket(self, copy_output_log=False, log_is_error=False):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 24,
                  "endLine": 375,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        for metric in self.metrics:\n            tmp = self._check_cloudwatch_alarm_state_metric(metric)\n            if (tmp[1] != None):\n                # Do not cut a ticket for the \"Alive_Alarm\" that we use to check if the Canary is running\n                if (\"Alive_Alarm\" in tmp[1] == False):\n                    if (tmp[0] != True):\n                        return_result_list.append(tmp)\n",
                    "rendered": {
                      "text": "        for metric in self.metrics:\n            tmp = self._check_cloudwatch_alarm_state_metric(metric)\n            if (tmp[1] != None):\n                # Do not cut a ticket for the \"Alive_Alarm\" that we use to check if the Canary is running\n                if (\"Alive_Alarm\" in tmp[1] == False):\n                    if (tmp[0] != True):\n                        return_result_list.append(tmp)\n",
                      "markdown": "`        for metric in self.metrics:\n            tmp = self._check_cloudwatch_alarm_state_metric(metric)\n            if (tmp[1] != None):\n                # Do not cut a ticket for the \"Alive_Alarm\" that we use to check if the Canary is running\n                if (\"Alive_Alarm\" in tmp[1] == False):\n                    if (tmp[0] != True):\n                        return_result_list.append(tmp)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 57,
                  "endLine": 184,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        if (git_hash is None or git_repo_name is None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n            self.abort_due_to_internal_error = True\n            self.abort_due_to_internal_error_reason = \"No Git hash and repository passed!\"\n            return\n\n        self.git_hash = git_hash\n",
                    "rendered": {
                      "text": "        if (git_hash is None or git_repo_name is None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n            self.abort_due_to_internal_error = True\n            self.abort_due_to_internal_error_reason = \"No Git hash and repository passed!\"\n            return\n\n        self.git_hash = git_hash\n",
                      "markdown": "`        if (git_hash is None or git_repo_name is None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n            self.abort_due_to_internal_error = True\n            self.abort_due_to_internal_error_reason = \"No Git hash and repository passed!\"\n            return\n\n        self.git_hash = git_hash\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 43,
                  "endLine": 182,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        # Git related stuff\n        # ==================\n        if (git_hash is None or git_repo_name is None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n            self.abort_due_to_internal_error = True\n            self.abort_due_to_internal_error_reason = \"No Git hash and repository passed!\"\n            return\n",
                    "rendered": {
                      "text": "        # Git related stuff\n        # ==================\n        if (git_hash is None or git_repo_name is None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n            self.abort_due_to_internal_error = True\n            self.abort_due_to_internal_error_reason = \"No Git hash and repository passed!\"\n            return\n",
                      "markdown": "`        # Git related stuff\n        # ==================\n        if (git_hash is None or git_repo_name is None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n            self.abort_due_to_internal_error = True\n            self.abort_due_to_internal_error_reason = \"No Git hash and repository passed!\"\n            return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 9,
                  "endLine": 179,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            return\n        # ==================\n\n        # Git related stuff\n        # ==================\n        if (git_hash is None or git_repo_name is None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n",
                    "rendered": {
                      "text": "            return\n        # ==================\n\n        # Git related stuff\n        # ==================\n        if (git_hash is None or git_repo_name is None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n",
                      "markdown": "`            return\n        # ==================\n\n        # Git related stuff\n        # ==================\n        if (git_hash is None or git_repo_name is None):\n            print(\"[DataSnapshot] ERROR - a Git hash and repository name are REQUIRED for the canary wrapper to run!\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 86,
                  "endLine": 28,
                  "endColumn": 91,
                  "snippet": {
                    "text": "        self.metric_unit = metric_unit\n        self.metric_alarm_threshold = metric_alarm_threshold\n        self.metric_alarm_name = self.metric_name + \"-\" + git_repo_name + \"-\" + git_hash\n        self.metric_alarm_description = 'Alarm for metric \"' + self.metric_name + '\" - git hash: ' + git_hash\n        self.metric_value = None\n        self.reports_to_skip = reports_to_skip\n        self.metric_alarm_severity = metric_alarm_severity\n",
                    "rendered": {
                      "text": "        self.metric_unit = metric_unit\n        self.metric_alarm_threshold = metric_alarm_threshold\n        self.metric_alarm_name = self.metric_name + \"-\" + git_repo_name + \"-\" + git_hash\n        self.metric_alarm_description = 'Alarm for metric \"' + self.metric_name + '\" - git hash: ' + git_hash\n        self.metric_value = None\n        self.reports_to_skip = reports_to_skip\n        self.metric_alarm_severity = metric_alarm_severity\n",
                      "markdown": "`        self.metric_unit = metric_unit\n        self.metric_alarm_threshold = metric_alarm_threshold\n        self.metric_alarm_name = self.metric_name + \"-\" + git_repo_name + \"-\" + git_hash\n        self.metric_alarm_description = 'Alarm for metric \"' + self.metric_name + '\" - git hash: ' + git_hash\n        self.metric_value = None\n        self.reports_to_skip = reports_to_skip\n        self.metric_alarm_severity = metric_alarm_severity\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/CanaryWrapper_Classes.py"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 6,
                  "endLine": 9,
                  "snippet": {
                    "text": "import boto3\nimport psutil\n# Part of standard packages in Python 3.4+\nimport time\nimport os\nimport json\nimport subprocess\nimport zipfile\n",
                    "rendered": {
                      "text": "import boto3\nimport psutil\n# Part of standard packages in Python 3.4+\nimport time\nimport os\nimport json\nimport subprocess\nimport zipfile\n",
                      "markdown": "`import boto3\nimport psutil\n# Part of standard packages in Python 3.4+\nimport time\nimport os\nimport json\nimport subprocess\nimport zipfile\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-7x-x64.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 20,
                  "endLine": 7,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 g++-7 cmake3 -y\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 g++-7 cmake3 -y\n  pre_build:\n    commands:\n",
                      "markdown": "`  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 g++-7 cmake3 -y\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-7x-x64.yml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 12,
                  "endLine": 8,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 g++-7 cmake3 -y\n  pre_build:\n    commands:\n      - export CC=gcc-7\n",
                    "rendered": {
                      "text": "    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 g++-7 cmake3 -y\n  pre_build:\n    commands:\n      - export CC=gcc-7\n",
                      "markdown": "`    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 g++-7 cmake3 -y\n  pre_build:\n    commands:\n      - export CC=gcc-7\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-gcc-7x-x64.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 12,
                  "endLine": 7,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 g++-7 cmake3 -y\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 g++-7 cmake3 -y\n  pre_build:\n    commands:\n",
                      "markdown": "`  install:\n    commands:\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 g++-7 cmake3 -y\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 21,
                  "endLine": 24,
                  "endColumn": 29,
                  "snippet": {
                    "text": "  build:\n    commands:\n      - echo Build started on `date`\n      - git submodule update --init\n      # Build using builder, which will also run tests\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n      - python3 builder.pyz build --project aws-crt-cpp downstream --cmake-extra=-DUSE_OPENSSL=ON\n",
                    "rendered": {
                      "text": "  build:\n    commands:\n      - echo Build started on `date`\n      - git submodule update --init\n      # Build using builder, which will also run tests\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n      - python3 builder.pyz build --project aws-crt-cpp downstream --cmake-extra=-DUSE_OPENSSL=ON\n",
                      "markdown": "`  build:\n    commands:\n      - echo Build started on `date`\n      - git submodule update --init\n      # Build using builder, which will also run tests\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n      - python3 builder.pyz build --project aws-crt-cpp downstream --cmake-extra=-DUSE_OPENSSL=ON\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 20,
                  "endLine": 16,
                  "endColumn": 28,
                  "snippet": {
                    "text": "      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 cmake python3 python3-pip -y -f\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 cmake python3 python3-pip -y -f\n  pre_build:\n    commands:\n",
                      "markdown": "`      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 cmake python3 python3-pip -y -f\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 4,
                  "snippet": {
                    "text": "version: 0.2\nenv:\n  shell: bash\n  variables:\n    BUILDER_VERSION: v0.9.44\n    BUILDER_SOURCE: releases\n    BUILDER_HOST: https://d19elf31gohf1l.cloudfront.net\n",
                    "rendered": {
                      "text": "version: 0.2\nenv:\n  shell: bash\n  variables:\n    BUILDER_VERSION: v0.9.44\n    BUILDER_SOURCE: releases\n    BUILDER_HOST: https://d19elf31gohf1l.cloudfront.net\n",
                      "markdown": "`version: 0.2\nenv:\n  shell: bash\n  variables:\n    BUILDER_VERSION: v0.9.44\n    BUILDER_SOURCE: releases\n    BUILDER_HOST: https://d19elf31gohf1l.cloudfront.net\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 7,
                  "endLine": 24,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  build:\n    commands:\n      - echo Build started on `date`\n      - git submodule update --init\n      # Build using builder, which will also run tests\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n      - python3 builder.pyz build --project aws-crt-cpp downstream --cmake-extra=-DUSE_OPENSSL=ON\n",
                    "rendered": {
                      "text": "  build:\n    commands:\n      - echo Build started on `date`\n      - git submodule update --init\n      # Build using builder, which will also run tests\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n      - python3 builder.pyz build --project aws-crt-cpp downstream --cmake-extra=-DUSE_OPENSSL=ON\n",
                      "markdown": "`  build:\n    commands:\n      - echo Build started on `date`\n      - git submodule update --init\n      # Build using builder, which will also run tests\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz?run=$CODEBUILD_BUILD_ID', 'builder.pyz')\"\n      - python3 builder.pyz build --project aws-crt-cpp downstream --cmake-extra=-DUSE_OPENSSL=ON\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 12,
                  "endLine": 17,
                  "endColumn": 21,
                  "snippet": {
                    "text": "      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 cmake python3 python3-pip -y -f\n  pre_build:\n    commands:\n      - export CC=gcc-7\n",
                    "rendered": {
                      "text": "      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 cmake python3 python3-pip -y -f\n  pre_build:\n    commands:\n      - export CC=gcc-7\n",
                      "markdown": "`      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 cmake python3 python3-pip -y -f\n  pre_build:\n    commands:\n      - export CC=gcc-7\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 12,
                  "endLine": 16,
                  "endColumn": 21,
                  "snippet": {
                    "text": "      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 cmake python3 python3-pip -y -f\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 cmake python3 python3-pip -y -f\n  pre_build:\n    commands:\n",
                      "markdown": "`      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n      - sudo apt-get install gcc-7 cmake python3 python3-pip -y -f\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 7,
                  "endLine": 13,
                  "endColumn": 13,
                  "snippet": {
                    "text": "phases:\n  install:\n    commands:\n      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n",
                    "rendered": {
                      "text": "phases:\n  install:\n    commands:\n      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n",
                      "markdown": "`phases:\n  install:\n    commands:\n      - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\n      - sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n      - sudo apt-add-repository \"deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main\"\n      - sudo apt-get update -y\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 4,
                  "snippet": {
                    "text": "version: 0.2\nenv:\n  shell: bash\n  variables:\n    BUILDER_VERSION: v0.9.44\n    BUILDER_SOURCE: releases\n    BUILDER_HOST: https://d19elf31gohf1l.cloudfront.net\n",
                    "rendered": {
                      "text": "version: 0.2\nenv:\n  shell: bash\n  variables:\n    BUILDER_VERSION: v0.9.44\n    BUILDER_SOURCE: releases\n    BUILDER_HOST: https://d19elf31gohf1l.cloudfront.net\n",
                      "markdown": "`version: 0.2\nenv:\n  shell: bash\n  variables:\n    BUILDER_VERSION: v0.9.44\n    BUILDER_SOURCE: releases\n    BUILDER_HOST: https://d19elf31gohf1l.cloudfront.net\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/cmake/AwsGetVersion.cmake"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 53,
                  "endLine": 27,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            endforeach()\n        endif()\n\n        # Full version should indicate when we're not at the exact tagged commit.\n        # Be compliant with https://semver.org\n        if (NOT is_exact_version)\n            aws_git_try(\"rev-parse --short=8 HEAD\" git_hash_short git_success)\n",
                    "rendered": {
                      "text": "            endforeach()\n        endif()\n\n        # Full version should indicate when we're not at the exact tagged commit.\n        # Be compliant with https://semver.org\n        if (NOT is_exact_version)\n            aws_git_try(\"rev-parse --short=8 HEAD\" git_hash_short git_success)\n",
                      "markdown": "`            endforeach()\n        endif()\n\n        # Full version should indicate when we're not at the exact tagged commit.\n        # Be compliant with https://semver.org\n        if (NOT is_exact_version)\n            aws_git_try(\"rev-parse --short=8 HEAD\" git_hash_short git_success)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/cmake/AwsGetVersion.cmake"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 28,
                  "endLine": 16,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    if (git_success)\n        set(${var_git_hash} ${git_hash} PARENT_SCOPE)\n\n        # Determine if we're at the exact tagged commit\n        set(is_exact_version FALSE)\n        aws_git_try(\"tag --points-at HEAD\" head_tags git_success)\n        if (git_success)\n",
                    "rendered": {
                      "text": "    if (git_success)\n        set(${var_git_hash} ${git_hash} PARENT_SCOPE)\n\n        # Determine if we're at the exact tagged commit\n        set(is_exact_version FALSE)\n        aws_git_try(\"tag --points-at HEAD\" head_tags git_success)\n        if (git_success)\n",
                      "markdown": "`    if (git_success)\n        set(${var_git_hash} ${git_hash} PARENT_SCOPE)\n\n        # Determine if we're at the exact tagged commit\n        set(is_exact_version FALSE)\n        aws_git_try(\"tag --points-at HEAD\" head_tags git_success)\n        if (git_success)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/cmake/AwsGetVersion.cmake"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 75,
                  "endLine": 8,
                  "endColumn": 79,
                  "snippet": {
                    "text": "    set(${var_version_simple} ${version_simple} PARENT_SCOPE)\n\n    # By default, full version is same as simple version.\n    # But we'll make it more specific later, if we determine that we're not at an exact tagged commit.\n    set(${var_version_full} ${version_simple} PARENT_SCOPE)\n\n    # Get git hash\n",
                    "rendered": {
                      "text": "    set(${var_version_simple} ${version_simple} PARENT_SCOPE)\n\n    # By default, full version is same as simple version.\n    # But we'll make it more specific later, if we determine that we're not at an exact tagged commit.\n    set(${var_version_full} ${version_simple} PARENT_SCOPE)\n\n    # Get git hash\n",
                      "markdown": "`    set(${var_version_simple} ${version_simple} PARENT_SCOPE)\n\n    # By default, full version is same as simple version.\n    # But we'll make it more specific later, if we determine that we're not at an exact tagged commit.\n    set(${var_version_full} ${version_simple} PARENT_SCOPE)\n\n    # Get git hash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/cmake/AwsGetVersion.cmake"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 9,
                  "endLine": 11,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    # But we'll make it more specific later, if we determine that we're not at an exact tagged commit.\n    set(${var_version_full} ${version_simple} PARENT_SCOPE)\n\n    # Get git hash\n    aws_git_try(\"rev-parse HEAD\" git_hash git_success)\n    if (git_success)\n        set(${var_git_hash} ${git_hash} PARENT_SCOPE)\n",
                    "rendered": {
                      "text": "    # But we'll make it more specific later, if we determine that we're not at an exact tagged commit.\n    set(${var_version_full} ${version_simple} PARENT_SCOPE)\n\n    # Get git hash\n    aws_git_try(\"rev-parse HEAD\" git_hash git_success)\n    if (git_success)\n        set(${var_git_hash} ${git_hash} PARENT_SCOPE)\n",
                      "markdown": "`    # But we'll make it more specific later, if we determine that we're not at an exact tagged commit.\n    set(${var_version_full} ${version_simple} PARENT_SCOPE)\n\n    # Get git hash\n    aws_git_try(\"rev-parse HEAD\" git_hash git_success)\n    if (git_success)\n        set(${var_git_hash} ${git_hash} PARENT_SCOPE)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/http/HttpProxyStrategy.h"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 23,
                  "endLine": 42,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                /**\n                 * Password to apply to the basic authentication process\n                 */\n                String Password;\n            };\n\n            using KerberosGetTokenFunction = std::function<bool(String &)>;\n",
                    "rendered": {
                      "text": "                /**\n                 * Password to apply to the basic authentication process\n                 */\n                String Password;\n            };\n\n            using KerberosGetTokenFunction = std::function<bool(String &)>;\n",
                      "markdown": "`                /**\n                 * Password to apply to the basic authentication process\n                 */\n                String Password;\n            };\n\n            using KerberosGetTokenFunction = std::function<bool(String &)>;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/http/HttpProxyStrategy.h"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 19,
                  "endLine": 40,
                  "endColumn": 27,
                  "snippet": {
                    "text": "                String Username;\n\n                /**\n                 * Password to apply to the basic authentication process\n                 */\n                String Password;\n            };\n",
                    "rendered": {
                      "text": "                String Username;\n\n                /**\n                 * Password to apply to the basic authentication process\n                 */\n                String Password;\n            };\n",
                      "markdown": "`                String Username;\n\n                /**\n                 * Password to apply to the basic authentication process\n                 */\n                String Password;\n            };\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/http/HttpConnection.h"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 32,
                  "endLine": 340,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                 * @deprecated The password to use if connecting to the proxy via basic authentication\n                 * Replaced by using the result of CreateBasicHttpProxyStrategy()\n                 */\n                String BasicAuthPassword;\n            };\n\n            /**\n",
                    "rendered": {
                      "text": "                 * @deprecated The password to use if connecting to the proxy via basic authentication\n                 * Replaced by using the result of CreateBasicHttpProxyStrategy()\n                 */\n                String BasicAuthPassword;\n            };\n\n            /**\n",
                      "markdown": "`                 * @deprecated The password to use if connecting to the proxy via basic authentication\n                 * Replaced by using the result of CreateBasicHttpProxyStrategy()\n                 */\n                String BasicAuthPassword;\n            };\n\n            /**\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/http/HttpConnection.h"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 35,
                  "endLine": 337,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                String BasicAuthUsername;\n\n                /**\n                 * @deprecated The password to use if connecting to the proxy via basic authentication\n                 * Replaced by using the result of CreateBasicHttpProxyStrategy()\n                 */\n                String BasicAuthPassword;\n",
                    "rendered": {
                      "text": "                String BasicAuthUsername;\n\n                /**\n                 * @deprecated The password to use if connecting to the proxy via basic authentication\n                 * Replaced by using the result of CreateBasicHttpProxyStrategy()\n                 */\n                String BasicAuthPassword;\n",
                      "markdown": "`                String BasicAuthUsername;\n\n                /**\n                 * @deprecated The password to use if connecting to the proxy via basic authentication\n                 * Replaced by using the result of CreateBasicHttpProxyStrategy()\n                 */\n                String BasicAuthPassword;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/ISSUE_TEMPLATE/bug-report.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 10,
                  "endLine": 31,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n",
                    "rendered": {
                      "text": "        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n",
                      "markdown": "`        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/ISSUE_TEMPLATE/bug-report.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 20,
                  "endLine": 20,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n",
                    "rendered": {
                      "text": "    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n",
                      "markdown": "`    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 11,
                  "endLine": 19,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      with:\n        fetch-depth: 0\n\n    - name: Update Version\n      run: ./update-version.sh ${{ secrets.GITHUB_TOKEN }} ${{ secrets.TAG_PR_TOKEN }}\n",
                    "rendered": {
                      "text": "      with:\n        fetch-depth: 0\n\n    - name: Update Version\n      run: ./update-version.sh ${{ secrets.GITHUB_TOKEN }} ${{ secrets.TAG_PR_TOKEN }}\n",
                      "markdown": "`      with:\n        fetch-depth: 0\n\n    - name: Update Version\n      run: ./update-version.sh ${{ secrets.GITHUB_TOKEN }} ${{ secrets.TAG_PR_TOKEN }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/closed-issue-message.yml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 27,
                  "endLine": 17,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n",
                    "rendered": {
                      "text": "                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n",
                      "markdown": "`                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/docs.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 13,
                  "endLine": 21,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        with:\n          submodules: true\n\n      - name: Update docs branch\n        run: |\n          sudo apt-get install -y doxygen\n          ./make-docs.py\n",
                    "rendered": {
                      "text": "        with:\n          submodules: true\n\n      - name: Update docs branch\n        run: |\n          sudo apt-get install -y doxygen\n          ./make-docs.py\n",
                      "markdown": "`        with:\n          submodules: true\n\n      - name: Update docs branch\n        run: |\n          sudo apt-get install -y doxygen\n          ./make-docs.py\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/docs.yml"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# Update the API documentation whenever the `main` branch changes.\n# This documentation lives in its own `docs` branch.\nname: docs\n\n",
                    "rendered": {
                      "text": "# Update the API documentation whenever the `main` branch changes.\n# This documentation lives in its own `docs` branch.\nname: docs\n\n",
                      "markdown": "`# Update the API documentation whenever the `main` branch changes.\n# This documentation lives in its own `docs` branch.\nname: docs\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/docs.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 9,
                  "endLine": 31,
                  "endColumn": 14,
                  "snippet": {
                    "text": "          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add --force docs/\n          git commit --message=\"update docs\"\n\n      - name: Push to docs branch\n        uses: ad-m/github-push-action@v0.6.0\n",
                    "rendered": {
                      "text": "          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add --force docs/\n          git commit --message=\"update docs\"\n\n      - name: Push to docs branch\n        uses: ad-m/github-push-action@v0.6.0\n",
                      "markdown": "`          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add --force docs/\n          git commit --message=\"update docs\"\n\n      - name: Push to docs branch\n        uses: ad-m/github-push-action@v0.6.0\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/docs.yml"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 9,
                  "endLine": 30,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add --force docs/\n          git commit --message=\"update docs\"\n\n      - name: Push to docs branch\n",
                    "rendered": {
                      "text": "        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add --force docs/\n          git commit --message=\"update docs\"\n\n      - name: Push to docs branch\n",
                      "markdown": "`        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add --force docs/\n          git commit --message=\"update docs\"\n\n      - name: Push to docs branch\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/docs.yml"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 9,
                  "endLine": 29,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      - name: Commit\n        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add --force docs/\n          git commit --message=\"update docs\"\n\n",
                    "rendered": {
                      "text": "      - name: Commit\n        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add --force docs/\n          git commit --message=\"update docs\"\n\n",
                      "markdown": "`      - name: Commit\n        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add --force docs/\n          git commit --message=\"update docs\"\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/docs.yml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 9,
                  "endLine": 28,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n      - name: Commit\n        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add --force docs/\n          git commit --message=\"update docs\"\n",
                    "rendered": {
                      "text": "\n      - name: Commit\n        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add --force docs/\n          git commit --message=\"update docs\"\n",
                      "markdown": "`\n      - name: Commit\n        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add --force docs/\n          git commit --message=\"update docs\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/docs.yml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 14,
                  "endLine": 23,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n      - name: Update docs branch\n        run: |\n          sudo apt-get install -y doxygen\n          ./make-docs.py\n\n      - name: Commit\n",
                    "rendered": {
                      "text": "\n      - name: Update docs branch\n        run: |\n          sudo apt-get install -y doxygen\n          ./make-docs.py\n\n      - name: Commit\n",
                      "markdown": "`\n      - name: Update docs branch\n        run: |\n          sudo apt-get install -y doxygen\n          ./make-docs.py\n\n      - name: Commit\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/bin/mqtt5_app/main.cpp"
                },
                "region": {
                  "startLine": 573,
                  "startColumn": 39,
                  "endLine": 573,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        disconnect.WithReasonString(\"disconnect test string\");\n        if (mqtt5Client->Stop())\n        {\n            stoppedPromise.get_future().get();\n        }\n        else\n        {\n",
                    "rendered": {
                      "text": "        disconnect.WithReasonString(\"disconnect test string\");\n        if (mqtt5Client->Stop())\n        {\n            stoppedPromise.get_future().get();\n        }\n        else\n        {\n",
                      "markdown": "`        disconnect.WithReasonString(\"disconnect test string\");\n        if (mqtt5Client->Stop())\n        {\n            stoppedPromise.get_future().get();\n        }\n        else\n        {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/bin/mqtt5_app/main.cpp"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 44,
                  "endLine": 568,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                  << std::endl;\n        std::cout << \"**********************************************************\" << std::endl;\n\n        publishReceivedPromise3.get_future().get();\n        Mqtt5::DisconnectPacket disconnect(app_ctx.allocator);\n        disconnect.WithReasonString(\"disconnect test string\");\n        if (mqtt5Client->Stop())\n",
                    "rendered": {
                      "text": "                  << std::endl;\n        std::cout << \"**********************************************************\" << std::endl;\n\n        publishReceivedPromise3.get_future().get();\n        Mqtt5::DisconnectPacket disconnect(app_ctx.allocator);\n        disconnect.WithReasonString(\"disconnect test string\");\n        if (mqtt5Client->Stop())\n",
                      "markdown": "`                  << std::endl;\n        std::cout << \"**********************************************************\" << std::endl;\n\n        publishReceivedPromise3.get_future().get();\n        Mqtt5::DisconnectPacket disconnect(app_ctx.allocator);\n        disconnect.WithReasonString(\"disconnect test string\");\n        if (mqtt5Client->Stop())\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/bin/mqtt5_app/main.cpp"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 39,
                  "endLine": 552,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        {\n            std::cout << \"[ERROR]Unsubscribe Failed.\" << std::endl;\n            mqtt5Client->Stop();\n            stoppedPromise.get_future().get();\n            return -1;\n        }\n\n",
                    "rendered": {
                      "text": "        {\n            std::cout << \"[ERROR]Unsubscribe Failed.\" << std::endl;\n            mqtt5Client->Stop();\n            stoppedPromise.get_future().get();\n            return -1;\n        }\n\n",
                      "markdown": "`        {\n            std::cout << \"[ERROR]Unsubscribe Failed.\" << std::endl;\n            mqtt5Client->Stop();\n            stoppedPromise.get_future().get();\n            return -1;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/bin/mqtt5_app/main.cpp"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 44,
                  "endLine": 536,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                     \"we recieved message.\"\n                  << std::endl;\n        std::cout << \"**********************************************************\" << std::endl;\n        publishReceivedPromise2.get_future().get();\n\n        /**********************************************************\n         * MQTT5 CLIENT UNSUBSCRIBE\n",
                    "rendered": {
                      "text": "                     \"we recieved message.\"\n                  << std::endl;\n        std::cout << \"**********************************************************\" << std::endl;\n        publishReceivedPromise2.get_future().get();\n\n        /**********************************************************\n         * MQTT5 CLIENT UNSUBSCRIBE\n",
                      "markdown": "`                     \"we recieved message.\"\n                  << std::endl;\n        std::cout << \"**********************************************************\" << std::endl;\n        publishReceivedPromise2.get_future().get();\n\n        /**********************************************************\n         * MQTT5 CLIENT UNSUBSCRIBE\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/bin/mqtt5_app/main.cpp"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 44,
                  "endLine": 530,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                     \"we recieved message.\"\n                  << std::endl;\n        std::cout << \"**********************************************************\" << std::endl;\n        publishReceivedPromise1.get_future().get();\n        std::cout << \"**********************************************************\" << std::endl;\n        std::cout << \"[Action Required]Please publish a message \\\"test2\\\" to topic \\\"test/topic/test2\\\". And make sure \"\n                     \"we recieved message.\"\n",
                    "rendered": {
                      "text": "                     \"we recieved message.\"\n                  << std::endl;\n        std::cout << \"**********************************************************\" << std::endl;\n        publishReceivedPromise1.get_future().get();\n        std::cout << \"**********************************************************\" << std::endl;\n        std::cout << \"[Action Required]Please publish a message \\\"test2\\\" to topic \\\"test/topic/test2\\\". And make sure \"\n                     \"we recieved message.\"\n",
                      "markdown": "`                     \"we recieved message.\"\n                  << std::endl;\n        std::cout << \"**********************************************************\" << std::endl;\n        publishReceivedPromise1.get_future().get();\n        std::cout << \"**********************************************************\" << std::endl;\n        std::cout << \"[Action Required]Please publish a message \\\"test2\\\" to topic \\\"test/topic/test2\\\". And make sure \"\n                     \"we recieved message.\"\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/bin/mqtt5_app/main.cpp"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 44,
                  "endLine": 524,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        std::cout << \"**********************************************************\" << std::endl;\n        std::cout << \"Mqtt5: Waiting for published message...\" << std::endl;\n        std::cout << \"**********************************************************\" << std::endl;\n        publishReceivedPromise0.get_future().get();\n        std::cout << \"**********************************************************\" << std::endl;\n        std::cout << \"[Action Required]Please publish a message \\\"test1\\\" to topic \\\"test/topic/test1\\\". And make sure \"\n                     \"we recieved message.\"\n",
                    "rendered": {
                      "text": "        std::cout << \"**********************************************************\" << std::endl;\n        std::cout << \"Mqtt5: Waiting for published message...\" << std::endl;\n        std::cout << \"**********************************************************\" << std::endl;\n        publishReceivedPromise0.get_future().get();\n        std::cout << \"**********************************************************\" << std::endl;\n        std::cout << \"[Action Required]Please publish a message \\\"test1\\\" to topic \\\"test/topic/test1\\\". And make sure \"\n                     \"we recieved message.\"\n",
                      "markdown": "`        std::cout << \"**********************************************************\" << std::endl;\n        std::cout << \"Mqtt5: Waiting for published message...\" << std::endl;\n        std::cout << \"**********************************************************\" << std::endl;\n        publishReceivedPromise0.get_future().get();\n        std::cout << \"**********************************************************\" << std::endl;\n        std::cout << \"[Action Required]Please publish a message \\\"test1\\\" to topic \\\"test/topic/test1\\\". And make sure \"\n                     \"we recieved message.\"\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/bin/mqtt5_app/main.cpp"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 39,
                  "endLine": 517,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            std::cout << \"[ERROR]Publish Failed.\" << std::endl;\n            std::cout << \"**********************************************************\" << std::endl;\n            mqtt5Client->Stop();\n            stoppedPromise.get_future().get();\n            return -1;\n        }\n\n",
                    "rendered": {
                      "text": "            std::cout << \"[ERROR]Publish Failed.\" << std::endl;\n            std::cout << \"**********************************************************\" << std::endl;\n            mqtt5Client->Stop();\n            stoppedPromise.get_future().get();\n            return -1;\n        }\n\n",
                      "markdown": "`            std::cout << \"[ERROR]Publish Failed.\" << std::endl;\n            std::cout << \"**********************************************************\" << std::endl;\n            mqtt5Client->Stop();\n            stoppedPromise.get_future().get();\n            return -1;\n        }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/bin/mqtt5_app/main.cpp"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 43,
                  "endLine": 476,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            std::cout << \"[ERROR]Subscription Failed.\" << std::endl;\n            if (mqtt5Client->Stop())\n            {\n                stoppedPromise.get_future().get();\n            }\n            else\n            {\n",
                    "rendered": {
                      "text": "            std::cout << \"[ERROR]Subscription Failed.\" << std::endl;\n            if (mqtt5Client->Stop())\n            {\n                stoppedPromise.get_future().get();\n            }\n            else\n            {\n",
                      "markdown": "`            std::cout << \"[ERROR]Subscription Failed.\" << std::endl;\n            if (mqtt5Client->Stop())\n            {\n                stoppedPromise.get_future().get();\n            }\n            else\n            {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/bin/mqtt5_app/main.cpp"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 62,
                  "endLine": 430,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    std::cout << \"MQTT5: Client Start ....\" << std::endl;\n    std::cout << \"**********************************************************\" << std::endl;\n\n    if (mqtt5Client->Start() && connectionPromise.get_future().get() == true)\n    {\n        /**********************************************************\n         * MQTT5 CLIENT SUBSCRIPTION\n",
                    "rendered": {
                      "text": "    std::cout << \"MQTT5: Client Start ....\" << std::endl;\n    std::cout << \"**********************************************************\" << std::endl;\n\n    if (mqtt5Client->Start() && connectionPromise.get_future().get() == true)\n    {\n        /**********************************************************\n         * MQTT5 CLIENT SUBSCRIPTION\n",
                      "markdown": "`    std::cout << \"MQTT5: Client Start ....\" << std::endl;\n    std::cout << \"**********************************************************\" << std::endl;\n\n    if (mqtt5Client->Start() && connectionPromise.get_future().get() == true)\n    {\n        /**********************************************************\n         * MQTT5 CLIENT SUBSCRIPTION\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 5,
                  "endLine": 56,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    # todo: can we update the bot token so that my pat isn't necessary?\n    gh pr merge --admin --squash\n\n    # update local state with the merged pr\n    git fetch\n    git checkout main\n    git pull \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" main\n",
                    "rendered": {
                      "text": "    # todo: can we update the bot token so that my pat isn't necessary?\n    gh pr merge --admin --squash\n\n    # update local state with the merged pr\n    git fetch\n    git checkout main\n    git pull \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" main\n",
                      "markdown": "`    # todo: can we update the bot token so that my pat isn't necessary?\n    gh pr merge --admin --squash\n\n    # update local state with the merged pr\n    git fetch\n    git checkout main\n    git pull \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" main\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 18,
                  "endLine": 53,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    gh pr create --title \"AutoTag PR for ${version}\" --body \"AutoTag PR for ${version}\" --head ${version_branch}\n\n    # this requires more permissions than the bot token currently has\n    # todo: can we update the bot token so that my pat isn't necessary?\n    gh pr merge --admin --squash\n\n    # update local state with the merged pr\n",
                    "rendered": {
                      "text": "    gh pr create --title \"AutoTag PR for ${version}\" --body \"AutoTag PR for ${version}\" --head ${version_branch}\n\n    # this requires more permissions than the bot token currently has\n    # todo: can we update the bot token so that my pat isn't necessary?\n    gh pr merge --admin --squash\n\n    # update local state with the merged pr\n",
                      "markdown": "`    gh pr create --title \"AutoTag PR for ${version}\" --body \"AutoTag PR for ${version}\" --head ${version_branch}\n\n    # this requires more permissions than the bot token currently has\n    # todo: can we update the bot token so that my pat isn't necessary?\n    gh pr merge --admin --squash\n\n    # update local state with the merged pr\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -ex\n\n# Redirect output to stderr.\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -ex\n\n# Redirect output to stderr.\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -ex\n\n# Redirect output to stderr.\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 3,
                  "endLine": 72,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    git tag -f ${version} -m \"${tag_message}\"\n\n    # push new tag to github\n    git push \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" --tags\n\n    # now recreate the release on the updated tag\n    gh release create ${version} --title \"${title_value}\" -p -n \"${tag_message}\"\n",
                    "rendered": {
                      "text": "    git tag -f ${version} -m \"${tag_message}\"\n\n    # push new tag to github\n    git push \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" --tags\n\n    # now recreate the release on the updated tag\n    gh release create ${version} --title \"${title_value}\" -p -n \"${tag_message}\"\n",
                      "markdown": "`    git tag -f ${version} -m \"${tag_message}\"\n\n    # push new tag to github\n    git push \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" --tags\n\n    # now recreate the release on the updated tag\n    gh release create ${version} --title \"${title_value}\" -p -n \"${tag_message}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 3,
                  "endLine": 69,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    git push \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" :refs/tags/${version}\n\n    # create new tag on latest commit with old message\n    git tag -f ${version} -m \"${tag_message}\"\n\n    # push new tag to github\n    git push \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" --tags\n",
                    "rendered": {
                      "text": "    git push \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" :refs/tags/${version}\n\n    # create new tag on latest commit with old message\n    git tag -f ${version} -m \"${tag_message}\"\n\n    # push new tag to github\n    git push \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" --tags\n",
                      "markdown": "`    git push \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" :refs/tags/${version}\n\n    # create new tag on latest commit with old message\n    git tag -f ${version} -m \"${tag_message}\"\n\n    # push new tag to github\n    git push \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" --tags\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 3,
                  "endLine": 66,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n    # delete the old tag\n    git tag -d ${version}\n    git push \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" :refs/tags/${version}\n\n    # create new tag on latest commit with old message\n    git tag -f ${version} -m \"${tag_message}\"\n",
                    "rendered": {
                      "text": "\n    # delete the old tag\n    git tag -d ${version}\n    git push \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" :refs/tags/${version}\n\n    # create new tag on latest commit with old message\n    git tag -f ${version} -m \"${tag_message}\"\n",
                      "markdown": "`\n    # delete the old tag\n    git tag -d ${version}\n    git push \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" :refs/tags/${version}\n\n    # create new tag on latest commit with old message\n    git tag -f ${version} -m \"${tag_message}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 3,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    gh release delete -y ${version}\n\n    # delete the old tag\n    git tag -d ${version}\n    git push \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" :refs/tags/${version}\n\n    # create new tag on latest commit with old message\n",
                    "rendered": {
                      "text": "    gh release delete -y ${version}\n\n    # delete the old tag\n    git tag -d ${version}\n    git push \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" :refs/tags/${version}\n\n    # create new tag on latest commit with old message\n",
                      "markdown": "`    gh release delete -y ${version}\n\n    # delete the old tag\n    git tag -d ${version}\n    git push \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" :refs/tags/${version}\n\n    # create new tag on latest commit with old message\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 3,
                  "endLine": 59,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    # update local state with the merged pr\n    git fetch\n    git checkout main\n    git pull \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" main\n\n    # delete old release\n    gh release delete -y ${version}\n",
                    "rendered": {
                      "text": "    # update local state with the merged pr\n    git fetch\n    git checkout main\n    git pull \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" main\n\n    # delete old release\n    gh release delete -y ${version}\n",
                      "markdown": "`    # update local state with the merged pr\n    git fetch\n    git checkout main\n    git pull \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" main\n\n    # delete old release\n    gh release delete -y ${version}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 3,
                  "endLine": 58,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n    # update local state with the merged pr\n    git fetch\n    git checkout main\n    git pull \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" main\n\n    # delete old release\n",
                    "rendered": {
                      "text": "\n    # update local state with the merged pr\n    git fetch\n    git checkout main\n    git pull \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" main\n\n    # delete old release\n",
                      "markdown": "`\n    # update local state with the merged pr\n    git fetch\n    git checkout main\n    git pull \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" main\n\n    # delete old release\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 3,
                  "endLine": 57,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    gh pr merge --admin --squash\n\n    # update local state with the merged pr\n    git fetch\n    git checkout main\n    git pull \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" main\n\n",
                    "rendered": {
                      "text": "    gh pr merge --admin --squash\n\n    # update local state with the merged pr\n    git fetch\n    git checkout main\n    git pull \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" main\n\n",
                      "markdown": "`    gh pr merge --admin --squash\n\n    # update local state with the merged pr\n    git fetch\n    git checkout main\n    git pull \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" main\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 3,
                  "endLine": 48,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    echo \"Old release message is: ${tag_message}\"\n\n    # push the commit\n    git push -u \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" ${version_branch}\n\n    gh pr create --title \"AutoTag PR for ${version}\" --body \"AutoTag PR for ${version}\" --head ${version_branch}\n\n",
                    "rendered": {
                      "text": "    echo \"Old release message is: ${tag_message}\"\n\n    # push the commit\n    git push -u \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" ${version_branch}\n\n    gh pr create --title \"AutoTag PR for ${version}\" --body \"AutoTag PR for ${version}\" --head ${version_branch}\n\n",
                      "markdown": "`    echo \"Old release message is: ${tag_message}\"\n\n    # push the commit\n    git push -u \"https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/awslabs/aws-crt-cpp.git\" ${version_branch}\n\n    gh pr create --title \"AutoTag PR for ${version}\" --body \"AutoTag PR for ${version}\" --head ${version_branch}\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 36,
                  "endLine": 43,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    let release_message_lines=release_line_count-8\n    tag_message=$(gh release view ${version} | tail -n ${release_message_lines})\n    title_line=$(gh release view ${version} | head -n 1)\n    title_value=$(echo $title_line | sed -n \"s/title: \\(.*\\)/\\1/p\")\n    echo \"Old release title is: ${title_value}\"\n    echo \"Old release message is: ${tag_message}\"\n\n",
                    "rendered": {
                      "text": "    let release_message_lines=release_line_count-8\n    tag_message=$(gh release view ${version} | tail -n ${release_message_lines})\n    title_line=$(gh release view ${version} | head -n 1)\n    title_value=$(echo $title_line | sed -n \"s/title: \\(.*\\)/\\1/p\")\n    echo \"Old release title is: ${title_value}\"\n    echo \"Old release message is: ${tag_message}\"\n\n",
                      "markdown": "`    let release_message_lines=release_line_count-8\n    tag_message=$(gh release view ${version} | tail -n ${release_message_lines})\n    title_line=$(gh release view ${version} | head -n 1)\n    title_value=$(echo $title_line | sed -n \"s/title: \\(.*\\)/\\1/p\")\n    echo \"Old release title is: ${title_value}\"\n    echo \"Old release message is: ${tag_message}\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 45,
                  "endLine": 42,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    release_line_count=$(gh release view ${version} | wc -l)\n    let release_message_lines=release_line_count-8\n    tag_message=$(gh release view ${version} | tail -n ${release_message_lines})\n    title_line=$(gh release view ${version} | head -n 1)\n    title_value=$(echo $title_line | sed -n \"s/title: \\(.*\\)/\\1/p\")\n    echo \"Old release title is: ${title_value}\"\n    echo \"Old release message is: ${tag_message}\"\n",
                    "rendered": {
                      "text": "    release_line_count=$(gh release view ${version} | wc -l)\n    let release_message_lines=release_line_count-8\n    tag_message=$(gh release view ${version} | tail -n ${release_message_lines})\n    title_line=$(gh release view ${version} | head -n 1)\n    title_value=$(echo $title_line | sed -n \"s/title: \\(.*\\)/\\1/p\")\n    echo \"Old release title is: ${title_value}\"\n    echo \"Old release message is: ${tag_message}\"\n",
                      "markdown": "`    release_line_count=$(gh release view ${version} | wc -l)\n    let release_message_lines=release_line_count-8\n    tag_message=$(gh release view ${version} | tail -n ${release_message_lines})\n    title_line=$(gh release view ${version} | head -n 1)\n    title_value=$(echo $title_line | sed -n \"s/title: \\(.*\\)/\\1/p\")\n    echo \"Old release title is: ${title_value}\"\n    echo \"Old release message is: ${tag_message}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 46,
                  "endLine": 41,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    # github cli\n    release_line_count=$(gh release view ${version} | wc -l)\n    let release_message_lines=release_line_count-8\n    tag_message=$(gh release view ${version} | tail -n ${release_message_lines})\n    title_line=$(gh release view ${version} | head -n 1)\n    title_value=$(echo $title_line | sed -n \"s/title: \\(.*\\)/\\1/p\")\n    echo \"Old release title is: ${title_value}\"\n",
                    "rendered": {
                      "text": "    # github cli\n    release_line_count=$(gh release view ${version} | wc -l)\n    let release_message_lines=release_line_count-8\n    tag_message=$(gh release view ${version} | tail -n ${release_message_lines})\n    title_line=$(gh release view ${version} | head -n 1)\n    title_value=$(echo $title_line | sed -n \"s/title: \\(.*\\)/\\1/p\")\n    echo \"Old release title is: ${title_value}\"\n",
                      "markdown": "`    # github cli\n    release_line_count=$(gh release view ${version} | wc -l)\n    let release_message_lines=release_line_count-8\n    tag_message=$(gh release view ${version} | tail -n ${release_message_lines})\n    title_line=$(gh release view ${version} | head -n 1)\n    title_value=$(echo $title_line | sed -n \"s/title: \\(.*\\)/\\1/p\")\n    echo \"Old release title is: ${title_value}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 3,
                  "endLine": 31,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    git config --local user.email \"aws-sdk-common-runtime@amazon.com\"\n    git config --local user.name \"GitHub Actions\"\n    git add VERSION\n    git commit -m \"Updated version to ${version}\"\n\n    echo $TAG_PR_TOKEN | gh auth login --with-token\n\n",
                    "rendered": {
                      "text": "    git config --local user.email \"aws-sdk-common-runtime@amazon.com\"\n    git config --local user.name \"GitHub Actions\"\n    git add VERSION\n    git commit -m \"Updated version to ${version}\"\n\n    echo $TAG_PR_TOKEN | gh auth login --with-token\n\n",
                      "markdown": "`    git config --local user.email \"aws-sdk-common-runtime@amazon.com\"\n    git config --local user.name \"GitHub Actions\"\n    git add VERSION\n    git commit -m \"Updated version to ${version}\"\n\n    echo $TAG_PR_TOKEN | gh auth login --with-token\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 3,
                  "endLine": 30,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n    git config --local user.email \"aws-sdk-common-runtime@amazon.com\"\n    git config --local user.name \"GitHub Actions\"\n    git add VERSION\n    git commit -m \"Updated version to ${version}\"\n\n    echo $TAG_PR_TOKEN | gh auth login --with-token\n",
                    "rendered": {
                      "text": "\n    git config --local user.email \"aws-sdk-common-runtime@amazon.com\"\n    git config --local user.name \"GitHub Actions\"\n    git add VERSION\n    git commit -m \"Updated version to ${version}\"\n\n    echo $TAG_PR_TOKEN | gh auth login --with-token\n",
                      "markdown": "`\n    git config --local user.email \"aws-sdk-common-runtime@amazon.com\"\n    git config --local user.name \"GitHub Actions\"\n    git add VERSION\n    git commit -m \"Updated version to ${version}\"\n\n    echo $TAG_PR_TOKEN | gh auth login --with-token\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 3,
                  "endLine": 29,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    git checkout -b ${version_branch}\n\n    git config --local user.email \"aws-sdk-common-runtime@amazon.com\"\n    git config --local user.name \"GitHub Actions\"\n    git add VERSION\n    git commit -m \"Updated version to ${version}\"\n\n",
                    "rendered": {
                      "text": "    git checkout -b ${version_branch}\n\n    git config --local user.email \"aws-sdk-common-runtime@amazon.com\"\n    git config --local user.name \"GitHub Actions\"\n    git add VERSION\n    git commit -m \"Updated version to ${version}\"\n\n",
                      "markdown": "`    git checkout -b ${version_branch}\n\n    git config --local user.email \"aws-sdk-common-runtime@amazon.com\"\n    git config --local user.name \"GitHub Actions\"\n    git add VERSION\n    git commit -m \"Updated version to ${version}\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 3,
                  "endLine": 28,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    version_branch=AutoTag-${version}\n    git checkout -b ${version_branch}\n\n    git config --local user.email \"aws-sdk-common-runtime@amazon.com\"\n    git config --local user.name \"GitHub Actions\"\n    git add VERSION\n    git commit -m \"Updated version to ${version}\"\n",
                    "rendered": {
                      "text": "    version_branch=AutoTag-${version}\n    git checkout -b ${version_branch}\n\n    git config --local user.email \"aws-sdk-common-runtime@amazon.com\"\n    git config --local user.name \"GitHub Actions\"\n    git add VERSION\n    git commit -m \"Updated version to ${version}\"\n",
                      "markdown": "`    version_branch=AutoTag-${version}\n    git checkout -b ${version_branch}\n\n    git config --local user.email \"aws-sdk-common-runtime@amazon.com\"\n    git config --local user.name \"GitHub Actions\"\n    git add VERSION\n    git commit -m \"Updated version to ${version}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 3,
                  "endLine": 26,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    echo \"No version change\"\nelse\n    version_branch=AutoTag-${version}\n    git checkout -b ${version_branch}\n\n    git config --local user.email \"aws-sdk-common-runtime@amazon.com\"\n    git config --local user.name \"GitHub Actions\"\n",
                    "rendered": {
                      "text": "    echo \"No version change\"\nelse\n    version_branch=AutoTag-${version}\n    git checkout -b ${version_branch}\n\n    git config --local user.email \"aws-sdk-common-runtime@amazon.com\"\n    git config --local user.name \"GitHub Actions\"\n",
                      "markdown": "`    echo \"No version change\"\nelse\n    version_branch=AutoTag-${version}\n    git checkout -b ${version_branch}\n\n    git config --local user.email \"aws-sdk-common-runtime@amazon.com\"\n    git config --local user.name \"GitHub Actions\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 2,
                  "endLine": 22,
                  "endColumn": 7,
                  "snippet": {
                    "text": "version_without_v=$(echo ${version} | cut -f2 -dv)\necho \"${version_without_v}\" > VERSION\n\nif git diff --exit-code VERSION > /dev/null; then\n    echo \"No version change\"\nelse\n    version_branch=AutoTag-${version}\n",
                    "rendered": {
                      "text": "version_without_v=$(echo ${version} | cut -f2 -dv)\necho \"${version_without_v}\" > VERSION\n\nif git diff --exit-code VERSION > /dev/null; then\n    echo \"No version change\"\nelse\n    version_branch=AutoTag-${version}\n",
                      "markdown": "`version_without_v=$(echo ${version} | cut -f2 -dv)\necho \"${version_without_v}\" > VERSION\n\nif git diff --exit-code VERSION > /dev/null; then\n    echo \"No version change\"\nelse\n    version_branch=AutoTag-${version}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 37,
                  "endLine": 19,
                  "endColumn": 42,
                  "snippet": {
                    "text": "git checkout main\n\nversion=$(git describe --tags --abbrev=0)\nversion_without_v=$(echo ${version} | cut -f2 -dv)\necho \"${version_without_v}\" > VERSION\n\nif git diff --exit-code VERSION > /dev/null; then\n",
                    "rendered": {
                      "text": "git checkout main\n\nversion=$(git describe --tags --abbrev=0)\nversion_without_v=$(echo ${version} | cut -f2 -dv)\necho \"${version_without_v}\" > VERSION\n\nif git diff --exit-code VERSION > /dev/null; then\n",
                      "markdown": "`git checkout main\n\nversion=$(git describe --tags --abbrev=0)\nversion_without_v=$(echo ${version} | cut -f2 -dv)\necho \"${version_without_v}\" > VERSION\n\nif git diff --exit-code VERSION > /dev/null; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 16,
                  "endColumn": 4,
                  "snippet": {
                    "text": "[ -n \"$TAG_PR_TOKEN\" ]\n\npushd $(dirname $0) > /dev/null\n\ngit checkout main\n\nversion=$(git describe --tags --abbrev=0)\nversion_without_v=$(echo ${version} | cut -f2 -dv)\n",
                    "rendered": {
                      "text": "[ -n \"$TAG_PR_TOKEN\" ]\n\npushd $(dirname $0) > /dev/null\n\ngit checkout main\n\nversion=$(git describe --tags --abbrev=0)\nversion_without_v=$(echo ${version} | cut -f2 -dv)\n",
                      "markdown": "`[ -n \"$TAG_PR_TOKEN\" ]\n\npushd $(dirname $0) > /dev/null\n\ngit checkout main\n\nversion=$(git describe --tags --abbrev=0)\nversion_without_v=$(echo ${version} | cut -f2 -dv)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/update-version.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nset -ex\n\n# Redirect output to stderr.\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nset -ex\n\n# Redirect output to stderr.\n",
                      "markdown": "`#!/usr/bin/env bash\n\nset -ex\n\n# Redirect output to stderr.\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/README.md"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 358,
                  "endLine": 136,
                  "endColumn": 362,
                  "snippet": {
                    "text": "\n## Mac-Only TLS Behavior\n\nPlease note that on Mac, once a private key is used with a certificate, that certificate-key pair is imported into the Mac Keychain.  All subsequent uses of that certificate will use the stored private key and ignore anything passed in programmatically.  Beginning in v0.8.10, when a stored private key from the Keychain is used, the following will be logged at the \"info\" log level:\n\n```\nstatic: certificate has an existing certificate-key pair that was previously imported into the Keychain.  Using key from Keychain instead of the one provided.\n",
                    "rendered": {
                      "text": "\n## Mac-Only TLS Behavior\n\nPlease note that on Mac, once a private key is used with a certificate, that certificate-key pair is imported into the Mac Keychain.  All subsequent uses of that certificate will use the stored private key and ignore anything passed in programmatically.  Beginning in v0.8.10, when a stored private key from the Keychain is used, the following will be logged at the \"info\" log level:\n\n```\nstatic: certificate has an existing certificate-key pair that was previously imported into the Keychain.  Using key from Keychain instead of the one provided.\n",
                      "markdown": "`\n## Mac-Only TLS Behavior\n\nPlease note that on Mac, once a private key is used with a certificate, that certificate-key pair is imported into the Mac Keychain.  All subsequent uses of that certificate will use the stored private key and ignore anything passed in programmatically.  Beginning in v0.8.10, when a stored private key from the Keychain is used, the following will be logged at the \"info\" log level:\n\n```\nstatic: certificate has an existing certificate-key pair that was previously imported into the Keychain.  Using key from Keychain instead of the one provided.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/README.md"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 50,
                  "endLine": 91,
                  "endColumn": 54,
                  "snippet": {
                    "text": " Aws::Crt::ApiHandle apiHandle;\n````\nThis performs one-time static initialization of the library. You'll need it to do anything, so don't forget to create one.\n\n````\n    Aws::Crt::Io::EventLoopGroup eventLoopGroup(<number of threads you want>);\n````\nTo use any of our APIs that perform IO you'll need at least one event-loop. An event-loop group is a collection of event-loops that\nprotocol implementations will load balance across. If you won't have very many connections (say, more than 100 or so), then you\nmost likely only want 1 thread. In this case, you want to pass a single instance of this to ev",
                    "rendered": {
                      "text": " Aws::Crt::ApiHandle apiHandle;\n````\nThis performs one-time static initialization of the library. You'll need it to do anything, so don't forget to create one.\n\n````\n    Aws::Crt::Io::EventLoopGroup eventLoopGroup(<number of threads you want>);\n````\nTo use any of our APIs that perform IO you'll need at least one event-loop. An event-loop group is a collection of event-loops that\nprotocol implementations will load balance across. If you won't have very many connections (say, more than 100 or so), then you\nmost likely only want 1 thread. In this case, you want to pass a single instance of this to ev",
                      "markdown": "` Aws::Crt::ApiHandle apiHandle;\n````\nThis performs one-time static initialization of the library. You'll need it to do anything, so don't forget to create one.\n\n````\n    Aws::Crt::Io::EventLoopGroup eventLoopGroup(<number of threads you want>);\n````\nTo use any of our APIs that perform IO you'll need at least one event-loop. An event-loop group is a collection of event-loops that\nprotocol implementations will load balance across. If you won't have very many connections (say, more than 100 or so), then you\nmost likely only want 1 thread. In this case, you want to pass a single instance of this to ev`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/README.md"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 88,
                  "endLine": 59,
                  "endColumn": 92,
                  "snippet": {
                    "text": "included as git submodules and built along with aws-crt-cpp.\nBut if your application is also loading the system installation of OpenSSL\n(i.e. your application uses libcurl which uses libssl which uses libcrypto)\nthere may be crashes as the application tries to use two different versions of libcrypto at once.\n\nSetting `-DUSE_OPENSSL=ON` will cause aws-crt-cpp to link against your system's existing `libcrypto`,\ninstead of building its own copy.\n",
                    "rendered": {
                      "text": "included as git submodules and built along with aws-crt-cpp.\nBut if your application is also loading the system installation of OpenSSL\n(i.e. your application uses libcurl which uses libssl which uses libcrypto)\nthere may be crashes as the application tries to use two different versions of libcrypto at once.\n\nSetting `-DUSE_OPENSSL=ON` will cause aws-crt-cpp to link against your system's existing `libcrypto`,\ninstead of building its own copy.\n",
                      "markdown": "`included as git submodules and built along with aws-crt-cpp.\nBut if your application is also loading the system installation of OpenSSL\n(i.e. your application uses libcurl which uses libssl which uses libcrypto)\nthere may be crashes as the application tries to use two different versions of libcrypto at once.\n\nSetting `-DUSE_OPENSSL=ON` will cause aws-crt-cpp to link against your system's existing `libcrypto`,\ninstead of building its own copy.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/README.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 14,
                  "endLine": 25,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\nThe C99 libraries are already included for your convenience as submodules.\nYou should perform a recursive clone `git clone --recursive` or initialize the submodules via\n`git submodule update --init`. These dependencies are compiled by CMake as part of the build process.\n\nIf you want to manage these dependencies manually (e.g. you're using them in other projects), configure CMake with\n`-DBUILD_DEPS=OFF` and `-DCMAKE_PREFIX_PATH=<install>` pointing to the absolute path where you have them installed.\n",
                    "rendered": {
                      "text": "\nThe C99 libraries are already included for your convenience as submodules.\nYou should perform a recursive clone `git clone --recursive` or initialize the submodules via\n`git submodule update --init`. These dependencies are compiled by CMake as part of the build process.\n\nIf you want to manage these dependencies manually (e.g. you're using them in other projects), configure CMake with\n`-DBUILD_DEPS=OFF` and `-DCMAKE_PREFIX_PATH=<install>` pointing to the absolute path where you have them installed.\n",
                      "markdown": "`\nThe C99 libraries are already included for your convenience as submodules.\nYou should perform a recursive clone `git clone --recursive` or initialize the submodules via\n`git submodule update --init`. These dependencies are compiled by CMake as part of the build process.\n\nIf you want to manage these dependencies manually (e.g. you're using them in other projects), configure CMake with\n`-DBUILD_DEPS=OFF` and `-DCMAKE_PREFIX_PATH=<install>` pointing to the absolute path where you have them installed.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/README.md"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 66,
                  "endLine": 58,
                  "snippet": {
                    "text": "But s2n-tls uses libcrypto, the cryptography math library bundled with OpenSSL.\nTo simplify the build process, the source code for s2n-tls and libcrypto are\nincluded as git submodules and built along with aws-crt-cpp.\nBut if your application is also loading the system installation of OpenSSL\n(i.e. your application uses libcurl which uses libssl which uses libcrypto)\nthere may be crashes as the application tries to use two different versions of libcrypto at once.\n\nSetting `-DUSE_OPENSSL=ON` will cause aws-crt-cpp to link against your system's existing `libcrypto`,\n",
                    "rendered": {
                      "text": "But s2n-tls uses libcrypto, the cryptography math library bundled with OpenSSL.\nTo simplify the build process, the source code for s2n-tls and libcrypto are\nincluded as git submodules and built along with aws-crt-cpp.\nBut if your application is also loading the system installation of OpenSSL\n(i.e. your application uses libcurl which uses libssl which uses libcrypto)\nthere may be crashes as the application tries to use two different versions of libcrypto at once.\n\nSetting `-DUSE_OPENSSL=ON` will cause aws-crt-cpp to link against your system's existing `libcrypto`,\n",
                      "markdown": "`But s2n-tls uses libcrypto, the cryptography math library bundled with OpenSSL.\nTo simplify the build process, the source code for s2n-tls and libcrypto are\nincluded as git submodules and built along with aws-crt-cpp.\nBut if your application is also loading the system installation of OpenSSL\n(i.e. your application uses libcurl which uses libssl which uses libcrypto)\nthere may be crashes as the application tries to use two different versions of libcrypto at once.\n\nSetting `-DUSE_OPENSSL=ON` will cause aws-crt-cpp to link against your system's existing `libcrypto`,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/README.md"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 11,
                  "endLine": 56,
                  "endColumn": 16,
                  "snippet": {
                    "text": "On Unix devices, [s2n-tls](https://github.com/aws/s2n-tls) is used.\nBut s2n-tls uses libcrypto, the cryptography math library bundled with OpenSSL.\nTo simplify the build process, the source code for s2n-tls and libcrypto are\nincluded as git submodules and built along with aws-crt-cpp.\nBut if your application is also loading the system installation of OpenSSL\n(i.e. your application uses libcurl which uses libssl which uses libcrypto)\nthere may be crashes as the application tries to use two different versions of libcrypto at once.\n",
                    "rendered": {
                      "text": "On Unix devices, [s2n-tls](https://github.com/aws/s2n-tls) is used.\nBut s2n-tls uses libcrypto, the cryptography math library bundled with OpenSSL.\nTo simplify the build process, the source code for s2n-tls and libcrypto are\nincluded as git submodules and built along with aws-crt-cpp.\nBut if your application is also loading the system installation of OpenSSL\n(i.e. your application uses libcurl which uses libssl which uses libcrypto)\nthere may be crashes as the application tries to use two different versions of libcrypto at once.\n",
                      "markdown": "`On Unix devices, [s2n-tls](https://github.com/aws/s2n-tls) is used.\nBut s2n-tls uses libcrypto, the cryptography math library bundled with OpenSSL.\nTo simplify the build process, the source code for s2n-tls and libcrypto are\nincluded as git submodules and built along with aws-crt-cpp.\nBut if your application is also loading the system installation of OpenSSL\n(i.e. your application uses libcurl which uses libssl which uses libcrypto)\nthere may be crashes as the application tries to use two different versions of libcrypto at once.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/README.md"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 24,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nIf your application uses OpenSSL, configure with `-DUSE_OPENSSL=ON`.\n\naws-crt-cpp does not use OpenSSL for TLS.\nOn Apple and Windows devices, the OS's default TLS library is used.\nOn Unix devices, [s2n-tls](https://github.com/aws/s2n-tls) is used.\nBut s2n-tls uses libcrypto, the cryptography math library bundled with OpenSSL.\n",
                    "rendered": {
                      "text": "\nIf your application uses OpenSSL, configure with `-DUSE_OPENSSL=ON`.\n\naws-crt-cpp does not use OpenSSL for TLS.\nOn Apple and Windows devices, the OS's default TLS library is used.\nOn Unix devices, [s2n-tls](https://github.com/aws/s2n-tls) is used.\nBut s2n-tls uses libcrypto, the cryptography math library bundled with OpenSSL.\n",
                      "markdown": "`\nIf your application uses OpenSSL, configure with `-DUSE_OPENSSL=ON`.\n\naws-crt-cpp does not use OpenSSL for TLS.\nOn Apple and Windows devices, the OS's default TLS library is used.\nOn Unix devices, [s2n-tls](https://github.com/aws/s2n-tls) is used.\nBut s2n-tls uses libcrypto, the cryptography math library bundled with OpenSSL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/README.md"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 3,
                  "endLine": 47,
                  "endColumn": 12,
                  "snippet": {
                    "text": "aws-crt-cpp's cmake configuration scripts are known to get confused by this,\nand will not enable optimizations that would benefit an independent `arm64` or `x86_64` build.\n\n### OpenSSL and LibCrypto (Unix only)\n\nIf your application uses OpenSSL, configure with `-DUSE_OPENSSL=ON`.\n\n",
                    "rendered": {
                      "text": "aws-crt-cpp's cmake configuration scripts are known to get confused by this,\nand will not enable optimizations that would benefit an independent `arm64` or `x86_64` build.\n\n### OpenSSL and LibCrypto (Unix only)\n\nIf your application uses OpenSSL, configure with `-DUSE_OPENSSL=ON`.\n\n",
                      "markdown": "`aws-crt-cpp's cmake configuration scripts are known to get confused by this,\nand will not enable optimizations that would benefit an independent `arm64` or `x86_64` build.\n\n### OpenSSL and LibCrypto (Unix only)\n\nIf your application uses OpenSSL, configure with `-DUSE_OPENSSL=ON`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/README.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 6,
                  "endLine": 38,
                  "endColumn": 12,
                  "snippet": {
                    "text": "aws-crt-cpp supports both `arm64` and `x86_64` architectures.\nConfigure cmake with `-DCMAKE_OSX_ARCHITECTURES=arm64` to target Apple silicon,\nor `-DCMAKE_OSX_ARCHITECTURES=x86_64` to target Intel.\nIf you wish to create a [universal binary](https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary),\nyou should use `lipo` to combine the `x86_64` and `arm64` binaries.\nFor example: `lipo -create -output universal_app x86_app arm_app`\n\n",
                    "rendered": {
                      "text": "aws-crt-cpp supports both `arm64` and `x86_64` architectures.\nConfigure cmake with `-DCMAKE_OSX_ARCHITECTURES=arm64` to target Apple silicon,\nor `-DCMAKE_OSX_ARCHITECTURES=x86_64` to target Intel.\nIf you wish to create a [universal binary](https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary),\nyou should use `lipo` to combine the `x86_64` and `arm64` binaries.\nFor example: `lipo -create -output universal_app x86_app arm_app`\n\n",
                      "markdown": "`aws-crt-cpp supports both `arm64` and `x86_64` architectures.\nConfigure cmake with `-DCMAKE_OSX_ARCHITECTURES=arm64` to target Apple silicon,\nor `-DCMAKE_OSX_ARCHITECTURES=x86_64` to target Intel.\nIf you wish to create a [universal binary](https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary),\nyou should use `lipo` to combine the `x86_64` and `arm64` binaries.\nFor example: `lipo -create -output universal_app x86_app arm_app`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Sigv4SigningTest.cpp"
                },
                "region": {
                  "startLine": 447,
                  "startColumn": 20,
                  "endLine": 447,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n        ASSERT_SUCCESS(aws_verify_sigv4a_signing(\n            allocator,\n            signable.get(),\n            (aws_signing_config_base *)awsSigningConfig->GetUnderlyingHandle(),\n            aws_byte_cursor_from_string(s_expected_canonical_request),\n            signatureCursor,\n",
                    "rendered": {
                      "text": "\n        ASSERT_SUCCESS(aws_verify_sigv4a_signing(\n            allocator,\n            signable.get(),\n            (aws_signing_config_base *)awsSigningConfig->GetUnderlyingHandle(),\n            aws_byte_cursor_from_string(s_expected_canonical_request),\n            signatureCursor,\n",
                      "markdown": "`\n        ASSERT_SUCCESS(aws_verify_sigv4a_signing(\n            allocator,\n            signable.get(),\n            (aws_signing_config_base *)awsSigningConfig->GetUnderlyingHandle(),\n            aws_byte_cursor_from_string(s_expected_canonical_request),\n            signatureCursor,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Sigv4SigningTest.cpp"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 49,
                  "endLine": 304,
                  "endColumn": 115,
                  "snippet": {
                    "text": "AWS_STATIC_STRING_FROM_LITERAL(s_access_key_id, \"AKIAIOSFODNN7EXAMPLE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_secret_access_key, \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\");\nAWS_STATIC_STRING_FROM_LITERAL(s_test_ecc_pub_x, \"18b7d04643359f6ec270dcbab8dce6d169d66ddc9778c75cfb08dfdb701637ab\");\nAWS_STATIC_STRING_FROM_LITERAL(s_test_ecc_pub_y, \"fa36b35e4fe67e3112261d2e17a956ef85b06e44712d2850bcd3c2161e9993f2\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_expected_canonical_request,\n    \"PUT\\n\"\n",
                    "rendered": {
                      "text": "AWS_STATIC_STRING_FROM_LITERAL(s_access_key_id, \"AKIAIOSFODNN7EXAMPLE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_secret_access_key, \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\");\nAWS_STATIC_STRING_FROM_LITERAL(s_test_ecc_pub_x, \"18b7d04643359f6ec270dcbab8dce6d169d66ddc9778c75cfb08dfdb701637ab\");\nAWS_STATIC_STRING_FROM_LITERAL(s_test_ecc_pub_y, \"fa36b35e4fe67e3112261d2e17a956ef85b06e44712d2850bcd3c2161e9993f2\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_expected_canonical_request,\n    \"PUT\\n\"\n",
                      "markdown": "`AWS_STATIC_STRING_FROM_LITERAL(s_access_key_id, \"AKIAIOSFODNN7EXAMPLE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_secret_access_key, \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\");\nAWS_STATIC_STRING_FROM_LITERAL(s_test_ecc_pub_x, \"18b7d04643359f6ec270dcbab8dce6d169d66ddc9778c75cfb08dfdb701637ab\");\nAWS_STATIC_STRING_FROM_LITERAL(s_test_ecc_pub_y, \"fa36b35e4fe67e3112261d2e17a956ef85b06e44712d2850bcd3c2161e9993f2\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_expected_canonical_request,\n    \"PUT\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/Sigv4SigningTest.cpp"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 49,
                  "endLine": 303,
                  "endColumn": 115,
                  "snippet": {
                    "text": "/* Sigv4a Test */\nAWS_STATIC_STRING_FROM_LITERAL(s_access_key_id, \"AKIAIOSFODNN7EXAMPLE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_secret_access_key, \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\");\nAWS_STATIC_STRING_FROM_LITERAL(s_test_ecc_pub_x, \"18b7d04643359f6ec270dcbab8dce6d169d66ddc9778c75cfb08dfdb701637ab\");\nAWS_STATIC_STRING_FROM_LITERAL(s_test_ecc_pub_y, \"fa36b35e4fe67e3112261d2e17a956ef85b06e44712d2850bcd3c2161e9993f2\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_expected_canonical_request,\n",
                    "rendered": {
                      "text": "/* Sigv4a Test */\nAWS_STATIC_STRING_FROM_LITERAL(s_access_key_id, \"AKIAIOSFODNN7EXAMPLE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_secret_access_key, \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\");\nAWS_STATIC_STRING_FROM_LITERAL(s_test_ecc_pub_x, \"18b7d04643359f6ec270dcbab8dce6d169d66ddc9778c75cfb08dfdb701637ab\");\nAWS_STATIC_STRING_FROM_LITERAL(s_test_ecc_pub_y, \"fa36b35e4fe67e3112261d2e17a956ef85b06e44712d2850bcd3c2161e9993f2\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_expected_canonical_request,\n",
                      "markdown": "`/* Sigv4a Test */\nAWS_STATIC_STRING_FROM_LITERAL(s_access_key_id, \"AKIAIOSFODNN7EXAMPLE\");\nAWS_STATIC_STRING_FROM_LITERAL(s_secret_access_key, \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\");\nAWS_STATIC_STRING_FROM_LITERAL(s_test_ecc_pub_x, \"18b7d04643359f6ec270dcbab8dce6d169d66ddc9778c75cfb08dfdb701637ab\");\nAWS_STATIC_STRING_FROM_LITERAL(s_test_ecc_pub_y, \"fa36b35e4fe67e3112261d2e17a956ef85b06e44712d2850bcd3c2161e9993f2\");\nAWS_STATIC_STRING_FROM_LITERAL(\n    s_expected_canonical_request,\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/tests/CMakeLists.txt"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 26,
                  "endLine": 122,
                  "endColumn": 40,
                  "snippet": {
                    "text": "add_test_case(TestAnonymousCredentialsConstruction)\nadd_test_case(TestProviderStaticGet)\nadd_test_case(TestProviderAnonymousGet)\nadd_test_case(TestProviderEnvironmentGet)\nadd_test_case(TestProviderProfileGet)\nadd_test_case(TestProviderImdsGet)\n\n",
                    "rendered": {
                      "text": "add_test_case(TestAnonymousCredentialsConstruction)\nadd_test_case(TestProviderStaticGet)\nadd_test_case(TestProviderAnonymousGet)\nadd_test_case(TestProviderEnvironmentGet)\nadd_test_case(TestProviderProfileGet)\nadd_test_case(TestProviderImdsGet)\n\n",
                      "markdown": "`add_test_case(TestAnonymousCredentialsConstruction)\nadd_test_case(TestProviderStaticGet)\nadd_test_case(TestProviderAnonymousGet)\nadd_test_case(TestProviderEnvironmentGet)\nadd_test_case(TestProviderProfileGet)\nadd_test_case(TestProviderImdsGet)\n\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/private/Mqtt5ClientCore.h"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 25,
                  "endLine": 241,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                Mqtt::MqttConnectionOptions m_mqtt3Options;\n\n                /* Reserve to store memory for m_mqtt3options.hostname */\n                String m_hostname;\n\n                /*\n                 * The transform function invoked during websocket handshake.\n",
                    "rendered": {
                      "text": "                Mqtt::MqttConnectionOptions m_mqtt3Options;\n\n                /* Reserve to store memory for m_mqtt3options.hostname */\n                String m_hostname;\n\n                /*\n                 * The transform function invoked during websocket handshake.\n",
                      "markdown": "`                Mqtt::MqttConnectionOptions m_mqtt3Options;\n\n                /* Reserve to store memory for m_mqtt3options.hostname */\n                String m_hostname;\n\n                /*\n                 * The transform function invoked during websocket handshake.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/private/MqttConnectionCore.h"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 64,
                  "endLine": 92,
                  "endColumn": 72,
                  "snippet": {
                    "text": "                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n\n                /**\n                 * @internal\n",
                    "rendered": {
                      "text": "                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n\n                /**\n                 * @internal\n",
                      "markdown": "`                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n\n                /**\n                 * @internal\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/private/MqttConnectionCore.h"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 35,
                  "endLine": 89,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                 * Sets login credentials for the connection. The must get set before the Connect call\n                 * if it is to be used.\n                 * @param username user name to add to the MQTT CONNECT packet\n                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n",
                    "rendered": {
                      "text": "                 * Sets login credentials for the connection. The must get set before the Connect call\n                 * if it is to be used.\n                 * @param username user name to add to the MQTT CONNECT packet\n                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n",
                      "markdown": "`                 * Sets login credentials for the connection. The must get set before the Connect call\n                 * if it is to be used.\n                 * @param username user name to add to the MQTT CONNECT packet\n                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/private/MqttConnectionCore.h"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 26,
                  "endLine": 89,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                 * Sets login credentials for the connection. The must get set before the Connect call\n                 * if it is to be used.\n                 * @param username user name to add to the MQTT CONNECT packet\n                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n",
                    "rendered": {
                      "text": "                 * Sets login credentials for the connection. The must get set before the Connect call\n                 * if it is to be used.\n                 * @param username user name to add to the MQTT CONNECT packet\n                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n",
                      "markdown": "`                 * Sets login credentials for the connection. The must get set before the Connect call\n                 * if it is to be used.\n                 * @param username user name to add to the MQTT CONNECT packet\n                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/Mqtt5Types.h"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 53,
                  "endLine": 46,
                  "endColumn": 61,
                  "snippet": {
                    "text": "             * <TR><TD>AWS_MQTT5_CRC_IMPLEMENTATION_SPECIFIC_ERROR</TD><TD>131</TD>\n             * <TR><TD>AWS_MQTT5_CRC_UNSUPPORTED_PROTOCOL_VERSION</TD><TD>132</TD>\n             * <TR><TD>AWS_MQTT5_CRC_CLIENT_IDENTIFIER_NOT_VALID</TD><TD>133</TD>\n             * <TR><TD>AWS_MQTT5_CRC_BAD_USERNAME_OR_PASSWORD</TD><TD>134</TD>\n             * <TR><TD>AWS_MQTT5_CRC_NOT_AUTHORIZED</TD><TD>135</TD>\n             * <TR><TD>AWS_MQTT5_CRC_SERVER_UNAVAILABLE</TD><TD>136</TD>\n             * <TR><TD>AWS_MQTT5_CRC_SERVER_BUSY</TD><TD>137</TD>\n",
                    "rendered": {
                      "text": "             * <TR><TD>AWS_MQTT5_CRC_IMPLEMENTATION_SPECIFIC_ERROR</TD><TD>131</TD>\n             * <TR><TD>AWS_MQTT5_CRC_UNSUPPORTED_PROTOCOL_VERSION</TD><TD>132</TD>\n             * <TR><TD>AWS_MQTT5_CRC_CLIENT_IDENTIFIER_NOT_VALID</TD><TD>133</TD>\n             * <TR><TD>AWS_MQTT5_CRC_BAD_USERNAME_OR_PASSWORD</TD><TD>134</TD>\n             * <TR><TD>AWS_MQTT5_CRC_NOT_AUTHORIZED</TD><TD>135</TD>\n             * <TR><TD>AWS_MQTT5_CRC_SERVER_UNAVAILABLE</TD><TD>136</TD>\n             * <TR><TD>AWS_MQTT5_CRC_SERVER_BUSY</TD><TD>137</TD>\n",
                      "markdown": "`             * <TR><TD>AWS_MQTT5_CRC_IMPLEMENTATION_SPECIFIC_ERROR</TD><TD>131</TD>\n             * <TR><TD>AWS_MQTT5_CRC_UNSUPPORTED_PROTOCOL_VERSION</TD><TD>132</TD>\n             * <TR><TD>AWS_MQTT5_CRC_CLIENT_IDENTIFIER_NOT_VALID</TD><TD>133</TD>\n             * <TR><TD>AWS_MQTT5_CRC_BAD_USERNAME_OR_PASSWORD</TD><TD>134</TD>\n             * <TR><TD>AWS_MQTT5_CRC_NOT_AUTHORIZED</TD><TD>135</TD>\n             * <TR><TD>AWS_MQTT5_CRC_SERVER_UNAVAILABLE</TD><TD>136</TD>\n             * <TR><TD>AWS_MQTT5_CRC_SERVER_BUSY</TD><TD>137</TD>\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/MqttConnection.h"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 64,
                  "endLine": 205,
                  "endColumn": 72,
                  "snippet": {
                    "text": "                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n\n                /**\n                 * @deprecated Sets websocket proxy options. Replaced by SetHttpProxyOptions.\n",
                    "rendered": {
                      "text": "                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n\n                /**\n                 * @deprecated Sets websocket proxy options. Replaced by SetHttpProxyOptions.\n",
                      "markdown": "`                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n\n                /**\n                 * @deprecated Sets websocket proxy options. Replaced by SetHttpProxyOptions.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/MqttConnection.h"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 35,
                  "endLine": 202,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                 * Sets login credentials for the connection. The must get set before the Connect call\n                 * if it is to be used.\n                 * @param username user name to add to the MQTT CONNECT packet\n                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n",
                    "rendered": {
                      "text": "                 * Sets login credentials for the connection. The must get set before the Connect call\n                 * if it is to be used.\n                 * @param username user name to add to the MQTT CONNECT packet\n                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n",
                      "markdown": "`                 * Sets login credentials for the connection. The must get set before the Connect call\n                 * if it is to be used.\n                 * @param username user name to add to the MQTT CONNECT packet\n                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/MqttConnection.h"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 26,
                  "endLine": 202,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                 * Sets login credentials for the connection. The must get set before the Connect call\n                 * if it is to be used.\n                 * @param username user name to add to the MQTT CONNECT packet\n                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n",
                    "rendered": {
                      "text": "                 * Sets login credentials for the connection. The must get set before the Connect call\n                 * if it is to be used.\n                 * @param username user name to add to the MQTT CONNECT packet\n                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n",
                      "markdown": "`                 * Sets login credentials for the connection. The must get set before the Connect call\n                 * if it is to be used.\n                 * @param username user name to add to the MQTT CONNECT packet\n                 * @param password password to add to the MQTT CONNECT packet\n                 * @return success/failure\n                 */\n                bool SetLogin(const char *username, const char *password) noexcept;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/Mqtt5Client.h"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 61,
                  "endLine": 468,
                  "endColumn": 69,
                  "snippet": {
                    "text": "                 *\n                 * @return this option object\n                 */\n                Mqtt5ClientOptions &WithHostName(Crt::String hostname);\n\n                /**\n                 * Set port to connect to\n",
                    "rendered": {
                      "text": "                 *\n                 * @return this option object\n                 */\n                Mqtt5ClientOptions &WithHostName(Crt::String hostname);\n\n                /**\n                 * Set port to connect to\n",
                      "markdown": "`                 *\n                 * @return this option object\n                 */\n                Mqtt5ClientOptions &WithHostName(Crt::String hostname);\n\n                /**\n                 * Set port to connect to\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/Mqtt5Packets.h"
                },
                "region": {
                  "startLine": 1075,
                  "startColumn": 44,
                  "endLine": 1075,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                 *\n                 * See [MQTT5 Password](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901072)\n                 */\n                Crt::Optional<ByteCursor> m_password;\n\n                /**\n                 * A time interval, in seconds, that the client requests the server to persist this connection's MQTT\n",
                    "rendered": {
                      "text": "                 *\n                 * See [MQTT5 Password](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901072)\n                 */\n                Crt::Optional<ByteCursor> m_password;\n\n                /**\n                 * A time interval, in seconds, that the client requests the server to persist this connection's MQTT\n",
                      "markdown": "`                 *\n                 * See [MQTT5 Password](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901072)\n                 */\n                Crt::Optional<ByteCursor> m_password;\n\n                /**\n                 * A time interval, in seconds, that the client requests the server to persist this connection's MQTT\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/Mqtt5Packets.h"
                },
                "region": {
                  "startLine": 1073,
                  "startColumn": 30,
                  "endLine": 1073,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                /**\n                 * Opaque binary data that the server may use for client authentication and authorization.\n                 *\n                 * See [MQTT5 Password](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901072)\n                 */\n                Crt::Optional<ByteCursor> m_password;\n\n",
                    "rendered": {
                      "text": "                /**\n                 * Opaque binary data that the server may use for client authentication and authorization.\n                 *\n                 * See [MQTT5 Password](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901072)\n                 */\n                Crt::Optional<ByteCursor> m_password;\n\n",
                      "markdown": "`                /**\n                 * Opaque binary data that the server may use for client authentication and authorization.\n                 *\n                 * See [MQTT5 Password](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901072)\n                 */\n                Crt::Optional<ByteCursor> m_password;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/Mqtt5Packets.h"
                },
                "region": {
                  "startLine": 907,
                  "startColumn": 57,
                  "endLine": 907,
                  "endColumn": 65,
                  "snippet": {
                    "text": "                 *\n                 * @return Opaque binary data that the server may use for client authentication and authorization.\n                 */\n                const Crt::Optional<Crt::ByteCursor> &getPassword() const noexcept;\n\n                /**\n                 * A time interval, in seconds, that the client requests the server to persist this connection's MQTT\n",
                    "rendered": {
                      "text": "                 *\n                 * @return Opaque binary data that the server may use for client authentication and authorization.\n                 */\n                const Crt::Optional<Crt::ByteCursor> &getPassword() const noexcept;\n\n                /**\n                 * A time interval, in seconds, that the client requests the server to persist this connection's MQTT\n",
                      "markdown": "`                 *\n                 * @return Opaque binary data that the server may use for client authentication and authorization.\n                 */\n                const Crt::Optional<Crt::ByteCursor> &getPassword() const noexcept;\n\n                /**\n                 * A time interval, in seconds, that the client requests the server to persist this connection's MQTT\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/Mqtt5Packets.h"
                },
                "region": {
                  "startLine": 903,
                  "startColumn": 30,
                  "endLine": 903,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                /**\n                 * Opaque binary data that the server may use for client authentication and authorization.\n                 *\n                 * See [MQTT5 Password](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901072)\n                 *\n                 * @return Opaque binary data that the server may use for client authentication and authorization.\n                 */\n",
                    "rendered": {
                      "text": "                /**\n                 * Opaque binary data that the server may use for client authentication and authorization.\n                 *\n                 * See [MQTT5 Password](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901072)\n                 *\n                 * @return Opaque binary data that the server may use for client authentication and authorization.\n                 */\n",
                      "markdown": "`                /**\n                 * Opaque binary data that the server may use for client authentication and authorization.\n                 *\n                 * See [MQTT5 Password](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901072)\n                 *\n                 * @return Opaque binary data that the server may use for client authentication and authorization.\n                 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/Mqtt5Packets.h"
                },
                "region": {
                  "startLine": 725,
                  "startColumn": 55,
                  "endLine": 725,
                  "endColumn": 63,
                  "snippet": {
                    "text": "                 * authorization.\n                 * @return The ConnectPacket Object after setting the password.\n                 */\n                ConnectPacket &WithPassword(ByteCursor password) noexcept;\n\n                /**\n                 * Sets the time interval, in seconds, that the client requests the server to persist this connection's\n",
                    "rendered": {
                      "text": "                 * authorization.\n                 * @return The ConnectPacket Object after setting the password.\n                 */\n                ConnectPacket &WithPassword(ByteCursor password) noexcept;\n\n                /**\n                 * Sets the time interval, in seconds, that the client requests the server to persist this connection's\n",
                      "markdown": "`                 * authorization.\n                 * @return The ConnectPacket Object after setting the password.\n                 */\n                ConnectPacket &WithPassword(ByteCursor password) noexcept;\n\n                /**\n                 * Sets the time interval, in seconds, that the client requests the server to persist this connection's\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/Mqtt5Packets.h"
                },
                "region": {
                  "startLine": 725,
                  "startColumn": 35,
                  "endLine": 725,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                 * authorization.\n                 * @return The ConnectPacket Object after setting the password.\n                 */\n                ConnectPacket &WithPassword(ByteCursor password) noexcept;\n\n                /**\n                 * Sets the time interval, in seconds, that the client requests the server to persist this connection's\n",
                    "rendered": {
                      "text": "                 * authorization.\n                 * @return The ConnectPacket Object after setting the password.\n                 */\n                ConnectPacket &WithPassword(ByteCursor password) noexcept;\n\n                /**\n                 * Sets the time interval, in seconds, that the client requests the server to persist this connection's\n",
                      "markdown": "`                 * authorization.\n                 * @return The ConnectPacket Object after setting the password.\n                 */\n                ConnectPacket &WithPassword(ByteCursor password) noexcept;\n\n                /**\n                 * Sets the time interval, in seconds, that the client requests the server to persist this connection's\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/Mqtt5Packets.h"
                },
                "region": {
                  "startLine": 723,
                  "startColumn": 70,
                  "endLine": 723,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                 *\n                 * @param password Opaque binary data that the server may use for client authentication and\n                 * authorization.\n                 * @return The ConnectPacket Object after setting the password.\n                 */\n                ConnectPacket &WithPassword(ByteCursor password) noexcept;\n\n",
                    "rendered": {
                      "text": "                 *\n                 * @param password Opaque binary data that the server may use for client authentication and\n                 * authorization.\n                 * @return The ConnectPacket Object after setting the password.\n                 */\n                ConnectPacket &WithPassword(ByteCursor password) noexcept;\n\n",
                      "markdown": "`                 *\n                 * @param password Opaque binary data that the server may use for client authentication and\n                 * authorization.\n                 * @return The ConnectPacket Object after setting the password.\n                 */\n                ConnectPacket &WithPassword(ByteCursor password) noexcept;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/Mqtt5Packets.h"
                },
                "region": {
                  "startLine": 721,
                  "startColumn": 26,
                  "endLine": 721,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                 *\n                 * See [MQTT5 Password](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901072)\n                 *\n                 * @param password Opaque binary data that the server may use for client authentication and\n                 * authorization.\n                 * @return The ConnectPacket Object after setting the password.\n                 */\n",
                    "rendered": {
                      "text": "                 *\n                 * See [MQTT5 Password](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901072)\n                 *\n                 * @param password Opaque binary data that the server may use for client authentication and\n                 * authorization.\n                 * @return The ConnectPacket Object after setting the password.\n                 */\n",
                      "markdown": "`                 *\n                 * See [MQTT5 Password](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901072)\n                 *\n                 * @param password Opaque binary data that the server may use for client authentication and\n                 * authorization.\n                 * @return The ConnectPacket Object after setting the password.\n                 */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/mqtt/Mqtt5Packets.h"
                },
                "region": {
                  "startLine": 719,
                  "startColumn": 30,
                  "endLine": 719,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                /**\n                 * Sets the opaque binary data that the server may use for client authentication and authorization.\n                 *\n                 * See [MQTT5 Password](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901072)\n                 *\n                 * @param password Opaque binary data that the server may use for client authentication and\n                 * authorization.\n",
                    "rendered": {
                      "text": "                /**\n                 * Sets the opaque binary data that the server may use for client authentication and authorization.\n                 *\n                 * See [MQTT5 Password](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901072)\n                 *\n                 * @param password Opaque binary data that the server may use for client authentication and\n                 * authorization.\n",
                      "markdown": "`                /**\n                 * Sets the opaque binary data that the server may use for client authentication and authorization.\n                 *\n                 * See [MQTT5 Password](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901072)\n                 *\n                 * @param password Opaque binary data that the server may use for client authentication and\n                 * authorization.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/include/aws/crt/StringView.h"
                },
                "region": {
                  "startLine": 535,
                  "startColumn": 37,
                  "endLine": 535,
                  "endColumn": 43,
                  "snippet": {
                    "text": "          private:\n            static int _s_compare(size_type n1, size_type n2) noexcept\n            {\n                const difference_type diff = n1 - n2;\n\n                if (diff > (std::numeric_limits<int>::max)())\n                {\n",
                    "rendered": {
                      "text": "          private:\n            static int _s_compare(size_type n1, size_type n2) noexcept\n            {\n                const difference_type diff = n1 - n2;\n\n                if (diff > (std::numeric_limits<int>::max)())\n                {\n",
                      "markdown": "`          private:\n            static int _s_compare(size_type n1, size_type n2) noexcept\n            {\n                const difference_type diff = n1 - n2;\n\n                if (diff > (std::numeric_limits<int>::max)())\n                {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 235,
                  "endLine": 21,
                  "endColumn": 243,
                  "snippet": {
                    "text": "hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-",
                    "rendered": {
                      "text": "hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-",
                      "markdown": "`hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 334,
                  "endLine": 21,
                  "endColumn": 340,
                  "snippet": {
                    "text": "ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment",
                    "rendered": {
                      "text": "ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment",
                      "markdown": "`ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 232,
                  "endLine": 20,
                  "endColumn": 238,
                  "snippet": {
                    "text": "ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las",
                    "rendered": {
                      "text": "ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las",
                      "markdown": "`ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 31,
                  "endLine": 251,
                  "endColumn": 59,
                  "snippet": {
                    "text": "      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --target=ios-arm64 --cmake-extra=-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO\n\n  cross_compile:\n    name: Cross Compile ${{matrix.arch}}\n",
                    "rendered": {
                      "text": "      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --target=ios-arm64 --cmake-extra=-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO\n\n  cross_compile:\n    name: Cross Compile ${{matrix.arch}}\n",
                      "markdown": "`      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --target=ios-arm64 --cmake-extra=-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO\n\n  cross_compile:\n    name: Cross Compile ${{matrix.arch}}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 40,
                  "endLine": 185,
                  "endColumn": 87,
                  "snippet": {
                    "text": "        md D:\\a\\work\n        cd D:\\a\\work\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --compiler msvc-14 --target windows-${{ matrix.arch }}\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n",
                    "rendered": {
                      "text": "        md D:\\a\\work\n        cd D:\\a\\work\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --compiler msvc-14 --target windows-${{ matrix.arch }}\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n",
                      "markdown": "`        md D:\\a\\work\n        cd D:\\a\\work\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --compiler msvc-14 --target windows-${{ matrix.arch }}\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 122,
                  "endLine": 301,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-12 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-12 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-12 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 16,
                  "endLine": 301,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-12 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-12 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-12 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 14,
                  "endLine": 276,
                  "endColumn": 23,
                  "snippet": {
                    "text": "          submodules: true\n      - name: Check docs\n        run: |\n          sudo apt-get install -y doxygen\n          ./make-docs.py\n\n  check-submodules:\n",
                    "rendered": {
                      "text": "          submodules: true\n      - name: Check docs\n        run: |\n          sudo apt-get install -y doxygen\n          ./make-docs.py\n\n  check-submodules:\n",
                      "markdown": "`          submodules: true\n      - name: Check docs\n        run: |\n          sudo apt-get install -y doxygen\n          ./make-docs.py\n\n  check-submodules:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 7,
                  "endLine": 264,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p aws-crt-cpp --spec=downstream --target=${{matrix.arch}} run_tests=false\n\n  # check that docs can still build\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p aws-crt-cpp --spec=downstream --target=${{matrix.arch}} run_tests=false\n\n  # check that docs can still build\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p aws-crt-cpp --spec=downstream --target=${{matrix.arch}} run_tests=false\n\n  # check that docs can still build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 7,
                  "endLine": 250,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --target=ios-arm64 --cmake-extra=-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO\n\n  cross_compile:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --target=ios-arm64 --cmake-extra=-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO\n\n  cross_compile:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --target=ios-arm64 --cmake-extra=-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO\n\n  cross_compile:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 7,
                  "endLine": 238,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --spec=downstream\n\n  # cross-compile for iOS\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --spec=downstream\n\n  # cross-compile for iOS\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --spec=downstream\n\n  # cross-compile for iOS\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 7,
                  "endLine": 229,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --spec=downstream\n\n  macos-x64:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --spec=downstream\n\n  macos-x64:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --spec=downstream\n\n  macos-x64:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 48,
                  "endLine": 175,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        python builder.pyz build -p ${{ env.PACKAGE_NAME }}\n\n  windows-vs14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n",
                    "rendered": {
                      "text": "        python builder.pyz build -p ${{ env.PACKAGE_NAME }}\n\n  windows-vs14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n",
                      "markdown": "`        python builder.pyz build -p ${{ env.PACKAGE_NAME }}\n\n  windows-vs14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 120,
                  "endLine": 161,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF --cmake-extra=-DUSE_OPENSSL=ON\n\n  windows:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF --cmake-extra=-DUSE_OPENSSL=ON\n\n  windows:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF --cmake-extra=-DUSE_OPENSSL=ON\n\n  windows:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 14,
                  "endLine": 161,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF --cmake-extra=-DUSE_OPENSSL=ON\n\n  windows:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF --cmake-extra=-DUSE_OPENSSL=ON\n\n  windows:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_CPU_EXTENSIONS=OFF --cmake-extra=-DUSE_OPENSSL=ON\n\n  windows:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 120,
                  "endLine": 152,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-no-cpu-extensions:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-no-cpu-extensions:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-no-cpu-extensions:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 14,
                  "endLine": 152,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-no-cpu-extensions:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-no-cpu-extensions:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-no-cpu-extensions:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 120,
                  "endLine": 143,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-openssl-shared:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-openssl-shared:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-openssl-shared:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 14,
                  "endLine": 143,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-openssl-shared:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-openssl-shared:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --variant=openssl --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-openssl-shared:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 120,
                  "endLine": 134,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-openssl-static:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-openssl-static:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-openssl-static:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 14,
                  "endLine": 134,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-openssl-static:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-openssl-static:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  linux-openssl-static:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 120,
                  "endLine": 125,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-shared-libs:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-shared-libs:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-shared-libs:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 14,
                  "endLine": 125,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-shared-libs:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-shared-libs:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON --cmake-extra=-DUSE_OPENSSL=ON\n\n  linux-shared-libs:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 120,
                  "endLine": 116,
                  "endColumn": 127,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} with ${{ matrix.std }}\n      run: |\n        export CXXFLAGS=-std=${{ matrix.std }}\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  byo-crypto:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} with ${{ matrix.std }}\n      run: |\n        export CXXFLAGS=-std=${{ matrix.std }}\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  byo-crypto:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} with ${{ matrix.std }}\n      run: |\n        export CXXFLAGS=-std=${{ matrix.std }}\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  byo-crypto:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 14,
                  "endLine": 116,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} with ${{ matrix.std }}\n      run: |\n        export CXXFLAGS=-std=${{ matrix.std }}\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  byo-crypto:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} with ${{ matrix.std }}\n      run: |\n        export CXXFLAGS=-std=${{ matrix.std }}\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  byo-crypto:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} with ${{ matrix.std }}\n      run: |\n        export CXXFLAGS=-std=${{ matrix.std }}\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  byo-crypto:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 120,
                  "endLine": 102,
                  "endColumn": 127,
                  "snippet": {
                    "text": "\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  std-compat:\n",
                    "rendered": {
                      "text": "\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  std-compat:\n",
                      "markdown": "`\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  std-compat:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 14,
                  "endLine": 102,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  std-compat:\n",
                    "rendered": {
                      "text": "\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  std-compat:\n",
                      "markdown": "`\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  std-compat:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 10,
                  "endLine": 98,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    steps:\n    # set arm arch\n    - name: Install qemu/docker\n      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n",
                    "rendered": {
                      "text": "    steps:\n    # set arm arch\n    - name: Install qemu/docker\n      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n",
                      "markdown": "`    steps:\n    # set arm arch\n    - name: Install qemu/docker\n      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 122,
                  "endLine": 85,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  raspberry:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  raspberry:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  raspberry:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 16,
                  "endLine": 85,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  raspberry:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  raspberry:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  raspberry:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 120,
                  "endLine": 58,
                  "endColumn": 127,
                  "snippet": {
                    "text": "      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                    "rendered": {
                      "text": "      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                      "markdown": "`      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 14,
                  "endLine": 58,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                    "rendered": {
                      "text": "      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n",
                      "markdown": "`      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-compiler-compat:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 10,
                  "endLine": 55,
                  "endColumn": 18,
                  "snippet": {
                    "text": "          - alpine-3.16-arm64\n    steps:\n    - name: Install qemu/docker\n      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n",
                    "rendered": {
                      "text": "          - alpine-3.16-arm64\n    steps:\n    - name: Install qemu/docker\n      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n",
                      "markdown": "`          - alpine-3.16-arm64\n    steps:\n    - name: Install qemu/docker\n      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 46,
                  "endLine": 38,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  # These linux-compat images need to run without -DUSE_OPENSSL because they do not have OpenSSL packages\n  # that are up-to-date (AL2) or don't provide OpenSSL development packages that is found in CMake (alpine)\n  # or are not able to connect on the socket even with the correct setup (manylinux2014)\n  linux-compat:\n    runs-on: ubuntu-22.04 # latest\n",
                    "rendered": {
                      "text": "        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  # These linux-compat images need to run without -DUSE_OPENSSL because they do not have OpenSSL packages\n  # that are up-to-date (AL2) or don't provide OpenSSL development packages that is found in CMake (alpine)\n  # or are not able to connect on the socket even with the correct setup (manylinux2014)\n  linux-compat:\n    runs-on: ubuntu-22.04 # latest\n",
                      "markdown": "`        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  # These linux-compat images need to run without -DUSE_OPENSSL because they do not have OpenSSL packages\n  # that are up-to-date (AL2) or don't provide OpenSSL development packages that is found in CMake (alpine)\n  # or are not able to connect on the socket even with the correct setup (manylinux2014)\n  linux-compat:\n    runs-on: ubuntu-22.04 # latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 88,
                  "endLine": 37,
                  "endColumn": 97,
                  "snippet": {
                    "text": "/linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  # These linux-compat images need to run without -DUSE_OPENSSL because they do not have OpenSSL packages\n  # that are up-to-date (AL2) or don't provide OpenSSL development packages that is found in CMake (alpine)\n  # or are not able to connect on the socket even with the correct setup (manylinux2014)\n  linux-compat:\n    runs-on: ubuntu-22.04 # latest\n    strategy:\n      matrix:\n        image:\n",
                    "rendered": {
                      "text": "/linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  # These linux-compat images need to run without -DUSE_OPENSSL because they do not have OpenSSL packages\n  # that are up-to-date (AL2) or don't provide OpenSSL development packages that is found in CMake (alpine)\n  # or are not able to connect on the socket even with the correct setup (manylinux2014)\n  linux-compat:\n    runs-on: ubuntu-22.04 # latest\n    strategy:\n      matrix:\n        image:\n",
                      "markdown": "`/linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  # These linux-compat images need to run without -DUSE_OPENSSL because they do not have OpenSSL packages\n  # that are up-to-date (AL2) or don't provide OpenSSL development packages that is found in CMake (alpine)\n  # or are not able to connect on the socket even with the correct setup (manylinux2014)\n  linux-compat:\n    runs-on: ubuntu-22.04 # latest\n    strategy:\n      matrix:\n        image:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 120,
                  "endLine": 34,
                  "endColumn": 127,
                  "snippet": {
                    "text": "      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  # These linux-compat images need to run without -DUSE_OPENSSL because they do not have OpenSSL packages\n",
                    "rendered": {
                      "text": "      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  # These linux-compat images need to run without -DUSE_OPENSSL because they do not have OpenSSL packages\n",
                      "markdown": "`      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  # These linux-compat images need to run without -DUSE_OPENSSL because they do not have OpenSSL packages\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 14,
                  "endLine": 34,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  # These linux-compat images need to run without -DUSE_OPENSSL because they do not have OpenSSL packages\n",
                    "rendered": {
                      "text": "      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  # These linux-compat images need to run without -DUSE_OPENSSL because they do not have OpenSSL packages\n",
                      "markdown": "`      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DUSE_OPENSSL=ON\n\n  # These linux-compat images need to run without -DUSE_OPENSSL because they do not have OpenSSL packages\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 10,
                  "endLine": 31,
                  "endColumn": 18,
                  "snippet": {
                    "text": "          - rhel8-x64\n    steps:\n    - name: Install qemu/docker\n      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n",
                    "rendered": {
                      "text": "          - rhel8-x64\n    steps:\n    - name: Install qemu/docker\n      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n",
                      "markdown": "`          - rhel8-x64\n    steps:\n    - name: Install qemu/docker\n      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/bin/elasticurl_cpp/main.cpp"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 91,
                  "endLine": 424,
                  "endColumn": 96,
                  "snippet": {
                    "text": "\n    Http::HttpClientConnection::CreateConnection(httpClientConnectionOptions, allocator);\n\n    std::shared_ptr<Http::HttpClientConnection> connection = connectionPromise.get_future().get();\n    /* Send request */\n    int responseCode = 0;\n\n",
                    "rendered": {
                      "text": "\n    Http::HttpClientConnection::CreateConnection(httpClientConnectionOptions, allocator);\n\n    std::shared_ptr<Http::HttpClientConnection> connection = connectionPromise.get_future().get();\n    /* Send request */\n    int responseCode = 0;\n\n",
                      "markdown": "`\n    Http::HttpClientConnection::CreateConnection(httpClientConnectionOptions, allocator);\n\n    std::shared_ptr<Http::HttpClientConnection> connection = connectionPromise.get_future().get();\n    /* Send request */\n    int responseCode = 0;\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/bin/elasticurl_cpp/main.cpp"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 36,
                  "endLine": 62,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    std::cerr << \"  -M, --method STRING: Http Method verb to use for the request\\n\";\n    std::cerr << \"  -G, --get: uses GET for the verb.\\n\";\n    std::cerr << \"  -P, --post: uses POST for the verb.\\n\";\n    std::cerr << \"  -I, --head: uses HEAD for the verb.\\n\";\n    std::cerr << \"  -i, --include: includes headers in output.\\n\";\n    std::cerr << \"  -k, --insecure: turns off SSL/TLS validation.\\n\";\n    std::cerr << \"  -o, --output FILE: dumps content-body to FILE instead of stdout.\\n\";\n",
                    "rendered": {
                      "text": "    std::cerr << \"  -M, --method STRING: Http Method verb to use for the request\\n\";\n    std::cerr << \"  -G, --get: uses GET for the verb.\\n\";\n    std::cerr << \"  -P, --post: uses POST for the verb.\\n\";\n    std::cerr << \"  -I, --head: uses HEAD for the verb.\\n\";\n    std::cerr << \"  -i, --include: includes headers in output.\\n\";\n    std::cerr << \"  -k, --insecure: turns off SSL/TLS validation.\\n\";\n    std::cerr << \"  -o, --output FILE: dumps content-body to FILE instead of stdout.\\n\";\n",
                      "markdown": "`    std::cerr << \"  -M, --method STRING: Http Method verb to use for the request\\n\";\n    std::cerr << \"  -G, --get: uses GET for the verb.\\n\";\n    std::cerr << \"  -P, --post: uses POST for the verb.\\n\";\n    std::cerr << \"  -I, --head: uses HEAD for the verb.\\n\";\n    std::cerr << \"  -i, --include: includes headers in output.\\n\";\n    std::cerr << \"  -k, --insecure: turns off SSL/TLS validation.\\n\";\n    std::cerr << \"  -o, --output FILE: dumps content-body to FILE instead of stdout.\\n\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/bin/elasticurl_cpp/main.cpp"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 46,
                  "endLine": 55,
                  "endColumn": 52,
                  "snippet": {
                    "text": "< \"      --capath PATH: path to a directory containing CA files.\\n\";\n    std::cerr << \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\";\n    std::cerr << \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\";\n    std::cerr << \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\";\n    std::cerr << \"  -H, --header LINE: line to send as a header in format [header-key]: [header-value]\\n\";\n    std::cerr << \"  -d, --data STRING: Data to POST or PUT\\n\";\n    std::cerr << \"      --data-file FILE: File to read from file and POST or PUT\\n\";",
                    "rendered": {
                      "text": "< \"      --capath PATH: path to a directory containing CA files.\\n\";\n    std::cerr << \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\";\n    std::cerr << \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\";\n    std::cerr << \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\";\n    std::cerr << \"  -H, --header LINE: line to send as a header in format [header-key]: [header-value]\\n\";\n    std::cerr << \"  -d, --data STRING: Data to POST or PUT\\n\";\n    std::cerr << \"      --data-file FILE: File to read from file and POST or PUT\\n\";",
                      "markdown": "`< \"      --capath PATH: path to a directory containing CA files.\\n\";\n    std::cerr << \"      --cert FILE: path to a PEM encoded certificate to use with mTLS\\n\";\n    std::cerr << \"      --key FILE: Path to a PEM encoded private key that matches cert.\\n\";\n    std::cerr << \"      --connect-timeout INT: time in milliseconds to wait for a connection.\\n\";\n    std::cerr << \"  -H, --header LINE: line to send as a header in format [header-key]: [header-value]\\n\";\n    std::cerr << \"  -d, --data STRING: Data to POST or PUT\\n\";\n    std::cerr << \"      --data-file FILE: File to read from file and POST or PUT\\n\";`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/format-check.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 3,
                  "endLine": 42,
                  "endColumn": 8,
                  "snippet": {
                    "text": "if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n",
                    "rendered": {
                      "text": "if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n",
                      "markdown": "`if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/format-check.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3,
                  "endLine": 40,
                  "endColumn": 8,
                  "snippet": {
                    "text": "cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n",
                    "rendered": {
                      "text": "cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n",
                      "markdown": "`cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/format-check.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 76,
                  "endLine": 37,
                  "endColumn": 4,
                  "snippet": {
                    "text": "filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n",
                    "rendered": {
                      "text": "filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n",
                      "markdown": "`filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/format-check.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 21,
                  "endLine": 25,
                  "endColumn": 29,
                  "snippet": {
                    "text": "filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n",
                    "rendered": {
                      "text": "filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n",
                      "markdown": "`filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 220,
                  "endLine": 45,
                  "endColumn": 224,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-crt-cpp/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-crt-cpp/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-crt-cpp/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 7,
                  "endLine": 45,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-crt-cpp/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-crt-cpp/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-crt-cpp/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 45,
                  "endLine": 37,
                  "endColumn": 49,
                  "snippet": {
                    "text": ". If you also reformat all the code, it will be hard for us to focus on your change.\n3. Ensure local tests pass.\n4. Commit to your fork using clear commit messages.\n5. Send us a pull request, answering any default questions in the pull request interface.\n6. Wait for a repository collaborator to look at your pull request, run the automated tests, and review. If additional changes or discussion is needed, a collaborator will get back to you, so please stay involved in the conversation.\n    * Note: pull requests from forks will not run the automated tests without collaborator involvement for security",
                    "rendered": {
                      "text": ". If you also reformat all the code, it will be hard for us to focus on your change.\n3. Ensure local tests pass.\n4. Commit to your fork using clear commit messages.\n5. Send us a pull request, answering any default questions in the pull request interface.\n6. Wait for a repository collaborator to look at your pull request, run the automated tests, and review. If additional changes or discussion is needed, a collaborator will get back to you, so please stay involved in the conversation.\n    * Note: pull requests from forks will not run the automated tests without collaborator involvement for security",
                      "markdown": "`. If you also reformat all the code, it will be hard for us to focus on your change.\n3. Ensure local tests pass.\n4. Commit to your fork using clear commit messages.\n5. Send us a pull request, answering any default questions in the pull request interface.\n6. Wait for a repository collaborator to look at your pull request, run the automated tests, and review. If additional changes or discussion is needed, a collaborator will get back to you, so please stay involved in the conversation.\n    * Note: pull requests from forks will not run the automated tests without collaborator involvement for security`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 38,
                  "endLine": 12,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-crt-cpp/issues), or [recently closed](https://github.com/awslabs/aws-crt-cpp/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                    "rendered": {
                      "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-crt-cpp/issues), or [recently closed](https://github.com/awslabs/aws-crt-cpp/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                      "markdown": "`\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-crt-cpp/issues), or [recently closed](https://github.com/awslabs/aws-crt-cpp/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 48,
                  "endLine": 45,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-crt-cpp/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-crt-cpp/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-crt-cpp/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-crt-cpp.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 77,
                  "endLine": 28,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                    "rendered": {
                      "text": "\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                      "markdown": "`\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}